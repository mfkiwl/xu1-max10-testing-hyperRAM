/**************************************************************
 *  Project          : Enclustra Vivado reference design
 *  File description : Hello World
 *  File name        : main.c
 *  Author           : Christoph Glattfelder
 **************************************************************
 *  Copyright (c) 2015 by Enclustra GmbH, Switzerland
 *  All rights reserved.
 **************************************************************
 *  Notes:
 *
 **************************************************************
 *  File history:
 *
 *  Version | Date     | Author             | Remarks
 *  -----------------------------------------------------------
 *  1.0	    | 29.06.15 | Ch. Glattfelder    | Created
 *  1.1     | 16.07.15 | D. Ungureanu       | Cleaned-up code
 *          |          |                    |
 *  ------------------------------------------------------------
 *
 **************************************************************/


#include <stdio.h>
#include "StandardIncludes.h"
#include "UtilityFunctions.h"

#include "xparameters.h"
#include "xgpio.h"
#include "xgpiops.h"
#include "xuartps.h"
#include <stdlib.h>
#include <string.h>

#if SYSTEM == XILINX_MICROBLAZE
	#define SLEEP_VALUE 100000
	#define SYSTEM_INIT
#elif SYSTEM == XILINX_ARM_SOC
	#define SLEEP_VALUE 100000000
	#define SYSTEM_INIT
#elif SYSTEM == ALTERA_NIOS
	#define SLEEP_VALUE 10000000
	#define SYSTEM_INIT
#elif SYSTEM == ALTERA_ARM_SOC
	#include "AlteraInitSystem.h"
	#define SLEEP_VALUE 100000000
	#define SYSTEM_INIT AlteraInitSystem()
#elif SYSTEM == UBOOT
	#define SLEEP_VALUE 10000000
	#define SYSTEM_INIT
#endif

#define USER_UART_BAUD 9600
#define USER_UART_RX_TIMEOUT 20000

static XGpio uart_sel_gpio;
static XUartPs_Config * uart_0_cfg;
static XUartPs uart_0;

u8 execute_command(char * command);
u8 select_base(char * command);
u8 send_pmt_uart_command(char* command);
u32 uart_rx_packet(char * packet, char end_char);

int main()
{
	SYSTEM_INIT;
	
	/*INIT UART TO USER_BAUD*/
	uart_0_cfg = XUartPs_LookupConfig(XPAR_PSU_UART_0_DEVICE_ID);
	XUartPs_CfgInitialize(&uart_0, uart_0_cfg, XPAR_PSU_UART_0_BASEADDR);
	XUartPs_SetBaudRate(&uart_0, USER_UART_BAUD);
	XUartPs_SetRecvTimeout(&uart_0, USER_UART_RX_TIMEOUT);

	/*INIT UART SELECT GPIO*/
	XGpio_Initialize(&uart_sel_gpio, XPAR_AXI_GPIO_1_DEVICE_ID);

	/*INIT MAIN*/
	u32 i = 0;
	char buf[256];
	
	/*FREEZE*/
	gets(buf);

	while(1){ //packet
		xil_printf("Enter command: ");
		gets(buf);
		execute_command(buf);
//		for(i = 0; i < 20; i++){
//			XGpio_DiscreteWrite(&uart_sel_gpio, 1, i);
//			sprintf(buf,"atty%d\r",i);
//			xil_printf("atty%d\r", i);
//			XUartPs_Send(&uart_0,buf,strlen(buf));
//			Sleep(SLEEP_VALUE);
//		}
	}

    return 0;
}


//basic command server code
u8 execute_command(char * command){
	if(strstr(command,"selbase") != NULL){
		return select_base(command);
	}
	else if(strstr(command,"$") != NULL){
		return send_pmt_uart_command(command);
	}
	else if(strstr(command,"help") != NULL){
			return send_pmt_uart_command(command);
		}
	else {
		xil_printf("command not recognized, try entering 'help' \n");
		return 0;
	}
}

u8 select_pmt_connector(u8 sel, XGpio gpio_base){
	if (sel >= 1 && sel <= 20) {
		XGpio_DiscreteWrite(&gpio_base, 1, sel-1);
		return sel;
	} else {
		xil_printf("pmt selection out of bounds, defaulting to 1");
		XGpio_DiscreteWrite(&gpio_base, 1, 0);
		return 0;
	}
}

u8 select_base(char * command){
	char* str = strstr(command,"selbase ");
	u8 basenum = atoi((str + strlen("selbase"))+1);
	select_pmt_connector(basenum, uart_sel_gpio);
	xil_printf("base set to J%d\n", basenum);
	return 1;
}

u8 send_pmt_uart_command(char* command){
	char * cmd;
	char * ret;
	cmd = (char *) malloc(256);
	ret = (char *) malloc(256);
	u32 check = 0;


	strcpy(cmd,(command + strlen("$")));
	xil_printf("executing: %s\r\n",cmd);
//	strcat(cmd,"\r");

	XUartPs_Send(&uart_0,cmd,strlen(cmd));

	//add rx functionality

	check = uart_rx_packet(ret, '\r');

	if(check != 0){
		xil_printf("%s\n",ret);
	}
	else{
		xil_printf("timeout\r\n");
	}

	free(cmd);
	free(ret);
	return 1;
}

u32 uart_rx_packet(char * packet, char end_char){

	u32 num_rec = 0;
	u32 packet_index = 0;
	for(u32 i = 0; i < USER_UART_RX_TIMEOUT; i++){
		num_rec = XUartPs_Recv(&uart_0, &packet[packet_index], 1);
		if(num_rec != 0){
			i = 0;
			if(packet[packet_index] == '\r'){
				packet[packet_index + 1] = '\0';
				return 1;
			}
			packet_index++;
		}
	}
	return 0;
}

u32 display_commands(void){
	xil_printf("\n");
	xil_printf("command list:\n");
	xil_printf("	$<pmt command>\n");
	xil_printf("	selbase <base number>\n");
	xil_printf("\n");
	return 1;
}
