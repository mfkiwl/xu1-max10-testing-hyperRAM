// megafunction wizard: %Custom PHY v13.1%
// GENERATION: XML
// arriav_custom_seriallite_ii_phy_for_quartus_13_1.v

// Generated using ACDS version 13.1 182 at 2014.12.22.14:56:15

`timescale 1 ps / 1 ps
module arriav_custom_seriallite_ii_phy_for_quartus_13_1 #(
		parameter device_family                         = "Arria V",
		parameter protocol_hint                         = "basic",
		parameter operation_mode                        = "Duplex",
		parameter lanes                                 = 1,
		parameter bonded_group_size                     = 1,
		parameter bonded_mode                           = "xN",
		parameter pma_bonding_mode                      = "xN",
		parameter pcs_pma_width                         = 20,
		parameter ser_base_factor                       = 8,
		parameter ser_words                             = 4,
		parameter data_rate                             = "5000 Mbps",
		parameter base_data_rate                        = "5000 Mbps",
		parameter en_synce_support                      = 0,
		parameter tx_bitslip_enable                     = "false",
		parameter rx_use_coreclk                        = "true",
		parameter tx_use_coreclk                        = "true",
		parameter use_8b10b                             = "true",
		parameter use_8b10b_manual_control              = "false",
		parameter std_tx_pcfifo_mode                    = "low_latency",
		parameter std_rx_pcfifo_mode                    = "low_latency",
		parameter word_aligner_mode                     = "manual",
		parameter word_aligner_state_machine_datacnt    = 1,
		parameter word_aligner_state_machine_errcnt     = 1,
		parameter word_aligner_state_machine_patterncnt = 10,
		parameter word_aligner_pattern_length           = 10,
		parameter word_align_pattern                    = "0101111100",
		parameter run_length_violation_checking         = 10,
		parameter use_rate_match_fifo                   = 0,
		parameter rate_match_pattern1                   = "11010000111010000011",
		parameter rate_match_pattern2                   = "00101111000101111100",
		parameter byte_order_mode                       = "none",
		parameter byte_order_pattern                    = "111111011",
		parameter byte_order_pad_pattern                = "000000000",
		parameter coreclk_0ppm_enable                   = "false",
		parameter pll_refclk_cnt                        = 1,
		parameter pll_refclk_freq                       = "125.0 MHz",
		parameter pll_refclk_select                     = "0",
		parameter cdr_refclk_select                     = 0,
		parameter plls                                  = 1,
		parameter pll_type                              = "CMU",
		parameter pll_select                            = 0,
		parameter pll_reconfig                          = 1,
		parameter pll_external_enable                   = 0,
		parameter gxb_analog_power                      = "AUTO",
		parameter pll_lock_speed                        = "AUTO",
		parameter tx_analog_power                       = "AUTO",
		parameter tx_slew_rate                          = "OFF",
		parameter tx_termination                        = "OCT_100_OHMS",
		parameter tx_use_external_termination           = "false",
		parameter tx_preemp_pretap                      = 0,
		parameter tx_preemp_pretap_inv                  = "false",
		parameter tx_preemp_tap_1                       = 0,
		parameter tx_preemp_tap_2                       = 0,
		parameter tx_preemp_tap_2_inv                   = "false",
		parameter tx_vod_selection                      = 2,
		parameter tx_common_mode                        = "0.65V",
		parameter rx_pll_lock_speed                     = "AUTO",
		parameter rx_common_mode                        = "0.82V",
		parameter rx_termination                        = "OCT_100_OHMS",
		parameter rx_use_external_termination           = "false",
		parameter rx_eq_dc_gain                         = 1,
		parameter rx_eq_ctrl                            = 16,
		parameter mgmt_clk_in_mhz                       = 250,
		parameter embedded_reset                        = 1,
		parameter channel_interface                     = 0
	) (
		input  wire         phy_mgmt_clk,                //                phy_mgmt_clk.clk
		input  wire         phy_mgmt_clk_reset,          //          phy_mgmt_clk_reset.reset
		input  wire [8:0]   phy_mgmt_address,            //                    phy_mgmt.address
		input  wire         phy_mgmt_read,               //                            .read
		output wire [31:0]  phy_mgmt_readdata,           //                            .readdata
		output wire         phy_mgmt_waitrequest,        //                            .waitrequest
		input  wire         phy_mgmt_write,              //                            .write
		input  wire [31:0]  phy_mgmt_writedata,          //                            .writedata
		output wire         tx_ready,                    //                    tx_ready.export
		output wire         rx_ready,                    //                    rx_ready.export
		input  wire [0:0]   pll_ref_clk,                 //                 pll_ref_clk.clk
		output wire [0:0]   tx_serial_data,              //              tx_serial_data.export
		input  wire [0:0]   tx_forceelecidle,            //            tx_forceelecidle.export
		output wire [0:0]   pll_locked,                  //                  pll_locked.export
		input  wire [0:0]   rx_serial_data,              //              rx_serial_data.export
		output wire [3:0]   rx_runningdisp,              //              rx_runningdisp.export
		output wire [3:0]   rx_disperr,                  //                  rx_disperr.export
		output wire [3:0]   rx_errdetect,                //                rx_errdetect.export
		output wire [0:0]   rx_is_lockedtoref,           //           rx_is_lockedtoref.export
		output wire [0:0]   rx_is_lockedtodata,          //          rx_is_lockedtodata.export
		output wire [0:0]   rx_signaldetect,             //             rx_signaldetect.export
		output wire [3:0]   rx_patterndetect,            //            rx_patterndetect.export
		output wire [3:0]   rx_syncstatus,               //               rx_syncstatus.export
		output wire [4:0]   rx_bitslipboundaryselectout, // rx_bitslipboundaryselectout.export
		output wire [0:0]   rx_rlv,                      //                      rx_rlv.export
		input  wire [0:0]   tx_coreclkin,                //                tx_coreclkin.export
		input  wire [0:0]   rx_coreclkin,                //                rx_coreclkin.export
		output wire [0:0]   tx_clkout,                   //                   tx_clkout.export
		output wire [0:0]   rx_clkout,                   //                   rx_clkout.export
		input  wire [31:0]  tx_parallel_data,            //            tx_parallel_data.export
		input  wire [3:0]   tx_datak,                    //                    tx_datak.export
		output wire [31:0]  rx_parallel_data,            //            rx_parallel_data.export
		output wire [3:0]   rx_datak,                    //                    rx_datak.export
		output wire [91:0]  reconfig_from_xcvr,          //          reconfig_from_xcvr.reconfig_from_xcvr
		input  wire [139:0] reconfig_to_xcvr             //            reconfig_to_xcvr.reconfig_to_xcvr
	);

	altera_xcvr_custom #(
		.device_family                         (device_family),
		.protocol_hint                         (protocol_hint),
		.operation_mode                        (operation_mode),
		.lanes                                 (lanes),
		.bonded_group_size                     (bonded_group_size),
		.bonded_mode                           (bonded_mode),
		.pma_bonding_mode                      (pma_bonding_mode),
		.pcs_pma_width                         (pcs_pma_width),
		.ser_base_factor                       (ser_base_factor),
		.ser_words                             (ser_words),
		.data_rate                             (data_rate),
		.base_data_rate                        (base_data_rate),
		.en_synce_support                      (en_synce_support),
		.tx_bitslip_enable                     (tx_bitslip_enable),
		.rx_use_coreclk                        (rx_use_coreclk),
		.tx_use_coreclk                        (tx_use_coreclk),
		.use_8b10b                             (use_8b10b),
		.use_8b10b_manual_control              (use_8b10b_manual_control),
		.std_tx_pcfifo_mode                    (std_tx_pcfifo_mode),
		.std_rx_pcfifo_mode                    (std_rx_pcfifo_mode),
		.word_aligner_mode                     (word_aligner_mode),
		.word_aligner_state_machine_datacnt    (word_aligner_state_machine_datacnt),
		.word_aligner_state_machine_errcnt     (word_aligner_state_machine_errcnt),
		.word_aligner_state_machine_patterncnt (word_aligner_state_machine_patterncnt),
		.word_aligner_pattern_length           (word_aligner_pattern_length),
		.word_align_pattern                    (word_align_pattern),
		.run_length_violation_checking         (run_length_violation_checking),
		.use_rate_match_fifo                   (use_rate_match_fifo),
		.rate_match_pattern1                   (rate_match_pattern1),
		.rate_match_pattern2                   (rate_match_pattern2),
		.byte_order_mode                       (byte_order_mode),
		.byte_order_pattern                    (byte_order_pattern),
		.byte_order_pad_pattern                (byte_order_pad_pattern),
		.coreclk_0ppm_enable                   (coreclk_0ppm_enable),
		.pll_refclk_cnt                        (pll_refclk_cnt),
		.pll_refclk_freq                       (pll_refclk_freq),
		.pll_refclk_select                     (pll_refclk_select),
		.cdr_refclk_select                     (cdr_refclk_select),
		.plls                                  (plls),
		.pll_type                              (pll_type),
		.pll_select                            (pll_select),
		.pll_reconfig                          (pll_reconfig),
		.pll_external_enable                   (pll_external_enable),
		.gxb_analog_power                      (gxb_analog_power),
		.pll_lock_speed                        (pll_lock_speed),
		.tx_analog_power                       (tx_analog_power),
		.tx_slew_rate                          (tx_slew_rate),
		.tx_termination                        (tx_termination),
		.tx_use_external_termination           (tx_use_external_termination),
		.tx_preemp_pretap                      (tx_preemp_pretap),
		.tx_preemp_pretap_inv                  (tx_preemp_pretap_inv),
		.tx_preemp_tap_1                       (tx_preemp_tap_1),
		.tx_preemp_tap_2                       (tx_preemp_tap_2),
		.tx_preemp_tap_2_inv                   (tx_preemp_tap_2_inv),
		.tx_vod_selection                      (tx_vod_selection),
		.tx_common_mode                        (tx_common_mode),
		.rx_pll_lock_speed                     (rx_pll_lock_speed),
		.rx_common_mode                        (rx_common_mode),
		.rx_termination                        (rx_termination),
		.rx_use_external_termination           (rx_use_external_termination),
		.rx_eq_dc_gain                         (rx_eq_dc_gain),
		.rx_eq_ctrl                            (rx_eq_ctrl),
		.mgmt_clk_in_mhz                       (mgmt_clk_in_mhz),
		.embedded_reset                        (embedded_reset),
		.channel_interface                     (channel_interface)
	) arriav_custom_seriallite_ii_phy_for_quartus_13_1_inst (
		.phy_mgmt_clk                (phy_mgmt_clk),                //                phy_mgmt_clk.clk
		.phy_mgmt_clk_reset          (phy_mgmt_clk_reset),          //          phy_mgmt_clk_reset.reset
		.phy_mgmt_address            (phy_mgmt_address),            //                    phy_mgmt.address
		.phy_mgmt_read               (phy_mgmt_read),               //                            .read
		.phy_mgmt_readdata           (phy_mgmt_readdata),           //                            .readdata
		.phy_mgmt_waitrequest        (phy_mgmt_waitrequest),        //                            .waitrequest
		.phy_mgmt_write              (phy_mgmt_write),              //                            .write
		.phy_mgmt_writedata          (phy_mgmt_writedata),          //                            .writedata
		.tx_ready                    (tx_ready),                    //                    tx_ready.export
		.rx_ready                    (rx_ready),                    //                    rx_ready.export
		.pll_ref_clk                 (pll_ref_clk),                 //                 pll_ref_clk.clk
		.tx_serial_data              (tx_serial_data),              //              tx_serial_data.export
		.tx_forceelecidle            (tx_forceelecidle),            //            tx_forceelecidle.export
		.pll_locked                  (pll_locked),                  //                  pll_locked.export
		.rx_serial_data              (rx_serial_data),              //              rx_serial_data.export
		.rx_runningdisp              (rx_runningdisp),              //              rx_runningdisp.export
		.rx_disperr                  (rx_disperr),                  //                  rx_disperr.export
		.rx_errdetect                (rx_errdetect),                //                rx_errdetect.export
		.rx_is_lockedtoref           (rx_is_lockedtoref),           //           rx_is_lockedtoref.export
		.rx_is_lockedtodata          (rx_is_lockedtodata),          //          rx_is_lockedtodata.export
		.rx_signaldetect             (rx_signaldetect),             //             rx_signaldetect.export
		.rx_patterndetect            (rx_patterndetect),            //            rx_patterndetect.export
		.rx_syncstatus               (rx_syncstatus),               //               rx_syncstatus.export
		.rx_bitslipboundaryselectout (rx_bitslipboundaryselectout), // rx_bitslipboundaryselectout.export
		.rx_rlv                      (rx_rlv),                      //                      rx_rlv.export
		.tx_coreclkin                (tx_coreclkin),                //                tx_coreclkin.export
		.rx_coreclkin                (rx_coreclkin),                //                rx_coreclkin.export
		.tx_clkout                   (tx_clkout),                   //                   tx_clkout.export
		.rx_clkout                   (rx_clkout),                   //                   rx_clkout.export
		.tx_parallel_data            (tx_parallel_data),            //            tx_parallel_data.export
		.tx_datak                    (tx_datak),                    //                    tx_datak.export
		.rx_parallel_data            (rx_parallel_data),            //            rx_parallel_data.export
		.rx_datak                    (rx_datak),                    //                    rx_datak.export
		.reconfig_from_xcvr          (reconfig_from_xcvr),          //          reconfig_from_xcvr.reconfig_from_xcvr
		.reconfig_to_xcvr            (reconfig_to_xcvr),            //            reconfig_to_xcvr.reconfig_to_xcvr
		.tx_bitslipboundaryselect    (5'b00000),                    //                 (terminated)
		.rx_enabyteord               (1'b0),                        //                 (terminated)
		.rx_bitslip                  (1'b0),                        //                 (terminated)
		.rx_rmfifodatainserted       (),                            //                 (terminated)
		.rx_rmfifodatadeleted        (),                            //                 (terminated)
		.rx_byteordflag              (),                            //                 (terminated)
		.rx_recovered_clk            (),                            //                 (terminated)
		.cdr_ref_clk                 (1'b0),                        //                 (terminated)
		.tx_dispval                  (4'b0000),                     //                 (terminated)
		.tx_forcedisp                (4'b0000),                     //                 (terminated)
		.pll_powerdown               (1'b0),                        //                 (terminated)
		.tx_digitalreset             (1'b0),                        //                 (terminated)
		.tx_analogreset              (1'b0),                        //                 (terminated)
		.tx_cal_busy                 (),                            //                 (terminated)
		.rx_digitalreset             (1'b0),                        //                 (terminated)
		.rx_analogreset              (1'b0),                        //                 (terminated)
		.rx_cal_busy                 (),                            //                 (terminated)
		.ext_pll_clk                 (1'b0)                         //                 (terminated)
	);

endmodule
// Retrieval info: <?xml version="1.0"?>
//<!--
//	Generated by Altera MegaWizard Launcher Utility version 1.0
//	************************************************************
//	THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//	************************************************************
//	Copyright (C) 1991-2014 Altera Corporation
//	Any megafunction design, and related net list (encrypted or decrypted),
//	support information, device programming or simulation file, and any other
//	associated documentation or information provided by Altera or a partner
//	under Altera's Megafunction Partnership Program may be used only to
//	program PLD devices (but not masked PLD devices) from Altera.  Any other
//	use of such megafunction design, net list, support information, device
//	programming or simulation file, or any other related documentation or
//	information is prohibited for any other purpose, including, but not
//	limited to modification, reverse engineering, de-compiling, or use with
//	any other silicon devices, unless such use is explicitly licensed under
//	a separate agreement with Altera or a megafunction partner.  Title to
//	the intellectual property, including patents, copyrights, trademarks,
//	trade secrets, or maskworks, embodied in any such megafunction design,
//	net list, support information, device programming or simulation file, or
//	any other related documentation or information provided by Altera or a
//	megafunction partner, remains with Altera, the megafunction partner, or
//	their respective licensors.  No other licenses, including any licenses
//	needed under any third party's intellectual property, are provided herein.
//-->
// Retrieval info: <instance entity-name="altera_xcvr_custom_phy" version="13.1" >
// Retrieval info: 	<generic name="device_family" value="Arria V" />
// Retrieval info: 	<generic name="gui_parameter_rules" value="Custom" />
// Retrieval info: 	<generic name="operation_mode" value="Duplex" />
// Retrieval info: 	<generic name="lanes" value="1" />
// Retrieval info: 	<generic name="gui_bonding_enable" value="false" />
// Retrieval info: 	<generic name="gui_bonded_mode" value="xN" />
// Retrieval info: 	<generic name="gui_pma_bonding_mode" value="xN" />
// Retrieval info: 	<generic name="gui_deser_factor" value="32" />
// Retrieval info: 	<generic name="gui_pcs_pma_width" value="PARAM_DEFAULT" />
// Retrieval info: 	<generic name="gui_pll_type" value="CMU" />
// Retrieval info: 	<generic name="data_rate" value="5000 Mbps" />
// Retrieval info: 	<generic name="gui_base_data_rate" value="5000 Mbps" />
// Retrieval info: 	<generic name="gui_pll_refclk_freq" value="125.0 MHz" />
// Retrieval info: 	<generic name="en_synce_support" value="0" />
// Retrieval info: 	<generic name="gui_tx_bitslip_enable" value="false" />
// Retrieval info: 	<generic name="gui_rx_use_coreclk" value="true" />
// Retrieval info: 	<generic name="gui_tx_use_coreclk" value="true" />
// Retrieval info: 	<generic name="gui_rx_use_recovered_clk" value="false" />
// Retrieval info: 	<generic name="gui_use_status" value="true" />
// Retrieval info: 	<generic name="gui_use_8b10b" value="true" />
// Retrieval info: 	<generic name="gui_use_8b10b_manual_control" value="false" />
// Retrieval info: 	<generic name="gui_use_8b10b_status" value="true" />
// Retrieval info: 	<generic name="std_tx_pcfifo_mode" value="low_latency" />
// Retrieval info: 	<generic name="std_rx_pcfifo_mode" value="low_latency" />
// Retrieval info: 	<generic name="word_aligner_mode" value="manual" />
// Retrieval info: 	<generic name="word_aligner_state_machine_datacnt" value="1" />
// Retrieval info: 	<generic name="word_aligner_state_machine_errcnt" value="1" />
// Retrieval info: 	<generic name="word_aligner_state_machine_patterncnt" value="10" />
// Retrieval info: 	<generic name="gui_use_wa_status" value="true" />
// Retrieval info: 	<generic name="word_aligner_pattern_length" value="10" />
// Retrieval info: 	<generic name="word_align_pattern" value="0101111100" />
// Retrieval info: 	<generic name="gui_enable_run_length" value="true" />
// Retrieval info: 	<generic name="run_length_violation_checking" value="10" />
// Retrieval info: 	<generic name="use_rate_match_fifo" value="0" />
// Retrieval info: 	<generic name="rate_match_pattern1" value="11010000111010000011" />
// Retrieval info: 	<generic name="rate_match_pattern2" value="00101111000101111100" />
// Retrieval info: 	<generic name="gui_use_rmfifo_status" value="false" />
// Retrieval info: 	<generic name="gui_use_byte_order_block" value="false" />
// Retrieval info: 	<generic name="gui_byte_order_pld_ctrl_enable" value="false" />
// Retrieval info: 	<generic name="byte_order_pattern" value="111111011" />
// Retrieval info: 	<generic name="byte_order_pad_pattern" value="000000000" />
// Retrieval info: 	<generic name="use_double_data_mode" value="DEPRECATED" />
// Retrieval info: 	<generic name="coreclk_0ppm_enable" value="false" />
// Retrieval info: 	<generic name="pll_external_enable" value="0" />
// Retrieval info: 	<generic name="gxb_analog_power" value="AUTO" />
// Retrieval info: 	<generic name="pll_lock_speed" value="AUTO" />
// Retrieval info: 	<generic name="tx_analog_power" value="AUTO" />
// Retrieval info: 	<generic name="tx_slew_rate" value="OFF" />
// Retrieval info: 	<generic name="tx_termination" value="OCT_100_OHMS" />
// Retrieval info: 	<generic name="tx_use_external_termination" value="false" />
// Retrieval info: 	<generic name="tx_preemp_pretap" value="0" />
// Retrieval info: 	<generic name="gui_tx_preemp_pretap_inv" value="false" />
// Retrieval info: 	<generic name="tx_preemp_tap_1" value="0" />
// Retrieval info: 	<generic name="tx_preemp_tap_2" value="0" />
// Retrieval info: 	<generic name="gui_tx_preemp_tap_2_inv" value="false" />
// Retrieval info: 	<generic name="tx_vod_selection" value="2" />
// Retrieval info: 	<generic name="tx_common_mode" value="0.65V" />
// Retrieval info: 	<generic name="rx_pll_lock_speed" value="AUTO" />
// Retrieval info: 	<generic name="rx_common_mode" value="0.82V" />
// Retrieval info: 	<generic name="rx_termination" value="OCT_100_OHMS" />
// Retrieval info: 	<generic name="rx_use_external_termination" value="false" />
// Retrieval info: 	<generic name="rx_eq_dc_gain" value="1" />
// Retrieval info: 	<generic name="rx_eq_ctrl" value="16" />
// Retrieval info: 	<generic name="gui_pll_reconfig_enable_pll_reconfig" value="true" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll_count" value="1" />
// Retrieval info: 	<generic name="gui_pll_reconfig_refclk_count" value="1" />
// Retrieval info: 	<generic name="gui_pll_reconfig_main_pll_index" value="0" />
// Retrieval info: 	<generic name="gui_pll_reconfig_cdr_pll_refclk_sel" value="0" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll0_pll_type" value="CMU" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll0_data_rate" value="0 Mbps" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll0_refclk_freq" value="0 MHz" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll0_refclk_sel" value="0" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll0_clk_network" value="x1" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll1_pll_type" value="CMU" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll1_data_rate" value="0 Mbps" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll1_refclk_freq" value="0 MHz" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll1_refclk_sel" value="0" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll1_clk_network" value="x1" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll2_pll_type" value="CMU" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll2_data_rate" value="0 Mbps" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll2_refclk_freq" value="0 MHz" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll2_refclk_sel" value="0" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll2_clk_network" value="x1" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll3_pll_type" value="CMU" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll3_data_rate" value="0 Mbps" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll3_refclk_freq" value="0 MHz" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll3_refclk_sel" value="0" />
// Retrieval info: 	<generic name="gui_pll_reconfig_pll3_clk_network" value="x1" />
// Retrieval info: 	<generic name="gui_mgmt_clk_in_hz" value="250000000" />
// Retrieval info: 	<generic name="gui_split_interfaces" value="0" />
// Retrieval info: 	<generic name="gui_embedded_reset" value="1" />
// Retrieval info: 	<generic name="channel_interface" value="0" />
// Retrieval info: 	<generic name="AUTO_PHY_MGMT_CLK_CLOCK_RATE" value="-1" />
// Retrieval info: 	<generic name="AUTO_PLL_REF_CLK_CLOCK_RATE" value="-1" />
// Retrieval info: </instance>
// IPFS_FILES : arriav_custom_seriallite_ii_phy_for_quartus_13_1.vo
// RELATED_FILES: arriav_custom_seriallite_ii_phy_for_quartus_13_1.v, altera_xcvr_functions.sv, altera_xcvr_custom.sv, av_xcvr_custom_nr.sv, av_xcvr_custom_native.sv, alt_xcvr_resync.sv, alt_xcvr_csr_common_h.sv, alt_xcvr_csr_common.sv, alt_xcvr_csr_pcs8g_h.sv, alt_xcvr_csr_pcs8g.sv, alt_xcvr_csr_selector.sv, alt_xcvr_mgmt2dec.sv, altera_wait_generate.v, sv_reconfig_bundle_to_xcvr.sv, sv_reconfig_bundle_to_ip.sv, sv_reconfig_bundle_merger.sv, av_xcvr_h.sv, av_xcvr_avmm_csr.sv, av_tx_pma_ch.sv, av_tx_pma.sv, av_rx_pma.sv, av_pma.sv, av_pcs_ch.sv, av_pcs.sv, av_xcvr_avmm.sv, av_xcvr_native.sv, av_xcvr_plls.sv, av_xcvr_data_adapter.sv, av_reconfig_bundle_to_basic.sv, av_reconfig_bundle_to_xcvr.sv, av_hssi_8g_rx_pcs_rbc.sv, av_hssi_8g_tx_pcs_rbc.sv, av_hssi_common_pcs_pma_interface_rbc.sv, av_hssi_common_pld_pcs_interface_rbc.sv, av_hssi_pipe_gen1_2_rbc.sv, av_hssi_rx_pcs_pma_interface_rbc.sv, av_hssi_rx_pld_pcs_interface_rbc.sv, av_hssi_tx_pcs_pma_interface_rbc.sv, av_hssi_tx_pld_pcs_interface_rbc.sv, altera_xcvr_reset_control.sv, alt_xcvr_reset_counter.sv, alt_xcvr_arbiter.sv, alt_xcvr_m2s.sv
