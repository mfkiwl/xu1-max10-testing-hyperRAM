/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

/*
 
DFT Size = 128
direction = forward
data type = 16 bit fixed point, scaled 
architecture = fully streaming
radix = 4
streaming width = 4
data ordering = natural input / natural output
BRAM budget = -1

*/

//   Input/output stream: 4 complex words per cycle
//   Throughput: one transform every 32 cycles
//   Latency: 292 cycles

//   Resources required:
//     32 multipliers (16 x 16 bit)
//     72 adders (16 x 16 bit)
//     8 RAMs (8 words, 32 bits per word)
//     24 RAMs (64 words, 32 bits per word)
//     8 RAMs (32 words, 32 bits per word)
//     4 ROMs (32 words, 16 bits per word)
//     24 ROMs (32 words, 5 bits per word)
//     6 ROMs (16 words, 16 bits per word)

// Generated on Fri Aug 30 01:25:20 EDT 2019

// Latency: 292 clock cycles
// Throughput: 1 transform every 32 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 32 cycles.  This means that
// 32 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 292 cycles.  This means that
// the 'next_out' will be asserted 292 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.

// Latency: 292
// Gap: 32
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [15:0] t0_0;
   wire [15:0] t0_1;
   wire [15:0] t0_2;
   wire [15:0] t0_3;
   wire [15:0] t0_4;
   wire [15:0] t0_5;
   wire [15:0] t0_6;
   wire [15:0] t0_7;
   wire next_0;
   wire [15:0] t1_0;
   wire [15:0] t1_1;
   wire [15:0] t1_2;
   wire [15:0] t1_3;
   wire [15:0] t1_4;
   wire [15:0] t1_5;
   wire [15:0] t1_6;
   wire [15:0] t1_7;
   wire next_1;
   wire [15:0] t2_0;
   wire [15:0] t2_1;
   wire [15:0] t2_2;
   wire [15:0] t2_3;
   wire [15:0] t2_4;
   wire [15:0] t2_5;
   wire [15:0] t2_6;
   wire [15:0] t2_7;
   wire next_2;
   wire [15:0] t3_0;
   wire [15:0] t3_1;
   wire [15:0] t3_2;
   wire [15:0] t3_3;
   wire [15:0] t3_4;
   wire [15:0] t3_5;
   wire [15:0] t3_6;
   wire [15:0] t3_7;
   wire next_3;
   wire [15:0] t4_0;
   wire [15:0] t4_1;
   wire [15:0] t4_2;
   wire [15:0] t4_3;
   wire [15:0] t4_4;
   wire [15:0] t4_5;
   wire [15:0] t4_6;
   wire [15:0] t4_7;
   wire next_4;
   wire [15:0] t5_0;
   wire [15:0] t5_1;
   wire [15:0] t5_2;
   wire [15:0] t5_3;
   wire [15:0] t5_4;
   wire [15:0] t5_5;
   wire [15:0] t5_6;
   wire [15:0] t5_7;
   wire next_5;
   wire [15:0] t6_0;
   wire [15:0] t6_1;
   wire [15:0] t6_2;
   wire [15:0] t6_3;
   wire [15:0] t6_4;
   wire [15:0] t6_5;
   wire [15:0] t6_6;
   wire [15:0] t6_7;
   wire next_6;
   wire [15:0] t7_0;
   wire [15:0] t7_1;
   wire [15:0] t7_2;
   wire [15:0] t7_3;
   wire [15:0] t7_4;
   wire [15:0] t7_5;
   wire [15:0] t7_6;
   wire [15:0] t7_7;
   wire next_7;
   wire [15:0] t8_0;
   wire [15:0] t8_1;
   wire [15:0] t8_2;
   wire [15:0] t8_3;
   wire [15:0] t8_4;
   wire [15:0] t8_5;
   wire [15:0] t8_6;
   wire [15:0] t8_7;
   wire next_8;
   wire [15:0] t9_0;
   wire [15:0] t9_1;
   wire [15:0] t9_2;
   wire [15:0] t9_3;
   wire [15:0] t9_4;
   wire [15:0] t9_5;
   wire [15:0] t9_6;
   wire [15:0] t9_7;
   wire next_9;
   wire [15:0] t10_0;
   wire [15:0] t10_1;
   wire [15:0] t10_2;
   wire [15:0] t10_3;
   wire [15:0] t10_4;
   wire [15:0] t10_5;
   wire [15:0] t10_6;
   wire [15:0] t10_7;
   wire next_10;
   wire [15:0] t11_0;
   wire [15:0] t11_1;
   wire [15:0] t11_2;
   wire [15:0] t11_3;
   wire [15:0] t11_4;
   wire [15:0] t11_5;
   wire [15:0] t11_6;
   wire [15:0] t11_7;
   wire next_11;
   wire [15:0] t12_0;
   wire [15:0] t12_1;
   wire [15:0] t12_2;
   wire [15:0] t12_3;
   wire [15:0] t12_4;
   wire [15:0] t12_5;
   wire [15:0] t12_6;
   wire [15:0] t12_7;
   wire next_12;
   assign t0_0 = X0;
   assign Y0 = t12_0;
   assign t0_1 = X1;
   assign Y1 = t12_1;
   assign t0_2 = X2;
   assign Y2 = t12_2;
   assign t0_3 = X3;
   assign Y3 = t12_3;
   assign t0_4 = X4;
   assign Y4 = t12_4;
   assign t0_5 = X5;
   assign Y5 = t12_5;
   assign t0_6 = X6;
   assign Y6 = t12_6;
   assign t0_7 = X7;
   assign Y7 = t12_7;
   assign next_0 = next;
   assign next_out = next_12;

// latency=69, gap=32
   rc20386 stage0(.clk(clk), .reset(reset), .next(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3),
    .X4(t0_4), .Y4(t1_4),
    .X5(t0_5), .Y5(t1_5),
    .X6(t0_6), .Y6(t1_6),
    .X7(t0_7), .Y7(t1_7));


// latency=3, gap=32
   codeBlock20388 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7));


// latency=13, gap=32
   rc20602 stage2(.clk(clk), .reset(reset), .next(next_2), .next_out(next_3),
    .X0(t2_0), .Y0(t3_0),
    .X1(t2_1), .Y1(t3_1),
    .X2(t2_2), .Y2(t3_2),
    .X3(t2_3), .Y3(t3_3),
    .X4(t2_4), .Y4(t3_4),
    .X5(t2_5), .Y5(t3_5),
    .X6(t2_6), .Y6(t3_6),
    .X7(t2_7), .Y7(t3_7));


// latency=8, gap=32
   DirSum_20975 stage3(.next(next_3), .clk(clk), .reset(reset), .next_out(next_4),
       .X0(t3_0), .Y0(t4_0),
       .X1(t3_1), .Y1(t4_1),
       .X2(t3_2), .Y2(t4_2),
       .X3(t3_3), .Y3(t4_3),
       .X4(t3_4), .Y4(t4_4),
       .X5(t3_5), .Y5(t4_5),
       .X6(t3_6), .Y6(t4_6),
       .X7(t3_7), .Y7(t4_7));


// latency=3, gap=32
   codeBlock20978 stage4(.clk(clk), .reset(reset), .next_in(next_4), .next_out(next_5),
       .X0_in(t4_0), .Y0(t5_0),
       .X1_in(t4_1), .Y1(t5_1),
       .X2_in(t4_2), .Y2(t5_2),
       .X3_in(t4_3), .Y3(t5_3),
       .X4_in(t4_4), .Y4(t5_4),
       .X5_in(t4_5), .Y5(t5_5),
       .X6_in(t4_6), .Y6(t5_6),
       .X7_in(t4_7), .Y7(t5_7));


// latency=37, gap=32
   rc21192 stage5(.clk(clk), .reset(reset), .next(next_5), .next_out(next_6),
    .X0(t5_0), .Y0(t6_0),
    .X1(t5_1), .Y1(t6_1),
    .X2(t5_2), .Y2(t6_2),
    .X3(t5_3), .Y3(t6_3),
    .X4(t5_4), .Y4(t6_4),
    .X5(t5_5), .Y5(t6_5),
    .X6(t5_6), .Y6(t6_6),
    .X7(t5_7), .Y7(t6_7));


// latency=8, gap=32
   DirSum_21661 stage6(.next(next_6), .clk(clk), .reset(reset), .next_out(next_7),
       .X0(t6_0), .Y0(t7_0),
       .X1(t6_1), .Y1(t7_1),
       .X2(t6_2), .Y2(t7_2),
       .X3(t6_3), .Y3(t7_3),
       .X4(t6_4), .Y4(t7_4),
       .X5(t6_5), .Y5(t7_5),
       .X6(t6_6), .Y6(t7_6),
       .X7(t6_7), .Y7(t7_7));


// latency=3, gap=32
   codeBlock21664 stage7(.clk(clk), .reset(reset), .next_in(next_7), .next_out(next_8),
       .X0_in(t7_0), .Y0(t8_0),
       .X1_in(t7_1), .Y1(t8_1),
       .X2_in(t7_2), .Y2(t8_2),
       .X3_in(t7_3), .Y3(t8_3),
       .X4_in(t7_4), .Y4(t8_4),
       .X5_in(t7_5), .Y5(t8_5),
       .X6_in(t7_6), .Y6(t8_6),
       .X7_in(t7_7), .Y7(t8_7));


// latency=69, gap=32
   rc21878 stage8(.clk(clk), .reset(reset), .next(next_8), .next_out(next_9),
    .X0(t8_0), .Y0(t9_0),
    .X1(t8_1), .Y1(t9_1),
    .X2(t8_2), .Y2(t9_2),
    .X3(t8_3), .Y3(t9_3),
    .X4(t8_4), .Y4(t9_4),
    .X5(t8_5), .Y5(t9_5),
    .X6(t8_6), .Y6(t9_6),
    .X7(t8_7), .Y7(t9_7));


// latency=8, gap=32
   DirSum_22474 stage9(.next(next_9), .clk(clk), .reset(reset), .next_out(next_10),
       .X0(t9_0), .Y0(t10_0),
       .X1(t9_1), .Y1(t10_1),
       .X2(t9_2), .Y2(t10_2),
       .X3(t9_3), .Y3(t10_3),
       .X4(t9_4), .Y4(t10_4),
       .X5(t9_5), .Y5(t10_5),
       .X6(t9_6), .Y6(t10_6),
       .X7(t9_7), .Y7(t10_7));


// latency=2, gap=32
   codeBlock22476 stage10(.clk(clk), .reset(reset), .next_in(next_10), .next_out(next_11),
       .X0_in(t10_0), .Y0(t11_0),
       .X1_in(t10_1), .Y1(t11_1),
       .X2_in(t10_2), .Y2(t11_2),
       .X3_in(t10_3), .Y3(t11_3),
       .X4_in(t10_4), .Y4(t11_4),
       .X5_in(t10_5), .Y5(t11_5),
       .X6_in(t10_6), .Y6(t11_6),
       .X7_in(t10_7), .Y7(t11_7));


// latency=69, gap=32
   rc22634 stage11(.clk(clk), .reset(reset), .next(next_11), .next_out(next_12),
    .X0(t11_0), .Y0(t12_0),
    .X1(t11_1), .Y1(t12_1),
    .X2(t11_2), .Y2(t12_2),
    .X3(t11_3), .Y3(t12_3),
    .X4(t11_4), .Y4(t12_4),
    .X5(t11_5), .Y5(t12_5),
    .X6(t11_6), .Y6(t12_6),
    .X7(t11_7), .Y7(t12_7));


endmodule

// Latency: 69
// Gap: 32
module rc20386(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];

   perm20384 instPerm23909(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet20384(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
);

    parameter width = 32;

    input [4:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3;
    reg [width-1:0] t5_0, t5_1, t5_2, t5_3;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        5'd0: control <= 4'b1111;
        5'd1: control <= 4'b1111;
        5'd2: control <= 4'b1111;
        5'd3: control <= 4'b1111;
        5'd4: control <= 4'b1111;
        5'd5: control <= 4'b1111;
        5'd6: control <= 4'b1111;
        5'd7: control <= 4'b1111;
        5'd8: control <= 4'b0011;
        5'd9: control <= 4'b0011;
        5'd10: control <= 4'b0011;
        5'd11: control <= 4'b0011;
        5'd12: control <= 4'b0011;
        5'd13: control <= 4'b0011;
        5'd14: control <= 4'b0011;
        5'd15: control <= 4'b0011;
        5'd16: control <= 4'b1100;
        5'd17: control <= 4'b1100;
        5'd18: control <= 4'b1100;
        5'd19: control <= 4'b1100;
        5'd20: control <= 4'b1100;
        5'd21: control <= 4'b1100;
        5'd22: control <= 4'b1100;
        5'd23: control <= 4'b1100;
        5'd24: control <= 4'b0000;
        5'd25: control <= 4'b0000;
        5'd26: control <= 4'b0000;
        5'd27: control <= 4'b0000;
        5'd28: control <= 4'b0000;
        5'd29: control <= 4'b0000;
        5'd30: control <= 4'b0000;
        5'd31: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
    end
    assign t0_0 = x0;
    assign t0_1 = x2;
    assign t0_2 = x1;
    assign t0_3 = x3;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
    assign t2_0 = t1_0;
    assign t2_1 = t1_2;
    assign t2_2 = t1_1;
    assign t2_3 = t1_3;
   always @(posedge clk) begin
         t3_0 <= (control0[3] == 0) ? t2_0 : t2_1;
         t3_1 <= (control0[3] == 0) ? t2_1 : t2_0;
         t3_2 <= (control0[2] == 0) ? t2_2 : t2_3;
         t3_3 <= (control0[2] == 0) ? t2_3 : t2_2;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_2;
    assign t4_2 = t3_1;
    assign t4_3 = t3_3;
   always @(posedge clk) begin
         t5_0 <= (control1[1] == 0) ? t4_0 : t4_1;
         t5_1 <= (control1[1] == 0) ? t4_1 : t4_0;
         t5_2 <= (control1[0] == 0) ? t4_2 : t4_3;
         t5_3 <= (control1[0] == 0) ? t4_3 : t4_2;
   end
    always @(posedge clk) begin
        y0 <= t5_0;
        y1 <= t5_2;
        y2 <= t5_1;
        y3 <= t5_3;
    end
endmodule

// Latency: 69
// Gap: 32
module perm20384(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter width = 32;

   parameter depth = 32;

   parameter addrbits = 5;

   parameter muxbits = 2;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm0;
   assign tm0 = 0;

shiftRegFIFO #(4, 1) shiftFIFO_23914(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_23915(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);

nextReg #(31, 5) nextReg_23926(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_23927(.X(next2), .Y(next3), .clk(clk));
nextReg #(32, 5) nextReg_23930(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_23931(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(31, 1) shiftFIFO_23934(.X(tm0), .Y(tm0_d), .clk(clk));
shiftRegFIFO #(4, 1) shiftFIFO_23937(.X(tm0_d), .Y(tm0_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(4, 5) shiftFIFO_23942(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(5, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd0 <= 24;
	     {1'd0,  5'd1}: s1rd0 <= 26;
	     {1'd0,  5'd2}: s1rd0 <= 28;
	     {1'd0,  5'd3}: s1rd0 <= 30;
	     {1'd0,  5'd4}: s1rd0 <= 25;
	     {1'd0,  5'd5}: s1rd0 <= 27;
	     {1'd0,  5'd6}: s1rd0 <= 29;
	     {1'd0,  5'd7}: s1rd0 <= 31;
	     {1'd0,  5'd8}: s1rd0 <= 16;
	     {1'd0,  5'd9}: s1rd0 <= 18;
	     {1'd0,  5'd10}: s1rd0 <= 20;
	     {1'd0,  5'd11}: s1rd0 <= 22;
	     {1'd0,  5'd12}: s1rd0 <= 17;
	     {1'd0,  5'd13}: s1rd0 <= 19;
	     {1'd0,  5'd14}: s1rd0 <= 21;
	     {1'd0,  5'd15}: s1rd0 <= 23;
	     {1'd0,  5'd16}: s1rd0 <= 8;
	     {1'd0,  5'd17}: s1rd0 <= 10;
	     {1'd0,  5'd18}: s1rd0 <= 12;
	     {1'd0,  5'd19}: s1rd0 <= 14;
	     {1'd0,  5'd20}: s1rd0 <= 9;
	     {1'd0,  5'd21}: s1rd0 <= 11;
	     {1'd0,  5'd22}: s1rd0 <= 13;
	     {1'd0,  5'd23}: s1rd0 <= 15;
	     {1'd0,  5'd24}: s1rd0 <= 0;
	     {1'd0,  5'd25}: s1rd0 <= 2;
	     {1'd0,  5'd26}: s1rd0 <= 4;
	     {1'd0,  5'd27}: s1rd0 <= 6;
	     {1'd0,  5'd28}: s1rd0 <= 1;
	     {1'd0,  5'd29}: s1rd0 <= 3;
	     {1'd0,  5'd30}: s1rd0 <= 5;
	     {1'd0,  5'd31}: s1rd0 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "distributed"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd1 <= 16;
	     {1'd0,  5'd1}: s1rd1 <= 18;
	     {1'd0,  5'd2}: s1rd1 <= 20;
	     {1'd0,  5'd3}: s1rd1 <= 22;
	     {1'd0,  5'd4}: s1rd1 <= 17;
	     {1'd0,  5'd5}: s1rd1 <= 19;
	     {1'd0,  5'd6}: s1rd1 <= 21;
	     {1'd0,  5'd7}: s1rd1 <= 23;
	     {1'd0,  5'd8}: s1rd1 <= 24;
	     {1'd0,  5'd9}: s1rd1 <= 26;
	     {1'd0,  5'd10}: s1rd1 <= 28;
	     {1'd0,  5'd11}: s1rd1 <= 30;
	     {1'd0,  5'd12}: s1rd1 <= 25;
	     {1'd0,  5'd13}: s1rd1 <= 27;
	     {1'd0,  5'd14}: s1rd1 <= 29;
	     {1'd0,  5'd15}: s1rd1 <= 31;
	     {1'd0,  5'd16}: s1rd1 <= 0;
	     {1'd0,  5'd17}: s1rd1 <= 2;
	     {1'd0,  5'd18}: s1rd1 <= 4;
	     {1'd0,  5'd19}: s1rd1 <= 6;
	     {1'd0,  5'd20}: s1rd1 <= 1;
	     {1'd0,  5'd21}: s1rd1 <= 3;
	     {1'd0,  5'd22}: s1rd1 <= 5;
	     {1'd0,  5'd23}: s1rd1 <= 7;
	     {1'd0,  5'd24}: s1rd1 <= 8;
	     {1'd0,  5'd25}: s1rd1 <= 10;
	     {1'd0,  5'd26}: s1rd1 <= 12;
	     {1'd0,  5'd27}: s1rd1 <= 14;
	     {1'd0,  5'd28}: s1rd1 <= 9;
	     {1'd0,  5'd29}: s1rd1 <= 11;
	     {1'd0,  5'd30}: s1rd1 <= 13;
	     {1'd0,  5'd31}: s1rd1 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "distributed"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd2 <= 8;
	     {1'd0,  5'd1}: s1rd2 <= 10;
	     {1'd0,  5'd2}: s1rd2 <= 12;
	     {1'd0,  5'd3}: s1rd2 <= 14;
	     {1'd0,  5'd4}: s1rd2 <= 9;
	     {1'd0,  5'd5}: s1rd2 <= 11;
	     {1'd0,  5'd6}: s1rd2 <= 13;
	     {1'd0,  5'd7}: s1rd2 <= 15;
	     {1'd0,  5'd8}: s1rd2 <= 0;
	     {1'd0,  5'd9}: s1rd2 <= 2;
	     {1'd0,  5'd10}: s1rd2 <= 4;
	     {1'd0,  5'd11}: s1rd2 <= 6;
	     {1'd0,  5'd12}: s1rd2 <= 1;
	     {1'd0,  5'd13}: s1rd2 <= 3;
	     {1'd0,  5'd14}: s1rd2 <= 5;
	     {1'd0,  5'd15}: s1rd2 <= 7;
	     {1'd0,  5'd16}: s1rd2 <= 24;
	     {1'd0,  5'd17}: s1rd2 <= 26;
	     {1'd0,  5'd18}: s1rd2 <= 28;
	     {1'd0,  5'd19}: s1rd2 <= 30;
	     {1'd0,  5'd20}: s1rd2 <= 25;
	     {1'd0,  5'd21}: s1rd2 <= 27;
	     {1'd0,  5'd22}: s1rd2 <= 29;
	     {1'd0,  5'd23}: s1rd2 <= 31;
	     {1'd0,  5'd24}: s1rd2 <= 16;
	     {1'd0,  5'd25}: s1rd2 <= 18;
	     {1'd0,  5'd26}: s1rd2 <= 20;
	     {1'd0,  5'd27}: s1rd2 <= 22;
	     {1'd0,  5'd28}: s1rd2 <= 17;
	     {1'd0,  5'd29}: s1rd2 <= 19;
	     {1'd0,  5'd30}: s1rd2 <= 21;
	     {1'd0,  5'd31}: s1rd2 <= 23;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "distributed"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd3 <= 0;
	     {1'd0,  5'd1}: s1rd3 <= 2;
	     {1'd0,  5'd2}: s1rd3 <= 4;
	     {1'd0,  5'd3}: s1rd3 <= 6;
	     {1'd0,  5'd4}: s1rd3 <= 1;
	     {1'd0,  5'd5}: s1rd3 <= 3;
	     {1'd0,  5'd6}: s1rd3 <= 5;
	     {1'd0,  5'd7}: s1rd3 <= 7;
	     {1'd0,  5'd8}: s1rd3 <= 8;
	     {1'd0,  5'd9}: s1rd3 <= 10;
	     {1'd0,  5'd10}: s1rd3 <= 12;
	     {1'd0,  5'd11}: s1rd3 <= 14;
	     {1'd0,  5'd12}: s1rd3 <= 9;
	     {1'd0,  5'd13}: s1rd3 <= 11;
	     {1'd0,  5'd14}: s1rd3 <= 13;
	     {1'd0,  5'd15}: s1rd3 <= 15;
	     {1'd0,  5'd16}: s1rd3 <= 16;
	     {1'd0,  5'd17}: s1rd3 <= 18;
	     {1'd0,  5'd18}: s1rd3 <= 20;
	     {1'd0,  5'd19}: s1rd3 <= 22;
	     {1'd0,  5'd20}: s1rd3 <= 17;
	     {1'd0,  5'd21}: s1rd3 <= 19;
	     {1'd0,  5'd22}: s1rd3 <= 21;
	     {1'd0,  5'd23}: s1rd3 <= 23;
	     {1'd0,  5'd24}: s1rd3 <= 24;
	     {1'd0,  5'd25}: s1rd3 <= 26;
	     {1'd0,  5'd26}: s1rd3 <= 28;
	     {1'd0,  5'd27}: s1rd3 <= 30;
	     {1'd0,  5'd28}: s1rd3 <= 25;
	     {1'd0,  5'd29}: s1rd3 <= 27;
	     {1'd0,  5'd30}: s1rd3 <= 29;
	     {1'd0,  5'd31}: s1rd3 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "distributed"
    swNet20384 sw(tm0_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3);

   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr0 <= 20;
	      {1'd0, 5'd1}: s2wr0 <= 21;
	      {1'd0, 5'd2}: s2wr0 <= 22;
	      {1'd0, 5'd3}: s2wr0 <= 23;
	      {1'd0, 5'd4}: s2wr0 <= 28;
	      {1'd0, 5'd5}: s2wr0 <= 29;
	      {1'd0, 5'd6}: s2wr0 <= 30;
	      {1'd0, 5'd7}: s2wr0 <= 31;
	      {1'd0, 5'd8}: s2wr0 <= 4;
	      {1'd0, 5'd9}: s2wr0 <= 5;
	      {1'd0, 5'd10}: s2wr0 <= 6;
	      {1'd0, 5'd11}: s2wr0 <= 7;
	      {1'd0, 5'd12}: s2wr0 <= 12;
	      {1'd0, 5'd13}: s2wr0 <= 13;
	      {1'd0, 5'd14}: s2wr0 <= 14;
	      {1'd0, 5'd15}: s2wr0 <= 15;
	      {1'd0, 5'd16}: s2wr0 <= 16;
	      {1'd0, 5'd17}: s2wr0 <= 17;
	      {1'd0, 5'd18}: s2wr0 <= 18;
	      {1'd0, 5'd19}: s2wr0 <= 19;
	      {1'd0, 5'd20}: s2wr0 <= 24;
	      {1'd0, 5'd21}: s2wr0 <= 25;
	      {1'd0, 5'd22}: s2wr0 <= 26;
	      {1'd0, 5'd23}: s2wr0 <= 27;
	      {1'd0, 5'd24}: s2wr0 <= 0;
	      {1'd0, 5'd25}: s2wr0 <= 1;
	      {1'd0, 5'd26}: s2wr0 <= 2;
	      {1'd0, 5'd27}: s2wr0 <= 3;
	      {1'd0, 5'd28}: s2wr0 <= 8;
	      {1'd0, 5'd29}: s2wr0 <= 9;
	      {1'd0, 5'd30}: s2wr0 <= 10;
	      {1'd0, 5'd31}: s2wr0 <= 11;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "distributed"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr1 <= 4;
	      {1'd0, 5'd1}: s2wr1 <= 5;
	      {1'd0, 5'd2}: s2wr1 <= 6;
	      {1'd0, 5'd3}: s2wr1 <= 7;
	      {1'd0, 5'd4}: s2wr1 <= 12;
	      {1'd0, 5'd5}: s2wr1 <= 13;
	      {1'd0, 5'd6}: s2wr1 <= 14;
	      {1'd0, 5'd7}: s2wr1 <= 15;
	      {1'd0, 5'd8}: s2wr1 <= 20;
	      {1'd0, 5'd9}: s2wr1 <= 21;
	      {1'd0, 5'd10}: s2wr1 <= 22;
	      {1'd0, 5'd11}: s2wr1 <= 23;
	      {1'd0, 5'd12}: s2wr1 <= 28;
	      {1'd0, 5'd13}: s2wr1 <= 29;
	      {1'd0, 5'd14}: s2wr1 <= 30;
	      {1'd0, 5'd15}: s2wr1 <= 31;
	      {1'd0, 5'd16}: s2wr1 <= 0;
	      {1'd0, 5'd17}: s2wr1 <= 1;
	      {1'd0, 5'd18}: s2wr1 <= 2;
	      {1'd0, 5'd19}: s2wr1 <= 3;
	      {1'd0, 5'd20}: s2wr1 <= 8;
	      {1'd0, 5'd21}: s2wr1 <= 9;
	      {1'd0, 5'd22}: s2wr1 <= 10;
	      {1'd0, 5'd23}: s2wr1 <= 11;
	      {1'd0, 5'd24}: s2wr1 <= 16;
	      {1'd0, 5'd25}: s2wr1 <= 17;
	      {1'd0, 5'd26}: s2wr1 <= 18;
	      {1'd0, 5'd27}: s2wr1 <= 19;
	      {1'd0, 5'd28}: s2wr1 <= 24;
	      {1'd0, 5'd29}: s2wr1 <= 25;
	      {1'd0, 5'd30}: s2wr1 <= 26;
	      {1'd0, 5'd31}: s2wr1 <= 27;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "distributed"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr2 <= 16;
	      {1'd0, 5'd1}: s2wr2 <= 17;
	      {1'd0, 5'd2}: s2wr2 <= 18;
	      {1'd0, 5'd3}: s2wr2 <= 19;
	      {1'd0, 5'd4}: s2wr2 <= 24;
	      {1'd0, 5'd5}: s2wr2 <= 25;
	      {1'd0, 5'd6}: s2wr2 <= 26;
	      {1'd0, 5'd7}: s2wr2 <= 27;
	      {1'd0, 5'd8}: s2wr2 <= 0;
	      {1'd0, 5'd9}: s2wr2 <= 1;
	      {1'd0, 5'd10}: s2wr2 <= 2;
	      {1'd0, 5'd11}: s2wr2 <= 3;
	      {1'd0, 5'd12}: s2wr2 <= 8;
	      {1'd0, 5'd13}: s2wr2 <= 9;
	      {1'd0, 5'd14}: s2wr2 <= 10;
	      {1'd0, 5'd15}: s2wr2 <= 11;
	      {1'd0, 5'd16}: s2wr2 <= 20;
	      {1'd0, 5'd17}: s2wr2 <= 21;
	      {1'd0, 5'd18}: s2wr2 <= 22;
	      {1'd0, 5'd19}: s2wr2 <= 23;
	      {1'd0, 5'd20}: s2wr2 <= 28;
	      {1'd0, 5'd21}: s2wr2 <= 29;
	      {1'd0, 5'd22}: s2wr2 <= 30;
	      {1'd0, 5'd23}: s2wr2 <= 31;
	      {1'd0, 5'd24}: s2wr2 <= 4;
	      {1'd0, 5'd25}: s2wr2 <= 5;
	      {1'd0, 5'd26}: s2wr2 <= 6;
	      {1'd0, 5'd27}: s2wr2 <= 7;
	      {1'd0, 5'd28}: s2wr2 <= 12;
	      {1'd0, 5'd29}: s2wr2 <= 13;
	      {1'd0, 5'd30}: s2wr2 <= 14;
	      {1'd0, 5'd31}: s2wr2 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "distributed"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr3 <= 0;
	      {1'd0, 5'd1}: s2wr3 <= 1;
	      {1'd0, 5'd2}: s2wr3 <= 2;
	      {1'd0, 5'd3}: s2wr3 <= 3;
	      {1'd0, 5'd4}: s2wr3 <= 8;
	      {1'd0, 5'd5}: s2wr3 <= 9;
	      {1'd0, 5'd6}: s2wr3 <= 10;
	      {1'd0, 5'd7}: s2wr3 <= 11;
	      {1'd0, 5'd8}: s2wr3 <= 16;
	      {1'd0, 5'd9}: s2wr3 <= 17;
	      {1'd0, 5'd10}: s2wr3 <= 18;
	      {1'd0, 5'd11}: s2wr3 <= 19;
	      {1'd0, 5'd12}: s2wr3 <= 24;
	      {1'd0, 5'd13}: s2wr3 <= 25;
	      {1'd0, 5'd14}: s2wr3 <= 26;
	      {1'd0, 5'd15}: s2wr3 <= 27;
	      {1'd0, 5'd16}: s2wr3 <= 4;
	      {1'd0, 5'd17}: s2wr3 <= 5;
	      {1'd0, 5'd18}: s2wr3 <= 6;
	      {1'd0, 5'd19}: s2wr3 <= 7;
	      {1'd0, 5'd20}: s2wr3 <= 12;
	      {1'd0, 5'd21}: s2wr3 <= 13;
	      {1'd0, 5'd22}: s2wr3 <= 14;
	      {1'd0, 5'd23}: s2wr3 <= 15;
	      {1'd0, 5'd24}: s2wr3 <= 20;
	      {1'd0, 5'd25}: s2wr3 <= 21;
	      {1'd0, 5'd26}: s2wr3 <= 22;
	      {1'd0, 5'd27}: s2wr3 <= 23;
	      {1'd0, 5'd28}: s2wr3 <= 28;
	      {1'd0, 5'd29}: s2wr3 <= 29;
	      {1'd0, 5'd30}: s2wr3 <= 30;
	      {1'd0, 5'd31}: s2wr3 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "distributed"
endmodule




module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

module nextReg(X, Y, reset, clk);
   parameter depth=2, logDepth=1;

   output Y;
   input X;
   input              clk, reset;
   reg [logDepth:0] count;
   reg                active;

   assign Y = (count == depth) ? 1 : 0;

   always @ (posedge clk) begin
      if (reset == 1) begin
         count <= 0;
         active <= 0;
      end
      else if (X == 1) begin
         active <= 1;
         count <= 1;
      end
      else if (count == depth) begin
         count <= 0;
         active <= 0;
      end
      else if (active)
         count <= count+1;
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock20388(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(2, 1) shiftFIFO_23949(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a377;
   wire signed [15:0] a378;
   wire signed [15:0] a379;
   wire signed [15:0] a380;
   wire signed [15:0] a385;
   wire signed [15:0] a387;
   wire signed [15:0] a388;
   wire signed [15:0] a389;
   wire signed [16:0] tm133;
   wire signed [16:0] tm134;
   wire signed [16:0] tm135;
   wire signed [16:0] tm136;
   wire signed [16:0] tm137;
   wire signed [16:0] tm138;
   wire signed [16:0] tm139;
   wire signed [16:0] tm140;
   wire signed [15:0] t426;
   wire signed [15:0] t427;
   wire signed [15:0] t428;
   wire signed [15:0] t429;
   wire signed [15:0] t430;
   wire signed [15:0] t431;
   wire signed [15:0] t432;
   wire signed [15:0] t433;
   wire signed [16:0] tm141;
   wire signed [16:0] tm142;
   wire signed [16:0] tm143;
   wire signed [16:0] tm144;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm145;
   wire signed [16:0] tm146;
   wire signed [16:0] tm147;
   wire signed [16:0] tm148;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t434;
   wire signed [15:0] t435;
   wire signed [15:0] t436;
   wire signed [15:0] t437;
   wire signed [15:0] t438;
   wire signed [15:0] t439;
   wire signed [15:0] t440;
   wire signed [15:0] t441;


   assign a377 = X0;
   assign a378 = X4;
   assign a379 = X1;
   assign a380 = X5;
   assign a385 = X2;
   assign a387 = X6;
   assign a388 = X3;
   assign a389 = X7;
   assign t426 = tm133[16:1];
   assign t427 = tm134[16:1];
   assign t428 = tm135[16:1];
   assign t429 = tm136[16:1];
   assign t430 = tm137[16:1];
   assign t431 = tm138[16:1];
   assign t432 = tm139[16:1];
   assign t433 = tm140[16:1];
   assign Y0 = t434;
   assign Y1 = t435;
   assign Y4 = t436;
   assign Y5 = t437;
   assign Y2 = t438;
   assign Y3 = t439;
   assign Y6 = t440;
   assign Y7 = t441;
   assign t434 = tm141[16:1];
   assign t435 = tm142[16:1];
   assign t436 = tm143[16:1];
   assign t437 = tm144[16:1];
   assign t438 = tm145[16:1];
   assign t439 = tm146[16:1];
   assign t440 = tm147[16:1];
   assign t441 = tm148[16:1];

    addfxp #(17, 1) add20400(.a({{1{a377[15]}}, a377}), .b({{1{a378[15]}}, a378}), .clk(clk), .q(tm133));    // 0
    addfxp #(17, 1) add20415(.a({{1{a379[15]}}, a379}), .b({{1{a380[15]}}, a380}), .clk(clk), .q(tm134));    // 0
    subfxp #(17, 1) sub20430(.a({{1{a377[15]}}, a377}), .b({{1{a378[15]}}, a378}), .clk(clk), .q(tm135));    // 0
    subfxp #(17, 1) sub20445(.a({{1{a379[15]}}, a379}), .b({{1{a380[15]}}, a380}), .clk(clk), .q(tm136));    // 0
    addfxp #(17, 1) add20460(.a({{1{a385[15]}}, a385}), .b({{1{a387[15]}}, a387}), .clk(clk), .q(tm137));    // 0
    addfxp #(17, 1) add20475(.a({{1{a388[15]}}, a388}), .b({{1{a389[15]}}, a389}), .clk(clk), .q(tm138));    // 0
    subfxp #(17, 1) sub20490(.a({{1{a385[15]}}, a385}), .b({{1{a387[15]}}, a387}), .clk(clk), .q(tm139));    // 0
    subfxp #(17, 1) sub20505(.a({{1{a388[15]}}, a388}), .b({{1{a389[15]}}, a389}), .clk(clk), .q(tm140));    // 0
    addfxp #(17, 1) add20512(.a({{1{t426[15]}}, t426}), .b({{1{t430[15]}}, t430}), .clk(clk), .q(tm141));    // 1
    addfxp #(17, 1) add20519(.a({{1{t427[15]}}, t427}), .b({{1{t431[15]}}, t431}), .clk(clk), .q(tm142));    // 1
    subfxp #(17, 1) sub20526(.a({{1{t426[15]}}, t426}), .b({{1{t430[15]}}, t430}), .clk(clk), .q(tm143));    // 1
    subfxp #(17, 1) sub20533(.a({{1{t427[15]}}, t427}), .b({{1{t431[15]}}, t431}), .clk(clk), .q(tm144));    // 1
    addfxp #(17, 1) add20556(.a({{1{t428[15]}}, t428}), .b({{1{t433[15]}}, t433}), .clk(clk), .q(tm145));    // 1
    subfxp #(17, 1) sub20563(.a({{1{t429[15]}}, t429}), .b({{1{t432[15]}}, t432}), .clk(clk), .q(tm146));    // 1
    subfxp #(17, 1) sub20570(.a({{1{t428[15]}}, t428}), .b({{1{t433[15]}}, t433}), .clk(clk), .q(tm147));    // 1
    addfxp #(17, 1) add20577(.a({{1{t429[15]}}, t429}), .b({{1{t432[15]}}, t432}), .clk(clk), .q(tm148));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 13
// Gap: 4
module rc20602(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];

   perm20600 instPerm23950(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet20600(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
);

    parameter width = 32;

    input [1:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3;
    reg [width-1:0] t5_0, t5_1, t5_2, t5_3;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        2'd0: control <= 4'b1111;
        2'd1: control <= 4'b0011;
        2'd2: control <= 4'b1100;
        2'd3: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
    end
    assign t0_0 = x0;
    assign t0_1 = x2;
    assign t0_2 = x1;
    assign t0_3 = x3;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
    assign t2_0 = t1_0;
    assign t2_1 = t1_2;
    assign t2_2 = t1_1;
    assign t2_3 = t1_3;
   always @(posedge clk) begin
         t3_0 <= (control0[3] == 0) ? t2_0 : t2_1;
         t3_1 <= (control0[3] == 0) ? t2_1 : t2_0;
         t3_2 <= (control0[2] == 0) ? t2_2 : t2_3;
         t3_3 <= (control0[2] == 0) ? t2_3 : t2_2;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_2;
    assign t4_2 = t3_1;
    assign t4_3 = t3_3;
   always @(posedge clk) begin
         t5_0 <= (control1[1] == 0) ? t4_0 : t4_1;
         t5_1 <= (control1[1] == 0) ? t4_1 : t4_0;
         t5_2 <= (control1[0] == 0) ? t4_2 : t4_3;
         t5_3 <= (control1[0] == 0) ? t4_3 : t4_2;
   end
    always @(posedge clk) begin
        y0 <= t5_0;
        y1 <= t5_2;
        y2 <= t5_1;
        y3 <= t5_3;
    end
endmodule

// Latency: 13
// Gap: 4
module perm20600(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter width = 32;

   parameter depth = 4;

   parameter addrbits = 2;

   parameter muxbits = 2;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm1;
   assign tm1 = 0;

shiftRegFIFO #(4, 1) shiftFIFO_23955(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_23956(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);

shiftRegFIFO #(3, 1) shiftFIFO_23965(.X(next), .Y(next2), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_23966(.X(next2), .Y(next3), .clk(clk));
shiftRegFIFO #(4, 1) shiftFIFO_23967(.X(next3), .Y(next4), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_23968(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(3, 1) shiftFIFO_23971(.X(tm1), .Y(tm1_d), .clk(clk));
shiftRegFIFO #(4, 1) shiftFIFO_23974(.X(tm1_d), .Y(tm1_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(4, 2) shiftFIFO_23979(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(5, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd0 <= 3;
	     {1'd0,  2'd1}: s1rd0 <= 2;
	     {1'd0,  2'd2}: s1rd0 <= 1;
	     {1'd0,  2'd3}: s1rd0 <= 0;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "distributed"
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd1 <= 2;
	     {1'd0,  2'd1}: s1rd1 <= 3;
	     {1'd0,  2'd2}: s1rd1 <= 0;
	     {1'd0,  2'd3}: s1rd1 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "distributed"
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd2 <= 1;
	     {1'd0,  2'd1}: s1rd2 <= 0;
	     {1'd0,  2'd2}: s1rd2 <= 3;
	     {1'd0,  2'd3}: s1rd2 <= 2;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "distributed"
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd3 <= 0;
	     {1'd0,  2'd1}: s1rd3 <= 1;
	     {1'd0,  2'd2}: s1rd3 <= 2;
	     {1'd0,  2'd3}: s1rd3 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "distributed"
    swNet20600 sw(tm1_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3);

   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr0 <= 3;
	      {1'd0, 2'd1}: s2wr0 <= 2;
	      {1'd0, 2'd2}: s2wr0 <= 1;
	      {1'd0, 2'd3}: s2wr0 <= 0;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "distributed"
   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr1 <= 2;
	      {1'd0, 2'd1}: s2wr1 <= 3;
	      {1'd0, 2'd2}: s2wr1 <= 0;
	      {1'd0, 2'd3}: s2wr1 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "distributed"
   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr2 <= 1;
	      {1'd0, 2'd1}: s2wr2 <= 0;
	      {1'd0, 2'd2}: s2wr2 <= 3;
	      {1'd0, 2'd3}: s2wr2 <= 2;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "distributed"
   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr3 <= 0;
	      {1'd0, 2'd1}: s2wr3 <= 1;
	      {1'd0, 2'd2}: s2wr3 <= 2;
	      {1'd0, 2'd3}: s2wr3 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "distributed"
endmodule


// Latency: 8
// Gap: 4
module DirSum_20975(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7);

   output next_out;
   input clk, reset, next;

   reg [1:0] i3;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   always @(posedge clk) begin
      if (reset == 1) begin
         i3 <= 0;
      end
      else begin
         if (next == 1)
            i3 <= 0;
         else if (i3 == 3)
            i3 <= 0;
         else
            i3 <= i3 + 1;
      end
   end

   codeBlock20605 codeBlockIsnt23980(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i3_in(i3),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7));

endmodule

module D28_20931(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hc4df;
      2: out3 <= 16'hd2bf;
      3: out3 <= 16'h187e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D27_20937(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hd2bf;
      2: out3 <= 16'hc000;
      3: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D26_20943(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'he782;
      2: out3 <= 16'hd2bf;
      3: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D24_20955(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h187e;
      2: out3 <= 16'hd2bf;
      3: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D23_20961(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h2d41;
      2: out3 <= 16'h0;
      3: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D22_20967(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3b21;
      2: out3 <= 16'h2d41;
      3: out3 <= 16'h187e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 8
// Gap: 1
module codeBlock20605(clk, reset, next_in, next_out,
   i3_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [1:0] i3_in;
   reg [1:0] i3;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(7, 1) shiftFIFO_23983(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a345;
   wire signed [15:0] a322;
   wire signed [15:0] a348;
   wire signed [15:0] a326;
   wire signed [15:0] a349;
   wire signed [15:0] a350;
   wire signed [15:0] a353;
   wire signed [15:0] a354;
   wire signed [15:0] a357;
   wire signed [15:0] a358;
   reg signed [15:0] tm189;
   reg signed [15:0] tm193;
   reg signed [15:0] tm205;
   reg signed [15:0] tm209;
   reg signed [15:0] tm221;
   reg signed [15:0] tm225;
   reg signed [15:0] tm237;
   reg signed [15:0] tm244;
   reg signed [15:0] tm190;
   reg signed [15:0] tm194;
   reg signed [15:0] tm206;
   reg signed [15:0] tm210;
   reg signed [15:0] tm222;
   reg signed [15:0] tm226;
   reg signed [15:0] tm238;
   reg signed [15:0] tm245;
   wire signed [15:0] tm4;
   wire signed [15:0] a327;
   wire signed [15:0] tm5;
   wire signed [15:0] a329;
   wire signed [15:0] tm6;
   wire signed [15:0] a333;
   wire signed [15:0] tm7;
   wire signed [15:0] a335;
   wire signed [15:0] tm8;
   wire signed [15:0] a339;
   wire signed [15:0] tm9;
   wire signed [15:0] a341;
   reg signed [15:0] tm191;
   reg signed [15:0] tm195;
   reg signed [15:0] tm207;
   reg signed [15:0] tm211;
   reg signed [15:0] tm223;
   reg signed [15:0] tm227;
   reg signed [15:0] tm239;
   reg signed [15:0] tm246;
   reg signed [15:0] tm33;
   reg signed [15:0] tm34;
   reg signed [15:0] tm37;
   reg signed [15:0] tm38;
   reg signed [15:0] tm41;
   reg signed [15:0] tm42;
   reg signed [15:0] tm192;
   reg signed [15:0] tm196;
   reg signed [15:0] tm208;
   reg signed [15:0] tm212;
   reg signed [15:0] tm224;
   reg signed [15:0] tm228;
   reg signed [15:0] tm240;
   reg signed [15:0] tm247;
   reg signed [15:0] tm241;
   reg signed [15:0] tm248;
   wire signed [15:0] a328;
   wire signed [15:0] a330;
   wire signed [15:0] a331;
   wire signed [15:0] a332;
   wire signed [15:0] a334;
   wire signed [15:0] a336;
   wire signed [15:0] a337;
   wire signed [15:0] a338;
   wire signed [15:0] a340;
   wire signed [15:0] a342;
   wire signed [15:0] a343;
   wire signed [15:0] a344;
   reg signed [15:0] tm242;
   reg signed [15:0] tm249;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   reg signed [15:0] tm243;
   reg signed [15:0] tm250;


   assign a345 = X0;
   assign a322 = a345;
   assign a348 = X1;
   assign a326 = a348;
   assign a349 = X2;
   assign a350 = X3;
   assign a353 = X4;
   assign a354 = X5;
   assign a357 = X6;
   assign a358 = X7;
   assign a327 = tm4;
   assign a329 = tm5;
   assign a333 = tm6;
   assign a335 = tm7;
   assign a339 = tm8;
   assign a341 = tm9;
   assign Y0 = tm243;
   assign Y1 = tm250;

   D28_20931 instD28inst0_20931(.addr(i3[1:0]), .out(tm9), .clk(clk));

   D27_20937 instD27inst0_20937(.addr(i3[1:0]), .out(tm7), .clk(clk));

   D26_20943 instD26inst0_20943(.addr(i3[1:0]), .out(tm5), .clk(clk));

   D24_20955 instD24inst0_20955(.addr(i3[1:0]), .out(tm8), .clk(clk));

   D23_20961 instD23inst0_20961(.addr(i3[1:0]), .out(tm6), .clk(clk));

   D22_20967 instD22inst0_20967(.addr(i3[1:0]), .out(tm4), .clk(clk));

    multfix #(16, 2) m20704(.a(tm33), .b(tm192), .clk(clk), .q_sc(a328), .q_unsc(), .rst(reset));
    multfix #(16, 2) m20726(.a(tm34), .b(tm196), .clk(clk), .q_sc(a330), .q_unsc(), .rst(reset));
    multfix #(16, 2) m20744(.a(tm34), .b(tm192), .clk(clk), .q_sc(a331), .q_unsc(), .rst(reset));
    multfix #(16, 2) m20755(.a(tm33), .b(tm196), .clk(clk), .q_sc(a332), .q_unsc(), .rst(reset));
    multfix #(16, 2) m20784(.a(tm37), .b(tm208), .clk(clk), .q_sc(a334), .q_unsc(), .rst(reset));
    multfix #(16, 2) m20806(.a(tm38), .b(tm212), .clk(clk), .q_sc(a336), .q_unsc(), .rst(reset));
    multfix #(16, 2) m20824(.a(tm38), .b(tm208), .clk(clk), .q_sc(a337), .q_unsc(), .rst(reset));
    multfix #(16, 2) m20835(.a(tm37), .b(tm212), .clk(clk), .q_sc(a338), .q_unsc(), .rst(reset));
    multfix #(16, 2) m20864(.a(tm41), .b(tm224), .clk(clk), .q_sc(a340), .q_unsc(), .rst(reset));
    multfix #(16, 2) m20886(.a(tm42), .b(tm228), .clk(clk), .q_sc(a342), .q_unsc(), .rst(reset));
    multfix #(16, 2) m20904(.a(tm42), .b(tm224), .clk(clk), .q_sc(a343), .q_unsc(), .rst(reset));
    multfix #(16, 2) m20915(.a(tm41), .b(tm228), .clk(clk), .q_sc(a344), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub20733(.a(a328), .b(a330), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add20762(.a(a331), .b(a332), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub20813(.a(a334), .b(a336), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add20842(.a(a337), .b(a338), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub20893(.a(a340), .b(a342), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add20922(.a(a343), .b(a344), .clk(clk), .q(Y7));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm33 <= 0;
         tm192 <= 0;
         tm34 <= 0;
         tm196 <= 0;
         tm34 <= 0;
         tm192 <= 0;
         tm33 <= 0;
         tm196 <= 0;
         tm37 <= 0;
         tm208 <= 0;
         tm38 <= 0;
         tm212 <= 0;
         tm38 <= 0;
         tm208 <= 0;
         tm37 <= 0;
         tm212 <= 0;
         tm41 <= 0;
         tm224 <= 0;
         tm42 <= 0;
         tm228 <= 0;
         tm42 <= 0;
         tm224 <= 0;
         tm41 <= 0;
         tm228 <= 0;
      end
      else begin
         i3 <= i3_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
         tm189 <= a349;
         tm193 <= a350;
         tm205 <= a353;
         tm209 <= a354;
         tm221 <= a357;
         tm225 <= a358;
         tm237 <= a322;
         tm244 <= a326;
         tm190 <= tm189;
         tm194 <= tm193;
         tm206 <= tm205;
         tm210 <= tm209;
         tm222 <= tm221;
         tm226 <= tm225;
         tm238 <= tm237;
         tm245 <= tm244;
         tm191 <= tm190;
         tm195 <= tm194;
         tm207 <= tm206;
         tm211 <= tm210;
         tm223 <= tm222;
         tm227 <= tm226;
         tm239 <= tm238;
         tm246 <= tm245;
         tm33 <= a327;
         tm34 <= a329;
         tm37 <= a333;
         tm38 <= a335;
         tm41 <= a339;
         tm42 <= a341;
         tm192 <= tm191;
         tm196 <= tm195;
         tm208 <= tm207;
         tm212 <= tm211;
         tm224 <= tm223;
         tm228 <= tm227;
         tm240 <= tm239;
         tm247 <= tm246;
         tm241 <= tm240;
         tm248 <= tm247;
         tm242 <= tm241;
         tm249 <= tm248;
         tm243 <= tm242;
         tm250 <= tm249;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock20978(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(2, 1) shiftFIFO_23986(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a257;
   wire signed [15:0] a258;
   wire signed [15:0] a259;
   wire signed [15:0] a260;
   wire signed [15:0] a265;
   wire signed [15:0] a266;
   wire signed [15:0] a267;
   wire signed [15:0] a268;
   wire signed [16:0] tm149;
   wire signed [16:0] tm150;
   wire signed [16:0] tm151;
   wire signed [16:0] tm152;
   wire signed [16:0] tm153;
   wire signed [16:0] tm154;
   wire signed [16:0] tm155;
   wire signed [16:0] tm156;
   wire signed [15:0] t297;
   wire signed [15:0] t298;
   wire signed [15:0] t299;
   wire signed [15:0] t300;
   wire signed [15:0] t301;
   wire signed [15:0] t302;
   wire signed [15:0] t303;
   wire signed [15:0] t304;
   wire signed [16:0] tm157;
   wire signed [16:0] tm158;
   wire signed [16:0] tm159;
   wire signed [16:0] tm160;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm161;
   wire signed [16:0] tm162;
   wire signed [16:0] tm163;
   wire signed [16:0] tm164;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t305;
   wire signed [15:0] t306;
   wire signed [15:0] t307;
   wire signed [15:0] t308;
   wire signed [15:0] t309;
   wire signed [15:0] t310;
   wire signed [15:0] t311;
   wire signed [15:0] t312;


   assign a257 = X0;
   assign a258 = X4;
   assign a259 = X1;
   assign a260 = X5;
   assign a265 = X2;
   assign a266 = X6;
   assign a267 = X3;
   assign a268 = X7;
   assign t297 = tm149[16:1];
   assign t298 = tm150[16:1];
   assign t299 = tm151[16:1];
   assign t300 = tm152[16:1];
   assign t301 = tm153[16:1];
   assign t302 = tm154[16:1];
   assign t303 = tm155[16:1];
   assign t304 = tm156[16:1];
   assign Y0 = t305;
   assign Y1 = t306;
   assign Y4 = t307;
   assign Y5 = t308;
   assign Y2 = t309;
   assign Y3 = t310;
   assign Y6 = t311;
   assign Y7 = t312;
   assign t305 = tm157[16:1];
   assign t306 = tm158[16:1];
   assign t307 = tm159[16:1];
   assign t308 = tm160[16:1];
   assign t309 = tm161[16:1];
   assign t310 = tm162[16:1];
   assign t311 = tm163[16:1];
   assign t312 = tm164[16:1];

    addfxp #(17, 1) add20990(.a({{1{a257[15]}}, a257}), .b({{1{a258[15]}}, a258}), .clk(clk), .q(tm149));    // 0
    addfxp #(17, 1) add21005(.a({{1{a259[15]}}, a259}), .b({{1{a260[15]}}, a260}), .clk(clk), .q(tm150));    // 0
    subfxp #(17, 1) sub21020(.a({{1{a257[15]}}, a257}), .b({{1{a258[15]}}, a258}), .clk(clk), .q(tm151));    // 0
    subfxp #(17, 1) sub21035(.a({{1{a259[15]}}, a259}), .b({{1{a260[15]}}, a260}), .clk(clk), .q(tm152));    // 0
    addfxp #(17, 1) add21050(.a({{1{a265[15]}}, a265}), .b({{1{a266[15]}}, a266}), .clk(clk), .q(tm153));    // 0
    addfxp #(17, 1) add21065(.a({{1{a267[15]}}, a267}), .b({{1{a268[15]}}, a268}), .clk(clk), .q(tm154));    // 0
    subfxp #(17, 1) sub21080(.a({{1{a265[15]}}, a265}), .b({{1{a266[15]}}, a266}), .clk(clk), .q(tm155));    // 0
    subfxp #(17, 1) sub21095(.a({{1{a267[15]}}, a267}), .b({{1{a268[15]}}, a268}), .clk(clk), .q(tm156));    // 0
    addfxp #(17, 1) add21102(.a({{1{t297[15]}}, t297}), .b({{1{t301[15]}}, t301}), .clk(clk), .q(tm157));    // 1
    addfxp #(17, 1) add21109(.a({{1{t298[15]}}, t298}), .b({{1{t302[15]}}, t302}), .clk(clk), .q(tm158));    // 1
    subfxp #(17, 1) sub21116(.a({{1{t297[15]}}, t297}), .b({{1{t301[15]}}, t301}), .clk(clk), .q(tm159));    // 1
    subfxp #(17, 1) sub21123(.a({{1{t298[15]}}, t298}), .b({{1{t302[15]}}, t302}), .clk(clk), .q(tm160));    // 1
    addfxp #(17, 1) add21146(.a({{1{t299[15]}}, t299}), .b({{1{t304[15]}}, t304}), .clk(clk), .q(tm161));    // 1
    subfxp #(17, 1) sub21153(.a({{1{t300[15]}}, t300}), .b({{1{t303[15]}}, t303}), .clk(clk), .q(tm162));    // 1
    subfxp #(17, 1) sub21160(.a({{1{t299[15]}}, t299}), .b({{1{t304[15]}}, t304}), .clk(clk), .q(tm163));    // 1
    addfxp #(17, 1) add21167(.a({{1{t300[15]}}, t300}), .b({{1{t303[15]}}, t303}), .clk(clk), .q(tm164));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 37
// Gap: 16
module rc21192(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];

   perm21190 instPerm23987(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet21190(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
);

    parameter width = 32;

    input [3:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3;
    reg [width-1:0] t5_0, t5_1, t5_2, t5_3;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        4'd0: control <= 4'b1111;
        4'd1: control <= 4'b1111;
        4'd2: control <= 4'b1111;
        4'd3: control <= 4'b1111;
        4'd4: control <= 4'b0011;
        4'd5: control <= 4'b0011;
        4'd6: control <= 4'b0011;
        4'd7: control <= 4'b0011;
        4'd8: control <= 4'b1100;
        4'd9: control <= 4'b1100;
        4'd10: control <= 4'b1100;
        4'd11: control <= 4'b1100;
        4'd12: control <= 4'b0000;
        4'd13: control <= 4'b0000;
        4'd14: control <= 4'b0000;
        4'd15: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
    end
    assign t0_0 = x0;
    assign t0_1 = x2;
    assign t0_2 = x1;
    assign t0_3 = x3;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
    assign t2_0 = t1_0;
    assign t2_1 = t1_2;
    assign t2_2 = t1_1;
    assign t2_3 = t1_3;
   always @(posedge clk) begin
         t3_0 <= (control0[3] == 0) ? t2_0 : t2_1;
         t3_1 <= (control0[3] == 0) ? t2_1 : t2_0;
         t3_2 <= (control0[2] == 0) ? t2_2 : t2_3;
         t3_3 <= (control0[2] == 0) ? t2_3 : t2_2;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_2;
    assign t4_2 = t3_1;
    assign t4_3 = t3_3;
   always @(posedge clk) begin
         t5_0 <= (control1[1] == 0) ? t4_0 : t4_1;
         t5_1 <= (control1[1] == 0) ? t4_1 : t4_0;
         t5_2 <= (control1[0] == 0) ? t4_2 : t4_3;
         t5_3 <= (control1[0] == 0) ? t4_3 : t4_2;
   end
    always @(posedge clk) begin
        y0 <= t5_0;
        y1 <= t5_2;
        y2 <= t5_1;
        y3 <= t5_3;
    end
endmodule

// Latency: 37
// Gap: 16
module perm21190(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter width = 32;

   parameter depth = 16;

   parameter addrbits = 4;

   parameter muxbits = 2;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm10;
   assign tm10 = 0;

shiftRegFIFO #(4, 1) shiftFIFO_23992(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_23993(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);

nextReg #(15, 4) nextReg_24004(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_24005(.X(next2), .Y(next3), .clk(clk));
nextReg #(16, 4) nextReg_24008(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_24009(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(15, 1) shiftFIFO_24012(.X(tm10), .Y(tm10_d), .clk(clk));
shiftRegFIFO #(4, 1) shiftFIFO_24015(.X(tm10_d), .Y(tm10_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(4, 4) shiftFIFO_24020(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(5, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm10_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd0 <= 12;
	     {1'd0,  4'd1}: s1rd0 <= 13;
	     {1'd0,  4'd2}: s1rd0 <= 14;
	     {1'd0,  4'd3}: s1rd0 <= 15;
	     {1'd0,  4'd4}: s1rd0 <= 8;
	     {1'd0,  4'd5}: s1rd0 <= 9;
	     {1'd0,  4'd6}: s1rd0 <= 10;
	     {1'd0,  4'd7}: s1rd0 <= 11;
	     {1'd0,  4'd8}: s1rd0 <= 4;
	     {1'd0,  4'd9}: s1rd0 <= 5;
	     {1'd0,  4'd10}: s1rd0 <= 6;
	     {1'd0,  4'd11}: s1rd0 <= 7;
	     {1'd0,  4'd12}: s1rd0 <= 0;
	     {1'd0,  4'd13}: s1rd0 <= 1;
	     {1'd0,  4'd14}: s1rd0 <= 2;
	     {1'd0,  4'd15}: s1rd0 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "distributed"
   always @(posedge clk) begin
      case({tm10_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd1 <= 8;
	     {1'd0,  4'd1}: s1rd1 <= 9;
	     {1'd0,  4'd2}: s1rd1 <= 10;
	     {1'd0,  4'd3}: s1rd1 <= 11;
	     {1'd0,  4'd4}: s1rd1 <= 12;
	     {1'd0,  4'd5}: s1rd1 <= 13;
	     {1'd0,  4'd6}: s1rd1 <= 14;
	     {1'd0,  4'd7}: s1rd1 <= 15;
	     {1'd0,  4'd8}: s1rd1 <= 0;
	     {1'd0,  4'd9}: s1rd1 <= 1;
	     {1'd0,  4'd10}: s1rd1 <= 2;
	     {1'd0,  4'd11}: s1rd1 <= 3;
	     {1'd0,  4'd12}: s1rd1 <= 4;
	     {1'd0,  4'd13}: s1rd1 <= 5;
	     {1'd0,  4'd14}: s1rd1 <= 6;
	     {1'd0,  4'd15}: s1rd1 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "distributed"
   always @(posedge clk) begin
      case({tm10_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd2 <= 4;
	     {1'd0,  4'd1}: s1rd2 <= 5;
	     {1'd0,  4'd2}: s1rd2 <= 6;
	     {1'd0,  4'd3}: s1rd2 <= 7;
	     {1'd0,  4'd4}: s1rd2 <= 0;
	     {1'd0,  4'd5}: s1rd2 <= 1;
	     {1'd0,  4'd6}: s1rd2 <= 2;
	     {1'd0,  4'd7}: s1rd2 <= 3;
	     {1'd0,  4'd8}: s1rd2 <= 12;
	     {1'd0,  4'd9}: s1rd2 <= 13;
	     {1'd0,  4'd10}: s1rd2 <= 14;
	     {1'd0,  4'd11}: s1rd2 <= 15;
	     {1'd0,  4'd12}: s1rd2 <= 8;
	     {1'd0,  4'd13}: s1rd2 <= 9;
	     {1'd0,  4'd14}: s1rd2 <= 10;
	     {1'd0,  4'd15}: s1rd2 <= 11;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "distributed"
   always @(posedge clk) begin
      case({tm10_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd3 <= 0;
	     {1'd0,  4'd1}: s1rd3 <= 1;
	     {1'd0,  4'd2}: s1rd3 <= 2;
	     {1'd0,  4'd3}: s1rd3 <= 3;
	     {1'd0,  4'd4}: s1rd3 <= 4;
	     {1'd0,  4'd5}: s1rd3 <= 5;
	     {1'd0,  4'd6}: s1rd3 <= 6;
	     {1'd0,  4'd7}: s1rd3 <= 7;
	     {1'd0,  4'd8}: s1rd3 <= 8;
	     {1'd0,  4'd9}: s1rd3 <= 9;
	     {1'd0,  4'd10}: s1rd3 <= 10;
	     {1'd0,  4'd11}: s1rd3 <= 11;
	     {1'd0,  4'd12}: s1rd3 <= 12;
	     {1'd0,  4'd13}: s1rd3 <= 13;
	     {1'd0,  4'd14}: s1rd3 <= 14;
	     {1'd0,  4'd15}: s1rd3 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "distributed"
    swNet21190 sw(tm10_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3);

   always @(posedge clk) begin
      case({tm10_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr0 <= 12;
	      {1'd0, 4'd1}: s2wr0 <= 13;
	      {1'd0, 4'd2}: s2wr0 <= 14;
	      {1'd0, 4'd3}: s2wr0 <= 15;
	      {1'd0, 4'd4}: s2wr0 <= 8;
	      {1'd0, 4'd5}: s2wr0 <= 9;
	      {1'd0, 4'd6}: s2wr0 <= 10;
	      {1'd0, 4'd7}: s2wr0 <= 11;
	      {1'd0, 4'd8}: s2wr0 <= 4;
	      {1'd0, 4'd9}: s2wr0 <= 5;
	      {1'd0, 4'd10}: s2wr0 <= 6;
	      {1'd0, 4'd11}: s2wr0 <= 7;
	      {1'd0, 4'd12}: s2wr0 <= 0;
	      {1'd0, 4'd13}: s2wr0 <= 1;
	      {1'd0, 4'd14}: s2wr0 <= 2;
	      {1'd0, 4'd15}: s2wr0 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "distributed"
   always @(posedge clk) begin
      case({tm10_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr1 <= 8;
	      {1'd0, 4'd1}: s2wr1 <= 9;
	      {1'd0, 4'd2}: s2wr1 <= 10;
	      {1'd0, 4'd3}: s2wr1 <= 11;
	      {1'd0, 4'd4}: s2wr1 <= 12;
	      {1'd0, 4'd5}: s2wr1 <= 13;
	      {1'd0, 4'd6}: s2wr1 <= 14;
	      {1'd0, 4'd7}: s2wr1 <= 15;
	      {1'd0, 4'd8}: s2wr1 <= 0;
	      {1'd0, 4'd9}: s2wr1 <= 1;
	      {1'd0, 4'd10}: s2wr1 <= 2;
	      {1'd0, 4'd11}: s2wr1 <= 3;
	      {1'd0, 4'd12}: s2wr1 <= 4;
	      {1'd0, 4'd13}: s2wr1 <= 5;
	      {1'd0, 4'd14}: s2wr1 <= 6;
	      {1'd0, 4'd15}: s2wr1 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "distributed"
   always @(posedge clk) begin
      case({tm10_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr2 <= 4;
	      {1'd0, 4'd1}: s2wr2 <= 5;
	      {1'd0, 4'd2}: s2wr2 <= 6;
	      {1'd0, 4'd3}: s2wr2 <= 7;
	      {1'd0, 4'd4}: s2wr2 <= 0;
	      {1'd0, 4'd5}: s2wr2 <= 1;
	      {1'd0, 4'd6}: s2wr2 <= 2;
	      {1'd0, 4'd7}: s2wr2 <= 3;
	      {1'd0, 4'd8}: s2wr2 <= 12;
	      {1'd0, 4'd9}: s2wr2 <= 13;
	      {1'd0, 4'd10}: s2wr2 <= 14;
	      {1'd0, 4'd11}: s2wr2 <= 15;
	      {1'd0, 4'd12}: s2wr2 <= 8;
	      {1'd0, 4'd13}: s2wr2 <= 9;
	      {1'd0, 4'd14}: s2wr2 <= 10;
	      {1'd0, 4'd15}: s2wr2 <= 11;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "distributed"
   always @(posedge clk) begin
      case({tm10_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr3 <= 0;
	      {1'd0, 4'd1}: s2wr3 <= 1;
	      {1'd0, 4'd2}: s2wr3 <= 2;
	      {1'd0, 4'd3}: s2wr3 <= 3;
	      {1'd0, 4'd4}: s2wr3 <= 4;
	      {1'd0, 4'd5}: s2wr3 <= 5;
	      {1'd0, 4'd6}: s2wr3 <= 6;
	      {1'd0, 4'd7}: s2wr3 <= 7;
	      {1'd0, 4'd8}: s2wr3 <= 8;
	      {1'd0, 4'd9}: s2wr3 <= 9;
	      {1'd0, 4'd10}: s2wr3 <= 10;
	      {1'd0, 4'd11}: s2wr3 <= 11;
	      {1'd0, 4'd12}: s2wr3 <= 12;
	      {1'd0, 4'd13}: s2wr3 <= 13;
	      {1'd0, 4'd14}: s2wr3 <= 14;
	      {1'd0, 4'd15}: s2wr3 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "distributed"
endmodule


// Latency: 8
// Gap: 16
module DirSum_21661(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7);

   output next_out;
   input clk, reset, next;

   reg [3:0] i2;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   always @(posedge clk) begin
      if (reset == 1) begin
         i2 <= 0;
      end
      else begin
         if (next == 1)
            i2 <= 0;
         else if (i2 == 15)
            i2 <= 0;
         else
            i2 <= i2 + 1;
      end
   end

   codeBlock21195 codeBlockIsnt24025(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i2_in(i2),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7));

endmodule

module D18_21533(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hed6c;
      2: out3 <= 16'hdc72;
      3: out3 <= 16'hce87;
      4: out3 <= 16'hc4df;
      5: out3 <= 16'hc04f;
      6: out3 <= 16'hc13b;
      7: out3 <= 16'hc78f;
      8: out3 <= 16'hd2bf;
      9: out3 <= 16'he1d5;
      10: out3 <= 16'hf384;
      11: out3 <= 16'h646;
      12: out3 <= 16'h187e;
      13: out3 <= 16'h289a;
      14: out3 <= 16'h3537;
      15: out3 <= 16'h3d3f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D17_21551(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf384;
      2: out3 <= 16'he782;
      3: out3 <= 16'hdc72;
      4: out3 <= 16'hd2bf;
      5: out3 <= 16'hcac9;
      6: out3 <= 16'hc4df;
      7: out3 <= 16'hc13b;
      8: out3 <= 16'hc000;
      9: out3 <= 16'hc13b;
      10: out3 <= 16'hc4df;
      11: out3 <= 16'hcac9;
      12: out3 <= 16'hd2bf;
      13: out3 <= 16'hdc72;
      14: out3 <= 16'he782;
      15: out3 <= 16'hf384;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D16_21569(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf9ba;
      2: out3 <= 16'hf384;
      3: out3 <= 16'hed6c;
      4: out3 <= 16'he782;
      5: out3 <= 16'he1d5;
      6: out3 <= 16'hdc72;
      7: out3 <= 16'hd766;
      8: out3 <= 16'hd2bf;
      9: out3 <= 16'hce87;
      10: out3 <= 16'hcac9;
      11: out3 <= 16'hc78f;
      12: out3 <= 16'hc4df;
      13: out3 <= 16'hc2c1;
      14: out3 <= 16'hc13b;
      15: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D14_21605(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3d3f;
      2: out3 <= 16'h3537;
      3: out3 <= 16'h289a;
      4: out3 <= 16'h187e;
      5: out3 <= 16'h646;
      6: out3 <= 16'hf384;
      7: out3 <= 16'he1d5;
      8: out3 <= 16'hd2bf;
      9: out3 <= 16'hc78f;
      10: out3 <= 16'hc13b;
      11: out3 <= 16'hc04f;
      12: out3 <= 16'hc4df;
      13: out3 <= 16'hce87;
      14: out3 <= 16'hdc72;
      15: out3 <= 16'hed6c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D13_21623(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ec5;
      2: out3 <= 16'h3b21;
      3: out3 <= 16'h3537;
      4: out3 <= 16'h2d41;
      5: out3 <= 16'h238e;
      6: out3 <= 16'h187e;
      7: out3 <= 16'hc7c;
      8: out3 <= 16'h0;
      9: out3 <= 16'hf384;
      10: out3 <= 16'he782;
      11: out3 <= 16'hdc72;
      12: out3 <= 16'hd2bf;
      13: out3 <= 16'hcac9;
      14: out3 <= 16'hc4df;
      15: out3 <= 16'hc13b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D12_21641(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fb1;
      2: out3 <= 16'h3ec5;
      3: out3 <= 16'h3d3f;
      4: out3 <= 16'h3b21;
      5: out3 <= 16'h3871;
      6: out3 <= 16'h3537;
      7: out3 <= 16'h3179;
      8: out3 <= 16'h2d41;
      9: out3 <= 16'h289a;
      10: out3 <= 16'h238e;
      11: out3 <= 16'h1e2b;
      12: out3 <= 16'h187e;
      13: out3 <= 16'h1294;
      14: out3 <= 16'hc7c;
      15: out3 <= 16'h646;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 8
// Gap: 1
module codeBlock21195(clk, reset, next_in, next_out,
   i2_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [3:0] i2_in;
   reg [3:0] i2;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(7, 1) shiftFIFO_24028(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a225;
   wire signed [15:0] a202;
   wire signed [15:0] a228;
   wire signed [15:0] a206;
   wire signed [15:0] a229;
   wire signed [15:0] a230;
   wire signed [15:0] a233;
   wire signed [15:0] a234;
   wire signed [15:0] a237;
   wire signed [15:0] a238;
   reg signed [15:0] tm251;
   reg signed [15:0] tm255;
   reg signed [15:0] tm267;
   reg signed [15:0] tm271;
   reg signed [15:0] tm283;
   reg signed [15:0] tm287;
   reg signed [15:0] tm299;
   reg signed [15:0] tm306;
   reg signed [15:0] tm252;
   reg signed [15:0] tm256;
   reg signed [15:0] tm268;
   reg signed [15:0] tm272;
   reg signed [15:0] tm284;
   reg signed [15:0] tm288;
   reg signed [15:0] tm300;
   reg signed [15:0] tm307;
   wire signed [15:0] tm13;
   wire signed [15:0] a207;
   wire signed [15:0] tm14;
   wire signed [15:0] a209;
   wire signed [15:0] tm15;
   wire signed [15:0] a213;
   wire signed [15:0] tm16;
   wire signed [15:0] a215;
   wire signed [15:0] tm17;
   wire signed [15:0] a219;
   wire signed [15:0] tm18;
   wire signed [15:0] a221;
   reg signed [15:0] tm253;
   reg signed [15:0] tm257;
   reg signed [15:0] tm269;
   reg signed [15:0] tm273;
   reg signed [15:0] tm285;
   reg signed [15:0] tm289;
   reg signed [15:0] tm301;
   reg signed [15:0] tm308;
   reg signed [15:0] tm49;
   reg signed [15:0] tm50;
   reg signed [15:0] tm53;
   reg signed [15:0] tm54;
   reg signed [15:0] tm57;
   reg signed [15:0] tm58;
   reg signed [15:0] tm254;
   reg signed [15:0] tm258;
   reg signed [15:0] tm270;
   reg signed [15:0] tm274;
   reg signed [15:0] tm286;
   reg signed [15:0] tm290;
   reg signed [15:0] tm302;
   reg signed [15:0] tm309;
   reg signed [15:0] tm303;
   reg signed [15:0] tm310;
   wire signed [15:0] a208;
   wire signed [15:0] a210;
   wire signed [15:0] a211;
   wire signed [15:0] a212;
   wire signed [15:0] a214;
   wire signed [15:0] a216;
   wire signed [15:0] a217;
   wire signed [15:0] a218;
   wire signed [15:0] a220;
   wire signed [15:0] a222;
   wire signed [15:0] a223;
   wire signed [15:0] a224;
   reg signed [15:0] tm304;
   reg signed [15:0] tm311;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   reg signed [15:0] tm305;
   reg signed [15:0] tm312;


   assign a225 = X0;
   assign a202 = a225;
   assign a228 = X1;
   assign a206 = a228;
   assign a229 = X2;
   assign a230 = X3;
   assign a233 = X4;
   assign a234 = X5;
   assign a237 = X6;
   assign a238 = X7;
   assign a207 = tm13;
   assign a209 = tm14;
   assign a213 = tm15;
   assign a215 = tm16;
   assign a219 = tm17;
   assign a221 = tm18;
   assign Y0 = tm305;
   assign Y1 = tm312;

   D18_21533 instD18inst0_21533(.addr(i2[3:0]), .out(tm18), .clk(clk));

   D17_21551 instD17inst0_21551(.addr(i2[3:0]), .out(tm16), .clk(clk));

   D16_21569 instD16inst0_21569(.addr(i2[3:0]), .out(tm14), .clk(clk));

   D14_21605 instD14inst0_21605(.addr(i2[3:0]), .out(tm17), .clk(clk));

   D13_21623 instD13inst0_21623(.addr(i2[3:0]), .out(tm15), .clk(clk));

   D12_21641 instD12inst0_21641(.addr(i2[3:0]), .out(tm13), .clk(clk));

    multfix #(16, 2) m21294(.a(tm49), .b(tm254), .clk(clk), .q_sc(a208), .q_unsc(), .rst(reset));
    multfix #(16, 2) m21316(.a(tm50), .b(tm258), .clk(clk), .q_sc(a210), .q_unsc(), .rst(reset));
    multfix #(16, 2) m21334(.a(tm50), .b(tm254), .clk(clk), .q_sc(a211), .q_unsc(), .rst(reset));
    multfix #(16, 2) m21345(.a(tm49), .b(tm258), .clk(clk), .q_sc(a212), .q_unsc(), .rst(reset));
    multfix #(16, 2) m21374(.a(tm53), .b(tm270), .clk(clk), .q_sc(a214), .q_unsc(), .rst(reset));
    multfix #(16, 2) m21396(.a(tm54), .b(tm274), .clk(clk), .q_sc(a216), .q_unsc(), .rst(reset));
    multfix #(16, 2) m21414(.a(tm54), .b(tm270), .clk(clk), .q_sc(a217), .q_unsc(), .rst(reset));
    multfix #(16, 2) m21425(.a(tm53), .b(tm274), .clk(clk), .q_sc(a218), .q_unsc(), .rst(reset));
    multfix #(16, 2) m21454(.a(tm57), .b(tm286), .clk(clk), .q_sc(a220), .q_unsc(), .rst(reset));
    multfix #(16, 2) m21476(.a(tm58), .b(tm290), .clk(clk), .q_sc(a222), .q_unsc(), .rst(reset));
    multfix #(16, 2) m21494(.a(tm58), .b(tm286), .clk(clk), .q_sc(a223), .q_unsc(), .rst(reset));
    multfix #(16, 2) m21505(.a(tm57), .b(tm290), .clk(clk), .q_sc(a224), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub21323(.a(a208), .b(a210), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add21352(.a(a211), .b(a212), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub21403(.a(a214), .b(a216), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add21432(.a(a217), .b(a218), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub21483(.a(a220), .b(a222), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add21512(.a(a223), .b(a224), .clk(clk), .q(Y7));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm49 <= 0;
         tm254 <= 0;
         tm50 <= 0;
         tm258 <= 0;
         tm50 <= 0;
         tm254 <= 0;
         tm49 <= 0;
         tm258 <= 0;
         tm53 <= 0;
         tm270 <= 0;
         tm54 <= 0;
         tm274 <= 0;
         tm54 <= 0;
         tm270 <= 0;
         tm53 <= 0;
         tm274 <= 0;
         tm57 <= 0;
         tm286 <= 0;
         tm58 <= 0;
         tm290 <= 0;
         tm58 <= 0;
         tm286 <= 0;
         tm57 <= 0;
         tm290 <= 0;
      end
      else begin
         i2 <= i2_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
         tm251 <= a229;
         tm255 <= a230;
         tm267 <= a233;
         tm271 <= a234;
         tm283 <= a237;
         tm287 <= a238;
         tm299 <= a202;
         tm306 <= a206;
         tm252 <= tm251;
         tm256 <= tm255;
         tm268 <= tm267;
         tm272 <= tm271;
         tm284 <= tm283;
         tm288 <= tm287;
         tm300 <= tm299;
         tm307 <= tm306;
         tm253 <= tm252;
         tm257 <= tm256;
         tm269 <= tm268;
         tm273 <= tm272;
         tm285 <= tm284;
         tm289 <= tm288;
         tm301 <= tm300;
         tm308 <= tm307;
         tm49 <= a207;
         tm50 <= a209;
         tm53 <= a213;
         tm54 <= a215;
         tm57 <= a219;
         tm58 <= a221;
         tm254 <= tm253;
         tm258 <= tm257;
         tm270 <= tm269;
         tm274 <= tm273;
         tm286 <= tm285;
         tm290 <= tm289;
         tm302 <= tm301;
         tm309 <= tm308;
         tm303 <= tm302;
         tm310 <= tm309;
         tm304 <= tm303;
         tm311 <= tm310;
         tm305 <= tm304;
         tm312 <= tm311;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock21664(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(2, 1) shiftFIFO_24031(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a137;
   wire signed [15:0] a138;
   wire signed [15:0] a139;
   wire signed [15:0] a140;
   wire signed [15:0] a145;
   wire signed [15:0] a146;
   wire signed [15:0] a147;
   wire signed [15:0] a148;
   wire signed [16:0] tm165;
   wire signed [16:0] tm166;
   wire signed [16:0] tm167;
   wire signed [16:0] tm168;
   wire signed [16:0] tm169;
   wire signed [16:0] tm170;
   wire signed [16:0] tm171;
   wire signed [16:0] tm172;
   wire signed [15:0] t169;
   wire signed [15:0] t170;
   wire signed [15:0] t171;
   wire signed [15:0] t172;
   wire signed [15:0] t173;
   wire signed [15:0] t174;
   wire signed [15:0] t175;
   wire signed [15:0] t176;
   wire signed [16:0] tm173;
   wire signed [16:0] tm174;
   wire signed [16:0] tm175;
   wire signed [16:0] tm176;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm177;
   wire signed [16:0] tm178;
   wire signed [16:0] tm179;
   wire signed [16:0] tm180;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t177;
   wire signed [15:0] t178;
   wire signed [15:0] t179;
   wire signed [15:0] t180;
   wire signed [15:0] t181;
   wire signed [15:0] t182;
   wire signed [15:0] t183;
   wire signed [15:0] t184;


   assign a137 = X0;
   assign a138 = X4;
   assign a139 = X1;
   assign a140 = X5;
   assign a145 = X2;
   assign a146 = X6;
   assign a147 = X3;
   assign a148 = X7;
   assign t169 = tm165[16:1];
   assign t170 = tm166[16:1];
   assign t171 = tm167[16:1];
   assign t172 = tm168[16:1];
   assign t173 = tm169[16:1];
   assign t174 = tm170[16:1];
   assign t175 = tm171[16:1];
   assign t176 = tm172[16:1];
   assign Y0 = t177;
   assign Y1 = t178;
   assign Y4 = t179;
   assign Y5 = t180;
   assign Y2 = t181;
   assign Y3 = t182;
   assign Y6 = t183;
   assign Y7 = t184;
   assign t177 = tm173[16:1];
   assign t178 = tm174[16:1];
   assign t179 = tm175[16:1];
   assign t180 = tm176[16:1];
   assign t181 = tm177[16:1];
   assign t182 = tm178[16:1];
   assign t183 = tm179[16:1];
   assign t184 = tm180[16:1];

    addfxp #(17, 1) add21676(.a({{1{a137[15]}}, a137}), .b({{1{a138[15]}}, a138}), .clk(clk), .q(tm165));    // 0
    addfxp #(17, 1) add21691(.a({{1{a139[15]}}, a139}), .b({{1{a140[15]}}, a140}), .clk(clk), .q(tm166));    // 0
    subfxp #(17, 1) sub21706(.a({{1{a137[15]}}, a137}), .b({{1{a138[15]}}, a138}), .clk(clk), .q(tm167));    // 0
    subfxp #(17, 1) sub21721(.a({{1{a139[15]}}, a139}), .b({{1{a140[15]}}, a140}), .clk(clk), .q(tm168));    // 0
    addfxp #(17, 1) add21736(.a({{1{a145[15]}}, a145}), .b({{1{a146[15]}}, a146}), .clk(clk), .q(tm169));    // 0
    addfxp #(17, 1) add21751(.a({{1{a147[15]}}, a147}), .b({{1{a148[15]}}, a148}), .clk(clk), .q(tm170));    // 0
    subfxp #(17, 1) sub21766(.a({{1{a145[15]}}, a145}), .b({{1{a146[15]}}, a146}), .clk(clk), .q(tm171));    // 0
    subfxp #(17, 1) sub21781(.a({{1{a147[15]}}, a147}), .b({{1{a148[15]}}, a148}), .clk(clk), .q(tm172));    // 0
    addfxp #(17, 1) add21788(.a({{1{t169[15]}}, t169}), .b({{1{t173[15]}}, t173}), .clk(clk), .q(tm173));    // 1
    addfxp #(17, 1) add21795(.a({{1{t170[15]}}, t170}), .b({{1{t174[15]}}, t174}), .clk(clk), .q(tm174));    // 1
    subfxp #(17, 1) sub21802(.a({{1{t169[15]}}, t169}), .b({{1{t173[15]}}, t173}), .clk(clk), .q(tm175));    // 1
    subfxp #(17, 1) sub21809(.a({{1{t170[15]}}, t170}), .b({{1{t174[15]}}, t174}), .clk(clk), .q(tm176));    // 1
    addfxp #(17, 1) add21832(.a({{1{t171[15]}}, t171}), .b({{1{t176[15]}}, t176}), .clk(clk), .q(tm177));    // 1
    subfxp #(17, 1) sub21839(.a({{1{t172[15]}}, t172}), .b({{1{t175[15]}}, t175}), .clk(clk), .q(tm178));    // 1
    subfxp #(17, 1) sub21846(.a({{1{t171[15]}}, t171}), .b({{1{t176[15]}}, t176}), .clk(clk), .q(tm179));    // 1
    addfxp #(17, 1) add21853(.a({{1{t172[15]}}, t172}), .b({{1{t175[15]}}, t175}), .clk(clk), .q(tm180));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 69
// Gap: 32
module rc21878(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];

   perm21876 instPerm24032(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet21876(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
);

    parameter width = 32;

    input [4:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3;
    reg [width-1:0] t5_0, t5_1, t5_2, t5_3;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        5'd0: control <= 4'b1111;
        5'd1: control <= 4'b1111;
        5'd2: control <= 4'b1111;
        5'd3: control <= 4'b1111;
        5'd4: control <= 4'b1111;
        5'd5: control <= 4'b1111;
        5'd6: control <= 4'b1111;
        5'd7: control <= 4'b1111;
        5'd8: control <= 4'b0011;
        5'd9: control <= 4'b0011;
        5'd10: control <= 4'b0011;
        5'd11: control <= 4'b0011;
        5'd12: control <= 4'b0011;
        5'd13: control <= 4'b0011;
        5'd14: control <= 4'b0011;
        5'd15: control <= 4'b0011;
        5'd16: control <= 4'b1100;
        5'd17: control <= 4'b1100;
        5'd18: control <= 4'b1100;
        5'd19: control <= 4'b1100;
        5'd20: control <= 4'b1100;
        5'd21: control <= 4'b1100;
        5'd22: control <= 4'b1100;
        5'd23: control <= 4'b1100;
        5'd24: control <= 4'b0000;
        5'd25: control <= 4'b0000;
        5'd26: control <= 4'b0000;
        5'd27: control <= 4'b0000;
        5'd28: control <= 4'b0000;
        5'd29: control <= 4'b0000;
        5'd30: control <= 4'b0000;
        5'd31: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
    end
    assign t0_0 = x0;
    assign t0_1 = x2;
    assign t0_2 = x1;
    assign t0_3 = x3;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
    assign t2_0 = t1_0;
    assign t2_1 = t1_2;
    assign t2_2 = t1_1;
    assign t2_3 = t1_3;
   always @(posedge clk) begin
         t3_0 <= (control0[3] == 0) ? t2_0 : t2_1;
         t3_1 <= (control0[3] == 0) ? t2_1 : t2_0;
         t3_2 <= (control0[2] == 0) ? t2_2 : t2_3;
         t3_3 <= (control0[2] == 0) ? t2_3 : t2_2;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_2;
    assign t4_2 = t3_1;
    assign t4_3 = t3_3;
   always @(posedge clk) begin
         t5_0 <= (control1[1] == 0) ? t4_0 : t4_1;
         t5_1 <= (control1[1] == 0) ? t4_1 : t4_0;
         t5_2 <= (control1[0] == 0) ? t4_2 : t4_3;
         t5_3 <= (control1[0] == 0) ? t4_3 : t4_2;
   end
    always @(posedge clk) begin
        y0 <= t5_0;
        y1 <= t5_2;
        y2 <= t5_1;
        y3 <= t5_3;
    end
endmodule

// Latency: 69
// Gap: 32
module perm21876(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter width = 32;

   parameter depth = 32;

   parameter addrbits = 5;

   parameter muxbits = 2;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm19;
   assign tm19 = 0;

shiftRegFIFO #(4, 1) shiftFIFO_24037(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_24038(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);

nextReg #(31, 5) nextReg_24049(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_24050(.X(next2), .Y(next3), .clk(clk));
nextReg #(32, 5) nextReg_24053(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_24054(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(31, 1) shiftFIFO_24057(.X(tm19), .Y(tm19_d), .clk(clk));
shiftRegFIFO #(4, 1) shiftFIFO_24060(.X(tm19_d), .Y(tm19_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(4, 5) shiftFIFO_24065(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(5, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm19_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd0 <= 17;
	     {1'd0,  5'd1}: s1rd0 <= 19;
	     {1'd0,  5'd2}: s1rd0 <= 21;
	     {1'd0,  5'd3}: s1rd0 <= 23;
	     {1'd0,  5'd4}: s1rd0 <= 25;
	     {1'd0,  5'd5}: s1rd0 <= 27;
	     {1'd0,  5'd6}: s1rd0 <= 29;
	     {1'd0,  5'd7}: s1rd0 <= 31;
	     {1'd0,  5'd8}: s1rd0 <= 1;
	     {1'd0,  5'd9}: s1rd0 <= 3;
	     {1'd0,  5'd10}: s1rd0 <= 5;
	     {1'd0,  5'd11}: s1rd0 <= 7;
	     {1'd0,  5'd12}: s1rd0 <= 9;
	     {1'd0,  5'd13}: s1rd0 <= 11;
	     {1'd0,  5'd14}: s1rd0 <= 13;
	     {1'd0,  5'd15}: s1rd0 <= 15;
	     {1'd0,  5'd16}: s1rd0 <= 16;
	     {1'd0,  5'd17}: s1rd0 <= 18;
	     {1'd0,  5'd18}: s1rd0 <= 20;
	     {1'd0,  5'd19}: s1rd0 <= 22;
	     {1'd0,  5'd20}: s1rd0 <= 24;
	     {1'd0,  5'd21}: s1rd0 <= 26;
	     {1'd0,  5'd22}: s1rd0 <= 28;
	     {1'd0,  5'd23}: s1rd0 <= 30;
	     {1'd0,  5'd24}: s1rd0 <= 0;
	     {1'd0,  5'd25}: s1rd0 <= 2;
	     {1'd0,  5'd26}: s1rd0 <= 4;
	     {1'd0,  5'd27}: s1rd0 <= 6;
	     {1'd0,  5'd28}: s1rd0 <= 8;
	     {1'd0,  5'd29}: s1rd0 <= 10;
	     {1'd0,  5'd30}: s1rd0 <= 12;
	     {1'd0,  5'd31}: s1rd0 <= 14;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "distributed"
   always @(posedge clk) begin
      case({tm19_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd1 <= 1;
	     {1'd0,  5'd1}: s1rd1 <= 3;
	     {1'd0,  5'd2}: s1rd1 <= 5;
	     {1'd0,  5'd3}: s1rd1 <= 7;
	     {1'd0,  5'd4}: s1rd1 <= 9;
	     {1'd0,  5'd5}: s1rd1 <= 11;
	     {1'd0,  5'd6}: s1rd1 <= 13;
	     {1'd0,  5'd7}: s1rd1 <= 15;
	     {1'd0,  5'd8}: s1rd1 <= 17;
	     {1'd0,  5'd9}: s1rd1 <= 19;
	     {1'd0,  5'd10}: s1rd1 <= 21;
	     {1'd0,  5'd11}: s1rd1 <= 23;
	     {1'd0,  5'd12}: s1rd1 <= 25;
	     {1'd0,  5'd13}: s1rd1 <= 27;
	     {1'd0,  5'd14}: s1rd1 <= 29;
	     {1'd0,  5'd15}: s1rd1 <= 31;
	     {1'd0,  5'd16}: s1rd1 <= 0;
	     {1'd0,  5'd17}: s1rd1 <= 2;
	     {1'd0,  5'd18}: s1rd1 <= 4;
	     {1'd0,  5'd19}: s1rd1 <= 6;
	     {1'd0,  5'd20}: s1rd1 <= 8;
	     {1'd0,  5'd21}: s1rd1 <= 10;
	     {1'd0,  5'd22}: s1rd1 <= 12;
	     {1'd0,  5'd23}: s1rd1 <= 14;
	     {1'd0,  5'd24}: s1rd1 <= 16;
	     {1'd0,  5'd25}: s1rd1 <= 18;
	     {1'd0,  5'd26}: s1rd1 <= 20;
	     {1'd0,  5'd27}: s1rd1 <= 22;
	     {1'd0,  5'd28}: s1rd1 <= 24;
	     {1'd0,  5'd29}: s1rd1 <= 26;
	     {1'd0,  5'd30}: s1rd1 <= 28;
	     {1'd0,  5'd31}: s1rd1 <= 30;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "distributed"
   always @(posedge clk) begin
      case({tm19_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd2 <= 16;
	     {1'd0,  5'd1}: s1rd2 <= 18;
	     {1'd0,  5'd2}: s1rd2 <= 20;
	     {1'd0,  5'd3}: s1rd2 <= 22;
	     {1'd0,  5'd4}: s1rd2 <= 24;
	     {1'd0,  5'd5}: s1rd2 <= 26;
	     {1'd0,  5'd6}: s1rd2 <= 28;
	     {1'd0,  5'd7}: s1rd2 <= 30;
	     {1'd0,  5'd8}: s1rd2 <= 0;
	     {1'd0,  5'd9}: s1rd2 <= 2;
	     {1'd0,  5'd10}: s1rd2 <= 4;
	     {1'd0,  5'd11}: s1rd2 <= 6;
	     {1'd0,  5'd12}: s1rd2 <= 8;
	     {1'd0,  5'd13}: s1rd2 <= 10;
	     {1'd0,  5'd14}: s1rd2 <= 12;
	     {1'd0,  5'd15}: s1rd2 <= 14;
	     {1'd0,  5'd16}: s1rd2 <= 17;
	     {1'd0,  5'd17}: s1rd2 <= 19;
	     {1'd0,  5'd18}: s1rd2 <= 21;
	     {1'd0,  5'd19}: s1rd2 <= 23;
	     {1'd0,  5'd20}: s1rd2 <= 25;
	     {1'd0,  5'd21}: s1rd2 <= 27;
	     {1'd0,  5'd22}: s1rd2 <= 29;
	     {1'd0,  5'd23}: s1rd2 <= 31;
	     {1'd0,  5'd24}: s1rd2 <= 1;
	     {1'd0,  5'd25}: s1rd2 <= 3;
	     {1'd0,  5'd26}: s1rd2 <= 5;
	     {1'd0,  5'd27}: s1rd2 <= 7;
	     {1'd0,  5'd28}: s1rd2 <= 9;
	     {1'd0,  5'd29}: s1rd2 <= 11;
	     {1'd0,  5'd30}: s1rd2 <= 13;
	     {1'd0,  5'd31}: s1rd2 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "distributed"
   always @(posedge clk) begin
      case({tm19_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd3 <= 0;
	     {1'd0,  5'd1}: s1rd3 <= 2;
	     {1'd0,  5'd2}: s1rd3 <= 4;
	     {1'd0,  5'd3}: s1rd3 <= 6;
	     {1'd0,  5'd4}: s1rd3 <= 8;
	     {1'd0,  5'd5}: s1rd3 <= 10;
	     {1'd0,  5'd6}: s1rd3 <= 12;
	     {1'd0,  5'd7}: s1rd3 <= 14;
	     {1'd0,  5'd8}: s1rd3 <= 16;
	     {1'd0,  5'd9}: s1rd3 <= 18;
	     {1'd0,  5'd10}: s1rd3 <= 20;
	     {1'd0,  5'd11}: s1rd3 <= 22;
	     {1'd0,  5'd12}: s1rd3 <= 24;
	     {1'd0,  5'd13}: s1rd3 <= 26;
	     {1'd0,  5'd14}: s1rd3 <= 28;
	     {1'd0,  5'd15}: s1rd3 <= 30;
	     {1'd0,  5'd16}: s1rd3 <= 1;
	     {1'd0,  5'd17}: s1rd3 <= 3;
	     {1'd0,  5'd18}: s1rd3 <= 5;
	     {1'd0,  5'd19}: s1rd3 <= 7;
	     {1'd0,  5'd20}: s1rd3 <= 9;
	     {1'd0,  5'd21}: s1rd3 <= 11;
	     {1'd0,  5'd22}: s1rd3 <= 13;
	     {1'd0,  5'd23}: s1rd3 <= 15;
	     {1'd0,  5'd24}: s1rd3 <= 17;
	     {1'd0,  5'd25}: s1rd3 <= 19;
	     {1'd0,  5'd26}: s1rd3 <= 21;
	     {1'd0,  5'd27}: s1rd3 <= 23;
	     {1'd0,  5'd28}: s1rd3 <= 25;
	     {1'd0,  5'd29}: s1rd3 <= 27;
	     {1'd0,  5'd30}: s1rd3 <= 29;
	     {1'd0,  5'd31}: s1rd3 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "distributed"
    swNet21876 sw(tm19_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3);

   always @(posedge clk) begin
      case({tm19_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr0 <= 24;
	      {1'd0, 5'd1}: s2wr0 <= 25;
	      {1'd0, 5'd2}: s2wr0 <= 26;
	      {1'd0, 5'd3}: s2wr0 <= 27;
	      {1'd0, 5'd4}: s2wr0 <= 28;
	      {1'd0, 5'd5}: s2wr0 <= 29;
	      {1'd0, 5'd6}: s2wr0 <= 30;
	      {1'd0, 5'd7}: s2wr0 <= 31;
	      {1'd0, 5'd8}: s2wr0 <= 16;
	      {1'd0, 5'd9}: s2wr0 <= 17;
	      {1'd0, 5'd10}: s2wr0 <= 18;
	      {1'd0, 5'd11}: s2wr0 <= 19;
	      {1'd0, 5'd12}: s2wr0 <= 20;
	      {1'd0, 5'd13}: s2wr0 <= 21;
	      {1'd0, 5'd14}: s2wr0 <= 22;
	      {1'd0, 5'd15}: s2wr0 <= 23;
	      {1'd0, 5'd16}: s2wr0 <= 8;
	      {1'd0, 5'd17}: s2wr0 <= 9;
	      {1'd0, 5'd18}: s2wr0 <= 10;
	      {1'd0, 5'd19}: s2wr0 <= 11;
	      {1'd0, 5'd20}: s2wr0 <= 12;
	      {1'd0, 5'd21}: s2wr0 <= 13;
	      {1'd0, 5'd22}: s2wr0 <= 14;
	      {1'd0, 5'd23}: s2wr0 <= 15;
	      {1'd0, 5'd24}: s2wr0 <= 0;
	      {1'd0, 5'd25}: s2wr0 <= 1;
	      {1'd0, 5'd26}: s2wr0 <= 2;
	      {1'd0, 5'd27}: s2wr0 <= 3;
	      {1'd0, 5'd28}: s2wr0 <= 4;
	      {1'd0, 5'd29}: s2wr0 <= 5;
	      {1'd0, 5'd30}: s2wr0 <= 6;
	      {1'd0, 5'd31}: s2wr0 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "distributed"
   always @(posedge clk) begin
      case({tm19_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr1 <= 16;
	      {1'd0, 5'd1}: s2wr1 <= 17;
	      {1'd0, 5'd2}: s2wr1 <= 18;
	      {1'd0, 5'd3}: s2wr1 <= 19;
	      {1'd0, 5'd4}: s2wr1 <= 20;
	      {1'd0, 5'd5}: s2wr1 <= 21;
	      {1'd0, 5'd6}: s2wr1 <= 22;
	      {1'd0, 5'd7}: s2wr1 <= 23;
	      {1'd0, 5'd8}: s2wr1 <= 24;
	      {1'd0, 5'd9}: s2wr1 <= 25;
	      {1'd0, 5'd10}: s2wr1 <= 26;
	      {1'd0, 5'd11}: s2wr1 <= 27;
	      {1'd0, 5'd12}: s2wr1 <= 28;
	      {1'd0, 5'd13}: s2wr1 <= 29;
	      {1'd0, 5'd14}: s2wr1 <= 30;
	      {1'd0, 5'd15}: s2wr1 <= 31;
	      {1'd0, 5'd16}: s2wr1 <= 0;
	      {1'd0, 5'd17}: s2wr1 <= 1;
	      {1'd0, 5'd18}: s2wr1 <= 2;
	      {1'd0, 5'd19}: s2wr1 <= 3;
	      {1'd0, 5'd20}: s2wr1 <= 4;
	      {1'd0, 5'd21}: s2wr1 <= 5;
	      {1'd0, 5'd22}: s2wr1 <= 6;
	      {1'd0, 5'd23}: s2wr1 <= 7;
	      {1'd0, 5'd24}: s2wr1 <= 8;
	      {1'd0, 5'd25}: s2wr1 <= 9;
	      {1'd0, 5'd26}: s2wr1 <= 10;
	      {1'd0, 5'd27}: s2wr1 <= 11;
	      {1'd0, 5'd28}: s2wr1 <= 12;
	      {1'd0, 5'd29}: s2wr1 <= 13;
	      {1'd0, 5'd30}: s2wr1 <= 14;
	      {1'd0, 5'd31}: s2wr1 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "distributed"
   always @(posedge clk) begin
      case({tm19_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr2 <= 8;
	      {1'd0, 5'd1}: s2wr2 <= 9;
	      {1'd0, 5'd2}: s2wr2 <= 10;
	      {1'd0, 5'd3}: s2wr2 <= 11;
	      {1'd0, 5'd4}: s2wr2 <= 12;
	      {1'd0, 5'd5}: s2wr2 <= 13;
	      {1'd0, 5'd6}: s2wr2 <= 14;
	      {1'd0, 5'd7}: s2wr2 <= 15;
	      {1'd0, 5'd8}: s2wr2 <= 0;
	      {1'd0, 5'd9}: s2wr2 <= 1;
	      {1'd0, 5'd10}: s2wr2 <= 2;
	      {1'd0, 5'd11}: s2wr2 <= 3;
	      {1'd0, 5'd12}: s2wr2 <= 4;
	      {1'd0, 5'd13}: s2wr2 <= 5;
	      {1'd0, 5'd14}: s2wr2 <= 6;
	      {1'd0, 5'd15}: s2wr2 <= 7;
	      {1'd0, 5'd16}: s2wr2 <= 24;
	      {1'd0, 5'd17}: s2wr2 <= 25;
	      {1'd0, 5'd18}: s2wr2 <= 26;
	      {1'd0, 5'd19}: s2wr2 <= 27;
	      {1'd0, 5'd20}: s2wr2 <= 28;
	      {1'd0, 5'd21}: s2wr2 <= 29;
	      {1'd0, 5'd22}: s2wr2 <= 30;
	      {1'd0, 5'd23}: s2wr2 <= 31;
	      {1'd0, 5'd24}: s2wr2 <= 16;
	      {1'd0, 5'd25}: s2wr2 <= 17;
	      {1'd0, 5'd26}: s2wr2 <= 18;
	      {1'd0, 5'd27}: s2wr2 <= 19;
	      {1'd0, 5'd28}: s2wr2 <= 20;
	      {1'd0, 5'd29}: s2wr2 <= 21;
	      {1'd0, 5'd30}: s2wr2 <= 22;
	      {1'd0, 5'd31}: s2wr2 <= 23;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "distributed"
   always @(posedge clk) begin
      case({tm19_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr3 <= 0;
	      {1'd0, 5'd1}: s2wr3 <= 1;
	      {1'd0, 5'd2}: s2wr3 <= 2;
	      {1'd0, 5'd3}: s2wr3 <= 3;
	      {1'd0, 5'd4}: s2wr3 <= 4;
	      {1'd0, 5'd5}: s2wr3 <= 5;
	      {1'd0, 5'd6}: s2wr3 <= 6;
	      {1'd0, 5'd7}: s2wr3 <= 7;
	      {1'd0, 5'd8}: s2wr3 <= 8;
	      {1'd0, 5'd9}: s2wr3 <= 9;
	      {1'd0, 5'd10}: s2wr3 <= 10;
	      {1'd0, 5'd11}: s2wr3 <= 11;
	      {1'd0, 5'd12}: s2wr3 <= 12;
	      {1'd0, 5'd13}: s2wr3 <= 13;
	      {1'd0, 5'd14}: s2wr3 <= 14;
	      {1'd0, 5'd15}: s2wr3 <= 15;
	      {1'd0, 5'd16}: s2wr3 <= 16;
	      {1'd0, 5'd17}: s2wr3 <= 17;
	      {1'd0, 5'd18}: s2wr3 <= 18;
	      {1'd0, 5'd19}: s2wr3 <= 19;
	      {1'd0, 5'd20}: s2wr3 <= 20;
	      {1'd0, 5'd21}: s2wr3 <= 21;
	      {1'd0, 5'd22}: s2wr3 <= 22;
	      {1'd0, 5'd23}: s2wr3 <= 23;
	      {1'd0, 5'd24}: s2wr3 <= 24;
	      {1'd0, 5'd25}: s2wr3 <= 25;
	      {1'd0, 5'd26}: s2wr3 <= 26;
	      {1'd0, 5'd27}: s2wr3 <= 27;
	      {1'd0, 5'd28}: s2wr3 <= 28;
	      {1'd0, 5'd29}: s2wr3 <= 29;
	      {1'd0, 5'd30}: s2wr3 <= 30;
	      {1'd0, 5'd31}: s2wr3 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "distributed"
endmodule


// Latency: 8
// Gap: 32
module DirSum_22474(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7);

   output next_out;
   input clk, reset, next;

   reg [4:0] i1;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   always @(posedge clk) begin
      if (reset == 1) begin
         i1 <= 0;
      end
      else begin
         if (next == 1)
            i1 <= 0;
         else if (i1 == 31)
            i1 <= 0;
         else
            i1 <= i1 + 1;
      end
   end

   codeBlock21880 codeBlockIsnt24070(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7));

endmodule

module D8_22268(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfcdc;
      1: out3 <= 16'hf69c;
      2: out3 <= 16'hf073;
      3: out3 <= 16'hea70;
      4: out3 <= 16'he4a3;
      5: out3 <= 16'hdf19;
      6: out3 <= 16'hd9e0;
      7: out3 <= 16'hd505;
      8: out3 <= 16'hd094;
      9: out3 <= 16'hcc98;
      10: out3 <= 16'hc91b;
      11: out3 <= 16'hc625;
      12: out3 <= 16'hc3be;
      13: out3 <= 16'hc1eb;
      14: out3 <= 16'hc0b1;
      15: out3 <= 16'hc014;
      16: out3 <= 16'hc014;
      17: out3 <= 16'hc0b1;
      18: out3 <= 16'hc1eb;
      19: out3 <= 16'hc3be;
      20: out3 <= 16'hc625;
      21: out3 <= 16'hc91b;
      22: out3 <= 16'hcc98;
      23: out3 <= 16'hd094;
      24: out3 <= 16'hd505;
      25: out3 <= 16'hd9e0;
      26: out3 <= 16'hdf19;
      27: out3 <= 16'he4a3;
      28: out3 <= 16'hea70;
      29: out3 <= 16'hf073;
      30: out3 <= 16'hf69c;
      31: out3 <= 16'hfcdc;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D6_22336(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf9ba;
      2: out3 <= 16'hf384;
      3: out3 <= 16'hed6c;
      4: out3 <= 16'he782;
      5: out3 <= 16'he1d5;
      6: out3 <= 16'hdc72;
      7: out3 <= 16'hd766;
      8: out3 <= 16'hd2bf;
      9: out3 <= 16'hce87;
      10: out3 <= 16'hcac9;
      11: out3 <= 16'hc78f;
      12: out3 <= 16'hc4df;
      13: out3 <= 16'hc2c1;
      14: out3 <= 16'hc13b;
      15: out3 <= 16'hc04f;
      16: out3 <= 16'hc000;
      17: out3 <= 16'hc04f;
      18: out3 <= 16'hc13b;
      19: out3 <= 16'hc2c1;
      20: out3 <= 16'hc4df;
      21: out3 <= 16'hc78f;
      22: out3 <= 16'hcac9;
      23: out3 <= 16'hce87;
      24: out3 <= 16'hd2bf;
      25: out3 <= 16'hd766;
      26: out3 <= 16'hdc72;
      27: out3 <= 16'he1d5;
      28: out3 <= 16'he782;
      29: out3 <= 16'hed6c;
      30: out3 <= 16'hf384;
      31: out3 <= 16'hf9ba;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D2_22438(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fb1;
      2: out3 <= 16'h3ec5;
      3: out3 <= 16'h3d3f;
      4: out3 <= 16'h3b21;
      5: out3 <= 16'h3871;
      6: out3 <= 16'h3537;
      7: out3 <= 16'h3179;
      8: out3 <= 16'h2d41;
      9: out3 <= 16'h289a;
      10: out3 <= 16'h238e;
      11: out3 <= 16'h1e2b;
      12: out3 <= 16'h187e;
      13: out3 <= 16'h1294;
      14: out3 <= 16'hc7c;
      15: out3 <= 16'h646;
      16: out3 <= 16'h0;
      17: out3 <= 16'hf9ba;
      18: out3 <= 16'hf384;
      19: out3 <= 16'hed6c;
      20: out3 <= 16'he782;
      21: out3 <= 16'he1d5;
      22: out3 <= 16'hdc72;
      23: out3 <= 16'hd766;
      24: out3 <= 16'hd2bf;
      25: out3 <= 16'hce87;
      26: out3 <= 16'hcac9;
      27: out3 <= 16'hc78f;
      28: out3 <= 16'hc4df;
      29: out3 <= 16'hc2c1;
      30: out3 <= 16'hc13b;
      31: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D4_22472(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fec;
      1: out3 <= 16'h3f4f;
      2: out3 <= 16'h3e15;
      3: out3 <= 16'h3c42;
      4: out3 <= 16'h39db;
      5: out3 <= 16'h36e5;
      6: out3 <= 16'h3368;
      7: out3 <= 16'h2f6c;
      8: out3 <= 16'h2afb;
      9: out3 <= 16'h2620;
      10: out3 <= 16'h20e7;
      11: out3 <= 16'h1b5d;
      12: out3 <= 16'h1590;
      13: out3 <= 16'hf8d;
      14: out3 <= 16'h964;
      15: out3 <= 16'h324;
      16: out3 <= 16'hfcdc;
      17: out3 <= 16'hf69c;
      18: out3 <= 16'hf073;
      19: out3 <= 16'hea70;
      20: out3 <= 16'he4a3;
      21: out3 <= 16'hdf19;
      22: out3 <= 16'hd9e0;
      23: out3 <= 16'hd505;
      24: out3 <= 16'hd094;
      25: out3 <= 16'hcc98;
      26: out3 <= 16'hc91b;
      27: out3 <= 16'hc625;
      28: out3 <= 16'hc3be;
      29: out3 <= 16'hc1eb;
      30: out3 <= 16'hc0b1;
      31: out3 <= 16'hc014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 8
// Gap: 1
module codeBlock21880(clk, reset, next_in, next_out,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [4:0] i1_in;
   reg [4:0] i1;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(7, 1) shiftFIFO_24073(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a105;
   wire signed [15:0] a82;
   wire signed [15:0] a108;
   wire signed [15:0] a86;
   wire signed [15:0] a109;
   wire signed [15:0] a110;
   wire signed [15:0] a113;
   wire signed [15:0] a94;
   wire signed [15:0] a116;
   wire signed [15:0] a98;
   wire signed [15:0] a117;
   wire signed [15:0] a118;
   reg signed [15:0] tm313;
   reg signed [15:0] tm317;
   reg signed [15:0] tm329;
   reg signed [15:0] tm333;
   reg signed [15:0] tm345;
   reg signed [15:0] tm352;
   reg signed [15:0] tm359;
   reg signed [15:0] tm366;
   reg signed [15:0] tm314;
   reg signed [15:0] tm318;
   reg signed [15:0] tm330;
   reg signed [15:0] tm334;
   reg signed [15:0] tm346;
   reg signed [15:0] tm353;
   reg signed [15:0] tm360;
   reg signed [15:0] tm367;
   wire signed [15:0] tm22;
   wire signed [15:0] a87;
   wire signed [15:0] tm23;
   wire signed [15:0] a89;
   wire signed [15:0] tm26;
   wire signed [15:0] a99;
   wire signed [15:0] tm27;
   wire signed [15:0] a101;
   reg signed [15:0] tm315;
   reg signed [15:0] tm319;
   reg signed [15:0] tm331;
   reg signed [15:0] tm335;
   reg signed [15:0] tm347;
   reg signed [15:0] tm354;
   reg signed [15:0] tm361;
   reg signed [15:0] tm368;
   reg signed [15:0] tm65;
   reg signed [15:0] tm66;
   reg signed [15:0] tm73;
   reg signed [15:0] tm74;
   reg signed [15:0] tm316;
   reg signed [15:0] tm320;
   reg signed [15:0] tm332;
   reg signed [15:0] tm336;
   reg signed [15:0] tm348;
   reg signed [15:0] tm355;
   reg signed [15:0] tm362;
   reg signed [15:0] tm369;
   reg signed [15:0] tm349;
   reg signed [15:0] tm356;
   reg signed [15:0] tm363;
   reg signed [15:0] tm370;
   wire signed [15:0] a88;
   wire signed [15:0] a90;
   wire signed [15:0] a91;
   wire signed [15:0] a92;
   wire signed [15:0] a100;
   wire signed [15:0] a102;
   wire signed [15:0] a103;
   wire signed [15:0] a104;
   reg signed [15:0] tm350;
   reg signed [15:0] tm357;
   reg signed [15:0] tm364;
   reg signed [15:0] tm371;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   reg signed [15:0] tm351;
   reg signed [15:0] tm358;
   reg signed [15:0] tm365;
   reg signed [15:0] tm372;


   assign a105 = X0;
   assign a82 = a105;
   assign a108 = X1;
   assign a86 = a108;
   assign a109 = X2;
   assign a110 = X3;
   assign a113 = X4;
   assign a94 = a113;
   assign a116 = X5;
   assign a98 = a116;
   assign a117 = X6;
   assign a118 = X7;
   assign a87 = tm22;
   assign a89 = tm23;
   assign a99 = tm26;
   assign a101 = tm27;
   assign Y0 = tm351;
   assign Y1 = tm358;
   assign Y4 = tm365;
   assign Y5 = tm372;

   D8_22268 instD8inst0_22268(.addr(i1[4:0]), .out(tm27), .clk(clk));

   D6_22336 instD6inst0_22336(.addr(i1[4:0]), .out(tm23), .clk(clk));

   D2_22438 instD2inst0_22438(.addr(i1[4:0]), .out(tm22), .clk(clk));

   D4_22472 instD4inst0_22472(.addr(i1[4:0]), .out(tm26), .clk(clk));

    multfix #(16, 2) m21979(.a(tm65), .b(tm316), .clk(clk), .q_sc(a88), .q_unsc(), .rst(reset));
    multfix #(16, 2) m22001(.a(tm66), .b(tm320), .clk(clk), .q_sc(a90), .q_unsc(), .rst(reset));
    multfix #(16, 2) m22019(.a(tm66), .b(tm316), .clk(clk), .q_sc(a91), .q_unsc(), .rst(reset));
    multfix #(16, 2) m22030(.a(tm65), .b(tm320), .clk(clk), .q_sc(a92), .q_unsc(), .rst(reset));
    multfix #(16, 2) m22139(.a(tm73), .b(tm332), .clk(clk), .q_sc(a100), .q_unsc(), .rst(reset));
    multfix #(16, 2) m22161(.a(tm74), .b(tm336), .clk(clk), .q_sc(a102), .q_unsc(), .rst(reset));
    multfix #(16, 2) m22179(.a(tm74), .b(tm332), .clk(clk), .q_sc(a103), .q_unsc(), .rst(reset));
    multfix #(16, 2) m22190(.a(tm73), .b(tm336), .clk(clk), .q_sc(a104), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub22008(.a(a88), .b(a90), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add22037(.a(a91), .b(a92), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub22168(.a(a100), .b(a102), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add22197(.a(a103), .b(a104), .clk(clk), .q(Y7));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm65 <= 0;
         tm316 <= 0;
         tm66 <= 0;
         tm320 <= 0;
         tm66 <= 0;
         tm316 <= 0;
         tm65 <= 0;
         tm320 <= 0;
         tm73 <= 0;
         tm332 <= 0;
         tm74 <= 0;
         tm336 <= 0;
         tm74 <= 0;
         tm332 <= 0;
         tm73 <= 0;
         tm336 <= 0;
      end
      else begin
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
         tm313 <= a109;
         tm317 <= a110;
         tm329 <= a117;
         tm333 <= a118;
         tm345 <= a82;
         tm352 <= a86;
         tm359 <= a94;
         tm366 <= a98;
         tm314 <= tm313;
         tm318 <= tm317;
         tm330 <= tm329;
         tm334 <= tm333;
         tm346 <= tm345;
         tm353 <= tm352;
         tm360 <= tm359;
         tm367 <= tm366;
         tm315 <= tm314;
         tm319 <= tm318;
         tm331 <= tm330;
         tm335 <= tm334;
         tm347 <= tm346;
         tm354 <= tm353;
         tm361 <= tm360;
         tm368 <= tm367;
         tm65 <= a87;
         tm66 <= a89;
         tm73 <= a99;
         tm74 <= a101;
         tm316 <= tm315;
         tm320 <= tm319;
         tm332 <= tm331;
         tm336 <= tm335;
         tm348 <= tm347;
         tm355 <= tm354;
         tm362 <= tm361;
         tm369 <= tm368;
         tm349 <= tm348;
         tm356 <= tm355;
         tm363 <= tm362;
         tm370 <= tm369;
         tm350 <= tm349;
         tm357 <= tm356;
         tm364 <= tm363;
         tm371 <= tm370;
         tm351 <= tm350;
         tm358 <= tm357;
         tm365 <= tm364;
         tm372 <= tm371;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock22476(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(1, 1) shiftFIFO_24076(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a17;
   wire signed [15:0] a18;
   wire signed [15:0] a19;
   wire signed [15:0] a20;
   wire signed [15:0] a25;
   wire signed [15:0] a26;
   wire signed [15:0] a27;
   wire signed [15:0] a28;
   wire signed [16:0] tm181;
   wire signed [16:0] tm182;
   wire signed [16:0] tm183;
   wire signed [16:0] tm184;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [16:0] tm185;
   wire signed [16:0] tm186;
   wire signed [16:0] tm187;
   wire signed [16:0] tm188;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t49;
   wire signed [15:0] t50;
   wire signed [15:0] t51;
   wire signed [15:0] t52;
   wire signed [15:0] t53;
   wire signed [15:0] t54;
   wire signed [15:0] t55;
   wire signed [15:0] t56;


   assign a17 = X0;
   assign a18 = X2;
   assign a19 = X1;
   assign a20 = X3;
   assign a25 = X4;
   assign a26 = X6;
   assign a27 = X5;
   assign a28 = X7;
   assign Y0 = t49;
   assign Y1 = t50;
   assign Y2 = t51;
   assign Y3 = t52;
   assign Y4 = t53;
   assign Y5 = t54;
   assign Y6 = t55;
   assign Y7 = t56;
   assign t49 = tm181[16:1];
   assign t50 = tm182[16:1];
   assign t51 = tm183[16:1];
   assign t52 = tm184[16:1];
   assign t53 = tm185[16:1];
   assign t54 = tm186[16:1];
   assign t55 = tm187[16:1];
   assign t56 = tm188[16:1];

    addfxp #(17, 1) add22488(.a({{1{a17[15]}}, a17}), .b({{1{a18[15]}}, a18}), .clk(clk), .q(tm181));    // 0
    addfxp #(17, 1) add22503(.a({{1{a19[15]}}, a19}), .b({{1{a20[15]}}, a20}), .clk(clk), .q(tm182));    // 0
    subfxp #(17, 1) sub22518(.a({{1{a17[15]}}, a17}), .b({{1{a18[15]}}, a18}), .clk(clk), .q(tm183));    // 0
    subfxp #(17, 1) sub22533(.a({{1{a19[15]}}, a19}), .b({{1{a20[15]}}, a20}), .clk(clk), .q(tm184));    // 0
    addfxp #(17, 1) add22564(.a({{1{a25[15]}}, a25}), .b({{1{a26[15]}}, a26}), .clk(clk), .q(tm185));    // 0
    addfxp #(17, 1) add22579(.a({{1{a27[15]}}, a27}), .b({{1{a28[15]}}, a28}), .clk(clk), .q(tm186));    // 0
    subfxp #(17, 1) sub22594(.a({{1{a25[15]}}, a25}), .b({{1{a26[15]}}, a26}), .clk(clk), .q(tm187));    // 0
    subfxp #(17, 1) sub22609(.a({{1{a27[15]}}, a27}), .b({{1{a28[15]}}, a28}), .clk(clk), .q(tm188));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 69
// Gap: 32
module rc22634(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];

   perm22632 instPerm24077(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet22632(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
);

    parameter width = 32;

    input [4:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3;
    reg [width-1:0] t5_0, t5_1, t5_2, t5_3;

    reg [1:0] control;

    always @(posedge clk) begin
      case(ct)
        5'd0: control <= 2'b10;
        5'd1: control <= 2'b10;
        5'd2: control <= 2'b10;
        5'd3: control <= 2'b10;
        5'd4: control <= 2'b10;
        5'd5: control <= 2'b10;
        5'd6: control <= 2'b10;
        5'd7: control <= 2'b10;
        5'd8: control <= 2'b10;
        5'd9: control <= 2'b10;
        5'd10: control <= 2'b10;
        5'd11: control <= 2'b10;
        5'd12: control <= 2'b10;
        5'd13: control <= 2'b10;
        5'd14: control <= 2'b10;
        5'd15: control <= 2'b10;
        5'd16: control <= 2'b01;
        5'd17: control <= 2'b01;
        5'd18: control <= 2'b01;
        5'd19: control <= 2'b01;
        5'd20: control <= 2'b01;
        5'd21: control <= 2'b01;
        5'd22: control <= 2'b01;
        5'd23: control <= 2'b01;
        5'd24: control <= 2'b01;
        5'd25: control <= 2'b01;
        5'd26: control <= 2'b01;
        5'd27: control <= 2'b01;
        5'd28: control <= 2'b01;
        5'd29: control <= 2'b01;
        5'd30: control <= 2'b01;
        5'd31: control <= 2'b01;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [1:0] control0;
   reg [1:0] control1;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
    end
    assign t0_0 = x0;
    assign t0_1 = x2;
    assign t0_2 = x1;
    assign t0_3 = x3;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_3;
     assign t1_3 = t0_2;
    assign t2_0 = t1_0;
    assign t2_1 = t1_2;
    assign t2_2 = t1_1;
    assign t2_3 = t1_3;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_3;
         t3_3 <= t2_2;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_2;
    assign t4_2 = t3_1;
    assign t4_3 = t3_3;
   always @(posedge clk) begin
         t5_0 <= (control1[1] == 0) ? t4_0 : t4_1;
         t5_1 <= (control1[1] == 0) ? t4_1 : t4_0;
         t5_2 <= (control1[0] == 0) ? t4_2 : t4_3;
         t5_3 <= (control1[0] == 0) ? t4_3 : t4_2;
   end
    always @(posedge clk) begin
        y0 <= t5_0;
        y1 <= t5_2;
        y2 <= t5_1;
        y3 <= t5_3;
    end
endmodule

// Latency: 69
// Gap: 32
module perm22632(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter width = 32;

   parameter depth = 32;

   parameter addrbits = 5;

   parameter muxbits = 2;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm28;
   assign tm28 = 0;

shiftRegFIFO #(4, 1) shiftFIFO_24082(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_24083(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);

nextReg #(31, 5) nextReg_24094(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_24095(.X(next2), .Y(next3), .clk(clk));
nextReg #(32, 5) nextReg_24098(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_24099(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(31, 1) shiftFIFO_24102(.X(tm28), .Y(tm28_d), .clk(clk));
shiftRegFIFO #(4, 1) shiftFIFO_24105(.X(tm28_d), .Y(tm28_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(4, 5) shiftFIFO_24110(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(5, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm28_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd0 <= 1;
	     {1'd0,  5'd1}: s1rd0 <= 3;
	     {1'd0,  5'd2}: s1rd0 <= 5;
	     {1'd0,  5'd3}: s1rd0 <= 7;
	     {1'd0,  5'd4}: s1rd0 <= 9;
	     {1'd0,  5'd5}: s1rd0 <= 11;
	     {1'd0,  5'd6}: s1rd0 <= 13;
	     {1'd0,  5'd7}: s1rd0 <= 15;
	     {1'd0,  5'd8}: s1rd0 <= 17;
	     {1'd0,  5'd9}: s1rd0 <= 19;
	     {1'd0,  5'd10}: s1rd0 <= 21;
	     {1'd0,  5'd11}: s1rd0 <= 23;
	     {1'd0,  5'd12}: s1rd0 <= 25;
	     {1'd0,  5'd13}: s1rd0 <= 27;
	     {1'd0,  5'd14}: s1rd0 <= 29;
	     {1'd0,  5'd15}: s1rd0 <= 31;
	     {1'd0,  5'd16}: s1rd0 <= 0;
	     {1'd0,  5'd17}: s1rd0 <= 2;
	     {1'd0,  5'd18}: s1rd0 <= 4;
	     {1'd0,  5'd19}: s1rd0 <= 6;
	     {1'd0,  5'd20}: s1rd0 <= 8;
	     {1'd0,  5'd21}: s1rd0 <= 10;
	     {1'd0,  5'd22}: s1rd0 <= 12;
	     {1'd0,  5'd23}: s1rd0 <= 14;
	     {1'd0,  5'd24}: s1rd0 <= 16;
	     {1'd0,  5'd25}: s1rd0 <= 18;
	     {1'd0,  5'd26}: s1rd0 <= 20;
	     {1'd0,  5'd27}: s1rd0 <= 22;
	     {1'd0,  5'd28}: s1rd0 <= 24;
	     {1'd0,  5'd29}: s1rd0 <= 26;
	     {1'd0,  5'd30}: s1rd0 <= 28;
	     {1'd0,  5'd31}: s1rd0 <= 30;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "distributed"
   always @(posedge clk) begin
      case({tm28_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd1 <= 0;
	     {1'd0,  5'd1}: s1rd1 <= 2;
	     {1'd0,  5'd2}: s1rd1 <= 4;
	     {1'd0,  5'd3}: s1rd1 <= 6;
	     {1'd0,  5'd4}: s1rd1 <= 8;
	     {1'd0,  5'd5}: s1rd1 <= 10;
	     {1'd0,  5'd6}: s1rd1 <= 12;
	     {1'd0,  5'd7}: s1rd1 <= 14;
	     {1'd0,  5'd8}: s1rd1 <= 16;
	     {1'd0,  5'd9}: s1rd1 <= 18;
	     {1'd0,  5'd10}: s1rd1 <= 20;
	     {1'd0,  5'd11}: s1rd1 <= 22;
	     {1'd0,  5'd12}: s1rd1 <= 24;
	     {1'd0,  5'd13}: s1rd1 <= 26;
	     {1'd0,  5'd14}: s1rd1 <= 28;
	     {1'd0,  5'd15}: s1rd1 <= 30;
	     {1'd0,  5'd16}: s1rd1 <= 1;
	     {1'd0,  5'd17}: s1rd1 <= 3;
	     {1'd0,  5'd18}: s1rd1 <= 5;
	     {1'd0,  5'd19}: s1rd1 <= 7;
	     {1'd0,  5'd20}: s1rd1 <= 9;
	     {1'd0,  5'd21}: s1rd1 <= 11;
	     {1'd0,  5'd22}: s1rd1 <= 13;
	     {1'd0,  5'd23}: s1rd1 <= 15;
	     {1'd0,  5'd24}: s1rd1 <= 17;
	     {1'd0,  5'd25}: s1rd1 <= 19;
	     {1'd0,  5'd26}: s1rd1 <= 21;
	     {1'd0,  5'd27}: s1rd1 <= 23;
	     {1'd0,  5'd28}: s1rd1 <= 25;
	     {1'd0,  5'd29}: s1rd1 <= 27;
	     {1'd0,  5'd30}: s1rd1 <= 29;
	     {1'd0,  5'd31}: s1rd1 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "distributed"
   always @(posedge clk) begin
      case({tm28_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd2 <= 1;
	     {1'd0,  5'd1}: s1rd2 <= 3;
	     {1'd0,  5'd2}: s1rd2 <= 5;
	     {1'd0,  5'd3}: s1rd2 <= 7;
	     {1'd0,  5'd4}: s1rd2 <= 9;
	     {1'd0,  5'd5}: s1rd2 <= 11;
	     {1'd0,  5'd6}: s1rd2 <= 13;
	     {1'd0,  5'd7}: s1rd2 <= 15;
	     {1'd0,  5'd8}: s1rd2 <= 17;
	     {1'd0,  5'd9}: s1rd2 <= 19;
	     {1'd0,  5'd10}: s1rd2 <= 21;
	     {1'd0,  5'd11}: s1rd2 <= 23;
	     {1'd0,  5'd12}: s1rd2 <= 25;
	     {1'd0,  5'd13}: s1rd2 <= 27;
	     {1'd0,  5'd14}: s1rd2 <= 29;
	     {1'd0,  5'd15}: s1rd2 <= 31;
	     {1'd0,  5'd16}: s1rd2 <= 0;
	     {1'd0,  5'd17}: s1rd2 <= 2;
	     {1'd0,  5'd18}: s1rd2 <= 4;
	     {1'd0,  5'd19}: s1rd2 <= 6;
	     {1'd0,  5'd20}: s1rd2 <= 8;
	     {1'd0,  5'd21}: s1rd2 <= 10;
	     {1'd0,  5'd22}: s1rd2 <= 12;
	     {1'd0,  5'd23}: s1rd2 <= 14;
	     {1'd0,  5'd24}: s1rd2 <= 16;
	     {1'd0,  5'd25}: s1rd2 <= 18;
	     {1'd0,  5'd26}: s1rd2 <= 20;
	     {1'd0,  5'd27}: s1rd2 <= 22;
	     {1'd0,  5'd28}: s1rd2 <= 24;
	     {1'd0,  5'd29}: s1rd2 <= 26;
	     {1'd0,  5'd30}: s1rd2 <= 28;
	     {1'd0,  5'd31}: s1rd2 <= 30;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "distributed"
   always @(posedge clk) begin
      case({tm28_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd3 <= 0;
	     {1'd0,  5'd1}: s1rd3 <= 2;
	     {1'd0,  5'd2}: s1rd3 <= 4;
	     {1'd0,  5'd3}: s1rd3 <= 6;
	     {1'd0,  5'd4}: s1rd3 <= 8;
	     {1'd0,  5'd5}: s1rd3 <= 10;
	     {1'd0,  5'd6}: s1rd3 <= 12;
	     {1'd0,  5'd7}: s1rd3 <= 14;
	     {1'd0,  5'd8}: s1rd3 <= 16;
	     {1'd0,  5'd9}: s1rd3 <= 18;
	     {1'd0,  5'd10}: s1rd3 <= 20;
	     {1'd0,  5'd11}: s1rd3 <= 22;
	     {1'd0,  5'd12}: s1rd3 <= 24;
	     {1'd0,  5'd13}: s1rd3 <= 26;
	     {1'd0,  5'd14}: s1rd3 <= 28;
	     {1'd0,  5'd15}: s1rd3 <= 30;
	     {1'd0,  5'd16}: s1rd3 <= 1;
	     {1'd0,  5'd17}: s1rd3 <= 3;
	     {1'd0,  5'd18}: s1rd3 <= 5;
	     {1'd0,  5'd19}: s1rd3 <= 7;
	     {1'd0,  5'd20}: s1rd3 <= 9;
	     {1'd0,  5'd21}: s1rd3 <= 11;
	     {1'd0,  5'd22}: s1rd3 <= 13;
	     {1'd0,  5'd23}: s1rd3 <= 15;
	     {1'd0,  5'd24}: s1rd3 <= 17;
	     {1'd0,  5'd25}: s1rd3 <= 19;
	     {1'd0,  5'd26}: s1rd3 <= 21;
	     {1'd0,  5'd27}: s1rd3 <= 23;
	     {1'd0,  5'd28}: s1rd3 <= 25;
	     {1'd0,  5'd29}: s1rd3 <= 27;
	     {1'd0,  5'd30}: s1rd3 <= 29;
	     {1'd0,  5'd31}: s1rd3 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "distributed"
    swNet22632 sw(tm28_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3);

   always @(posedge clk) begin
      case({tm28_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr0 <= 16;
	      {1'd0, 5'd1}: s2wr0 <= 17;
	      {1'd0, 5'd2}: s2wr0 <= 18;
	      {1'd0, 5'd3}: s2wr0 <= 19;
	      {1'd0, 5'd4}: s2wr0 <= 20;
	      {1'd0, 5'd5}: s2wr0 <= 21;
	      {1'd0, 5'd6}: s2wr0 <= 22;
	      {1'd0, 5'd7}: s2wr0 <= 23;
	      {1'd0, 5'd8}: s2wr0 <= 24;
	      {1'd0, 5'd9}: s2wr0 <= 25;
	      {1'd0, 5'd10}: s2wr0 <= 26;
	      {1'd0, 5'd11}: s2wr0 <= 27;
	      {1'd0, 5'd12}: s2wr0 <= 28;
	      {1'd0, 5'd13}: s2wr0 <= 29;
	      {1'd0, 5'd14}: s2wr0 <= 30;
	      {1'd0, 5'd15}: s2wr0 <= 31;
	      {1'd0, 5'd16}: s2wr0 <= 0;
	      {1'd0, 5'd17}: s2wr0 <= 1;
	      {1'd0, 5'd18}: s2wr0 <= 2;
	      {1'd0, 5'd19}: s2wr0 <= 3;
	      {1'd0, 5'd20}: s2wr0 <= 4;
	      {1'd0, 5'd21}: s2wr0 <= 5;
	      {1'd0, 5'd22}: s2wr0 <= 6;
	      {1'd0, 5'd23}: s2wr0 <= 7;
	      {1'd0, 5'd24}: s2wr0 <= 8;
	      {1'd0, 5'd25}: s2wr0 <= 9;
	      {1'd0, 5'd26}: s2wr0 <= 10;
	      {1'd0, 5'd27}: s2wr0 <= 11;
	      {1'd0, 5'd28}: s2wr0 <= 12;
	      {1'd0, 5'd29}: s2wr0 <= 13;
	      {1'd0, 5'd30}: s2wr0 <= 14;
	      {1'd0, 5'd31}: s2wr0 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "distributed"
   always @(posedge clk) begin
      case({tm28_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr1 <= 16;
	      {1'd0, 5'd1}: s2wr1 <= 17;
	      {1'd0, 5'd2}: s2wr1 <= 18;
	      {1'd0, 5'd3}: s2wr1 <= 19;
	      {1'd0, 5'd4}: s2wr1 <= 20;
	      {1'd0, 5'd5}: s2wr1 <= 21;
	      {1'd0, 5'd6}: s2wr1 <= 22;
	      {1'd0, 5'd7}: s2wr1 <= 23;
	      {1'd0, 5'd8}: s2wr1 <= 24;
	      {1'd0, 5'd9}: s2wr1 <= 25;
	      {1'd0, 5'd10}: s2wr1 <= 26;
	      {1'd0, 5'd11}: s2wr1 <= 27;
	      {1'd0, 5'd12}: s2wr1 <= 28;
	      {1'd0, 5'd13}: s2wr1 <= 29;
	      {1'd0, 5'd14}: s2wr1 <= 30;
	      {1'd0, 5'd15}: s2wr1 <= 31;
	      {1'd0, 5'd16}: s2wr1 <= 0;
	      {1'd0, 5'd17}: s2wr1 <= 1;
	      {1'd0, 5'd18}: s2wr1 <= 2;
	      {1'd0, 5'd19}: s2wr1 <= 3;
	      {1'd0, 5'd20}: s2wr1 <= 4;
	      {1'd0, 5'd21}: s2wr1 <= 5;
	      {1'd0, 5'd22}: s2wr1 <= 6;
	      {1'd0, 5'd23}: s2wr1 <= 7;
	      {1'd0, 5'd24}: s2wr1 <= 8;
	      {1'd0, 5'd25}: s2wr1 <= 9;
	      {1'd0, 5'd26}: s2wr1 <= 10;
	      {1'd0, 5'd27}: s2wr1 <= 11;
	      {1'd0, 5'd28}: s2wr1 <= 12;
	      {1'd0, 5'd29}: s2wr1 <= 13;
	      {1'd0, 5'd30}: s2wr1 <= 14;
	      {1'd0, 5'd31}: s2wr1 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "distributed"
   always @(posedge clk) begin
      case({tm28_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr2 <= 0;
	      {1'd0, 5'd1}: s2wr2 <= 1;
	      {1'd0, 5'd2}: s2wr2 <= 2;
	      {1'd0, 5'd3}: s2wr2 <= 3;
	      {1'd0, 5'd4}: s2wr2 <= 4;
	      {1'd0, 5'd5}: s2wr2 <= 5;
	      {1'd0, 5'd6}: s2wr2 <= 6;
	      {1'd0, 5'd7}: s2wr2 <= 7;
	      {1'd0, 5'd8}: s2wr2 <= 8;
	      {1'd0, 5'd9}: s2wr2 <= 9;
	      {1'd0, 5'd10}: s2wr2 <= 10;
	      {1'd0, 5'd11}: s2wr2 <= 11;
	      {1'd0, 5'd12}: s2wr2 <= 12;
	      {1'd0, 5'd13}: s2wr2 <= 13;
	      {1'd0, 5'd14}: s2wr2 <= 14;
	      {1'd0, 5'd15}: s2wr2 <= 15;
	      {1'd0, 5'd16}: s2wr2 <= 16;
	      {1'd0, 5'd17}: s2wr2 <= 17;
	      {1'd0, 5'd18}: s2wr2 <= 18;
	      {1'd0, 5'd19}: s2wr2 <= 19;
	      {1'd0, 5'd20}: s2wr2 <= 20;
	      {1'd0, 5'd21}: s2wr2 <= 21;
	      {1'd0, 5'd22}: s2wr2 <= 22;
	      {1'd0, 5'd23}: s2wr2 <= 23;
	      {1'd0, 5'd24}: s2wr2 <= 24;
	      {1'd0, 5'd25}: s2wr2 <= 25;
	      {1'd0, 5'd26}: s2wr2 <= 26;
	      {1'd0, 5'd27}: s2wr2 <= 27;
	      {1'd0, 5'd28}: s2wr2 <= 28;
	      {1'd0, 5'd29}: s2wr2 <= 29;
	      {1'd0, 5'd30}: s2wr2 <= 30;
	      {1'd0, 5'd31}: s2wr2 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "distributed"
   always @(posedge clk) begin
      case({tm28_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr3 <= 0;
	      {1'd0, 5'd1}: s2wr3 <= 1;
	      {1'd0, 5'd2}: s2wr3 <= 2;
	      {1'd0, 5'd3}: s2wr3 <= 3;
	      {1'd0, 5'd4}: s2wr3 <= 4;
	      {1'd0, 5'd5}: s2wr3 <= 5;
	      {1'd0, 5'd6}: s2wr3 <= 6;
	      {1'd0, 5'd7}: s2wr3 <= 7;
	      {1'd0, 5'd8}: s2wr3 <= 8;
	      {1'd0, 5'd9}: s2wr3 <= 9;
	      {1'd0, 5'd10}: s2wr3 <= 10;
	      {1'd0, 5'd11}: s2wr3 <= 11;
	      {1'd0, 5'd12}: s2wr3 <= 12;
	      {1'd0, 5'd13}: s2wr3 <= 13;
	      {1'd0, 5'd14}: s2wr3 <= 14;
	      {1'd0, 5'd15}: s2wr3 <= 15;
	      {1'd0, 5'd16}: s2wr3 <= 16;
	      {1'd0, 5'd17}: s2wr3 <= 17;
	      {1'd0, 5'd18}: s2wr3 <= 18;
	      {1'd0, 5'd19}: s2wr3 <= 19;
	      {1'd0, 5'd20}: s2wr3 <= 20;
	      {1'd0, 5'd21}: s2wr3 <= 21;
	      {1'd0, 5'd22}: s2wr3 <= 22;
	      {1'd0, 5'd23}: s2wr3 <= 23;
	      {1'd0, 5'd24}: s2wr3 <= 24;
	      {1'd0, 5'd25}: s2wr3 <= 25;
	      {1'd0, 5'd26}: s2wr3 <= 26;
	      {1'd0, 5'd27}: s2wr3 <= 27;
	      {1'd0, 5'd28}: s2wr3 <= 28;
	      {1'd0, 5'd29}: s2wr3 <= 29;
	      {1'd0, 5'd30}: s2wr3 <= 30;
	      {1'd0, 5'd31}: s2wr3 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "distributed"
endmodule



						module multfix(clk, rst, a, b, q_sc, q_unsc);
						   parameter WIDTH=35, CYCLES=6;

						   input signed [WIDTH-1:0]    a,b;
						   output [WIDTH-1:0]          q_sc;
						   output [WIDTH-1:0]              q_unsc;

						   input                       clk, rst;
						   
						   reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
						   wire signed [2*WIDTH-1:0]   res;   
						   integer                     i;

						   assign                      res = q[CYCLES-1];   
						   
						   assign                      q_unsc = res[WIDTH-1:0];
						   assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
						      
						   always @(posedge clk) begin
						      q[0] <= a * b;
						      for (i = 1; i < CYCLES; i=i+1) begin
						         q[i] <= q[i-1];
						      end
						   end
						                  
						endmodule 
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule
