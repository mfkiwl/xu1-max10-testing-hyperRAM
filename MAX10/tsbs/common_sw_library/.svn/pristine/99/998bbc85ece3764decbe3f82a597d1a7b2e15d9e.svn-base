<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>IOF Library: prints.hpp File Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
    <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<h1>prints.hpp File Reference</h1><hr><a name="_details"></a><h2>Detailed Description</h2>
Provides all the prints() function overloads for printsing to a stream, as well as the two iof-compatible manipulators that replace std::endl and std::flush. 
<p>
<div class="fragment"><pre class="fragment">    **  Copyright (c) 2006, Oliver Schoenborn
    **  Distributed under the BSD Software License (see accompanying 
    **  LICENSE_IOF_1_0.txt in root folder of library for complete 
    **  terms and conditions). 
    </pre></div> 
<p>
<code>#include &quot;<a class="el" href="fmtr_8hpp-source.html">iof/fmtr.hpp</a>&quot;</code><br>

<p>
Include dependency graph for prints.hpp:<p><center><img src="prints_8hpp__incl.png" border="0" usemap="#prints.hpp_map" alt=""></center>
<map name="prints.hpp_map">
<area href="fmtr_8hpp.html" shape="rect" coords="140,33,228,59" alt="">
</map>

<p>
This graph shows which files directly or indirectly include this file:<p><center><img src="prints_8hpp__dep__incl.png" border="0" usemap="#prints.hppdep_map" alt=""></center>
<map name="prints.hppdep_map">
<area href="cerrf_8hpp.html" shape="rect" coords="140,8,214,34" alt="">
<area href="coutf_8hpp.html" shape="rect" coords="138,58,216,85" alt="">
<area href="tostr_8hpp.html" shape="rect" coords="140,109,214,136" alt="">
<area href="output_8hpp.html" shape="rect" coords="264,58,349,85" alt="">
<area href="io_8hpp.html" shape="rect" coords="397,58,456,85" alt="">
</map>

<p>
<a href="prints_8hpp-source.html">Go to the source code of this file.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Namespaces</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">namespace &nbsp;</td><td class="memItemRight" valign="bottom"><b>iof</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">namespace &nbsp;</td><td class="memItemRight" valign="bottom"><b>iof::iof_private</b></td></tr>

<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="b32bb039dc537f7044d1c3d3be6bb2b3"></a><!-- doxytag: member="prints.hpp::prints" ref="b32bb039dc537f7044d1c3d3be6bb2b3" args="(std::ostream &amp;out, const TT &amp;obj)" -->
template&lt;typename TT&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceiof.html#b32bb039dc537f7044d1c3d3be6bb2b3">iof::prints</a> (std::ostream &amp;out, const TT &amp;obj)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">If just one obj to output, no formatting assumed. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="3f4ca34c1340cc7987784eaffdad214b"></a><!-- doxytag: member="prints.hpp::prints" ref="3f4ca34c1340cc7987784eaffdad214b" args="(std::ostream &amp;out, const char *fmt, const T1 &amp;obj)" -->
template&lt;typename T1&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::prints</b> (std::ostream &amp;out, const char *fmt, const T1 &amp;obj)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="07ef4e2a85eb9f18989d4dc75e565c85"></a><!-- doxytag: member="prints.hpp::prints" ref="07ef4e2a85eb9f18989d4dc75e565c85" args="(std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2)" -->
template&lt;typename T1, typename T2&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::prints</b> (std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="dbca9b27f305d4c3a2d33c45b818d724"></a><!-- doxytag: member="prints.hpp::prints" ref="dbca9b27f305d4c3a2d33c45b818d724" args="(std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3)" -->
template&lt;typename T1, typename T2, typename T3&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::prints</b> (std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="917efd4ee5fc2eddd496af16c11859f4"></a><!-- doxytag: member="prints.hpp::prints" ref="917efd4ee5fc2eddd496af16c11859f4" args="(std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4)" -->
template&lt;typename T1, typename T2, typename T3, typename T4&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::prints</b> (std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="e9edcf93d5402f223f4f3679e5852aa0"></a><!-- doxytag: member="prints.hpp::prints" ref="e9edcf93d5402f223f4f3679e5852aa0" args="(std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5)" -->
template&lt;typename T1, typename T2, typename T3, typename T4, typename T5&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::prints</b> (std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="0e5ecdfd8b692f7a41a217cd6788e462"></a><!-- doxytag: member="prints.hpp::prints" ref="0e5ecdfd8b692f7a41a217cd6788e462" args="(std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6)" -->
template&lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::prints</b> (std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="85db01d66259ded5a9b1f0690f9eebb7"></a><!-- doxytag: member="prints.hpp::prints" ref="85db01d66259ded5a9b1f0690f9eebb7" args="(std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7)" -->
template&lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::prints</b> (std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="1e2d0799d97d036c1b5f85a4c19a53c1"></a><!-- doxytag: member="prints.hpp::prints" ref="1e2d0799d97d036c1b5f85a4c19a53c1" args="(std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7, const T8 &amp;obj8)" -->
template&lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::prints</b> (std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7, const T8 &amp;obj8)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="654a8c45b19222b5d9162998979f0cde"></a><!-- doxytag: member="prints.hpp::prints" ref="654a8c45b19222b5d9162998979f0cde" args="(std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7, const T8 &amp;obj8, const T9 &amp;obj9)" -->
template&lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::prints</b> (std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7, const T8 &amp;obj8, const T9 &amp;obj9)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="cdbbfe3cf5cf5dc03c872ce7eb82ebda"></a><!-- doxytag: member="prints.hpp::prints" ref="cdbbfe3cf5cf5dc03c872ce7eb82ebda" args="(std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7, const T8 &amp;obj8, const T9 &amp;obj9, const T10 &amp;obj10)" -->
template&lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::prints</b> (std::ostream &amp;out, const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7, const T8 &amp;obj8, const T9 &amp;obj9, const T10 &amp;obj10)</td></tr>

</table>
<hr size="1"><address style="align: right;"><small>Generated on Sun Oct 15 23:55:35 2006 for IOF Library by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
