// Copyright (C) 1991-2009 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/27/2015 12:40:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    avalon_master_state_machine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module avalon_master_state_machine_vlg_sample_tst(
	clk,
	is_write,
	master_readdata,
	master_waitrequest,
	reset_n,
	start,
	user_address,
	user_write_data,
	sampler_tx
);
input  clk;
input  is_write;
input [31:0] master_readdata;
input  master_waitrequest;
input  reset_n;
input  start;
input [31:0] user_address;
input [31:0] user_write_data;
output sampler_tx;

reg sample;
time current_time;
always @(clk or is_write or master_readdata or master_waitrequest or reset_n or start or user_address or user_write_data)
                                                                                
begin                                         
 if ($time > 0)                               
 begin                                        
	if ($time == 0 || $time != current_time)  
	begin									  
		if (sample === 1'bx)                  
			sample = 0;                       
		else                                  
			sample = ~sample;                 
	end										  
	current_time = $time;					  
 end                                          
end                                           

assign sampler_tx = sample;
endmodule

module avalon_master_state_machine_vlg_check_tst (
	finish,latch_read_now,master_address,master_byteenable,master_read,master_write,master_writedata,state,user_read_data,sampler_rx
);
input  finish;
input  latch_read_now;
input [31:0] master_address;
input [3:0] master_byteenable;
input  master_read;
input  master_write;
input [31:0] master_writedata;
input [15:0] state;
input [31:0] user_read_data;
input sampler_rx;

reg  finish_expected;
reg  latch_read_now_expected;
reg [31:0] master_address_expected;
reg [3:0] master_byteenable_expected;
reg  master_read_expected;
reg  master_write_expected;
reg [31:0] master_writedata_expected;
reg [15:0] state_expected;
reg [31:0] user_read_data_expected;

reg  finish_prev;
reg  latch_read_now_prev;
reg [31:0] master_address_prev;
reg [3:0] master_byteenable_prev;
reg  master_read_prev;
reg  master_write_prev;
reg [31:0] master_writedata_prev;
reg [15:0] state_prev;
reg [31:0] user_read_data_prev;

reg  finish_expected_prev;
reg  latch_read_now_expected_prev;
reg [31:0] master_address_expected_prev;
reg [3:0] master_byteenable_expected_prev;
reg  master_read_expected_prev;
reg  master_write_expected_prev;
reg [31:0] master_writedata_expected_prev;
reg [15:0] state_expected_prev;
reg [31:0] user_read_data_expected_prev;

reg  last_finish_exp;
reg  last_latch_read_now_exp;
reg [31:0] last_master_address_exp;
reg [3:0] last_master_byteenable_exp;
reg  last_master_read_exp;
reg  last_master_write_exp;
reg [31:0] last_master_writedata_exp;
reg [15:0] last_state_exp;
reg [31:0] last_user_read_data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	finish_prev = finish;
	latch_read_now_prev = latch_read_now;
	master_address_prev = master_address;
	master_byteenable_prev = master_byteenable;
	master_read_prev = master_read;
	master_write_prev = master_write;
	master_writedata_prev = master_writedata;
	state_prev = state;
	user_read_data_prev = user_read_data;
end

// update expected /o prevs

always @(trigger)
begin
	finish_expected_prev = finish_expected;
	latch_read_now_expected_prev = latch_read_now_expected;
	master_address_expected_prev = master_address_expected;
	master_byteenable_expected_prev = master_byteenable_expected;
	master_read_expected_prev = master_read_expected;
	master_write_expected_prev = master_write_expected;
	master_writedata_expected_prev = master_writedata_expected;
	state_expected_prev = state_expected;
	user_read_data_expected_prev = user_read_data_expected;
end


// expected state[ 15 ]
initial
begin
	state_expected[15] = 1'b0;
end 
// expected state[ 14 ]
initial
begin
	state_expected[14] = 1'b0;
end 
// expected state[ 13 ]
initial
begin
	state_expected[13] = 1'b0;
end 
// expected state[ 12 ]
initial
begin
	state_expected[12] = 1'b0;
end 
// expected state[ 11 ]
initial
begin
	state_expected[11] = 1'b0;
end 
// expected state[ 10 ]
initial
begin
	state_expected[10] = 1'b0;
end 
// expected state[ 9 ]
initial
begin
	state_expected[9] = 1'b0;
end 
// expected state[ 8 ]
initial
begin
	state_expected[8] = 1'b0;
end 
// expected state[ 7 ]
initial
begin
	state_expected[7] = 1'b0;
	state_expected[7] = #29500 1'b1;
	state_expected[7] = #12000 1'b0;
end 
// expected state[ 6 ]
initial
begin
	state_expected[6] = 1'b0;
	state_expected[6] = #8500 1'b1;
	state_expected[6] = #5000 1'b0;
end 
// expected state[ 5 ]
initial
begin
	state_expected[5] = 1'b0;
	state_expected[5] = #40500 1'b1;
	state_expected[5] = #1000 1'b0;
end 
// expected state[ 4 ]
initial
begin
	state_expected[4] = 1'b0;
	state_expected[4] = #13500 1'b1;
	state_expected[4] = #1000 1'b0;
	state_expected[4] = #27000 1'b1;
	state_expected[4] = #1000 1'b0;
end 
// expected state[ 3 ]
initial
begin
	state_expected[3] = 1'b0;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'b0;
	state_expected[2] = #13500 1'b1;
	state_expected[2] = #1000 1'b0;
	state_expected[2] = #15000 1'b1;
	state_expected[2] = #13000 1'b0;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'b0;
	state_expected[1] = #8500 1'b1;
	state_expected[1] = #6000 1'b0;
	state_expected[1] = #26000 1'b1;
	state_expected[1] = #2000 1'b0;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'b0;
	state_expected[0] = #9500 1'b1;
	state_expected[0] = #5000 1'b0;
	state_expected[0] = #16000 1'b1;
	state_expected[0] = #10000 1'b0;
	state_expected[0] = #1000 1'b1;
	state_expected[0] = #1000 1'b0;
end 

// expected finish
initial
begin
	finish_expected = 1'b0;
	finish_expected = #13500 1'b1;
	finish_expected = #1000 1'b0;
	finish_expected = #27000 1'b1;
	finish_expected = #1000 1'b0;
end 

// expected latch_read_now
initial
begin
	latch_read_now_expected = 1'b0;
	latch_read_now_expected = #40500 1'b1;
	latch_read_now_expected = #1000 1'b0;
end 
// expected user_read_data[ 31 ]
initial
begin
	user_read_data_expected[31] = 1'b0;
end 
// expected user_read_data[ 30 ]
initial
begin
	user_read_data_expected[30] = 1'b0;
	user_read_data_expected[30] = #41500 1'b1;
	user_read_data_expected[30] = #4550 1'b0;
end 
// expected user_read_data[ 29 ]
initial
begin
	user_read_data_expected[29] = 1'b0;
	user_read_data_expected[29] = #41500 1'b1;
	user_read_data_expected[29] = #4550 1'b0;
end 
// expected user_read_data[ 28 ]
initial
begin
	user_read_data_expected[28] = 1'b0;
end 
// expected user_read_data[ 27 ]
initial
begin
	user_read_data_expected[27] = 1'b0;
	user_read_data_expected[27] = #41500 1'b1;
	user_read_data_expected[27] = #4550 1'b0;
end 
// expected user_read_data[ 26 ]
initial
begin
	user_read_data_expected[26] = 1'b0;
	user_read_data_expected[26] = #41500 1'b1;
	user_read_data_expected[26] = #4550 1'b0;
end 
// expected user_read_data[ 25 ]
initial
begin
	user_read_data_expected[25] = 1'b0;
	user_read_data_expected[25] = #41500 1'b1;
	user_read_data_expected[25] = #4550 1'b0;
end 
// expected user_read_data[ 24 ]
initial
begin
	user_read_data_expected[24] = 1'b0;
	user_read_data_expected[24] = #41500 1'b1;
	user_read_data_expected[24] = #4550 1'b0;
end 
// expected user_read_data[ 23 ]
initial
begin
	user_read_data_expected[23] = 1'b1;
	user_read_data_expected[23] = #41500 1'b0;
	user_read_data_expected[23] = #4550 1'b1;
end 
// expected user_read_data[ 22 ]
initial
begin
	user_read_data_expected[22] = 1'b1;
	user_read_data_expected[22] = #41500 1'b0;
	user_read_data_expected[22] = #4550 1'b1;
end 
// expected user_read_data[ 21 ]
initial
begin
	user_read_data_expected[21] = 1'b1;
end 
// expected user_read_data[ 20 ]
initial
begin
	user_read_data_expected[20] = 1'b0;
	user_read_data_expected[20] = #41500 1'b1;
	user_read_data_expected[20] = #4550 1'b0;
end 
// expected user_read_data[ 19 ]
initial
begin
	user_read_data_expected[19] = 1'b1;
	user_read_data_expected[19] = #41500 1'b0;
	user_read_data_expected[19] = #4550 1'b1;
end 
// expected user_read_data[ 18 ]
initial
begin
	user_read_data_expected[18] = 1'b0;
end 
// expected user_read_data[ 17 ]
initial
begin
	user_read_data_expected[17] = 1'b1;
end 
// expected user_read_data[ 16 ]
initial
begin
	user_read_data_expected[16] = 1'b0;
	user_read_data_expected[16] = #41500 1'b1;
	user_read_data_expected[16] = #4550 1'b0;
end 
// expected user_read_data[ 15 ]
initial
begin
	user_read_data_expected[15] = 1'b1;
end 
// expected user_read_data[ 14 ]
initial
begin
	user_read_data_expected[14] = 1'b0;
	user_read_data_expected[14] = #41500 1'b1;
	user_read_data_expected[14] = #4550 1'b0;
end 
// expected user_read_data[ 13 ]
initial
begin
	user_read_data_expected[13] = 1'b1;
end 
// expected user_read_data[ 12 ]
initial
begin
	user_read_data_expected[12] = 1'b0;
	user_read_data_expected[12] = #41500 1'b1;
	user_read_data_expected[12] = #4550 1'b0;
end 
// expected user_read_data[ 11 ]
initial
begin
	user_read_data_expected[11] = 1'b1;
	user_read_data_expected[11] = #41500 1'b0;
	user_read_data_expected[11] = #4550 1'b1;
end 
// expected user_read_data[ 10 ]
initial
begin
	user_read_data_expected[10] = 1'b1;
	user_read_data_expected[10] = #41500 1'b0;
	user_read_data_expected[10] = #4550 1'b1;
end 
// expected user_read_data[ 9 ]
initial
begin
	user_read_data_expected[9] = 1'b1;
	user_read_data_expected[9] = #41500 1'b0;
	user_read_data_expected[9] = #4550 1'b1;
end 
// expected user_read_data[ 8 ]
initial
begin
	user_read_data_expected[8] = 1'b0;
end 
// expected user_read_data[ 7 ]
initial
begin
	user_read_data_expected[7] = 1'b1;
end 
// expected user_read_data[ 6 ]
initial
begin
	user_read_data_expected[6] = 1'b0;
	user_read_data_expected[6] = #41500 1'b1;
	user_read_data_expected[6] = #4550 1'b0;
end 
// expected user_read_data[ 5 ]
initial
begin
	user_read_data_expected[5] = 1'b1;
	user_read_data_expected[5] = #41500 1'b0;
	user_read_data_expected[5] = #4550 1'b1;
end 
// expected user_read_data[ 4 ]
initial
begin
	user_read_data_expected[4] = 1'b0;
	user_read_data_expected[4] = #41500 1'b1;
	user_read_data_expected[4] = #4550 1'b0;
end 
// expected user_read_data[ 3 ]
initial
begin
	user_read_data_expected[3] = 1'b1;
end 
// expected user_read_data[ 2 ]
initial
begin
	user_read_data_expected[2] = 1'b0;
	user_read_data_expected[2] = #41500 1'b1;
	user_read_data_expected[2] = #4550 1'b0;
end 
// expected user_read_data[ 1 ]
initial
begin
	user_read_data_expected[1] = 1'b1;
end 
// expected user_read_data[ 0 ]
initial
begin
	user_read_data_expected[0] = 1'b0;
	user_read_data_expected[0] = #41500 1'b1;
	user_read_data_expected[0] = #4550 1'b0;
end 
// expected master_address[ 31 ]
initial
begin
	master_address_expected[31] = 1'b0;
end 
// expected master_address[ 30 ]
initial
begin
	master_address_expected[30] = 1'b0;
end 
// expected master_address[ 29 ]
initial
begin
	master_address_expected[29] = 1'b0;
end 
// expected master_address[ 28 ]
initial
begin
	master_address_expected[28] = 1'b0;
	master_address_expected[28] = #24000 1'b1;
end 
// expected master_address[ 27 ]
initial
begin
	master_address_expected[27] = 1'b0;
end 
// expected master_address[ 26 ]
initial
begin
	master_address_expected[26] = 1'b0;
end 
// expected master_address[ 25 ]
initial
begin
	master_address_expected[25] = 1'b0;
	master_address_expected[25] = #24000 1'b1;
end 
// expected master_address[ 24 ]
initial
begin
	master_address_expected[24] = 1'b0;
end 
// expected master_address[ 23 ]
initial
begin
	master_address_expected[23] = 1'b0;
	master_address_expected[23] = #5000 1'b1;
	master_address_expected[23] = #19000 1'b0;
end 
// expected master_address[ 22 ]
initial
begin
	master_address_expected[22] = 1'b0;
end 
// expected master_address[ 21 ]
initial
begin
	master_address_expected[21] = 1'b0;
	master_address_expected[21] = #5000 1'b1;
end 
// expected master_address[ 20 ]
initial
begin
	master_address_expected[20] = 1'b0;
	master_address_expected[20] = #24000 1'b1;
end 
// expected master_address[ 19 ]
initial
begin
	master_address_expected[19] = 1'b0;
	master_address_expected[19] = #5000 1'b1;
	master_address_expected[19] = #19000 1'b0;
end 
// expected master_address[ 18 ]
initial
begin
	master_address_expected[18] = 1'b0;
	master_address_expected[18] = #24000 1'b1;
end 
// expected master_address[ 17 ]
initial
begin
	master_address_expected[17] = 1'b0;
	master_address_expected[17] = #5000 1'b1;
	master_address_expected[17] = #19000 1'b0;
end 
// expected master_address[ 16 ]
initial
begin
	master_address_expected[16] = 1'b0;
	master_address_expected[16] = #5000 1'b1;
	master_address_expected[16] = #19000 1'b0;
end 
// expected master_address[ 15 ]
initial
begin
	master_address_expected[15] = 1'b0;
	master_address_expected[15] = #5000 1'b1;
	master_address_expected[15] = #19000 1'b0;
end 
// expected master_address[ 14 ]
initial
begin
	master_address_expected[14] = 1'b0;
	master_address_expected[14] = #5000 1'b1;
	master_address_expected[14] = #19000 1'b0;
end 
// expected master_address[ 13 ]
initial
begin
	master_address_expected[13] = 1'b0;
end 
// expected master_address[ 12 ]
initial
begin
	master_address_expected[12] = 1'b0;
	master_address_expected[12] = #24000 1'b1;
end 
// expected master_address[ 11 ]
initial
begin
	master_address_expected[11] = 1'b0;
	master_address_expected[11] = #5000 1'b1;
	master_address_expected[11] = #19000 1'b0;
end 
// expected master_address[ 10 ]
initial
begin
	master_address_expected[10] = 1'b0;
	master_address_expected[10] = #5000 1'b1;
	master_address_expected[10] = #19000 1'b0;
end 
// expected master_address[ 9 ]
initial
begin
	master_address_expected[9] = 1'b0;
	master_address_expected[9] = #24000 1'b1;
end 
// expected master_address[ 8 ]
initial
begin
	master_address_expected[8] = 1'b0;
	master_address_expected[8] = #5000 1'b1;
end 
// expected master_address[ 7 ]
initial
begin
	master_address_expected[7] = 1'b0;
	master_address_expected[7] = #5000 1'b1;
	master_address_expected[7] = #19000 1'b0;
end 
// expected master_address[ 6 ]
initial
begin
	master_address_expected[6] = 1'b0;
	master_address_expected[6] = #5000 1'b1;
end 
// expected master_address[ 5 ]
initial
begin
	master_address_expected[5] = 1'b0;
	master_address_expected[5] = #5000 1'b1;
	master_address_expected[5] = #19000 1'b0;
end 
// expected master_address[ 4 ]
initial
begin
	master_address_expected[4] = 1'b0;
	master_address_expected[4] = #24000 1'b1;
end 
// expected master_address[ 3 ]
initial
begin
	master_address_expected[3] = 1'b0;
	master_address_expected[3] = #5000 1'b1;
	master_address_expected[3] = #19000 1'b0;
end 
// expected master_address[ 2 ]
initial
begin
	master_address_expected[2] = 1'b0;
	master_address_expected[2] = #5000 1'b1;
end 
// expected master_address[ 1 ]
initial
begin
	master_address_expected[1] = 1'b0;
	master_address_expected[1] = #5000 1'b1;
	master_address_expected[1] = #19000 1'b0;
end 
// expected master_address[ 0 ]
initial
begin
	master_address_expected[0] = 1'b0;
	master_address_expected[0] = #5000 1'b1;
	master_address_expected[0] = #19000 1'b0;
end 
// expected master_byteenable[ 3 ]
initial
begin
	master_byteenable_expected[3] = 1'b1;
end 
// expected master_byteenable[ 2 ]
initial
begin
	master_byteenable_expected[2] = 1'b1;
end 
// expected master_byteenable[ 1 ]
initial
begin
	master_byteenable_expected[1] = 1'b1;
end 
// expected master_byteenable[ 0 ]
initial
begin
	master_byteenable_expected[0] = 1'b1;
end 

// expected master_read
initial
begin
	master_read_expected = 1'b0;
	master_read_expected = #29500 1'b1;
	master_read_expected = #12000 1'b0;
end 

// expected master_write
initial
begin
	master_write_expected = 1'b0;
	master_write_expected = #8500 1'b1;
	master_write_expected = #5000 1'b0;
end 
// expected master_writedata[ 31 ]
initial
begin
	master_writedata_expected[31] = 1'b1;
	master_writedata_expected[31] = #5000 1'b0;
	master_writedata_expected[31] = #19000 1'b1;
end 
// expected master_writedata[ 30 ]
initial
begin
	master_writedata_expected[30] = 1'b1;
	master_writedata_expected[30] = #5000 1'b0;
	master_writedata_expected[30] = #19000 1'b1;
end 
// expected master_writedata[ 29 ]
initial
begin
	master_writedata_expected[29] = 1'b1;
end 
// expected master_writedata[ 28 ]
initial
begin
	master_writedata_expected[28] = 1'b1;
end 
// expected master_writedata[ 27 ]
initial
begin
	master_writedata_expected[27] = 1'b1;
	master_writedata_expected[27] = #5000 1'b0;
	master_writedata_expected[27] = #19000 1'b1;
end 
// expected master_writedata[ 26 ]
initial
begin
	master_writedata_expected[26] = 1'b1;
	master_writedata_expected[26] = #5000 1'b0;
	master_writedata_expected[26] = #19000 1'b1;
end 
// expected master_writedata[ 25 ]
initial
begin
	master_writedata_expected[25] = 1'b1;
end 
// expected master_writedata[ 24 ]
initial
begin
	master_writedata_expected[24] = 1'b1;
end 
// expected master_writedata[ 23 ]
initial
begin
	master_writedata_expected[23] = 1'b1;
	master_writedata_expected[23] = #5000 1'b0;
	master_writedata_expected[23] = #19000 1'b1;
end 
// expected master_writedata[ 22 ]
initial
begin
	master_writedata_expected[22] = 1'b1;
end 
// expected master_writedata[ 21 ]
initial
begin
	master_writedata_expected[21] = 1'b1;
	master_writedata_expected[21] = #5000 1'b0;
	master_writedata_expected[21] = #19000 1'b1;
end 
// expected master_writedata[ 20 ]
initial
begin
	master_writedata_expected[20] = 1'b1;
	master_writedata_expected[20] = #5000 1'b0;
	master_writedata_expected[20] = #19000 1'b1;
end 
// expected master_writedata[ 19 ]
initial
begin
	master_writedata_expected[19] = 1'b1;
	master_writedata_expected[19] = #5000 1'b0;
	master_writedata_expected[19] = #19000 1'b1;
end 
// expected master_writedata[ 18 ]
initial
begin
	master_writedata_expected[18] = 1'b1;
end 
// expected master_writedata[ 17 ]
initial
begin
	master_writedata_expected[17] = 1'b1;
	master_writedata_expected[17] = #5000 1'b0;
	master_writedata_expected[17] = #19000 1'b1;
end 
// expected master_writedata[ 16 ]
initial
begin
	master_writedata_expected[16] = 1'b1;
	master_writedata_expected[16] = #5000 1'b0;
	master_writedata_expected[16] = #19000 1'b1;
end 
// expected master_writedata[ 15 ]
initial
begin
	master_writedata_expected[15] = 1'b1;
end 
// expected master_writedata[ 14 ]
initial
begin
	master_writedata_expected[14] = 1'b1;
	master_writedata_expected[14] = #5000 1'b0;
	master_writedata_expected[14] = #19000 1'b1;
end 
// expected master_writedata[ 13 ]
initial
begin
	master_writedata_expected[13] = 1'b1;
	master_writedata_expected[13] = #5000 1'b0;
	master_writedata_expected[13] = #19000 1'b1;
end 
// expected master_writedata[ 12 ]
initial
begin
	master_writedata_expected[12] = 1'b1;
	master_writedata_expected[12] = #5000 1'b0;
	master_writedata_expected[12] = #19000 1'b1;
end 
// expected master_writedata[ 11 ]
initial
begin
	master_writedata_expected[11] = 1'b1;
end 
// expected master_writedata[ 10 ]
initial
begin
	master_writedata_expected[10] = 1'b1;
	master_writedata_expected[10] = #5000 1'b0;
	master_writedata_expected[10] = #19000 1'b1;
end 
// expected master_writedata[ 9 ]
initial
begin
	master_writedata_expected[9] = 1'b1;
	master_writedata_expected[9] = #5000 1'b0;
	master_writedata_expected[9] = #19000 1'b1;
end 
// expected master_writedata[ 8 ]
initial
begin
	master_writedata_expected[8] = 1'b1;
	master_writedata_expected[8] = #5000 1'b0;
	master_writedata_expected[8] = #19000 1'b1;
end 
// expected master_writedata[ 7 ]
initial
begin
	master_writedata_expected[7] = 1'b1;
	master_writedata_expected[7] = #5000 1'b0;
	master_writedata_expected[7] = #19000 1'b1;
end 
// expected master_writedata[ 6 ]
initial
begin
	master_writedata_expected[6] = 1'b1;
	master_writedata_expected[6] = #5000 1'b0;
	master_writedata_expected[6] = #19000 1'b1;
end 
// expected master_writedata[ 5 ]
initial
begin
	master_writedata_expected[5] = 1'b1;
end 
// expected master_writedata[ 4 ]
initial
begin
	master_writedata_expected[4] = 1'b1;
end 
// expected master_writedata[ 3 ]
initial
begin
	master_writedata_expected[3] = 1'b1;
end 
// expected master_writedata[ 2 ]
initial
begin
	master_writedata_expected[2] = 1'b1;
	master_writedata_expected[2] = #5000 1'b0;
	master_writedata_expected[2] = #19000 1'b1;
end 
// expected master_writedata[ 1 ]
initial
begin
	master_writedata_expected[1] = 1'b1;
	master_writedata_expected[1] = #5000 1'b0;
	master_writedata_expected[1] = #19000 1'b1;
end 
// expected master_writedata[ 0 ]
initial
begin
	master_writedata_expected[0] = 1'b1;
end 
// generate trigger
always @(finish_expected or finish or latch_read_now_expected or latch_read_now or master_address_expected or master_address or master_byteenable_expected or master_byteenable or master_read_expected or master_read or master_write_expected or master_write or master_writedata_expected or master_writedata or state_expected or state or user_read_data_expected or user_read_data)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected finish = %b | expected latch_read_now = %b | expected master_address = %b | expected master_byteenable = %b | expected master_read = %b | expected master_write = %b | expected master_writedata = %b | expected state = %b | expected user_read_data = %b | ",finish_expected_prev,latch_read_now_expected_prev,master_address_expected_prev,master_byteenable_expected_prev,master_read_expected_prev,master_write_expected_prev,master_writedata_expected_prev,state_expected_prev,user_read_data_expected_prev);
	$display("| real finish = %b | real latch_read_now = %b | real master_address = %b | real master_byteenable = %b | real master_read = %b | real master_write = %b | real master_writedata = %b | real state = %b | real user_read_data = %b | ",finish_prev,latch_read_now_prev,master_address_prev,master_byteenable_prev,master_read_prev,master_write_prev,master_writedata_prev,state_prev,user_read_data_prev);
`endif
	if (
		( finish_expected_prev !== 1'bx ) && ( finish_prev !== finish_expected_prev )
		&& ((finish_expected_prev !== last_finish_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finish :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finish_expected_prev);
		$display ("     Real value = %b", finish_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_finish_exp = finish_expected_prev;
	end
	if (
		( latch_read_now_expected_prev !== 1'bx ) && ( latch_read_now_prev !== latch_read_now_expected_prev )
		&& ((latch_read_now_expected_prev !== last_latch_read_now_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port latch_read_now :: @time = %t",  $realtime);
		$display ("     Expected value = %b", latch_read_now_expected_prev);
		$display ("     Real value = %b", latch_read_now_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_latch_read_now_exp = latch_read_now_expected_prev;
	end
	if (
		( master_address_expected_prev[0] !== 1'bx ) && ( master_address_prev[0] !== master_address_expected_prev[0] )
		&& ((master_address_expected_prev[0] !== last_master_address_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[0] = master_address_expected_prev[0];
	end
	if (
		( master_address_expected_prev[1] !== 1'bx ) && ( master_address_prev[1] !== master_address_expected_prev[1] )
		&& ((master_address_expected_prev[1] !== last_master_address_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[1] = master_address_expected_prev[1];
	end
	if (
		( master_address_expected_prev[2] !== 1'bx ) && ( master_address_prev[2] !== master_address_expected_prev[2] )
		&& ((master_address_expected_prev[2] !== last_master_address_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[2] = master_address_expected_prev[2];
	end
	if (
		( master_address_expected_prev[3] !== 1'bx ) && ( master_address_prev[3] !== master_address_expected_prev[3] )
		&& ((master_address_expected_prev[3] !== last_master_address_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[3] = master_address_expected_prev[3];
	end
	if (
		( master_address_expected_prev[4] !== 1'bx ) && ( master_address_prev[4] !== master_address_expected_prev[4] )
		&& ((master_address_expected_prev[4] !== last_master_address_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[4] = master_address_expected_prev[4];
	end
	if (
		( master_address_expected_prev[5] !== 1'bx ) && ( master_address_prev[5] !== master_address_expected_prev[5] )
		&& ((master_address_expected_prev[5] !== last_master_address_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[5] = master_address_expected_prev[5];
	end
	if (
		( master_address_expected_prev[6] !== 1'bx ) && ( master_address_prev[6] !== master_address_expected_prev[6] )
		&& ((master_address_expected_prev[6] !== last_master_address_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[6] = master_address_expected_prev[6];
	end
	if (
		( master_address_expected_prev[7] !== 1'bx ) && ( master_address_prev[7] !== master_address_expected_prev[7] )
		&& ((master_address_expected_prev[7] !== last_master_address_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[7] = master_address_expected_prev[7];
	end
	if (
		( master_address_expected_prev[8] !== 1'bx ) && ( master_address_prev[8] !== master_address_expected_prev[8] )
		&& ((master_address_expected_prev[8] !== last_master_address_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[8] = master_address_expected_prev[8];
	end
	if (
		( master_address_expected_prev[9] !== 1'bx ) && ( master_address_prev[9] !== master_address_expected_prev[9] )
		&& ((master_address_expected_prev[9] !== last_master_address_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[9] = master_address_expected_prev[9];
	end
	if (
		( master_address_expected_prev[10] !== 1'bx ) && ( master_address_prev[10] !== master_address_expected_prev[10] )
		&& ((master_address_expected_prev[10] !== last_master_address_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[10] = master_address_expected_prev[10];
	end
	if (
		( master_address_expected_prev[11] !== 1'bx ) && ( master_address_prev[11] !== master_address_expected_prev[11] )
		&& ((master_address_expected_prev[11] !== last_master_address_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[11] = master_address_expected_prev[11];
	end
	if (
		( master_address_expected_prev[12] !== 1'bx ) && ( master_address_prev[12] !== master_address_expected_prev[12] )
		&& ((master_address_expected_prev[12] !== last_master_address_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[12] = master_address_expected_prev[12];
	end
	if (
		( master_address_expected_prev[13] !== 1'bx ) && ( master_address_prev[13] !== master_address_expected_prev[13] )
		&& ((master_address_expected_prev[13] !== last_master_address_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[13] = master_address_expected_prev[13];
	end
	if (
		( master_address_expected_prev[14] !== 1'bx ) && ( master_address_prev[14] !== master_address_expected_prev[14] )
		&& ((master_address_expected_prev[14] !== last_master_address_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[14] = master_address_expected_prev[14];
	end
	if (
		( master_address_expected_prev[15] !== 1'bx ) && ( master_address_prev[15] !== master_address_expected_prev[15] )
		&& ((master_address_expected_prev[15] !== last_master_address_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[15] = master_address_expected_prev[15];
	end
	if (
		( master_address_expected_prev[16] !== 1'bx ) && ( master_address_prev[16] !== master_address_expected_prev[16] )
		&& ((master_address_expected_prev[16] !== last_master_address_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[16] = master_address_expected_prev[16];
	end
	if (
		( master_address_expected_prev[17] !== 1'bx ) && ( master_address_prev[17] !== master_address_expected_prev[17] )
		&& ((master_address_expected_prev[17] !== last_master_address_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[17] = master_address_expected_prev[17];
	end
	if (
		( master_address_expected_prev[18] !== 1'bx ) && ( master_address_prev[18] !== master_address_expected_prev[18] )
		&& ((master_address_expected_prev[18] !== last_master_address_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[18] = master_address_expected_prev[18];
	end
	if (
		( master_address_expected_prev[19] !== 1'bx ) && ( master_address_prev[19] !== master_address_expected_prev[19] )
		&& ((master_address_expected_prev[19] !== last_master_address_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[19] = master_address_expected_prev[19];
	end
	if (
		( master_address_expected_prev[20] !== 1'bx ) && ( master_address_prev[20] !== master_address_expected_prev[20] )
		&& ((master_address_expected_prev[20] !== last_master_address_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[20] = master_address_expected_prev[20];
	end
	if (
		( master_address_expected_prev[21] !== 1'bx ) && ( master_address_prev[21] !== master_address_expected_prev[21] )
		&& ((master_address_expected_prev[21] !== last_master_address_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[21] = master_address_expected_prev[21];
	end
	if (
		( master_address_expected_prev[22] !== 1'bx ) && ( master_address_prev[22] !== master_address_expected_prev[22] )
		&& ((master_address_expected_prev[22] !== last_master_address_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[22] = master_address_expected_prev[22];
	end
	if (
		( master_address_expected_prev[23] !== 1'bx ) && ( master_address_prev[23] !== master_address_expected_prev[23] )
		&& ((master_address_expected_prev[23] !== last_master_address_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[23] = master_address_expected_prev[23];
	end
	if (
		( master_address_expected_prev[24] !== 1'bx ) && ( master_address_prev[24] !== master_address_expected_prev[24] )
		&& ((master_address_expected_prev[24] !== last_master_address_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[24] = master_address_expected_prev[24];
	end
	if (
		( master_address_expected_prev[25] !== 1'bx ) && ( master_address_prev[25] !== master_address_expected_prev[25] )
		&& ((master_address_expected_prev[25] !== last_master_address_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[25] = master_address_expected_prev[25];
	end
	if (
		( master_address_expected_prev[26] !== 1'bx ) && ( master_address_prev[26] !== master_address_expected_prev[26] )
		&& ((master_address_expected_prev[26] !== last_master_address_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[26] = master_address_expected_prev[26];
	end
	if (
		( master_address_expected_prev[27] !== 1'bx ) && ( master_address_prev[27] !== master_address_expected_prev[27] )
		&& ((master_address_expected_prev[27] !== last_master_address_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[27] = master_address_expected_prev[27];
	end
	if (
		( master_address_expected_prev[28] !== 1'bx ) && ( master_address_prev[28] !== master_address_expected_prev[28] )
		&& ((master_address_expected_prev[28] !== last_master_address_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[28] = master_address_expected_prev[28];
	end
	if (
		( master_address_expected_prev[29] !== 1'bx ) && ( master_address_prev[29] !== master_address_expected_prev[29] )
		&& ((master_address_expected_prev[29] !== last_master_address_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[29] = master_address_expected_prev[29];
	end
	if (
		( master_address_expected_prev[30] !== 1'bx ) && ( master_address_prev[30] !== master_address_expected_prev[30] )
		&& ((master_address_expected_prev[30] !== last_master_address_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[30] = master_address_expected_prev[30];
	end
	if (
		( master_address_expected_prev[31] !== 1'bx ) && ( master_address_prev[31] !== master_address_expected_prev[31] )
		&& ((master_address_expected_prev[31] !== last_master_address_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_address[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_address_expected_prev);
		$display ("     Real value = %b", master_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_master_address_exp[31] = master_address_expected_prev[31];
	end
	if (
		( master_byteenable_expected_prev[0] !== 1'bx ) && ( master_byteenable_prev[0] !== master_byteenable_expected_prev[0] )
		&& ((master_byteenable_expected_prev[0] !== last_master_byteenable_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_byteenable[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_byteenable_expected_prev);
		$display ("     Real value = %b", master_byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_master_byteenable_exp[0] = master_byteenable_expected_prev[0];
	end
	if (
		( master_byteenable_expected_prev[1] !== 1'bx ) && ( master_byteenable_prev[1] !== master_byteenable_expected_prev[1] )
		&& ((master_byteenable_expected_prev[1] !== last_master_byteenable_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_byteenable[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_byteenable_expected_prev);
		$display ("     Real value = %b", master_byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_master_byteenable_exp[1] = master_byteenable_expected_prev[1];
	end
	if (
		( master_byteenable_expected_prev[2] !== 1'bx ) && ( master_byteenable_prev[2] !== master_byteenable_expected_prev[2] )
		&& ((master_byteenable_expected_prev[2] !== last_master_byteenable_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_byteenable[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_byteenable_expected_prev);
		$display ("     Real value = %b", master_byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_master_byteenable_exp[2] = master_byteenable_expected_prev[2];
	end
	if (
		( master_byteenable_expected_prev[3] !== 1'bx ) && ( master_byteenable_prev[3] !== master_byteenable_expected_prev[3] )
		&& ((master_byteenable_expected_prev[3] !== last_master_byteenable_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_byteenable[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_byteenable_expected_prev);
		$display ("     Real value = %b", master_byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_master_byteenable_exp[3] = master_byteenable_expected_prev[3];
	end
	if (
		( master_read_expected_prev !== 1'bx ) && ( master_read_prev !== master_read_expected_prev )
		&& ((master_read_expected_prev !== last_master_read_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_read_expected_prev);
		$display ("     Real value = %b", master_read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_master_read_exp = master_read_expected_prev;
	end
	if (
		( master_write_expected_prev !== 1'bx ) && ( master_write_prev !== master_write_expected_prev )
		&& ((master_write_expected_prev !== last_master_write_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_write :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_write_expected_prev);
		$display ("     Real value = %b", master_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_master_write_exp = master_write_expected_prev;
	end
	if (
		( master_writedata_expected_prev[0] !== 1'bx ) && ( master_writedata_prev[0] !== master_writedata_expected_prev[0] )
		&& ((master_writedata_expected_prev[0] !== last_master_writedata_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[0] = master_writedata_expected_prev[0];
	end
	if (
		( master_writedata_expected_prev[1] !== 1'bx ) && ( master_writedata_prev[1] !== master_writedata_expected_prev[1] )
		&& ((master_writedata_expected_prev[1] !== last_master_writedata_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[1] = master_writedata_expected_prev[1];
	end
	if (
		( master_writedata_expected_prev[2] !== 1'bx ) && ( master_writedata_prev[2] !== master_writedata_expected_prev[2] )
		&& ((master_writedata_expected_prev[2] !== last_master_writedata_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[2] = master_writedata_expected_prev[2];
	end
	if (
		( master_writedata_expected_prev[3] !== 1'bx ) && ( master_writedata_prev[3] !== master_writedata_expected_prev[3] )
		&& ((master_writedata_expected_prev[3] !== last_master_writedata_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[3] = master_writedata_expected_prev[3];
	end
	if (
		( master_writedata_expected_prev[4] !== 1'bx ) && ( master_writedata_prev[4] !== master_writedata_expected_prev[4] )
		&& ((master_writedata_expected_prev[4] !== last_master_writedata_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[4] = master_writedata_expected_prev[4];
	end
	if (
		( master_writedata_expected_prev[5] !== 1'bx ) && ( master_writedata_prev[5] !== master_writedata_expected_prev[5] )
		&& ((master_writedata_expected_prev[5] !== last_master_writedata_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[5] = master_writedata_expected_prev[5];
	end
	if (
		( master_writedata_expected_prev[6] !== 1'bx ) && ( master_writedata_prev[6] !== master_writedata_expected_prev[6] )
		&& ((master_writedata_expected_prev[6] !== last_master_writedata_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[6] = master_writedata_expected_prev[6];
	end
	if (
		( master_writedata_expected_prev[7] !== 1'bx ) && ( master_writedata_prev[7] !== master_writedata_expected_prev[7] )
		&& ((master_writedata_expected_prev[7] !== last_master_writedata_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[7] = master_writedata_expected_prev[7];
	end
	if (
		( master_writedata_expected_prev[8] !== 1'bx ) && ( master_writedata_prev[8] !== master_writedata_expected_prev[8] )
		&& ((master_writedata_expected_prev[8] !== last_master_writedata_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[8] = master_writedata_expected_prev[8];
	end
	if (
		( master_writedata_expected_prev[9] !== 1'bx ) && ( master_writedata_prev[9] !== master_writedata_expected_prev[9] )
		&& ((master_writedata_expected_prev[9] !== last_master_writedata_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[9] = master_writedata_expected_prev[9];
	end
	if (
		( master_writedata_expected_prev[10] !== 1'bx ) && ( master_writedata_prev[10] !== master_writedata_expected_prev[10] )
		&& ((master_writedata_expected_prev[10] !== last_master_writedata_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[10] = master_writedata_expected_prev[10];
	end
	if (
		( master_writedata_expected_prev[11] !== 1'bx ) && ( master_writedata_prev[11] !== master_writedata_expected_prev[11] )
		&& ((master_writedata_expected_prev[11] !== last_master_writedata_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[11] = master_writedata_expected_prev[11];
	end
	if (
		( master_writedata_expected_prev[12] !== 1'bx ) && ( master_writedata_prev[12] !== master_writedata_expected_prev[12] )
		&& ((master_writedata_expected_prev[12] !== last_master_writedata_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[12] = master_writedata_expected_prev[12];
	end
	if (
		( master_writedata_expected_prev[13] !== 1'bx ) && ( master_writedata_prev[13] !== master_writedata_expected_prev[13] )
		&& ((master_writedata_expected_prev[13] !== last_master_writedata_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[13] = master_writedata_expected_prev[13];
	end
	if (
		( master_writedata_expected_prev[14] !== 1'bx ) && ( master_writedata_prev[14] !== master_writedata_expected_prev[14] )
		&& ((master_writedata_expected_prev[14] !== last_master_writedata_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[14] = master_writedata_expected_prev[14];
	end
	if (
		( master_writedata_expected_prev[15] !== 1'bx ) && ( master_writedata_prev[15] !== master_writedata_expected_prev[15] )
		&& ((master_writedata_expected_prev[15] !== last_master_writedata_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[15] = master_writedata_expected_prev[15];
	end
	if (
		( master_writedata_expected_prev[16] !== 1'bx ) && ( master_writedata_prev[16] !== master_writedata_expected_prev[16] )
		&& ((master_writedata_expected_prev[16] !== last_master_writedata_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[16] = master_writedata_expected_prev[16];
	end
	if (
		( master_writedata_expected_prev[17] !== 1'bx ) && ( master_writedata_prev[17] !== master_writedata_expected_prev[17] )
		&& ((master_writedata_expected_prev[17] !== last_master_writedata_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[17] = master_writedata_expected_prev[17];
	end
	if (
		( master_writedata_expected_prev[18] !== 1'bx ) && ( master_writedata_prev[18] !== master_writedata_expected_prev[18] )
		&& ((master_writedata_expected_prev[18] !== last_master_writedata_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[18] = master_writedata_expected_prev[18];
	end
	if (
		( master_writedata_expected_prev[19] !== 1'bx ) && ( master_writedata_prev[19] !== master_writedata_expected_prev[19] )
		&& ((master_writedata_expected_prev[19] !== last_master_writedata_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[19] = master_writedata_expected_prev[19];
	end
	if (
		( master_writedata_expected_prev[20] !== 1'bx ) && ( master_writedata_prev[20] !== master_writedata_expected_prev[20] )
		&& ((master_writedata_expected_prev[20] !== last_master_writedata_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[20] = master_writedata_expected_prev[20];
	end
	if (
		( master_writedata_expected_prev[21] !== 1'bx ) && ( master_writedata_prev[21] !== master_writedata_expected_prev[21] )
		&& ((master_writedata_expected_prev[21] !== last_master_writedata_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[21] = master_writedata_expected_prev[21];
	end
	if (
		( master_writedata_expected_prev[22] !== 1'bx ) && ( master_writedata_prev[22] !== master_writedata_expected_prev[22] )
		&& ((master_writedata_expected_prev[22] !== last_master_writedata_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[22] = master_writedata_expected_prev[22];
	end
	if (
		( master_writedata_expected_prev[23] !== 1'bx ) && ( master_writedata_prev[23] !== master_writedata_expected_prev[23] )
		&& ((master_writedata_expected_prev[23] !== last_master_writedata_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[23] = master_writedata_expected_prev[23];
	end
	if (
		( master_writedata_expected_prev[24] !== 1'bx ) && ( master_writedata_prev[24] !== master_writedata_expected_prev[24] )
		&& ((master_writedata_expected_prev[24] !== last_master_writedata_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[24] = master_writedata_expected_prev[24];
	end
	if (
		( master_writedata_expected_prev[25] !== 1'bx ) && ( master_writedata_prev[25] !== master_writedata_expected_prev[25] )
		&& ((master_writedata_expected_prev[25] !== last_master_writedata_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[25] = master_writedata_expected_prev[25];
	end
	if (
		( master_writedata_expected_prev[26] !== 1'bx ) && ( master_writedata_prev[26] !== master_writedata_expected_prev[26] )
		&& ((master_writedata_expected_prev[26] !== last_master_writedata_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[26] = master_writedata_expected_prev[26];
	end
	if (
		( master_writedata_expected_prev[27] !== 1'bx ) && ( master_writedata_prev[27] !== master_writedata_expected_prev[27] )
		&& ((master_writedata_expected_prev[27] !== last_master_writedata_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[27] = master_writedata_expected_prev[27];
	end
	if (
		( master_writedata_expected_prev[28] !== 1'bx ) && ( master_writedata_prev[28] !== master_writedata_expected_prev[28] )
		&& ((master_writedata_expected_prev[28] !== last_master_writedata_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[28] = master_writedata_expected_prev[28];
	end
	if (
		( master_writedata_expected_prev[29] !== 1'bx ) && ( master_writedata_prev[29] !== master_writedata_expected_prev[29] )
		&& ((master_writedata_expected_prev[29] !== last_master_writedata_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[29] = master_writedata_expected_prev[29];
	end
	if (
		( master_writedata_expected_prev[30] !== 1'bx ) && ( master_writedata_prev[30] !== master_writedata_expected_prev[30] )
		&& ((master_writedata_expected_prev[30] !== last_master_writedata_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[30] = master_writedata_expected_prev[30];
	end
	if (
		( master_writedata_expected_prev[31] !== 1'bx ) && ( master_writedata_prev[31] !== master_writedata_expected_prev[31] )
		&& ((master_writedata_expected_prev[31] !== last_master_writedata_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port master_writedata[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", master_writedata_expected_prev);
		$display ("     Real value = %b", master_writedata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_master_writedata_exp[31] = master_writedata_expected_prev[31];
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end
	if (
		( state_expected_prev[3] !== 1'bx ) && ( state_prev[3] !== state_expected_prev[3] )
		&& ((state_expected_prev[3] !== last_state_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[3] = state_expected_prev[3];
	end
	if (
		( state_expected_prev[4] !== 1'bx ) && ( state_prev[4] !== state_expected_prev[4] )
		&& ((state_expected_prev[4] !== last_state_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[4] = state_expected_prev[4];
	end
	if (
		( state_expected_prev[5] !== 1'bx ) && ( state_prev[5] !== state_expected_prev[5] )
		&& ((state_expected_prev[5] !== last_state_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[5] = state_expected_prev[5];
	end
	if (
		( state_expected_prev[6] !== 1'bx ) && ( state_prev[6] !== state_expected_prev[6] )
		&& ((state_expected_prev[6] !== last_state_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[6] = state_expected_prev[6];
	end
	if (
		( state_expected_prev[7] !== 1'bx ) && ( state_prev[7] !== state_expected_prev[7] )
		&& ((state_expected_prev[7] !== last_state_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[7] = state_expected_prev[7];
	end
	if (
		( state_expected_prev[8] !== 1'bx ) && ( state_prev[8] !== state_expected_prev[8] )
		&& ((state_expected_prev[8] !== last_state_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[8] = state_expected_prev[8];
	end
	if (
		( state_expected_prev[9] !== 1'bx ) && ( state_prev[9] !== state_expected_prev[9] )
		&& ((state_expected_prev[9] !== last_state_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[9] = state_expected_prev[9];
	end
	if (
		( state_expected_prev[10] !== 1'bx ) && ( state_prev[10] !== state_expected_prev[10] )
		&& ((state_expected_prev[10] !== last_state_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[10] = state_expected_prev[10];
	end
	if (
		( state_expected_prev[11] !== 1'bx ) && ( state_prev[11] !== state_expected_prev[11] )
		&& ((state_expected_prev[11] !== last_state_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[11] = state_expected_prev[11];
	end
	if (
		( state_expected_prev[12] !== 1'bx ) && ( state_prev[12] !== state_expected_prev[12] )
		&& ((state_expected_prev[12] !== last_state_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[12] = state_expected_prev[12];
	end
	if (
		( state_expected_prev[13] !== 1'bx ) && ( state_prev[13] !== state_expected_prev[13] )
		&& ((state_expected_prev[13] !== last_state_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[13] = state_expected_prev[13];
	end
	if (
		( state_expected_prev[14] !== 1'bx ) && ( state_prev[14] !== state_expected_prev[14] )
		&& ((state_expected_prev[14] !== last_state_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[14] = state_expected_prev[14];
	end
	if (
		( state_expected_prev[15] !== 1'bx ) && ( state_prev[15] !== state_expected_prev[15] )
		&& ((state_expected_prev[15] !== last_state_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[15] = state_expected_prev[15];
	end
	if (
		( user_read_data_expected_prev[0] !== 1'bx ) && ( user_read_data_prev[0] !== user_read_data_expected_prev[0] )
		&& ((user_read_data_expected_prev[0] !== last_user_read_data_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[0] = user_read_data_expected_prev[0];
	end
	if (
		( user_read_data_expected_prev[1] !== 1'bx ) && ( user_read_data_prev[1] !== user_read_data_expected_prev[1] )
		&& ((user_read_data_expected_prev[1] !== last_user_read_data_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[1] = user_read_data_expected_prev[1];
	end
	if (
		( user_read_data_expected_prev[2] !== 1'bx ) && ( user_read_data_prev[2] !== user_read_data_expected_prev[2] )
		&& ((user_read_data_expected_prev[2] !== last_user_read_data_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[2] = user_read_data_expected_prev[2];
	end
	if (
		( user_read_data_expected_prev[3] !== 1'bx ) && ( user_read_data_prev[3] !== user_read_data_expected_prev[3] )
		&& ((user_read_data_expected_prev[3] !== last_user_read_data_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[3] = user_read_data_expected_prev[3];
	end
	if (
		( user_read_data_expected_prev[4] !== 1'bx ) && ( user_read_data_prev[4] !== user_read_data_expected_prev[4] )
		&& ((user_read_data_expected_prev[4] !== last_user_read_data_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[4] = user_read_data_expected_prev[4];
	end
	if (
		( user_read_data_expected_prev[5] !== 1'bx ) && ( user_read_data_prev[5] !== user_read_data_expected_prev[5] )
		&& ((user_read_data_expected_prev[5] !== last_user_read_data_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[5] = user_read_data_expected_prev[5];
	end
	if (
		( user_read_data_expected_prev[6] !== 1'bx ) && ( user_read_data_prev[6] !== user_read_data_expected_prev[6] )
		&& ((user_read_data_expected_prev[6] !== last_user_read_data_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[6] = user_read_data_expected_prev[6];
	end
	if (
		( user_read_data_expected_prev[7] !== 1'bx ) && ( user_read_data_prev[7] !== user_read_data_expected_prev[7] )
		&& ((user_read_data_expected_prev[7] !== last_user_read_data_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[7] = user_read_data_expected_prev[7];
	end
	if (
		( user_read_data_expected_prev[8] !== 1'bx ) && ( user_read_data_prev[8] !== user_read_data_expected_prev[8] )
		&& ((user_read_data_expected_prev[8] !== last_user_read_data_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[8] = user_read_data_expected_prev[8];
	end
	if (
		( user_read_data_expected_prev[9] !== 1'bx ) && ( user_read_data_prev[9] !== user_read_data_expected_prev[9] )
		&& ((user_read_data_expected_prev[9] !== last_user_read_data_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[9] = user_read_data_expected_prev[9];
	end
	if (
		( user_read_data_expected_prev[10] !== 1'bx ) && ( user_read_data_prev[10] !== user_read_data_expected_prev[10] )
		&& ((user_read_data_expected_prev[10] !== last_user_read_data_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[10] = user_read_data_expected_prev[10];
	end
	if (
		( user_read_data_expected_prev[11] !== 1'bx ) && ( user_read_data_prev[11] !== user_read_data_expected_prev[11] )
		&& ((user_read_data_expected_prev[11] !== last_user_read_data_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[11] = user_read_data_expected_prev[11];
	end
	if (
		( user_read_data_expected_prev[12] !== 1'bx ) && ( user_read_data_prev[12] !== user_read_data_expected_prev[12] )
		&& ((user_read_data_expected_prev[12] !== last_user_read_data_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[12] = user_read_data_expected_prev[12];
	end
	if (
		( user_read_data_expected_prev[13] !== 1'bx ) && ( user_read_data_prev[13] !== user_read_data_expected_prev[13] )
		&& ((user_read_data_expected_prev[13] !== last_user_read_data_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[13] = user_read_data_expected_prev[13];
	end
	if (
		( user_read_data_expected_prev[14] !== 1'bx ) && ( user_read_data_prev[14] !== user_read_data_expected_prev[14] )
		&& ((user_read_data_expected_prev[14] !== last_user_read_data_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[14] = user_read_data_expected_prev[14];
	end
	if (
		( user_read_data_expected_prev[15] !== 1'bx ) && ( user_read_data_prev[15] !== user_read_data_expected_prev[15] )
		&& ((user_read_data_expected_prev[15] !== last_user_read_data_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[15] = user_read_data_expected_prev[15];
	end
	if (
		( user_read_data_expected_prev[16] !== 1'bx ) && ( user_read_data_prev[16] !== user_read_data_expected_prev[16] )
		&& ((user_read_data_expected_prev[16] !== last_user_read_data_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[16] = user_read_data_expected_prev[16];
	end
	if (
		( user_read_data_expected_prev[17] !== 1'bx ) && ( user_read_data_prev[17] !== user_read_data_expected_prev[17] )
		&& ((user_read_data_expected_prev[17] !== last_user_read_data_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[17] = user_read_data_expected_prev[17];
	end
	if (
		( user_read_data_expected_prev[18] !== 1'bx ) && ( user_read_data_prev[18] !== user_read_data_expected_prev[18] )
		&& ((user_read_data_expected_prev[18] !== last_user_read_data_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[18] = user_read_data_expected_prev[18];
	end
	if (
		( user_read_data_expected_prev[19] !== 1'bx ) && ( user_read_data_prev[19] !== user_read_data_expected_prev[19] )
		&& ((user_read_data_expected_prev[19] !== last_user_read_data_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[19] = user_read_data_expected_prev[19];
	end
	if (
		( user_read_data_expected_prev[20] !== 1'bx ) && ( user_read_data_prev[20] !== user_read_data_expected_prev[20] )
		&& ((user_read_data_expected_prev[20] !== last_user_read_data_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[20] = user_read_data_expected_prev[20];
	end
	if (
		( user_read_data_expected_prev[21] !== 1'bx ) && ( user_read_data_prev[21] !== user_read_data_expected_prev[21] )
		&& ((user_read_data_expected_prev[21] !== last_user_read_data_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[21] = user_read_data_expected_prev[21];
	end
	if (
		( user_read_data_expected_prev[22] !== 1'bx ) && ( user_read_data_prev[22] !== user_read_data_expected_prev[22] )
		&& ((user_read_data_expected_prev[22] !== last_user_read_data_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[22] = user_read_data_expected_prev[22];
	end
	if (
		( user_read_data_expected_prev[23] !== 1'bx ) && ( user_read_data_prev[23] !== user_read_data_expected_prev[23] )
		&& ((user_read_data_expected_prev[23] !== last_user_read_data_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[23] = user_read_data_expected_prev[23];
	end
	if (
		( user_read_data_expected_prev[24] !== 1'bx ) && ( user_read_data_prev[24] !== user_read_data_expected_prev[24] )
		&& ((user_read_data_expected_prev[24] !== last_user_read_data_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[24] = user_read_data_expected_prev[24];
	end
	if (
		( user_read_data_expected_prev[25] !== 1'bx ) && ( user_read_data_prev[25] !== user_read_data_expected_prev[25] )
		&& ((user_read_data_expected_prev[25] !== last_user_read_data_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[25] = user_read_data_expected_prev[25];
	end
	if (
		( user_read_data_expected_prev[26] !== 1'bx ) && ( user_read_data_prev[26] !== user_read_data_expected_prev[26] )
		&& ((user_read_data_expected_prev[26] !== last_user_read_data_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[26] = user_read_data_expected_prev[26];
	end
	if (
		( user_read_data_expected_prev[27] !== 1'bx ) && ( user_read_data_prev[27] !== user_read_data_expected_prev[27] )
		&& ((user_read_data_expected_prev[27] !== last_user_read_data_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[27] = user_read_data_expected_prev[27];
	end
	if (
		( user_read_data_expected_prev[28] !== 1'bx ) && ( user_read_data_prev[28] !== user_read_data_expected_prev[28] )
		&& ((user_read_data_expected_prev[28] !== last_user_read_data_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[28] = user_read_data_expected_prev[28];
	end
	if (
		( user_read_data_expected_prev[29] !== 1'bx ) && ( user_read_data_prev[29] !== user_read_data_expected_prev[29] )
		&& ((user_read_data_expected_prev[29] !== last_user_read_data_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[29] = user_read_data_expected_prev[29];
	end
	if (
		( user_read_data_expected_prev[30] !== 1'bx ) && ( user_read_data_prev[30] !== user_read_data_expected_prev[30] )
		&& ((user_read_data_expected_prev[30] !== last_user_read_data_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[30] = user_read_data_expected_prev[30];
	end
	if (
		( user_read_data_expected_prev[31] !== 1'bx ) && ( user_read_data_prev[31] !== user_read_data_expected_prev[31] )
		&& ((user_read_data_expected_prev[31] !== last_user_read_data_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port user_read_data[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", user_read_data_expected_prev);
		$display ("     Real value = %b", user_read_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_user_read_data_exp[31] = user_read_data_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module avalon_master_state_machine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg is_write;
reg [31:0] master_readdata;
reg master_waitrequest;
reg reset_n;
reg start;
reg [31:0] user_address;
reg [31:0] user_write_data;
// wires                                               
wire finish;
wire latch_read_now;
wire [31:0] master_address;
wire [3:0] master_byteenable;
wire master_read;
wire master_write;
wire [31:0] master_writedata;
wire [15:0] state;
wire [31:0] user_read_data;

wire sampler;                             

// assign statements (if any)                          
avalon_master_state_machine i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.finish(finish),
	.is_write(is_write),
	.latch_read_now(latch_read_now),
	.master_address(master_address),
	.master_byteenable(master_byteenable),
	.master_read(master_read),
	.master_readdata(master_readdata),
	.master_waitrequest(master_waitrequest),
	.master_write(master_write),
	.master_writedata(master_writedata),
	.reset_n(reset_n),
	.start(start),
	.state(state),
	.user_address(user_address),
	.user_read_data(user_read_data),
	.user_write_data(user_write_data)
);

// reset_n
always
begin
	reset_n = 1'b1;
	reset_n = #46050 1'b0;
	reset_n = #950 1'b1;
	#953000;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

// start
initial
begin
	start = 1'b0;
	start = #8000 1'b1;
	start = #1000 1'b0;
	start = #20000 1'b1;
	start = #1000 1'b0;
end 

// is_write
initial
begin
	is_write = 1'b0;
	is_write = #6000 1'b1;
	is_write = #11000 1'b0;
end 
// user_address[ 31 ]
initial
begin
	user_address[31] = 1'b0;
end 
// user_address[ 30 ]
initial
begin
	user_address[30] = 1'b0;
end 
// user_address[ 29 ]
initial
begin
	user_address[29] = 1'b0;
end 
// user_address[ 28 ]
initial
begin
	user_address[28] = 1'b0;
	user_address[28] = #24000 1'b1;
end 
// user_address[ 27 ]
initial
begin
	user_address[27] = 1'b0;
end 
// user_address[ 26 ]
initial
begin
	user_address[26] = 1'b0;
end 
// user_address[ 25 ]
initial
begin
	user_address[25] = 1'b0;
	user_address[25] = #24000 1'b1;
end 
// user_address[ 24 ]
initial
begin
	user_address[24] = 1'b0;
end 
// user_address[ 23 ]
initial
begin
	user_address[23] = 1'b0;
	user_address[23] = #5000 1'b1;
	user_address[23] = #19000 1'b0;
end 
// user_address[ 22 ]
initial
begin
	user_address[22] = 1'b0;
end 
// user_address[ 21 ]
initial
begin
	user_address[21] = 1'b0;
	user_address[21] = #5000 1'b1;
end 
// user_address[ 20 ]
initial
begin
	user_address[20] = 1'b0;
	user_address[20] = #24000 1'b1;
end 
// user_address[ 19 ]
initial
begin
	user_address[19] = 1'b0;
	user_address[19] = #5000 1'b1;
	user_address[19] = #19000 1'b0;
end 
// user_address[ 18 ]
initial
begin
	user_address[18] = 1'b0;
	user_address[18] = #24000 1'b1;
end 
// user_address[ 17 ]
initial
begin
	user_address[17] = 1'b0;
	user_address[17] = #5000 1'b1;
	user_address[17] = #19000 1'b0;
end 
// user_address[ 16 ]
initial
begin
	user_address[16] = 1'b0;
	user_address[16] = #5000 1'b1;
	user_address[16] = #19000 1'b0;
end 
// user_address[ 15 ]
initial
begin
	user_address[15] = 1'b0;
	user_address[15] = #5000 1'b1;
	user_address[15] = #19000 1'b0;
end 
// user_address[ 14 ]
initial
begin
	user_address[14] = 1'b0;
	user_address[14] = #5000 1'b1;
	user_address[14] = #19000 1'b0;
end 
// user_address[ 13 ]
initial
begin
	user_address[13] = 1'b0;
end 
// user_address[ 12 ]
initial
begin
	user_address[12] = 1'b0;
	user_address[12] = #24000 1'b1;
end 
// user_address[ 11 ]
initial
begin
	user_address[11] = 1'b0;
	user_address[11] = #5000 1'b1;
	user_address[11] = #19000 1'b0;
end 
// user_address[ 10 ]
initial
begin
	user_address[10] = 1'b0;
	user_address[10] = #5000 1'b1;
	user_address[10] = #19000 1'b0;
end 
// user_address[ 9 ]
initial
begin
	user_address[9] = 1'b0;
	user_address[9] = #24000 1'b1;
end 
// user_address[ 8 ]
initial
begin
	user_address[8] = 1'b0;
	user_address[8] = #5000 1'b1;
end 
// user_address[ 7 ]
initial
begin
	user_address[7] = 1'b0;
	user_address[7] = #5000 1'b1;
	user_address[7] = #19000 1'b0;
end 
// user_address[ 6 ]
initial
begin
	user_address[6] = 1'b0;
	user_address[6] = #5000 1'b1;
end 
// user_address[ 5 ]
initial
begin
	user_address[5] = 1'b0;
	user_address[5] = #5000 1'b1;
	user_address[5] = #19000 1'b0;
end 
// user_address[ 4 ]
initial
begin
	user_address[4] = 1'b0;
	user_address[4] = #24000 1'b1;
end 
// user_address[ 3 ]
initial
begin
	user_address[3] = 1'b0;
	user_address[3] = #5000 1'b1;
	user_address[3] = #19000 1'b0;
end 
// user_address[ 2 ]
initial
begin
	user_address[2] = 1'b0;
	user_address[2] = #5000 1'b1;
end 
// user_address[ 1 ]
initial
begin
	user_address[1] = 1'b0;
	user_address[1] = #5000 1'b1;
	user_address[1] = #19000 1'b0;
end 
// user_address[ 0 ]
initial
begin
	user_address[0] = 1'b0;
	user_address[0] = #5000 1'b1;
	user_address[0] = #19000 1'b0;
end 
// user_write_data[ 31 ]
initial
begin
	user_write_data[31] = 1'b1;
	user_write_data[31] = #5000 1'b0;
	user_write_data[31] = #19000 1'b1;
end 
// user_write_data[ 30 ]
initial
begin
	user_write_data[30] = 1'b1;
	user_write_data[30] = #5000 1'b0;
	user_write_data[30] = #19000 1'b1;
end 
// user_write_data[ 29 ]
initial
begin
	user_write_data[29] = 1'b1;
end 
// user_write_data[ 28 ]
initial
begin
	user_write_data[28] = 1'b1;
end 
// user_write_data[ 27 ]
initial
begin
	user_write_data[27] = 1'b1;
	user_write_data[27] = #5000 1'b0;
	user_write_data[27] = #19000 1'b1;
end 
// user_write_data[ 26 ]
initial
begin
	user_write_data[26] = 1'b1;
	user_write_data[26] = #5000 1'b0;
	user_write_data[26] = #19000 1'b1;
end 
// user_write_data[ 25 ]
initial
begin
	user_write_data[25] = 1'b1;
end 
// user_write_data[ 24 ]
initial
begin
	user_write_data[24] = 1'b1;
end 
// user_write_data[ 23 ]
initial
begin
	user_write_data[23] = 1'b1;
	user_write_data[23] = #5000 1'b0;
	user_write_data[23] = #19000 1'b1;
end 
// user_write_data[ 22 ]
initial
begin
	user_write_data[22] = 1'b1;
end 
// user_write_data[ 21 ]
initial
begin
	user_write_data[21] = 1'b1;
	user_write_data[21] = #5000 1'b0;
	user_write_data[21] = #19000 1'b1;
end 
// user_write_data[ 20 ]
initial
begin
	user_write_data[20] = 1'b1;
	user_write_data[20] = #5000 1'b0;
	user_write_data[20] = #19000 1'b1;
end 
// user_write_data[ 19 ]
initial
begin
	user_write_data[19] = 1'b1;
	user_write_data[19] = #5000 1'b0;
	user_write_data[19] = #19000 1'b1;
end 
// user_write_data[ 18 ]
initial
begin
	user_write_data[18] = 1'b1;
end 
// user_write_data[ 17 ]
initial
begin
	user_write_data[17] = 1'b1;
	user_write_data[17] = #5000 1'b0;
	user_write_data[17] = #19000 1'b1;
end 
// user_write_data[ 16 ]
initial
begin
	user_write_data[16] = 1'b1;
	user_write_data[16] = #5000 1'b0;
	user_write_data[16] = #19000 1'b1;
end 
// user_write_data[ 15 ]
initial
begin
	user_write_data[15] = 1'b1;
end 
// user_write_data[ 14 ]
initial
begin
	user_write_data[14] = 1'b1;
	user_write_data[14] = #5000 1'b0;
	user_write_data[14] = #19000 1'b1;
end 
// user_write_data[ 13 ]
initial
begin
	user_write_data[13] = 1'b1;
	user_write_data[13] = #5000 1'b0;
	user_write_data[13] = #19000 1'b1;
end 
// user_write_data[ 12 ]
initial
begin
	user_write_data[12] = 1'b1;
	user_write_data[12] = #5000 1'b0;
	user_write_data[12] = #19000 1'b1;
end 
// user_write_data[ 11 ]
initial
begin
	user_write_data[11] = 1'b1;
end 
// user_write_data[ 10 ]
initial
begin
	user_write_data[10] = 1'b1;
	user_write_data[10] = #5000 1'b0;
	user_write_data[10] = #19000 1'b1;
end 
// user_write_data[ 9 ]
initial
begin
	user_write_data[9] = 1'b1;
	user_write_data[9] = #5000 1'b0;
	user_write_data[9] = #19000 1'b1;
end 
// user_write_data[ 8 ]
initial
begin
	user_write_data[8] = 1'b1;
	user_write_data[8] = #5000 1'b0;
	user_write_data[8] = #19000 1'b1;
end 
// user_write_data[ 7 ]
initial
begin
	user_write_data[7] = 1'b1;
	user_write_data[7] = #5000 1'b0;
	user_write_data[7] = #19000 1'b1;
end 
// user_write_data[ 6 ]
initial
begin
	user_write_data[6] = 1'b1;
	user_write_data[6] = #5000 1'b0;
	user_write_data[6] = #19000 1'b1;
end 
// user_write_data[ 5 ]
initial
begin
	user_write_data[5] = 1'b1;
end 
// user_write_data[ 4 ]
initial
begin
	user_write_data[4] = 1'b1;
end 
// user_write_data[ 3 ]
initial
begin
	user_write_data[3] = 1'b1;
end 
// user_write_data[ 2 ]
initial
begin
	user_write_data[2] = 1'b1;
	user_write_data[2] = #5000 1'b0;
	user_write_data[2] = #19000 1'b1;
end 
// user_write_data[ 1 ]
initial
begin
	user_write_data[1] = 1'b1;
	user_write_data[1] = #5000 1'b0;
	user_write_data[1] = #19000 1'b1;
end 
// user_write_data[ 0 ]
initial
begin
	user_write_data[0] = 1'b1;
end 
// master_readdata[ 31 ]
initial
begin
	master_readdata[31] = 1'b0;
	master_readdata[31] = #50000 1'b1;
	master_readdata[31] = #100000 1'b0;
	master_readdata[31] = #150000 1'b1;
	master_readdata[31] = #50000 1'b0;
	master_readdata[31] = #50000 1'b1;
	master_readdata[31] = #200000 1'b0;
	master_readdata[31] = #50000 1'b1;
	master_readdata[31] = #150000 1'b0;
	master_readdata[31] = #50000 1'b1;
end 
// master_readdata[ 30 ]
initial
begin
	master_readdata[30] = 1'b1;
	master_readdata[30] = #250000 1'b0;
	master_readdata[30] = #50000 1'b1;
	master_readdata[30] = #50000 1'b0;
	master_readdata[30] = #50000 1'b1;
	master_readdata[30] = #100000 1'b0;
	master_readdata[30] = #100000 1'b1;
	master_readdata[30] = #250000 1'b0;
end 
// master_readdata[ 29 ]
initial
begin
	master_readdata[29] = 1'b1;
	master_readdata[29] = #150000 1'b0;
	master_readdata[29] = #100000 1'b1;
	master_readdata[29] = #250000 1'b0;
	master_readdata[29] = #100000 1'b1;
	master_readdata[29] = #50000 1'b0;
	master_readdata[29] = #50000 1'b1;
	master_readdata[29] = #50000 1'b0;
	master_readdata[29] = #100000 1'b1;
end 
// master_readdata[ 28 ]
initial
begin
	master_readdata[28] = 1'b0;
	master_readdata[28] = #50000 1'b1;
	master_readdata[28] = #50000 1'b0;
	master_readdata[28] = #150000 1'b1;
	master_readdata[28] = #50000 1'b0;
	master_readdata[28] = #50000 1'b1;
	master_readdata[28] = #350000 1'b0;
	master_readdata[28] = #100000 1'b1;
	master_readdata[28] = #150000 1'b0;
end 
// master_readdata[ 27 ]
initial
begin
	master_readdata[27] = 1'b1;
	master_readdata[27] = #50000 1'b0;
	master_readdata[27] = #250000 1'b1;
	master_readdata[27] = #150000 1'b0;
	master_readdata[27] = #100000 1'b1;
	master_readdata[27] = #50000 1'b0;
	master_readdata[27] = #50000 1'b1;
	master_readdata[27] = #100000 1'b0;
	master_readdata[27] = #150000 1'b1;
	master_readdata[27] = #50000 1'b0;
end 
// master_readdata[ 26 ]
initial
begin
	master_readdata[26] = 1'b1;
	master_readdata[26] = #250000 1'b0;
	master_readdata[26] = #50000 1'b1;
	master_readdata[26] = #100000 1'b0;
	master_readdata[26] = #50000 1'b1;
	master_readdata[26] = #100000 1'b0;
	master_readdata[26] = #100000 1'b1;
	master_readdata[26] = #50000 1'b0;
	master_readdata[26] = #50000 1'b1;
	master_readdata[26] = #150000 1'b0;
	master_readdata[26] = #50000 1'b1;
end 
// master_readdata[ 25 ]
initial
begin
	master_readdata[25] = 1'b1;
	master_readdata[25] = #300000 1'b0;
	master_readdata[25] = #200000 1'b1;
	master_readdata[25] = #100000 1'b0;
	master_readdata[25] = #100000 1'b1;
	master_readdata[25] = #50000 1'b0;
	master_readdata[25] = #50000 1'b1;
	master_readdata[25] = #50000 1'b0;
end 
// master_readdata[ 24 ]
initial
begin
	master_readdata[24] = 1'b1;
	master_readdata[24] = #100000 1'b0;
	master_readdata[24] = #50000 1'b1;
	master_readdata[24] = #50000 1'b0;
	master_readdata[24] = #100000 1'b1;
	master_readdata[24] = #50000 1'b0;
	master_readdata[24] = #50000 1'b1;
	master_readdata[24] = #100000 1'b0;
	master_readdata[24] = #200000 1'b1;
	master_readdata[24] = #100000 1'b0;
	master_readdata[24] = #150000 1'b1;
end 
// master_readdata[ 23 ]
initial
begin
	master_readdata[23] = 1'b0;
	master_readdata[23] = #50000 1'b1;
	master_readdata[23] = #100000 1'b0;
	master_readdata[23] = #250000 1'b1;
	master_readdata[23] = #100000 1'b0;
	master_readdata[23] = #50000 1'b1;
	master_readdata[23] = #50000 1'b0;
	master_readdata[23] = #150000 1'b1;
	master_readdata[23] = #150000 1'b0;
end 
// master_readdata[ 22 ]
initial
begin
	master_readdata[22] = 1'b0;
	master_readdata[22] = #50000 1'b1;
	master_readdata[22] = #50000 1'b0;
	master_readdata[22] = #50000 1'b1;
	master_readdata[22] = #100000 1'b0;
	master_readdata[22] = #50000 1'b1;
	master_readdata[22] = #150000 1'b0;
	master_readdata[22] = #200000 1'b1;
	master_readdata[22] = #150000 1'b0;
	master_readdata[22] = #50000 1'b1;
end 
// master_readdata[ 21 ]
initial
begin
	master_readdata[21] = 1'b1;
	master_readdata[21] = #50000 1'b0;
	master_readdata[21] = #150000 1'b1;
	master_readdata[21] = #300000 1'b0;
	master_readdata[21] = #50000 1'b1;
	master_readdata[21] = #150000 1'b0;
	master_readdata[21] = #50000 1'b1;
	master_readdata[21] = #50000 1'b0;
	master_readdata[21] = #50000 1'b1;
end 
// master_readdata[ 20 ]
initial
begin
	master_readdata[20] = 1'b1;
	master_readdata[20] = #100000 1'b0;
	master_readdata[20] = #50000 1'b1;
	master_readdata[20] = #150000 1'b0;
	master_readdata[20] = #200000 1'b1;
	master_readdata[20] = #100000 1'b0;
	master_readdata[20] = #50000 1'b1;
	master_readdata[20] = #150000 1'b0;
	master_readdata[20] = #50000 1'b1;
end 
// master_readdata[ 19 ]
initial
begin
	master_readdata[19] = 1'b0;
	master_readdata[19] = #150000 1'b1;
	master_readdata[19] = #50000 1'b0;
	master_readdata[19] = #50000 1'b1;
	master_readdata[19] = #50000 1'b0;
	master_readdata[19] = #150000 1'b1;
	master_readdata[19] = #50000 1'b0;
	master_readdata[19] = #200000 1'b1;
	master_readdata[19] = #150000 1'b0;
	master_readdata[19] = #50000 1'b1;
	master_readdata[19] = #50000 1'b0;
end 
// master_readdata[ 18 ]
initial
begin
	master_readdata[18] = 1'b0;
	master_readdata[18] = #200000 1'b1;
	master_readdata[18] = #50000 1'b0;
	master_readdata[18] = #100000 1'b1;
	master_readdata[18] = #50000 1'b0;
	master_readdata[18] = #50000 1'b1;
	master_readdata[18] = #50000 1'b0;
	master_readdata[18] = #100000 1'b1;
	master_readdata[18] = #100000 1'b0;
	master_readdata[18] = #50000 1'b1;
	master_readdata[18] = #100000 1'b0;
	master_readdata[18] = #50000 1'b1;
end 
// master_readdata[ 17 ]
initial
begin
	master_readdata[17] = 1'b1;
	master_readdata[17] = #50000 1'b0;
	master_readdata[17] = #50000 1'b1;
	master_readdata[17] = #50000 1'b0;
	master_readdata[17] = #50000 1'b1;
	master_readdata[17] = #50000 1'b0;
	master_readdata[17] = #50000 1'b1;
	master_readdata[17] = #150000 1'b0;
	master_readdata[17] = #50000 1'b1;
	master_readdata[17] = #50000 1'b0;
	master_readdata[17] = #100000 1'b1;
	master_readdata[17] = #150000 1'b0;
	master_readdata[17] = #100000 1'b1;
	master_readdata[17] = #50000 1'b0;
end 
// master_readdata[ 16 ]
initial
begin
	master_readdata[16] = 1'b1;
	master_readdata[16] = #50000 1'b0;
	master_readdata[16] = #50000 1'b1;
	master_readdata[16] = #100000 1'b0;
	master_readdata[16] = #100000 1'b1;
	master_readdata[16] = #50000 1'b0;
	master_readdata[16] = #300000 1'b1;
	master_readdata[16] = #100000 1'b0;
	master_readdata[16] = #100000 1'b1;
	master_readdata[16] = #50000 1'b0;
	master_readdata[16] = #50000 1'b1;
end 
// master_readdata[ 15 ]
initial
begin
	master_readdata[15] = 1'b1;
	master_readdata[15] = #200000 1'b0;
	master_readdata[15] = #50000 1'b1;
	master_readdata[15] = #150000 1'b0;
	master_readdata[15] = #50000 1'b1;
	master_readdata[15] = #100000 1'b0;
	master_readdata[15] = #100000 1'b1;
	master_readdata[15] = #50000 1'b0;
	master_readdata[15] = #150000 1'b1;
	master_readdata[15] = #50000 1'b0;
	master_readdata[15] = #50000 1'b1;
end 
// master_readdata[ 14 ]
initial
begin
	master_readdata[14] = 1'b1;
	master_readdata[14] = #150000 1'b0;
	master_readdata[14] = #50000 1'b1;
	master_readdata[14] = #200000 1'b0;
	master_readdata[14] = #50000 1'b1;
	master_readdata[14] = #150000 1'b0;
	master_readdata[14] = #50000 1'b1;
	master_readdata[14] = #150000 1'b0;
	master_readdata[14] = #50000 1'b1;
end 
// master_readdata[ 13 ]
initial
begin
	master_readdata[13] = 1'b1;
	master_readdata[13] = #50000 1'b0;
	master_readdata[13] = #200000 1'b1;
	master_readdata[13] = #50000 1'b0;
	master_readdata[13] = #150000 1'b1;
	master_readdata[13] = #50000 1'b0;
	master_readdata[13] = #50000 1'b1;
	master_readdata[13] = #50000 1'b0;
	master_readdata[13] = #250000 1'b1;
	master_readdata[13] = #50000 1'b0;
	master_readdata[13] = #50000 1'b1;
end 
// master_readdata[ 12 ]
initial
begin
	master_readdata[12] = 1'b1;
	master_readdata[12] = #50000 1'b0;
	master_readdata[12] = #50000 1'b1;
	master_readdata[12] = #50000 1'b0;
	master_readdata[12] = #100000 1'b1;
	master_readdata[12] = #50000 1'b0;
	master_readdata[12] = #150000 1'b1;
	master_readdata[12] = #50000 1'b0;
	master_readdata[12] = #50000 1'b1;
	master_readdata[12] = #350000 1'b0;
end 
// master_readdata[ 11 ]
initial
begin
	master_readdata[11] = 1'b0;
	master_readdata[11] = #200000 1'b1;
	master_readdata[11] = #100000 1'b0;
	master_readdata[11] = #100000 1'b1;
	master_readdata[11] = #50000 1'b0;
	master_readdata[11] = #50000 1'b1;
	master_readdata[11] = #150000 1'b0;
	master_readdata[11] = #100000 1'b1;
	master_readdata[11] = #150000 1'b0;
	master_readdata[11] = #50000 1'b1;
end 
// master_readdata[ 10 ]
initial
begin
	master_readdata[10] = 1'b0;
	master_readdata[10] = #50000 1'b1;
	master_readdata[10] = #150000 1'b0;
	master_readdata[10] = #150000 1'b1;
	master_readdata[10] = #200000 1'b0;
	master_readdata[10] = #150000 1'b1;
	master_readdata[10] = #50000 1'b0;
	master_readdata[10] = #50000 1'b1;
end 
// master_readdata[ 9 ]
initial
begin
	master_readdata[9] = 1'b0;
	master_readdata[9] = #50000 1'b1;
	master_readdata[9] = #50000 1'b0;
	master_readdata[9] = #150000 1'b1;
	master_readdata[9] = #400000 1'b0;
	master_readdata[9] = #50000 1'b1;
	master_readdata[9] = #50000 1'b0;
	master_readdata[9] = #200000 1'b1;
end 
// master_readdata[ 8 ]
initial
begin
	master_readdata[8] = 1'b0;
	master_readdata[8] = #50000 1'b1;
	master_readdata[8] = #50000 1'b0;
	master_readdata[8] = #50000 1'b1;
	master_readdata[8] = #100000 1'b0;
	master_readdata[8] = #350000 1'b1;
	master_readdata[8] = #100000 1'b0;
	master_readdata[8] = #150000 1'b1;
	master_readdata[8] = #50000 1'b0;
end 
// master_readdata[ 7 ]
initial
begin
	master_readdata[7] = 1'b1;
	master_readdata[7] = #50000 1'b0;
	master_readdata[7] = #150000 1'b1;
	master_readdata[7] = #50000 1'b0;
	master_readdata[7] = #50000 1'b1;
	master_readdata[7] = #100000 1'b0;
	master_readdata[7] = #50000 1'b1;
	master_readdata[7] = #50000 1'b0;
	master_readdata[7] = #450000 1'b1;
end 
// master_readdata[ 6 ]
initial
begin
	master_readdata[6] = 1'b1;
	master_readdata[6] = #50000 1'b0;
	master_readdata[6] = #100000 1'b1;
	master_readdata[6] = #50000 1'b0;
	master_readdata[6] = #50000 1'b1;
	master_readdata[6] = #100000 1'b0;
	master_readdata[6] = #50000 1'b1;
	master_readdata[6] = #300000 1'b0;
	master_readdata[6] = #50000 1'b1;
	master_readdata[6] = #50000 1'b0;
	master_readdata[6] = #50000 1'b1;
	master_readdata[6] = #50000 1'b0;
	master_readdata[6] = #50000 1'b1;
end 
// master_readdata[ 5 ]
initial
begin
	master_readdata[5] = 1'b0;
	master_readdata[5] = #50000 1'b1;
	master_readdata[5] = #50000 1'b0;
	master_readdata[5] = #150000 1'b1;
	master_readdata[5] = #50000 1'b0;
	master_readdata[5] = #50000 1'b1;
	master_readdata[5] = #100000 1'b0;
	master_readdata[5] = #50000 1'b1;
	master_readdata[5] = #150000 1'b0;
	master_readdata[5] = #100000 1'b1;
	master_readdata[5] = #50000 1'b0;
	master_readdata[5] = #100000 1'b1;
end 
// master_readdata[ 4 ]
initial
begin
	master_readdata[4] = 1'b1;
	master_readdata[4] = #50000 1'b0;
	master_readdata[4] = #50000 1'b1;
	master_readdata[4] = #100000 1'b0;
	master_readdata[4] = #150000 1'b1;
	master_readdata[4] = #50000 1'b0;
	master_readdata[4] = #200000 1'b1;
	master_readdata[4] = #150000 1'b0;
	master_readdata[4] = #50000 1'b1;
end 
// master_readdata[ 3 ]
initial
begin
	master_readdata[3] = 1'b1;
	master_readdata[3] = #100000 1'b0;
	master_readdata[3] = #50000 1'b1;
	master_readdata[3] = #50000 1'b0;
	master_readdata[3] = #100000 1'b1;
	master_readdata[3] = #150000 1'b0;
	master_readdata[3] = #50000 1'b1;
	master_readdata[3] = #250000 1'b0;
	master_readdata[3] = #100000 1'b1;
	master_readdata[3] = #100000 1'b0;
end 
// master_readdata[ 2 ]
initial
begin
	master_readdata[2] = 1'b1;
	master_readdata[2] = #50000 1'b0;
	master_readdata[2] = #200000 1'b1;
	master_readdata[2] = #100000 1'b0;
	master_readdata[2] = #50000 1'b1;
	master_readdata[2] = #50000 1'b0;
	master_readdata[2] = #50000 1'b1;
	master_readdata[2] = #100000 1'b0;
	master_readdata[2] = #50000 1'b1;
	master_readdata[2] = #100000 1'b0;
	master_readdata[2] = #200000 1'b1;
end 
// master_readdata[ 1 ]
initial
begin
	master_readdata[1] = 1'b1;
	master_readdata[1] = #100000 1'b0;
	master_readdata[1] = #50000 1'b1;
	master_readdata[1] = #100000 1'b0;
	master_readdata[1] = #100000 1'b1;
	master_readdata[1] = #50000 1'b0;
	master_readdata[1] = #100000 1'b1;
end 
// master_readdata[ 0 ]
initial
begin
	master_readdata[0] = 1'b1;
	master_readdata[0] = #50000 1'b0;
	master_readdata[0] = #50000 1'b1;
	master_readdata[0] = #100000 1'b0;
	master_readdata[0] = #50000 1'b1;
	master_readdata[0] = #50000 1'b0;
	master_readdata[0] = #150000 1'b1;
	master_readdata[0] = #50000 1'b0;
	master_readdata[0] = #50000 1'b1;
	master_readdata[0] = #50000 1'b0;
	master_readdata[0] = #100000 1'b1;
	master_readdata[0] = #50000 1'b0;
	master_readdata[0] = #50000 1'b1;
	master_readdata[0] = #150000 1'b0;
end 

// master_waitrequest
initial
begin
	master_waitrequest = 1'b0;
	master_waitrequest = #6000 1'b1;
	master_waitrequest = #7000 1'b0;
	master_waitrequest = #16000 1'b1;
	master_waitrequest = #11000 1'b0;
end 

avalon_master_state_machine_vlg_sample_tst tb_sample (
	.clk(clk),
	.is_write(is_write),
	.master_readdata(master_readdata),
	.master_waitrequest(master_waitrequest),
	.reset_n(reset_n),
	.start(start),
	.user_address(user_address),
	.user_write_data(user_write_data),
	.sampler_tx(sampler)
);

avalon_master_state_machine_vlg_check_tst tb_out(
	.finish(finish),
	.latch_read_now(latch_read_now),
	.master_address(master_address),
	.master_byteenable(master_byteenable),
	.master_read(master_read),
	.master_write(master_write),
	.master_writedata(master_writedata),
	.state(state),
	.user_read_data(user_read_data),
	.sampler_rx(sampler)
);
endmodule

