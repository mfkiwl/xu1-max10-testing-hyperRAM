// Copyright (C) 1991-2009 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.


// Generated by Quartus II Version 9.0 (Build Build 235 06/17/2009)
// Created on Tue May 26 17:32:08 2015

hw_read_dma_controller hw_read_dma_controller_inst
(
	.hw_triggered_dma_read_master_control_fixed_location(hw_triggered_dma_read_master_control_fixed_location_sig) ,	// output  hw_triggered_dma_read_master_control_fixed_location_sig
	.hw_triggered_dma_read_master_control_read_base(hw_triggered_dma_read_master_control_read_base_sig) ,	// output [31:0] hw_triggered_dma_read_master_control_read_base_sig
	.hw_triggered_dma_read_master_control_read_length(hw_triggered_dma_read_master_control_read_length_sig) ,	// output [31:0] hw_triggered_dma_read_master_control_read_length_sig
	.hw_triggered_dma_read_master_control_go(hw_triggered_dma_read_master_control_go_sig) ,	// output  hw_triggered_dma_read_master_control_go_sig
	.hw_triggered_dma_read_master_control_done(hw_triggered_dma_read_master_control_done_sig) ,	// input  hw_triggered_dma_read_master_control_done_sig
	.hw_triggered_dma_read_master_control_early_done(hw_triggered_dma_read_master_control_early_done_sig) ,	// input  hw_triggered_dma_read_master_control_early_done_sig
	.hw_triggered_dma_read_master_user_read_buffer(hw_triggered_dma_read_master_user_read_buffer_sig) ,	// output  hw_triggered_dma_read_master_user_read_buffer_sig
	.hw_triggered_dma_read_master_user_buffer_output_data(hw_triggered_dma_read_master_user_buffer_output_data_sig) ,	// input [127:0] hw_triggered_dma_read_master_user_buffer_output_data_sig
	.hw_triggered_dma_read_master_user_data_available(hw_triggered_dma_read_master_user_data_available_sig) ,	// input  hw_triggered_dma_read_master_user_data_available_sig
	.user_logic_read_master_control_read_base(user_logic_read_master_control_read_base_sig) ,	// input [31:0] user_logic_read_master_control_read_base_sig
	.user_logic_read_master_control_read_length(user_logic_read_master_control_read_length_sig) ,	// input [31:0] user_logic_read_master_control_read_length_sig
	.user_logic_read_master_control_fixed_location(user_logic_read_master_control_fixed_location_sig) ,	// input  user_logic_read_master_control_fixed_location_sig
	.user_read_master_user_read_buffer(user_read_master_user_read_buffer_sig) ,	// input  user_read_master_user_read_buffer_sig
	.user_read_master_user_buffer_output_data(user_read_master_user_buffer_output_data_sig) ,	// output [127:0] user_read_master_user_buffer_output_data_sig
	.user_read_master_user_data_available(user_read_master_user_data_available_sig) ,	// output  user_read_master_user_data_available_sig
	.async_start(async_start_sig) ,	// input  async_start_sig
	.finish(finish_sig) ,	// output  finish_sig
	.state(state_sig) ,	// output [15:0] state_sig
	.reset_n(reset_n_sig) ,	// input  reset_n_sig
	.clk(clk_sig) 	// input  clk_sig
);

defparam hw_read_dma_controller_inst.idle = 'b0000000000000000;
defparam hw_read_dma_controller_inst.initiate_transfer = 'b0000000000010001;
defparam hw_read_dma_controller_inst.wait_for_done = 'b0000000000000010;
defparam hw_read_dma_controller_inst.assert_finish = 'b0000000000100011;
