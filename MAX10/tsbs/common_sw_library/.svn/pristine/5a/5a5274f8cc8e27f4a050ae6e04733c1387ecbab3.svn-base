<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>IOF Library: fmt_spec.hpp Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
    <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<h1>fmt_spec.hpp</h1><a href="fmt__spec_8hpp.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#ifndef IOF_FMT_SPEC_HPP_</span>
<a name="l00002"></a>00002 <span class="preprocessor"></span><span class="preprocessor">#define IOF_FMT_SPEC_HPP_</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span>
<a name="l00016"></a>00016 <span class="preprocessor">#include "iof/process_fmt_in.hpp"</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include "iof/process_fmt_out.hpp"</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include "<a class="code" href="stream__fmt_8hpp.html">iof/stream_fmt.hpp</a>"</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="keyword">namespace </span>iof 
<a name="l00022"></a>00022 {
<a name="l00023"></a>00023     
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="keyword">namespace </span>iof_private
<a name="l00026"></a>00026 {
<a name="l00027"></a>00027 
<a name="l00028"></a>00028     
<a name="l00029"></a>00029 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> TT&gt;
<a name="l00030"></a>00030 <span class="keyword">class </span>formatted
<a name="l00031"></a>00031 {
<a name="l00032"></a>00032 <span class="keyword">public</span>:
<a name="l00033"></a>00033     <span class="keyword">const</span> std::string fmt;
<a name="l00034"></a>00034     <span class="keyword">const</span> TT&amp; obj; 
<a name="l00035"></a>00035 
<a name="l00036"></a>00036     formatted(<span class="keyword">const</span> std::string&amp; fmt, <span class="keyword">const</span> TT&amp; obj): fmt(fmt), obj(obj) {}
<a name="l00037"></a>00037     <span class="keyword">inline</span> <span class="keywordtype">void</span> applyTo(std::ostream&amp;, fmt_extensions&amp; fmtExtensions) <span class="keyword">const</span>;
<a name="l00038"></a>00038     
<a name="l00039"></a>00039 <span class="keyword">private</span>:
<a name="l00040"></a>00040 };
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 } <span class="comment">// namespace iof_private</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 
<a name="l00053"></a><a class="code" href="classiof_1_1fmt__spec.html">00053</a> <span class="keyword">class </span><a class="code" href="classiof_1_1fmt__spec.html">fmt_spec</a>
<a name="l00054"></a>00054 {
<a name="l00055"></a>00055     <span class="keyword">public</span>:
<a name="l00056"></a>00056         <a class="code" href="classiof_1_1fmt__spec.html">fmt_spec</a>() {}
<a name="l00057"></a>00057         <a class="code" href="classiof_1_1fmt__spec.html">fmt_spec</a>(<span class="keyword">const</span> std::string&amp; fmt): my_fmt(fmt) {}
<a name="l00058"></a>00058         <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> std::string&amp; fmt) {my_fmt = fmt;}
<a name="l00059"></a>00059         
<a name="l00060"></a>00060         <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> std::string&amp; fmt)<span class="keyword"> const </span>{<span class="keywordflow">return</span> my_fmt == fmt;}
<a name="l00061"></a>00061         <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="classiof_1_1fmt__spec.html">fmt_spec</a>&amp; rhs)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> rhs.<a class="code" href="classiof_1_1fmt__spec.html#c6746be1c50acd43bc738f7a3f3ccfec">my_fmt</a> == my_fmt; }
<a name="l00062"></a>00062         <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code" href="classiof_1_1fmt__spec.html">fmt_spec</a>&amp; rhs)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ! (*<span class="keyword">this</span> == rhs); }
<a name="l00063"></a>00063         
<a name="l00064"></a>00064         <span class="keyword">const</span> std::string&amp; str()<span class="keyword"> const </span>{<span class="keywordflow">return</span> my_fmt;}
<a name="l00065"></a>00065         
<a name="l00067"></a>00067         <span class="keyword">template</span> &lt;<span class="keyword">typename</span> TT&gt; 
<a name="l00068"></a><a class="code" href="classiof_1_1fmt__spec.html#30f64781a8be7514391bc399a5a98090">00068</a>         iof_private::formatted&lt;TT&gt; <a class="code" href="classiof_1_1fmt__spec.html#30f64781a8be7514391bc399a5a98090">operator()</a>(<span class="keyword">const</span> TT&amp; obj)<span class="keyword"> const </span>
<a name="l00069"></a>00069 <span class="keyword">        </span>{
<a name="l00070"></a>00070             <span class="keywordflow">return</span> iof_private::formatted&lt;TT&gt;(my_fmt, obj);
<a name="l00071"></a>00071         }
<a name="l00072"></a>00072 
<a name="l00073"></a>00073     <span class="keyword">private</span>:
<a name="l00074"></a>00074         std::string my_fmt;
<a name="l00075"></a>00075 };
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 
<a name="l00079"></a>00079 <span class="keyword">inline</span> std::ostream&amp; 
<a name="l00080"></a>00080 operator&lt;&lt;(std::ostream&amp; out, <span class="keyword">const</span> fmt_spec&amp; fmt)
<a name="l00081"></a>00081 {
<a name="l00082"></a>00082     <span class="keywordtype">bool</span> restore; <span class="comment">// not used</span>
<a name="l00083"></a>00083     iof_private::fmt_extensions fmtExtensions;
<a name="l00084"></a>00084     iof_private::process1FmtSpec(out, fmt.str().c_str(), fmtExtensions, restore, <span class="keyword">false</span>);
<a name="l00085"></a>00085     <span class="keywordflow">if</span> (fmtExtensions.extensionsUsed()) 
<a name="l00086"></a>00086         <span class="keywordflow">throw</span> std::runtime_error(
<a name="l00087"></a>00087         <span class="stringliteral">"Formatting extensions (centering, ...) not supported without iof::fmtr"</span>);
<a name="l00088"></a>00088     <span class="keywordflow">return</span> out;
<a name="l00089"></a>00089 }
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 
<a name="l00093"></a>00093 <span class="keyword">inline</span> std::istream&amp; 
<a name="l00094"></a>00094 operator&gt;&gt;(std::istream&amp; in, <span class="keyword">const</span> fmt_spec&amp; fmt)
<a name="l00095"></a>00095 {
<a name="l00096"></a>00096     <span class="keywordtype">bool</span> restore; <span class="comment">// not used</span>
<a name="l00097"></a>00097     <span class="keywordtype">char</span> delim = 0; <span class="comment">// not used</span>
<a name="l00098"></a>00098     iof_private::process1FmtSpec(in, fmt.str().c_str(), restore, delim, <span class="keyword">false</span>);
<a name="l00099"></a>00099     <span class="keywordflow">return</span> in;
<a name="l00100"></a>00100 }
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> TT&gt; 
<a name="l00105"></a>00105 <span class="keyword">inline</span> <span class="keywordtype">void</span> 
<a name="l00106"></a>00106 iof_private::formatted&lt;TT&gt;::applyTo(std::ostream&amp; out, fmt_extensions&amp; fmtExtensions)<span class="keyword"></span>
<a name="l00107"></a>00107 <span class="keyword">const</span>
<a name="l00108"></a>00108 <span class="keyword"></span>{
<a name="l00109"></a>00109     <span class="keywordtype">bool</span> restore; <span class="comment">// not used</span>
<a name="l00110"></a>00110     iof_private::process1FmtSpec(out, fmt.c_str(), fmtExtensions, restore, <span class="keyword">false</span>);
<a name="l00111"></a>00111     outputAdvanced(obj, out, fmtExtensions);
<a name="l00112"></a>00112 }
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 
<a name="l00116"></a>00116 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> TT&gt;
<a name="l00117"></a>00117 <span class="keyword">inline</span> std::ostream&amp; 
<a name="l00118"></a>00118 operator&lt;&lt;(std::ostream&amp; out, const iof_private::formatted&lt;TT&gt;&amp; fmtdObj)
<a name="l00119"></a>00119 {
<a name="l00120"></a>00120     iof_private::fmt_extensions fmtExtensions;
<a name="l00121"></a>00121     fmtdObj.applyTo(out, fmtExtensions);
<a name="l00122"></a>00122     <span class="keywordflow">if</span> (fmtExtensions.extensionsUsed()) 
<a name="l00123"></a>00123         <span class="keywordflow">throw</span> std::runtime_error(
<a name="l00124"></a>00124         <span class="stringliteral">"Formatting extensions (centering, ...) not supported without iof::fmtr"</span>);
<a name="l00125"></a>00125     <span class="keywordflow">return</span> out;
<a name="l00126"></a>00126 }
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 
<a name="l00129"></a>00129 } <span class="comment">// namespace iof</span>
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 <span class="preprocessor">#endif // IOF_FMT_SPEC_HPP_</span>
<a name="l00132"></a>00132 <span class="preprocessor"></span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Sun Oct 15 23:55:35 2006 for IOF Library by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
