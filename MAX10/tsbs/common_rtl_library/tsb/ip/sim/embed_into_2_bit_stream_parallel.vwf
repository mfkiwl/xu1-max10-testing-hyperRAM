/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 1000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 1.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("MSB_first")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("parallel_data")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 16;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("parallel_data[15]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("parallel_data[14]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("parallel_data[13]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("parallel_data[12]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("parallel_data[11]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("parallel_data[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("parallel_data[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("parallel_data[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("parallel_data[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("parallel_data[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("parallel_data[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("parallel_data[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("parallel_data[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("parallel_data[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("parallel_data[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("parallel_data[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "parallel_data";
}

SIGNAL("serial_data")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("serial_data[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "serial_data";
}

SIGNAL("serial_data[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "serial_data";
}

SIGNAL("serial_data[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "serial_data";
}

SIGNAL("serial_data[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "serial_data";
}

SIGNAL("serial_sop")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("serial_sop[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "serial_sop";
}

SIGNAL("serial_sop[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "serial_sop";
}

SIGNAL("serial_sop[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "serial_sop";
}

SIGNAL("serial_sop[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "serial_sop";
}

SIGNAL("bit_counter")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 5;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("bit_counter[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "bit_counter";
}

SIGNAL("bit_counter[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "bit_counter";
}

SIGNAL("bit_counter[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "bit_counter";
}

SIGNAL("bit_counter[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "bit_counter";
}

SIGNAL("bit_counter[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "bit_counter";
}

SIGNAL("current_parallel_data")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 16;
	LSB_INDEX = 0;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("current_parallel_data[15]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

SIGNAL("current_parallel_data[14]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

SIGNAL("current_parallel_data[13]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

SIGNAL("current_parallel_data[12]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

SIGNAL("current_parallel_data[11]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

SIGNAL("current_parallel_data[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

SIGNAL("current_parallel_data[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

SIGNAL("current_parallel_data[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

SIGNAL("current_parallel_data[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

SIGNAL("current_parallel_data[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

SIGNAL("current_parallel_data[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

SIGNAL("current_parallel_data[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

SIGNAL("current_parallel_data[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

SIGNAL("current_parallel_data[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

SIGNAL("current_parallel_data[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

SIGNAL("current_parallel_data[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "current_parallel_data";
}

TRANSITION_LIST("MSB_first")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 120.0;
		LEVEL 1 FOR 740.0;
		LEVEL 0 FOR 140.0;
	}
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1000;
			LEVEL 0 FOR 0.5;
			LEVEL 1 FOR 0.5;
		}
	}
}

TRANSITION_LIST("parallel_data[15]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 96.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 56.0;
	}
}

TRANSITION_LIST("parallel_data[14]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 160.0;
		LEVEL 0 FOR 8.0;
	}
}

TRANSITION_LIST("parallel_data[13]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 8.0;
	}
}

TRANSITION_LIST("parallel_data[12]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 128.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 8.0;
	}
}

TRANSITION_LIST("parallel_data[11]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 8.0;
	}
}

TRANSITION_LIST("parallel_data[10]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 56.0;
	}
}

TRANSITION_LIST("parallel_data[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 96.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 8.0;
	}
}

TRANSITION_LIST("parallel_data[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 24.0;
	}
}

TRANSITION_LIST("parallel_data[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 96.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 24.0;
	}
}

TRANSITION_LIST("parallel_data[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 8.0;
	}
}

TRANSITION_LIST("parallel_data[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 24.0;
	}
}

TRANSITION_LIST("parallel_data[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 40.0;
	}
}

TRANSITION_LIST("parallel_data[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 160.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 24.0;
	}
}

TRANSITION_LIST("parallel_data[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 96.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 8.0;
	}
}

TRANSITION_LIST("parallel_data[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 8.0;
	}
}

TRANSITION_LIST("parallel_data[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 88.0;
	}
}

TRANSITION_LIST("serial_data[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5.5;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 5.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 19.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 5.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 18.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 19.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 17.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 16.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 5.5;
	}
}

TRANSITION_LIST("serial_data[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 4.5;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 18.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 16.0;
			LEVEL 1 FOR 1.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 1.0;
				LEVEL 1 FOR 3.0;
			}
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 2.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 17.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 18.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 6.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 33.0;
		LEVEL 0 FOR 17.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 5.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 3.0;
			}
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 19.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 5.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 5.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 17.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		NODE
		{
			REPEAT = 8;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 4.5;
	}
}

TRANSITION_LIST("serial_data[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 4.5;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 5.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 18.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 6.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 18.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 2.0;
				LEVEL 0 FOR 2.0;
			}
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 2.0;
				LEVEL 1 FOR 2.0;
			}
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 2.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 17.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 16.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 16.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 17.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 5.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 0.5;
	}
}

TRANSITION_LIST("serial_data[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5.5;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		NODE
		{
			REPEAT = 16;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 18.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 1.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 5.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 19.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 5.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 16.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 17.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 1.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 6.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 21.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 1.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 3.0;
		}
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 19.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 1.5;
	}
}

TRANSITION_LIST("serial_sop[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("serial_sop[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("serial_sop[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("serial_sop[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.5;
		NODE
		{
			REPEAT = 29;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 5.0;
		NODE
		{
			REPEAT = 184;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 4.0;
		NODE
		{
			REPEAT = 34;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 3.0;
		}
		LEVEL 1 FOR 0.5;
	}
}

TRANSITION_LIST("bit_counter[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 120.5;
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 878.5;
	}
}

TRANSITION_LIST("bit_counter[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1.5;
		NODE
		{
			REPEAT = 29;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 3.0;
		NODE
		{
			REPEAT = 184;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL 0 FOR 1.0;
		NODE
		{
			REPEAT = 34;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.5;
	}
}

TRANSITION_LIST("bit_counter[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.5;
		NODE
		{
			REPEAT = 60;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 438;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 1.0;
		}
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 0.5;
	}
}

TRANSITION_LIST("bit_counter[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 121.5;
		LEVEL 1 FOR 741.0;
		LEVEL 0 FOR 137.5;
	}
}

TRANSITION_LIST("bit_counter[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 121.5;
		LEVEL 1 FOR 741.0;
		LEVEL 0 FOR 137.5;
	}
}

TRANSITION_LIST("current_parallel_data[15]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 3.5;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 16.0;
			LEVEL 0 FOR 16.0;
		}
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 14.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 96.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 16.0;
			LEVEL 1 FOR 16.0;
		}
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 32.0;
			LEVEL 0 FOR 16.0;
		}
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 32.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 16.0;
			LEVEL 1 FOR 16.0;
		}
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 65.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 16.0;
			LEVEL 1 FOR 16.0;
		}
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 53.5;
	}
}

TRANSITION_LIST("current_parallel_data[14]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 35.5;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 16.0;
			LEVEL 1 FOR 16.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 16.0;
			LEVEL 1 FOR 32.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 161.0;
		LEVEL 0 FOR 5.5;
	}
}

TRANSITION_LIST("current_parallel_data[13]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 19.5;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 14.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 16.0;
			LEVEL 0 FOR 48.0;
		}
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 32.0;
			LEVEL 1 FOR 32.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 33.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 16.0;
			LEVEL 1 FOR 16.0;
		}
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 5.5;
	}
}

TRANSITION_LIST("current_parallel_data[12]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 19.5;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 128.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 16.0;
			LEVEL 1 FOR 48.0;
		}
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 48.0;
			LEVEL 1 FOR 16.0;
		}
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 65.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 5.5;
	}
}

TRANSITION_LIST("current_parallel_data[11]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 19.5;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 62.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 32.0;
			LEVEL 0 FOR 16.0;
		}
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 32.0;
			LEVEL 0 FOR 32.0;
		}
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 49.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 5.5;
	}
}

TRANSITION_LIST("current_parallel_data[10]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 3.5;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 14.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 65.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 53.5;
	}
}

TRANSITION_LIST("current_parallel_data[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 19.5;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 62.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 96.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 65.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 5.5;
	}
}

TRANSITION_LIST("current_parallel_data[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 3.5;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 14.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 32.0;
			LEVEL 1 FOR 32.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 32.0;
			LEVEL 1 FOR 16.0;
		}
		LEVEL 0 FOR 16.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 48.0;
			LEVEL 0 FOR 32.0;
		}
		LEVEL 1 FOR 81.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 21.5;
	}
}

TRANSITION_LIST("current_parallel_data[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 3.5;
		LEVEL 1 FOR 96.0;
		LEVEL 0 FOR 78.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 64.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 16.0;
			LEVEL 0 FOR 16.0;
		}
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 32.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 32.0;
			LEVEL 1 FOR 16.0;
		}
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 49.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 16.0;
			LEVEL 0 FOR 16.0;
		}
		LEVEL 1 FOR 21.5;
	}
}

TRANSITION_LIST("current_parallel_data[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 3.5;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 17.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 5.5;
	}
}

TRANSITION_LIST("current_parallel_data[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 19.5;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 46.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 16.0;
			LEVEL 1 FOR 16.0;
		}
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 32.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 16.0;
			LEVEL 1 FOR 16.0;
		}
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 65.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 21.5;
	}
}

TRANSITION_LIST("current_parallel_data[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 3.5;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 48.0;
			LEVEL 1 FOR 48.0;
		}
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 16.0;
			LEVEL 1 FOR 64.0;
		}
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 33.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 37.5;
	}
}

TRANSITION_LIST("current_parallel_data[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 19.5;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 46.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 160.0;
		LEVEL 0 FOR 32.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 32.0;
			LEVEL 0 FOR 16.0;
		}
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 16.0;
			LEVEL 0 FOR 16.0;
		}
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 17.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 21.5;
	}
}

TRANSITION_LIST("current_parallel_data[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 3.5;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 96.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 32.0;
			LEVEL 1 FOR 16.0;
		}
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 65.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 5.5;
	}
}

TRANSITION_LIST("current_parallel_data[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 3.5;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 14.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 16.0;
			LEVEL 0 FOR 16.0;
		}
		LEVEL 1 FOR 48.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 32.0;
			LEVEL 1 FOR 16.0;
		}
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 16.0;
			LEVEL 0 FOR 16.0;
		}
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 64.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 33.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 5.5;
	}
}

TRANSITION_LIST("current_parallel_data[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 19.5;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 62.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 32.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 64.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 32.0;
			LEVEL 0 FOR 64.0;
		}
		LEVEL 1 FOR 16.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 48.0;
		LEVEL 0 FOR 32.0;
		LEVEL 1 FOR 17.0;
		LEVEL 0 FOR 48.0;
		LEVEL 1 FOR 85.5;
	}
}

DISPLAY_LINE
{
	CHANNEL = "MSB_first";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
	CHILDREN = 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[15]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[14]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[13]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[12]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[11]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "parallel_data[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 19;
	TREE_LEVEL = 0;
	CHILDREN = 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[15]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[14]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[13]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[12]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[11]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 31;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 32;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 33;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 34;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "current_parallel_data[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 35;
	TREE_LEVEL = 1;
	PARENT = 19;
}

DISPLAY_LINE
{
	CHANNEL = "bit_counter";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 36;
	TREE_LEVEL = 0;
	CHILDREN = 37, 38, 39, 40, 41;
}

DISPLAY_LINE
{
	CHANNEL = "bit_counter[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 37;
	TREE_LEVEL = 1;
	PARENT = 36;
}

DISPLAY_LINE
{
	CHANNEL = "bit_counter[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 38;
	TREE_LEVEL = 1;
	PARENT = 36;
}

DISPLAY_LINE
{
	CHANNEL = "bit_counter[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 39;
	TREE_LEVEL = 1;
	PARENT = 36;
}

DISPLAY_LINE
{
	CHANNEL = "bit_counter[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 40;
	TREE_LEVEL = 1;
	PARENT = 36;
}

DISPLAY_LINE
{
	CHANNEL = "bit_counter[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 41;
	TREE_LEVEL = 1;
	PARENT = 36;
}

DISPLAY_LINE
{
	CHANNEL = "serial_data";
	EXPAND_STATUS = EXPANDED;
	RADIX = Hexadecimal;
	TREE_INDEX = 42;
	TREE_LEVEL = 0;
	CHILDREN = 43, 44, 45, 46;
}

DISPLAY_LINE
{
	CHANNEL = "serial_data[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 43;
	TREE_LEVEL = 1;
	PARENT = 42;
}

DISPLAY_LINE
{
	CHANNEL = "serial_data[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 44;
	TREE_LEVEL = 1;
	PARENT = 42;
}

DISPLAY_LINE
{
	CHANNEL = "serial_data[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 45;
	TREE_LEVEL = 1;
	PARENT = 42;
}

DISPLAY_LINE
{
	CHANNEL = "serial_data[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 46;
	TREE_LEVEL = 1;
	PARENT = 42;
}

DISPLAY_LINE
{
	CHANNEL = "serial_sop";
	EXPAND_STATUS = EXPANDED;
	RADIX = Hexadecimal;
	TREE_INDEX = 47;
	TREE_LEVEL = 0;
	CHILDREN = 48, 49, 50, 51;
}

DISPLAY_LINE
{
	CHANNEL = "serial_sop[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 48;
	TREE_LEVEL = 1;
	PARENT = 47;
}

DISPLAY_LINE
{
	CHANNEL = "serial_sop[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 49;
	TREE_LEVEL = 1;
	PARENT = 47;
}

DISPLAY_LINE
{
	CHANNEL = "serial_sop[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 50;
	TREE_LEVEL = 1;
	PARENT = 47;
}

DISPLAY_LINE
{
	CHANNEL = "serial_sop[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 51;
	TREE_LEVEL = 1;
	PARENT = 47;
}

TIME_BAR
{
	TIME = 28375;
	MASTER = TRUE;
}
;
