// Copyright (C) 1991-2009 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/14/2015 16:50:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    wait_and_check_for_lock_and_do_staged_reset
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module wait_and_check_for_lock_and_do_staged_reset_vlg_sample_tst(
	clk,
	enable,
	lock_indication,
	reset,
	wait_between_lock_checks,
	wait_between_resets,
	sampler_tx
);
input  clk;
input  enable;
input  lock_indication;
input  reset;
input [31:0] wait_between_lock_checks;
input [31:0] wait_between_resets;
output sampler_tx;

reg sample;
time current_time;
always @(clk or enable or lock_indication or reset or wait_between_lock_checks or wait_between_resets)
                                                                                
begin                                         
 if ($time > 0)                               
 begin                                        
	if ($time == 0 || $time != current_time)  
	begin									  
		if (sample === 1'bx)                  
			sample = 0;                       
		else                                  
			sample = ~sample;                 
	end										  
	current_time = $time;					  
 end                                          
end                                           

assign sampler_tx = sample;
endmodule

module wait_and_check_for_lock_and_do_staged_reset_vlg_check_tst (
	programmable_wait_amount,reset_event_occurred_pulse,reset_inner,reset_outer,select_wait_period,start_delay_counter,state,wait_counter_finished,sampler_rx
);
input [31:0] programmable_wait_amount;
input  reset_event_occurred_pulse;
input  reset_inner;
input  reset_outer;
input  select_wait_period;
input  start_delay_counter;
input [15:0] state;
input  wait_counter_finished;
input sampler_rx;

reg [31:0] programmable_wait_amount_expected;
reg  reset_event_occurred_pulse_expected;
reg  reset_inner_expected;
reg  reset_outer_expected;
reg  select_wait_period_expected;
reg  start_delay_counter_expected;
reg [15:0] state_expected;
reg  wait_counter_finished_expected;

reg [31:0] programmable_wait_amount_prev;
reg  reset_event_occurred_pulse_prev;
reg  reset_inner_prev;
reg  reset_outer_prev;
reg  select_wait_period_prev;
reg  start_delay_counter_prev;
reg [15:0] state_prev;
reg  wait_counter_finished_prev;

reg [31:0] programmable_wait_amount_expected_prev;
reg  reset_event_occurred_pulse_expected_prev;
reg  reset_inner_expected_prev;
reg  reset_outer_expected_prev;
reg  select_wait_period_expected_prev;
reg  start_delay_counter_expected_prev;
reg [15:0] state_expected_prev;
reg  wait_counter_finished_expected_prev;

reg [31:0] last_programmable_wait_amount_exp;
reg  last_reset_event_occurred_pulse_exp;
reg  last_reset_inner_exp;
reg  last_reset_outer_exp;
reg  last_select_wait_period_exp;
reg  last_start_delay_counter_exp;
reg [15:0] last_state_exp;
reg  last_wait_counter_finished_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	programmable_wait_amount_prev = programmable_wait_amount;
	reset_event_occurred_pulse_prev = reset_event_occurred_pulse;
	reset_inner_prev = reset_inner;
	reset_outer_prev = reset_outer;
	select_wait_period_prev = select_wait_period;
	start_delay_counter_prev = start_delay_counter;
	state_prev = state;
	wait_counter_finished_prev = wait_counter_finished;
end

// update expected /o prevs

always @(trigger)
begin
	programmable_wait_amount_expected_prev = programmable_wait_amount_expected;
	reset_event_occurred_pulse_expected_prev = reset_event_occurred_pulse_expected;
	reset_inner_expected_prev = reset_inner_expected;
	reset_outer_expected_prev = reset_outer_expected;
	select_wait_period_expected_prev = select_wait_period_expected;
	start_delay_counter_expected_prev = start_delay_counter_expected;
	state_expected_prev = state_expected;
	wait_counter_finished_expected_prev = wait_counter_finished_expected;
end


// expected programmable_wait_amount[ 31 ]
initial
begin
	programmable_wait_amount_expected[31] = 1'b0;
end 
// expected programmable_wait_amount[ 30 ]
initial
begin
	programmable_wait_amount_expected[30] = 1'b0;
end 
// expected programmable_wait_amount[ 29 ]
initial
begin
	programmable_wait_amount_expected[29] = 1'b0;
end 
// expected programmable_wait_amount[ 28 ]
initial
begin
	programmable_wait_amount_expected[28] = 1'b0;
end 
// expected programmable_wait_amount[ 27 ]
initial
begin
	programmable_wait_amount_expected[27] = 1'b0;
end 
// expected programmable_wait_amount[ 26 ]
initial
begin
	programmable_wait_amount_expected[26] = 1'b0;
end 
// expected programmable_wait_amount[ 25 ]
initial
begin
	programmable_wait_amount_expected[25] = 1'b0;
end 
// expected programmable_wait_amount[ 24 ]
initial
begin
	programmable_wait_amount_expected[24] = 1'b0;
end 
// expected programmable_wait_amount[ 23 ]
initial
begin
	programmable_wait_amount_expected[23] = 1'b0;
end 
// expected programmable_wait_amount[ 22 ]
initial
begin
	programmable_wait_amount_expected[22] = 1'b0;
end 
// expected programmable_wait_amount[ 21 ]
initial
begin
	programmable_wait_amount_expected[21] = 1'b0;
end 
// expected programmable_wait_amount[ 20 ]
initial
begin
	programmable_wait_amount_expected[20] = 1'b0;
end 
// expected programmable_wait_amount[ 19 ]
initial
begin
	programmable_wait_amount_expected[19] = 1'b0;
end 
// expected programmable_wait_amount[ 18 ]
initial
begin
	programmable_wait_amount_expected[18] = 1'b0;
end 
// expected programmable_wait_amount[ 17 ]
initial
begin
	programmable_wait_amount_expected[17] = 1'b0;
end 
// expected programmable_wait_amount[ 16 ]
initial
begin
	programmable_wait_amount_expected[16] = 1'b0;
end 
// expected programmable_wait_amount[ 15 ]
initial
begin
	programmable_wait_amount_expected[15] = 1'b0;
end 
// expected programmable_wait_amount[ 14 ]
initial
begin
	programmable_wait_amount_expected[14] = 1'b0;
end 
// expected programmable_wait_amount[ 13 ]
initial
begin
	programmable_wait_amount_expected[13] = 1'b0;
end 
// expected programmable_wait_amount[ 12 ]
initial
begin
	programmable_wait_amount_expected[12] = 1'b0;
end 
// expected programmable_wait_amount[ 11 ]
initial
begin
	programmable_wait_amount_expected[11] = 1'b0;
end 
// expected programmable_wait_amount[ 10 ]
initial
begin
	programmable_wait_amount_expected[10] = 1'b0;
end 
// expected programmable_wait_amount[ 9 ]
initial
begin
	programmable_wait_amount_expected[9] = 1'b0;
end 
// expected programmable_wait_amount[ 8 ]
initial
begin
	programmable_wait_amount_expected[8] = 1'b0;
end 
// expected programmable_wait_amount[ 7 ]
initial
begin
	programmable_wait_amount_expected[7] = 1'b0;
end 
// expected programmable_wait_amount[ 6 ]
initial
begin
	programmable_wait_amount_expected[6] = 1'b0;
end 
// expected programmable_wait_amount[ 5 ]
initial
begin
	programmable_wait_amount_expected[5] = 1'b0;
end 
// expected programmable_wait_amount[ 4 ]
initial
begin
	programmable_wait_amount_expected[4] = 1'b0;
end 
// expected programmable_wait_amount[ 3 ]
initial
begin
	programmable_wait_amount_expected[3] = 1'b0;
end 
// expected programmable_wait_amount[ 2 ]
initial
begin
	programmable_wait_amount_expected[2] = 1'b0;
	# 9500;
	repeat(6)
	begin
		programmable_wait_amount_expected[2] = 1'b1;
		programmable_wait_amount_expected[2] = #27000 1'b0;
		# 10000;
	end
	programmable_wait_amount_expected[2] = 1'b1;
	programmable_wait_amount_expected[2] = #27000 1'b0;
	programmable_wait_amount_expected[2] = #712000 1'b1;
	programmable_wait_amount_expected[2] = #27000 1'b0;
end 
// expected programmable_wait_amount[ 1 ]
initial
begin
	programmable_wait_amount_expected[1] = 1'b1;
	# 9500;
	repeat(6)
	begin
		programmable_wait_amount_expected[1] = 1'b0;
		programmable_wait_amount_expected[1] = #27000 1'b1;
		# 10000;
	end
	programmable_wait_amount_expected[1] = 1'b0;
	programmable_wait_amount_expected[1] = #27000 1'b1;
	programmable_wait_amount_expected[1] = #712000 1'b0;
	programmable_wait_amount_expected[1] = #27000 1'b1;
end 
// expected programmable_wait_amount[ 0 ]
initial
begin
	programmable_wait_amount_expected[0] = 1'b1;
	# 9500;
	repeat(6)
	begin
		programmable_wait_amount_expected[0] = 1'b0;
		programmable_wait_amount_expected[0] = #27000 1'b1;
		# 10000;
	end
	programmable_wait_amount_expected[0] = 1'b0;
	programmable_wait_amount_expected[0] = #27000 1'b1;
	programmable_wait_amount_expected[0] = #712000 1'b0;
	programmable_wait_amount_expected[0] = #27000 1'b1;
end 

// expected reset_event_occurred_pulse
initial
begin
	reset_event_occurred_pulse_expected = 1'b0;
	# 9500;
	repeat(6)
	begin
		reset_event_occurred_pulse_expected = 1'b1;
		reset_event_occurred_pulse_expected = #1000 1'b0;
		# 36000;
	end
	reset_event_occurred_pulse_expected = 1'b1;
	reset_event_occurred_pulse_expected = #1000 1'b0;
	reset_event_occurred_pulse_expected = #738000 1'b1;
	reset_event_occurred_pulse_expected = #1000 1'b0;
end 

// expected reset_inner
initial
begin
	reset_inner_expected = 1'b0;
	# 18500;
	repeat(6)
	begin
		reset_inner_expected = 1'b1;
		reset_inner_expected = #9000 1'b0;
		# 28000;
	end
	reset_inner_expected = 1'b1;
	reset_inner_expected = #9000 1'b0;
	reset_inner_expected = #730000 1'b1;
	reset_inner_expected = #9000 1'b0;
end 

// expected reset_outer
initial
begin
	reset_outer_expected = 1'b0;
	# 9500;
	repeat(6)
	begin
		reset_outer_expected = 1'b1;
		reset_outer_expected = #27000 1'b0;
		# 10000;
	end
	reset_outer_expected = 1'b1;
	reset_outer_expected = #27000 1'b0;
	reset_outer_expected = #712000 1'b1;
	reset_outer_expected = #27000 1'b0;
end 

// expected select_wait_period
initial
begin
	select_wait_period_expected = 1'b0;
	# 9500;
	repeat(6)
	begin
		select_wait_period_expected = 1'b1;
		select_wait_period_expected = #27000 1'b0;
		# 10000;
	end
	select_wait_period_expected = 1'b1;
	select_wait_period_expected = #27000 1'b0;
	select_wait_period_expected = #712000 1'b1;
	select_wait_period_expected = #27000 1'b0;
end 

// expected start_delay_counter
initial
begin
	start_delay_counter_expected = 1'b0;
	# 500;
	repeat(6)
	begin
		repeat(3)
		begin
			start_delay_counter_expected = 1'b1;
			start_delay_counter_expected = #1000 1'b0;
			# 8000;
		end
		start_delay_counter_expected = 1'b1;
		start_delay_counter_expected = #1000 1'b0;
		# 9000;
	end
	repeat(3)
	begin
		start_delay_counter_expected = 1'b1;
		start_delay_counter_expected = #1000 1'b0;
		# 8000;
	end
	start_delay_counter_expected = 1'b1;
	start_delay_counter_expected = #1000 1'b0;
	# 9000;
	repeat(81)
	begin
		start_delay_counter_expected = 1'b1;
		start_delay_counter_expected = #1000 1'b0;
		# 8000;
	end
	start_delay_counter_expected = 1'b1;
	start_delay_counter_expected = #1000 1'b0;
	start_delay_counter_expected = #9000 1'b1;
	start_delay_counter_expected = #1000 1'b0;
end 
// expected state[ 15 ]
initial
begin
	state_expected[15] = 1'b0;
end 
// expected state[ 14 ]
initial
begin
	state_expected[14] = 1'b0;
end 
// expected state[ 13 ]
initial
begin
	state_expected[13] = 1'b0;
end 
// expected state[ 12 ]
initial
begin
	state_expected[12] = 1'b0;
end 
// expected state[ 11 ]
initial
begin
	state_expected[11] = 1'b0;
end 
// expected state[ 10 ]
initial
begin
	state_expected[10] = 1'b0;
end 
// expected state[ 9 ]
initial
begin
	state_expected[9] = 1'b0;
	# 18500;
	repeat(6)
	begin
		state_expected[9] = 1'b1;
		state_expected[9] = #9000 1'b0;
		# 28000;
	end
	state_expected[9] = 1'b1;
	state_expected[9] = #9000 1'b0;
	state_expected[9] = #730000 1'b1;
	state_expected[9] = #9000 1'b0;
end 
// expected state[ 8 ]
initial
begin
	state_expected[8] = 1'b0;
	# 9500;
	repeat(6)
	begin
		state_expected[8] = 1'b1;
		state_expected[8] = #27000 1'b0;
		# 10000;
	end
	state_expected[8] = 1'b1;
	state_expected[8] = #27000 1'b0;
	state_expected[8] = #712000 1'b1;
	state_expected[8] = #27000 1'b0;
end 
// expected state[ 7 ]
initial
begin
	state_expected[7] = 1'b0;
	# 500;
	repeat(6)
	begin
		repeat(3)
		begin
			state_expected[7] = 1'b1;
			state_expected[7] = #1000 1'b0;
			# 8000;
		end
		state_expected[7] = 1'b1;
		state_expected[7] = #1000 1'b0;
		# 9000;
	end
	repeat(3)
	begin
		state_expected[7] = 1'b1;
		state_expected[7] = #1000 1'b0;
		# 8000;
	end
	state_expected[7] = 1'b1;
	state_expected[7] = #1000 1'b0;
	# 9000;
	repeat(81)
	begin
		state_expected[7] = 1'b1;
		state_expected[7] = #1000 1'b0;
		# 8000;
	end
	state_expected[7] = 1'b1;
	state_expected[7] = #1000 1'b0;
	state_expected[7] = #9000 1'b1;
	state_expected[7] = #1000 1'b0;
end 
// expected state[ 6 ]
initial
begin
	state_expected[6] = 1'b0;
	# 9500;
	repeat(6)
	begin
		state_expected[6] = 1'b1;
		state_expected[6] = #1000 1'b0;
		# 36000;
	end
	state_expected[6] = 1'b1;
	state_expected[6] = #1000 1'b0;
	state_expected[6] = #738000 1'b1;
	state_expected[6] = #1000 1'b0;
end 
// expected state[ 5 ]
initial
begin
	state_expected[5] = 1'b0;
end 
// expected state[ 4 ]
initial
begin
	state_expected[4] = 1'b0;
	# 9500;
	repeat(6)
	begin
		state_expected[4] = 1'b1;
		state_expected[4] = #27000 1'b0;
		# 10000;
	end
	state_expected[4] = 1'b1;
	state_expected[4] = #27000 1'b0;
	state_expected[4] = #712000 1'b1;
	state_expected[4] = #27000 1'b0;
end 
// expected state[ 3 ]
initial
begin
	state_expected[3] = 1'b0;
	# 18500;
	repeat(6)
	begin
		state_expected[3] = 1'b1;
		state_expected[3] = #18000 1'b0;
		# 19000;
	end
	state_expected[3] = 1'b1;
	state_expected[3] = #18000 1'b0;
	state_expected[3] = #721000 1'b1;
	state_expected[3] = #18000 1'b0;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'b0;
	# 8500;
	repeat(7)
	begin
		state_expected[2] = 1'b1;
		state_expected[2] = #10000 1'b0;
		# 27000;
	end
	repeat(78)
	begin
		state_expected[2] = 1'b1;
		state_expected[2] = #1000 1'b0;
		# 8000;
	end
	state_expected[2] = 1'b1;
	state_expected[2] = #10000 1'b0;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'b0;
	# 1500;
	repeat(7)
	begin
		state_expected[1] = 1'b1;
		state_expected[1] = #7000 1'b0;
		state_expected[1] = #1000 1'b1;
		state_expected[1] = #9000 1'b0;
		state_expected[1] = #9000 1'b1;
		state_expected[1] = #9000 1'b0;
		# 2000;
	end
	repeat(78)
	begin
		state_expected[1] = 1'b1;
		state_expected[1] = #7000 1'b0;
		# 2000;
	end
	state_expected[1] = 1'b1;
	state_expected[1] = #7000 1'b0;
	state_expected[1] = #1000 1'b1;
	state_expected[1] = #9000 1'b0;
	state_expected[1] = #9000 1'b1;
	state_expected[1] = #9000 1'b0;
	state_expected[1] = #2000 1'b1;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'b0;
	# 500;
	repeat(6)
	begin
		state_expected[0] = 1'b1;
		state_expected[0] = #1000 1'b0;
		state_expected[0] = #7000 1'b1;
		# 1000;
		repeat(3)
		begin
			state_expected[0] = 1'b0;
			state_expected[0] = #1000 1'b1;
			# 8000;
		end
		state_expected[0] = 1'b0;
		# 1000;
	end
	state_expected[0] = 1'b1;
	state_expected[0] = #1000 1'b0;
	state_expected[0] = #7000 1'b1;
	# 1000;
	repeat(3)
	begin
		state_expected[0] = 1'b0;
		state_expected[0] = #1000 1'b1;
		# 8000;
	end
	state_expected[0] = 1'b0;
	state_expected[0] = #1000 1'b1;
	# 1000;
	repeat(78)
	begin
		state_expected[0] = 1'b0;
		state_expected[0] = #7000 1'b1;
		# 2000;
	end
	state_expected[0] = 1'b0;
	state_expected[0] = #7000 1'b1;
	# 1000;
	repeat(3)
	begin
		state_expected[0] = 1'b0;
		state_expected[0] = #1000 1'b1;
		# 8000;
	end
	state_expected[0] = 1'b0;
	state_expected[0] = #1000 1'b1;
	state_expected[0] = #1000 1'b0;
end 

// expected wait_counter_finished
initial
begin
	wait_counter_finished_expected = 1'b0;
	# 7500;
	repeat(6)
	begin
		wait_counter_finished_expected = 1'b1;
		wait_counter_finished_expected = #1000 1'b0;
		# 9000;
		repeat(3)
		begin
			wait_counter_finished_expected = 1'b1;
			wait_counter_finished_expected = #1000 1'b0;
			# 8000;
		end
	end
	wait_counter_finished_expected = 1'b1;
	wait_counter_finished_expected = #1000 1'b0;
	# 9000;
	repeat(81)
	begin
		wait_counter_finished_expected = 1'b1;
		wait_counter_finished_expected = #1000 1'b0;
		# 8000;
	end
	wait_counter_finished_expected = 1'b1;
	wait_counter_finished_expected = #1000 1'b0;
	# 9000;
	repeat(2)
	begin
		wait_counter_finished_expected = 1'b1;
		wait_counter_finished_expected = #1000 1'b0;
		# 8000;
	end
	wait_counter_finished_expected = 1'b1;
	wait_counter_finished_expected = #1000 1'b0;
end 
// generate trigger
always @(programmable_wait_amount_expected or programmable_wait_amount or reset_event_occurred_pulse_expected or reset_event_occurred_pulse or reset_inner_expected or reset_inner or reset_outer_expected or reset_outer or select_wait_period_expected or select_wait_period or start_delay_counter_expected or start_delay_counter or state_expected or state or wait_counter_finished_expected or wait_counter_finished)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected programmable_wait_amount = %b | expected reset_event_occurred_pulse = %b | expected reset_inner = %b | expected reset_outer = %b | expected select_wait_period = %b | expected start_delay_counter = %b | expected state = %b | expected wait_counter_finished = %b | ",programmable_wait_amount_expected_prev,reset_event_occurred_pulse_expected_prev,reset_inner_expected_prev,reset_outer_expected_prev,select_wait_period_expected_prev,start_delay_counter_expected_prev,state_expected_prev,wait_counter_finished_expected_prev);
	$display("| real programmable_wait_amount = %b | real reset_event_occurred_pulse = %b | real reset_inner = %b | real reset_outer = %b | real select_wait_period = %b | real start_delay_counter = %b | real state = %b | real wait_counter_finished = %b | ",programmable_wait_amount_prev,reset_event_occurred_pulse_prev,reset_inner_prev,reset_outer_prev,select_wait_period_prev,start_delay_counter_prev,state_prev,wait_counter_finished_prev);
`endif
	if (
		( programmable_wait_amount_expected_prev[0] !== 1'bx ) && ( programmable_wait_amount_prev[0] !== programmable_wait_amount_expected_prev[0] )
		&& ((programmable_wait_amount_expected_prev[0] !== last_programmable_wait_amount_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[0] = programmable_wait_amount_expected_prev[0];
	end
	if (
		( programmable_wait_amount_expected_prev[1] !== 1'bx ) && ( programmable_wait_amount_prev[1] !== programmable_wait_amount_expected_prev[1] )
		&& ((programmable_wait_amount_expected_prev[1] !== last_programmable_wait_amount_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[1] = programmable_wait_amount_expected_prev[1];
	end
	if (
		( programmable_wait_amount_expected_prev[2] !== 1'bx ) && ( programmable_wait_amount_prev[2] !== programmable_wait_amount_expected_prev[2] )
		&& ((programmable_wait_amount_expected_prev[2] !== last_programmable_wait_amount_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[2] = programmable_wait_amount_expected_prev[2];
	end
	if (
		( programmable_wait_amount_expected_prev[3] !== 1'bx ) && ( programmable_wait_amount_prev[3] !== programmable_wait_amount_expected_prev[3] )
		&& ((programmable_wait_amount_expected_prev[3] !== last_programmable_wait_amount_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[3] = programmable_wait_amount_expected_prev[3];
	end
	if (
		( programmable_wait_amount_expected_prev[4] !== 1'bx ) && ( programmable_wait_amount_prev[4] !== programmable_wait_amount_expected_prev[4] )
		&& ((programmable_wait_amount_expected_prev[4] !== last_programmable_wait_amount_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[4] = programmable_wait_amount_expected_prev[4];
	end
	if (
		( programmable_wait_amount_expected_prev[5] !== 1'bx ) && ( programmable_wait_amount_prev[5] !== programmable_wait_amount_expected_prev[5] )
		&& ((programmable_wait_amount_expected_prev[5] !== last_programmable_wait_amount_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[5] = programmable_wait_amount_expected_prev[5];
	end
	if (
		( programmable_wait_amount_expected_prev[6] !== 1'bx ) && ( programmable_wait_amount_prev[6] !== programmable_wait_amount_expected_prev[6] )
		&& ((programmable_wait_amount_expected_prev[6] !== last_programmable_wait_amount_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[6] = programmable_wait_amount_expected_prev[6];
	end
	if (
		( programmable_wait_amount_expected_prev[7] !== 1'bx ) && ( programmable_wait_amount_prev[7] !== programmable_wait_amount_expected_prev[7] )
		&& ((programmable_wait_amount_expected_prev[7] !== last_programmable_wait_amount_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[7] = programmable_wait_amount_expected_prev[7];
	end
	if (
		( programmable_wait_amount_expected_prev[8] !== 1'bx ) && ( programmable_wait_amount_prev[8] !== programmable_wait_amount_expected_prev[8] )
		&& ((programmable_wait_amount_expected_prev[8] !== last_programmable_wait_amount_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[8] = programmable_wait_amount_expected_prev[8];
	end
	if (
		( programmable_wait_amount_expected_prev[9] !== 1'bx ) && ( programmable_wait_amount_prev[9] !== programmable_wait_amount_expected_prev[9] )
		&& ((programmable_wait_amount_expected_prev[9] !== last_programmable_wait_amount_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[9] = programmable_wait_amount_expected_prev[9];
	end
	if (
		( programmable_wait_amount_expected_prev[10] !== 1'bx ) && ( programmable_wait_amount_prev[10] !== programmable_wait_amount_expected_prev[10] )
		&& ((programmable_wait_amount_expected_prev[10] !== last_programmable_wait_amount_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[10] = programmable_wait_amount_expected_prev[10];
	end
	if (
		( programmable_wait_amount_expected_prev[11] !== 1'bx ) && ( programmable_wait_amount_prev[11] !== programmable_wait_amount_expected_prev[11] )
		&& ((programmable_wait_amount_expected_prev[11] !== last_programmable_wait_amount_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[11] = programmable_wait_amount_expected_prev[11];
	end
	if (
		( programmable_wait_amount_expected_prev[12] !== 1'bx ) && ( programmable_wait_amount_prev[12] !== programmable_wait_amount_expected_prev[12] )
		&& ((programmable_wait_amount_expected_prev[12] !== last_programmable_wait_amount_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[12] = programmable_wait_amount_expected_prev[12];
	end
	if (
		( programmable_wait_amount_expected_prev[13] !== 1'bx ) && ( programmable_wait_amount_prev[13] !== programmable_wait_amount_expected_prev[13] )
		&& ((programmable_wait_amount_expected_prev[13] !== last_programmable_wait_amount_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[13] = programmable_wait_amount_expected_prev[13];
	end
	if (
		( programmable_wait_amount_expected_prev[14] !== 1'bx ) && ( programmable_wait_amount_prev[14] !== programmable_wait_amount_expected_prev[14] )
		&& ((programmable_wait_amount_expected_prev[14] !== last_programmable_wait_amount_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[14] = programmable_wait_amount_expected_prev[14];
	end
	if (
		( programmable_wait_amount_expected_prev[15] !== 1'bx ) && ( programmable_wait_amount_prev[15] !== programmable_wait_amount_expected_prev[15] )
		&& ((programmable_wait_amount_expected_prev[15] !== last_programmable_wait_amount_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[15] = programmable_wait_amount_expected_prev[15];
	end
	if (
		( programmable_wait_amount_expected_prev[16] !== 1'bx ) && ( programmable_wait_amount_prev[16] !== programmable_wait_amount_expected_prev[16] )
		&& ((programmable_wait_amount_expected_prev[16] !== last_programmable_wait_amount_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[16] = programmable_wait_amount_expected_prev[16];
	end
	if (
		( programmable_wait_amount_expected_prev[17] !== 1'bx ) && ( programmable_wait_amount_prev[17] !== programmable_wait_amount_expected_prev[17] )
		&& ((programmable_wait_amount_expected_prev[17] !== last_programmable_wait_amount_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[17] = programmable_wait_amount_expected_prev[17];
	end
	if (
		( programmable_wait_amount_expected_prev[18] !== 1'bx ) && ( programmable_wait_amount_prev[18] !== programmable_wait_amount_expected_prev[18] )
		&& ((programmable_wait_amount_expected_prev[18] !== last_programmable_wait_amount_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[18] = programmable_wait_amount_expected_prev[18];
	end
	if (
		( programmable_wait_amount_expected_prev[19] !== 1'bx ) && ( programmable_wait_amount_prev[19] !== programmable_wait_amount_expected_prev[19] )
		&& ((programmable_wait_amount_expected_prev[19] !== last_programmable_wait_amount_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[19] = programmable_wait_amount_expected_prev[19];
	end
	if (
		( programmable_wait_amount_expected_prev[20] !== 1'bx ) && ( programmable_wait_amount_prev[20] !== programmable_wait_amount_expected_prev[20] )
		&& ((programmable_wait_amount_expected_prev[20] !== last_programmable_wait_amount_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[20] = programmable_wait_amount_expected_prev[20];
	end
	if (
		( programmable_wait_amount_expected_prev[21] !== 1'bx ) && ( programmable_wait_amount_prev[21] !== programmable_wait_amount_expected_prev[21] )
		&& ((programmable_wait_amount_expected_prev[21] !== last_programmable_wait_amount_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[21] = programmable_wait_amount_expected_prev[21];
	end
	if (
		( programmable_wait_amount_expected_prev[22] !== 1'bx ) && ( programmable_wait_amount_prev[22] !== programmable_wait_amount_expected_prev[22] )
		&& ((programmable_wait_amount_expected_prev[22] !== last_programmable_wait_amount_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[22] = programmable_wait_amount_expected_prev[22];
	end
	if (
		( programmable_wait_amount_expected_prev[23] !== 1'bx ) && ( programmable_wait_amount_prev[23] !== programmable_wait_amount_expected_prev[23] )
		&& ((programmable_wait_amount_expected_prev[23] !== last_programmable_wait_amount_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[23] = programmable_wait_amount_expected_prev[23];
	end
	if (
		( programmable_wait_amount_expected_prev[24] !== 1'bx ) && ( programmable_wait_amount_prev[24] !== programmable_wait_amount_expected_prev[24] )
		&& ((programmable_wait_amount_expected_prev[24] !== last_programmable_wait_amount_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[24] = programmable_wait_amount_expected_prev[24];
	end
	if (
		( programmable_wait_amount_expected_prev[25] !== 1'bx ) && ( programmable_wait_amount_prev[25] !== programmable_wait_amount_expected_prev[25] )
		&& ((programmable_wait_amount_expected_prev[25] !== last_programmable_wait_amount_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[25] = programmable_wait_amount_expected_prev[25];
	end
	if (
		( programmable_wait_amount_expected_prev[26] !== 1'bx ) && ( programmable_wait_amount_prev[26] !== programmable_wait_amount_expected_prev[26] )
		&& ((programmable_wait_amount_expected_prev[26] !== last_programmable_wait_amount_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[26] = programmable_wait_amount_expected_prev[26];
	end
	if (
		( programmable_wait_amount_expected_prev[27] !== 1'bx ) && ( programmable_wait_amount_prev[27] !== programmable_wait_amount_expected_prev[27] )
		&& ((programmable_wait_amount_expected_prev[27] !== last_programmable_wait_amount_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[27] = programmable_wait_amount_expected_prev[27];
	end
	if (
		( programmable_wait_amount_expected_prev[28] !== 1'bx ) && ( programmable_wait_amount_prev[28] !== programmable_wait_amount_expected_prev[28] )
		&& ((programmable_wait_amount_expected_prev[28] !== last_programmable_wait_amount_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[28] = programmable_wait_amount_expected_prev[28];
	end
	if (
		( programmable_wait_amount_expected_prev[29] !== 1'bx ) && ( programmable_wait_amount_prev[29] !== programmable_wait_amount_expected_prev[29] )
		&& ((programmable_wait_amount_expected_prev[29] !== last_programmable_wait_amount_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[29] = programmable_wait_amount_expected_prev[29];
	end
	if (
		( programmable_wait_amount_expected_prev[30] !== 1'bx ) && ( programmable_wait_amount_prev[30] !== programmable_wait_amount_expected_prev[30] )
		&& ((programmable_wait_amount_expected_prev[30] !== last_programmable_wait_amount_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[30] = programmable_wait_amount_expected_prev[30];
	end
	if (
		( programmable_wait_amount_expected_prev[31] !== 1'bx ) && ( programmable_wait_amount_prev[31] !== programmable_wait_amount_expected_prev[31] )
		&& ((programmable_wait_amount_expected_prev[31] !== last_programmable_wait_amount_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port programmable_wait_amount[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", programmable_wait_amount_expected_prev);
		$display ("     Real value = %b", programmable_wait_amount_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_programmable_wait_amount_exp[31] = programmable_wait_amount_expected_prev[31];
	end
	if (
		( reset_event_occurred_pulse_expected_prev !== 1'bx ) && ( reset_event_occurred_pulse_prev !== reset_event_occurred_pulse_expected_prev )
		&& ((reset_event_occurred_pulse_expected_prev !== last_reset_event_occurred_pulse_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reset_event_occurred_pulse :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reset_event_occurred_pulse_expected_prev);
		$display ("     Real value = %b", reset_event_occurred_pulse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_reset_event_occurred_pulse_exp = reset_event_occurred_pulse_expected_prev;
	end
	if (
		( reset_inner_expected_prev !== 1'bx ) && ( reset_inner_prev !== reset_inner_expected_prev )
		&& ((reset_inner_expected_prev !== last_reset_inner_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reset_inner :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reset_inner_expected_prev);
		$display ("     Real value = %b", reset_inner_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_reset_inner_exp = reset_inner_expected_prev;
	end
	if (
		( reset_outer_expected_prev !== 1'bx ) && ( reset_outer_prev !== reset_outer_expected_prev )
		&& ((reset_outer_expected_prev !== last_reset_outer_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reset_outer :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reset_outer_expected_prev);
		$display ("     Real value = %b", reset_outer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_reset_outer_exp = reset_outer_expected_prev;
	end
	if (
		( select_wait_period_expected_prev !== 1'bx ) && ( select_wait_period_prev !== select_wait_period_expected_prev )
		&& ((select_wait_period_expected_prev !== last_select_wait_period_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port select_wait_period :: @time = %t",  $realtime);
		$display ("     Expected value = %b", select_wait_period_expected_prev);
		$display ("     Real value = %b", select_wait_period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_select_wait_period_exp = select_wait_period_expected_prev;
	end
	if (
		( start_delay_counter_expected_prev !== 1'bx ) && ( start_delay_counter_prev !== start_delay_counter_expected_prev )
		&& ((start_delay_counter_expected_prev !== last_start_delay_counter_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port start_delay_counter :: @time = %t",  $realtime);
		$display ("     Expected value = %b", start_delay_counter_expected_prev);
		$display ("     Real value = %b", start_delay_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_start_delay_counter_exp = start_delay_counter_expected_prev;
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end
	if (
		( state_expected_prev[3] !== 1'bx ) && ( state_prev[3] !== state_expected_prev[3] )
		&& ((state_expected_prev[3] !== last_state_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[3] = state_expected_prev[3];
	end
	if (
		( state_expected_prev[4] !== 1'bx ) && ( state_prev[4] !== state_expected_prev[4] )
		&& ((state_expected_prev[4] !== last_state_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[4] = state_expected_prev[4];
	end
	if (
		( state_expected_prev[5] !== 1'bx ) && ( state_prev[5] !== state_expected_prev[5] )
		&& ((state_expected_prev[5] !== last_state_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[5] = state_expected_prev[5];
	end
	if (
		( state_expected_prev[6] !== 1'bx ) && ( state_prev[6] !== state_expected_prev[6] )
		&& ((state_expected_prev[6] !== last_state_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[6] = state_expected_prev[6];
	end
	if (
		( state_expected_prev[7] !== 1'bx ) && ( state_prev[7] !== state_expected_prev[7] )
		&& ((state_expected_prev[7] !== last_state_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[7] = state_expected_prev[7];
	end
	if (
		( state_expected_prev[8] !== 1'bx ) && ( state_prev[8] !== state_expected_prev[8] )
		&& ((state_expected_prev[8] !== last_state_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[8] = state_expected_prev[8];
	end
	if (
		( state_expected_prev[9] !== 1'bx ) && ( state_prev[9] !== state_expected_prev[9] )
		&& ((state_expected_prev[9] !== last_state_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[9] = state_expected_prev[9];
	end
	if (
		( state_expected_prev[10] !== 1'bx ) && ( state_prev[10] !== state_expected_prev[10] )
		&& ((state_expected_prev[10] !== last_state_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[10] = state_expected_prev[10];
	end
	if (
		( state_expected_prev[11] !== 1'bx ) && ( state_prev[11] !== state_expected_prev[11] )
		&& ((state_expected_prev[11] !== last_state_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[11] = state_expected_prev[11];
	end
	if (
		( state_expected_prev[12] !== 1'bx ) && ( state_prev[12] !== state_expected_prev[12] )
		&& ((state_expected_prev[12] !== last_state_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[12] = state_expected_prev[12];
	end
	if (
		( state_expected_prev[13] !== 1'bx ) && ( state_prev[13] !== state_expected_prev[13] )
		&& ((state_expected_prev[13] !== last_state_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[13] = state_expected_prev[13];
	end
	if (
		( state_expected_prev[14] !== 1'bx ) && ( state_prev[14] !== state_expected_prev[14] )
		&& ((state_expected_prev[14] !== last_state_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[14] = state_expected_prev[14];
	end
	if (
		( state_expected_prev[15] !== 1'bx ) && ( state_prev[15] !== state_expected_prev[15] )
		&& ((state_expected_prev[15] !== last_state_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[15] = state_expected_prev[15];
	end
	if (
		( wait_counter_finished_expected_prev !== 1'bx ) && ( wait_counter_finished_prev !== wait_counter_finished_expected_prev )
		&& ((wait_counter_finished_expected_prev !== last_wait_counter_finished_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wait_counter_finished :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wait_counter_finished_expected_prev);
		$display ("     Real value = %b", wait_counter_finished_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_wait_counter_finished_exp = wait_counter_finished_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module wait_and_check_for_lock_and_do_staged_reset_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg enable;
reg lock_indication;
reg reset;
reg [31:0] wait_between_lock_checks;
reg [31:0] wait_between_resets;
// wires                                               
wire [31:0] programmable_wait_amount;
wire reset_event_occurred_pulse;
wire reset_inner;
wire reset_outer;
wire select_wait_period;
wire start_delay_counter;
wire [15:0] state;
wire wait_counter_finished;

wire sampler;                             

// assign statements (if any)                          
wait_and_check_for_lock_and_do_staged_reset i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.enable(enable),
	.lock_indication(lock_indication),
	.programmable_wait_amount(programmable_wait_amount),
	.reset(reset),
	.reset_event_occurred_pulse(reset_event_occurred_pulse),
	.reset_inner(reset_inner),
	.reset_outer(reset_outer),
	.select_wait_period(select_wait_period),
	.start_delay_counter(start_delay_counter),
	.state(state),
	.wait_between_lock_checks(wait_between_lock_checks),
	.wait_between_resets(wait_between_resets),
	.wait_counter_finished(wait_counter_finished)
);

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

// enable
initial
begin
	enable = 1'b1;
end 

// lock_indication
initial
begin
	lock_indication = 1'b0;
	lock_indication = #264000 1'b1;
	lock_indication = #704000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// wait_between_lock_checks[ 31 ]
initial
begin
	wait_between_lock_checks[31] = 1'b0;
end 
// wait_between_lock_checks[ 30 ]
initial
begin
	wait_between_lock_checks[30] = 1'b0;
end 
// wait_between_lock_checks[ 29 ]
initial
begin
	wait_between_lock_checks[29] = 1'b0;
end 
// wait_between_lock_checks[ 28 ]
initial
begin
	wait_between_lock_checks[28] = 1'b0;
end 
// wait_between_lock_checks[ 27 ]
initial
begin
	wait_between_lock_checks[27] = 1'b0;
end 
// wait_between_lock_checks[ 26 ]
initial
begin
	wait_between_lock_checks[26] = 1'b0;
end 
// wait_between_lock_checks[ 25 ]
initial
begin
	wait_between_lock_checks[25] = 1'b0;
end 
// wait_between_lock_checks[ 24 ]
initial
begin
	wait_between_lock_checks[24] = 1'b0;
end 
// wait_between_lock_checks[ 23 ]
initial
begin
	wait_between_lock_checks[23] = 1'b0;
end 
// wait_between_lock_checks[ 22 ]
initial
begin
	wait_between_lock_checks[22] = 1'b0;
end 
// wait_between_lock_checks[ 21 ]
initial
begin
	wait_between_lock_checks[21] = 1'b0;
end 
// wait_between_lock_checks[ 20 ]
initial
begin
	wait_between_lock_checks[20] = 1'b0;
end 
// wait_between_lock_checks[ 19 ]
initial
begin
	wait_between_lock_checks[19] = 1'b0;
end 
// wait_between_lock_checks[ 18 ]
initial
begin
	wait_between_lock_checks[18] = 1'b0;
end 
// wait_between_lock_checks[ 17 ]
initial
begin
	wait_between_lock_checks[17] = 1'b0;
end 
// wait_between_lock_checks[ 16 ]
initial
begin
	wait_between_lock_checks[16] = 1'b0;
end 
// wait_between_lock_checks[ 15 ]
initial
begin
	wait_between_lock_checks[15] = 1'b0;
end 
// wait_between_lock_checks[ 14 ]
initial
begin
	wait_between_lock_checks[14] = 1'b0;
end 
// wait_between_lock_checks[ 13 ]
initial
begin
	wait_between_lock_checks[13] = 1'b0;
end 
// wait_between_lock_checks[ 12 ]
initial
begin
	wait_between_lock_checks[12] = 1'b0;
end 
// wait_between_lock_checks[ 11 ]
initial
begin
	wait_between_lock_checks[11] = 1'b0;
end 
// wait_between_lock_checks[ 10 ]
initial
begin
	wait_between_lock_checks[10] = 1'b0;
end 
// wait_between_lock_checks[ 9 ]
initial
begin
	wait_between_lock_checks[9] = 1'b0;
end 
// wait_between_lock_checks[ 8 ]
initial
begin
	wait_between_lock_checks[8] = 1'b0;
end 
// wait_between_lock_checks[ 7 ]
initial
begin
	wait_between_lock_checks[7] = 1'b0;
end 
// wait_between_lock_checks[ 6 ]
initial
begin
	wait_between_lock_checks[6] = 1'b0;
end 
// wait_between_lock_checks[ 5 ]
initial
begin
	wait_between_lock_checks[5] = 1'b0;
end 
// wait_between_lock_checks[ 4 ]
initial
begin
	wait_between_lock_checks[4] = 1'b0;
end 
// wait_between_lock_checks[ 3 ]
initial
begin
	wait_between_lock_checks[3] = 1'b0;
end 
// wait_between_lock_checks[ 2 ]
initial
begin
	wait_between_lock_checks[2] = 1'b0;
end 
// wait_between_lock_checks[ 1 ]
initial
begin
	wait_between_lock_checks[1] = 1'b1;
end 
// wait_between_lock_checks[ 0 ]
initial
begin
	wait_between_lock_checks[0] = 1'b1;
end 
// wait_between_resets[ 31 ]
initial
begin
	wait_between_resets[31] = 1'b0;
end 
// wait_between_resets[ 30 ]
initial
begin
	wait_between_resets[30] = 1'b0;
end 
// wait_between_resets[ 29 ]
initial
begin
	wait_between_resets[29] = 1'b0;
end 
// wait_between_resets[ 28 ]
initial
begin
	wait_between_resets[28] = 1'b0;
end 
// wait_between_resets[ 27 ]
initial
begin
	wait_between_resets[27] = 1'b0;
end 
// wait_between_resets[ 26 ]
initial
begin
	wait_between_resets[26] = 1'b0;
end 
// wait_between_resets[ 25 ]
initial
begin
	wait_between_resets[25] = 1'b0;
end 
// wait_between_resets[ 24 ]
initial
begin
	wait_between_resets[24] = 1'b0;
end 
// wait_between_resets[ 23 ]
initial
begin
	wait_between_resets[23] = 1'b0;
end 
// wait_between_resets[ 22 ]
initial
begin
	wait_between_resets[22] = 1'b0;
end 
// wait_between_resets[ 21 ]
initial
begin
	wait_between_resets[21] = 1'b0;
end 
// wait_between_resets[ 20 ]
initial
begin
	wait_between_resets[20] = 1'b0;
end 
// wait_between_resets[ 19 ]
initial
begin
	wait_between_resets[19] = 1'b0;
end 
// wait_between_resets[ 18 ]
initial
begin
	wait_between_resets[18] = 1'b0;
end 
// wait_between_resets[ 17 ]
initial
begin
	wait_between_resets[17] = 1'b0;
end 
// wait_between_resets[ 16 ]
initial
begin
	wait_between_resets[16] = 1'b0;
end 
// wait_between_resets[ 15 ]
initial
begin
	wait_between_resets[15] = 1'b0;
end 
// wait_between_resets[ 14 ]
initial
begin
	wait_between_resets[14] = 1'b0;
end 
// wait_between_resets[ 13 ]
initial
begin
	wait_between_resets[13] = 1'b0;
end 
// wait_between_resets[ 12 ]
initial
begin
	wait_between_resets[12] = 1'b0;
end 
// wait_between_resets[ 11 ]
initial
begin
	wait_between_resets[11] = 1'b0;
end 
// wait_between_resets[ 10 ]
initial
begin
	wait_between_resets[10] = 1'b0;
end 
// wait_between_resets[ 9 ]
initial
begin
	wait_between_resets[9] = 1'b0;
end 
// wait_between_resets[ 8 ]
initial
begin
	wait_between_resets[8] = 1'b0;
end 
// wait_between_resets[ 7 ]
initial
begin
	wait_between_resets[7] = 1'b0;
end 
// wait_between_resets[ 6 ]
initial
begin
	wait_between_resets[6] = 1'b0;
end 
// wait_between_resets[ 5 ]
initial
begin
	wait_between_resets[5] = 1'b0;
end 
// wait_between_resets[ 4 ]
initial
begin
	wait_between_resets[4] = 1'b0;
end 
// wait_between_resets[ 3 ]
initial
begin
	wait_between_resets[3] = 1'b0;
end 
// wait_between_resets[ 2 ]
initial
begin
	wait_between_resets[2] = 1'b1;
end 
// wait_between_resets[ 1 ]
initial
begin
	wait_between_resets[1] = 1'b0;
end 
// wait_between_resets[ 0 ]
initial
begin
	wait_between_resets[0] = 1'b0;
end 

wait_and_check_for_lock_and_do_staged_reset_vlg_sample_tst tb_sample (
	.clk(clk),
	.enable(enable),
	.lock_indication(lock_indication),
	.reset(reset),
	.wait_between_lock_checks(wait_between_lock_checks),
	.wait_between_resets(wait_between_resets),
	.sampler_tx(sampler)
);

wait_and_check_for_lock_and_do_staged_reset_vlg_check_tst tb_out(
	.programmable_wait_amount(programmable_wait_amount),
	.reset_event_occurred_pulse(reset_event_occurred_pulse),
	.reset_inner(reset_inner),
	.reset_outer(reset_outer),
	.select_wait_period(select_wait_period),
	.start_delay_counter(start_delay_counter),
	.state(state),
	.wait_counter_finished(wait_counter_finished),
	.sampler_rx(sampler)
);
endmodule

