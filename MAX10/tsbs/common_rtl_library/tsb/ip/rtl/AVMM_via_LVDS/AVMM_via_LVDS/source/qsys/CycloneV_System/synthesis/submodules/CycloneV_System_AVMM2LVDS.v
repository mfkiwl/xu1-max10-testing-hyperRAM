// CycloneV_System_AVMM2LVDS.v

// Generated using ACDS version 14.1 190 at 2015.10.20.13:23:37

`timescale 1 ps / 1 ps
module CycloneV_System_AVMM2LVDS (
		input  wire        aligner_ctrl_aligner_ena,   // aligner_ctrl.aligner_ena
		input  wire        aligner_ctrl_aligner_shift, //             .aligner_shift
		output wire        aligner_ctrl_aligner_oos,   //             .aligner_oos
		output wire        avmm_slave_readdatavalid,   //   avmm_slave.readdatavalid
		output wire        avmm_slave_waitrequest,     //             .waitrequest
		output wire [7:0]  avmm_slave_readdata,        //             .readdata
		input  wire [7:0]  avmm_slave_writedata,       //             .writedata
		input  wire [12:0] avmm_slave_address,         //             .address
		input  wire        avmm_slave_write,           //             .write
		input  wire        avmm_slave_read,            //             .read
		input  wire [1:0]  lvds_rx_lvds,               //      lvds_rx.lvds
		output wire [1:0]  lvds_tx_lvds,               //      lvds_tx.lvds
		input  wire        reset_reset_n,              //        reset.reset_n
		input  wire        rx_clkin_clk,               //     rx_clkin.clk
		output wire        rx_clkout_clk,              //    rx_clkout.clk
		input  wire        tx_clkin_clk,               //     tx_clkin.clk
		output wire        tx_clkout_clk               //    tx_clkout.clk
	);

	wire        local_st_packets_to_bytes_out_bytes_stream_valid;           // local_st_packets_to_bytes:out_valid -> Local_Bytes_to_LVDS:avst_txvalid
	wire  [7:0] local_st_packets_to_bytes_out_bytes_stream_data;            // local_st_packets_to_bytes:out_data -> Local_Bytes_to_LVDS:avst_txdata
	wire        local_st_packets_to_bytes_out_bytes_stream_ready;           // Local_Bytes_to_LVDS:avst_txready -> local_st_packets_to_bytes:out_ready
	wire        local_bytes_to_lvds_out_bytes_stream_valid;                 // Local_Bytes_to_LVDS:avst_rxvalid -> local_st_bytes_to_packets:in_valid
	wire  [7:0] local_bytes_to_lvds_out_bytes_stream_data;                  // Local_Bytes_to_LVDS:avst_rxdata -> local_st_bytes_to_packets:in_data
	wire        local_bytes_to_lvds_out_bytes_stream_ready;                 // local_st_bytes_to_packets:in_ready -> Local_Bytes_to_LVDS:avst_rxready
	wire        local_avalon_slave_to_packets_avst_source_valid;            // local_avalon_slave_to_packets:avst_out_valid -> avalon_st_adapter:in_0_valid
	wire  [7:0] local_avalon_slave_to_packets_avst_source_data;             // local_avalon_slave_to_packets:avst_out_data -> avalon_st_adapter:in_0_data
	wire        local_avalon_slave_to_packets_avst_source_ready;            // avalon_st_adapter:in_0_ready -> local_avalon_slave_to_packets:avst_out_ready
	wire        local_avalon_slave_to_packets_avst_source_startofpacket;    // local_avalon_slave_to_packets:avst_out_sop -> avalon_st_adapter:in_0_startofpacket
	wire        local_avalon_slave_to_packets_avst_source_endofpacket;      // local_avalon_slave_to_packets:avst_out_eop -> avalon_st_adapter:in_0_endofpacket
	wire        avalon_st_adapter_out_0_valid;                              // avalon_st_adapter:out_0_valid -> local_st_packets_to_bytes:in_valid
	wire  [7:0] avalon_st_adapter_out_0_data;                               // avalon_st_adapter:out_0_data -> local_st_packets_to_bytes:in_data
	wire        avalon_st_adapter_out_0_ready;                              // local_st_packets_to_bytes:in_ready -> avalon_st_adapter:out_0_ready
	wire  [7:0] avalon_st_adapter_out_0_channel;                            // avalon_st_adapter:out_0_channel -> local_st_packets_to_bytes:in_channel
	wire        avalon_st_adapter_out_0_startofpacket;                      // avalon_st_adapter:out_0_startofpacket -> local_st_packets_to_bytes:in_startofpacket
	wire        avalon_st_adapter_out_0_endofpacket;                        // avalon_st_adapter:out_0_endofpacket -> local_st_packets_to_bytes:in_endofpacket
	wire        local_st_bytes_to_packets_out_packets_stream_valid;         // local_st_bytes_to_packets:out_valid -> avalon_st_adapter_001:in_0_valid
	wire  [7:0] local_st_bytes_to_packets_out_packets_stream_data;          // local_st_bytes_to_packets:out_data -> avalon_st_adapter_001:in_0_data
	wire        local_st_bytes_to_packets_out_packets_stream_ready;         // avalon_st_adapter_001:in_0_ready -> local_st_bytes_to_packets:out_ready
	wire  [7:0] local_st_bytes_to_packets_out_packets_stream_channel;       // local_st_bytes_to_packets:out_channel -> avalon_st_adapter_001:in_0_channel
	wire        local_st_bytes_to_packets_out_packets_stream_startofpacket; // local_st_bytes_to_packets:out_startofpacket -> avalon_st_adapter_001:in_0_startofpacket
	wire        local_st_bytes_to_packets_out_packets_stream_endofpacket;   // local_st_bytes_to_packets:out_endofpacket -> avalon_st_adapter_001:in_0_endofpacket
	wire        avalon_st_adapter_001_out_0_valid;                          // avalon_st_adapter_001:out_0_valid -> local_avalon_slave_to_packets:avst_in_valid
	wire  [7:0] avalon_st_adapter_001_out_0_data;                           // avalon_st_adapter_001:out_0_data -> local_avalon_slave_to_packets:avst_in_data
	wire        avalon_st_adapter_001_out_0_ready;                          // local_avalon_slave_to_packets:avst_in_ready -> avalon_st_adapter_001:out_0_ready
	wire        avalon_st_adapter_001_out_0_startofpacket;                  // avalon_st_adapter_001:out_0_startofpacket -> local_avalon_slave_to_packets:avst_in_sop
	wire        avalon_st_adapter_001_out_0_endofpacket;                    // avalon_st_adapter_001:out_0_endofpacket -> local_avalon_slave_to_packets:avst_in_eop
	wire        rst_controller_reset_out_reset;                             // rst_controller:reset_out -> [Local_Bytes_to_LVDS:reset, avalon_st_adapter:in_rst_0_reset, avalon_st_adapter_001:in_rst_0_reset, local_avalon_slave_to_packets:reset, local_st_bytes_to_packets:reset_n, local_st_packets_to_bytes:reset_n]

	bytes_to_lvds #(
		.P_SLAVE      (1'b0),
		.P_PCFIFO     (1'b0),
		.P_OOSCNTR    (8),
		.P_ALIGNSEQ0  (10'b0000101010),
		.P_ALIGNSEQ1  (10'b0000101010),
		.P_DEV_FAMILY ("1")
	) local_bytes_to_lvds (
		.reset          (rst_controller_reset_out_reset),                   //            reset.reset
		.aligner_ena    (aligner_ctrl_aligner_ena),                         //     aligner_ctrl.aligner_ena
		.aligner_shift  (aligner_ctrl_aligner_shift),                       //                 .aligner_shift
		.aligner_oos    (aligner_ctrl_aligner_oos),                         //                 .aligner_oos
		.lvdspll_locked (),                                                 //      misc_status.pll_locked
		.avst_rxdata    (local_bytes_to_lvds_out_bytes_stream_data),        // out_bytes_stream.data
		.avst_rxready   (local_bytes_to_lvds_out_bytes_stream_ready),       //                 .ready
		.avst_rxvalid   (local_bytes_to_lvds_out_bytes_stream_valid),       //                 .valid
		.avst_txdata    (local_st_packets_to_bytes_out_bytes_stream_data),  //  in_bytes_stream.data
		.avst_txready   (local_st_packets_to_bytes_out_bytes_stream_ready), //                 .ready
		.avst_txvalid   (local_st_packets_to_bytes_out_bytes_stream_valid), //                 .valid
		.lvds_rxdata    (lvds_rx_lvds),                                     //          lvds_rx.lvds
		.lvds_txdata    (lvds_tx_lvds),                                     //          lvds_tx.lvds
		.rx_outclock    (rx_clkout_clk),                                    //        clkout_rx.clk
		.tx_outclock    (tx_clkout_clk),                                    //        clkout_tx.clk
		.rxpll_refclk   (rx_clkin_clk),                                     //        clk_rxpll.clk
		.txpll_refclk   (rx_clkin_clk)                                      //        clk_txpll.clk
	);

	avs_to_packets_wrapper #(
		.P_AWIDTH        (13),
		.P_MAXBURSTWIDTH (1),
		.P_FIFOSIZELOGN  (2)
	) local_avalon_slave_to_packets (
		.clk               (rx_clkout_clk),                                           //       clock.clk
		.reset             (rst_controller_reset_out_reset),                          //       reset.reset
		.avs_readdatavalid (avmm_slave_readdatavalid),                                //  avmm_slave.readdatavalid
		.avs_waitrequest   (avmm_slave_waitrequest),                                  //            .waitrequest
		.avs_readdata      (avmm_slave_readdata),                                     //            .readdata
		.avs_writedata     (avmm_slave_writedata),                                    //            .writedata
		.avs_address       (avmm_slave_address),                                      //            .address
		.avs_write         (avmm_slave_write),                                        //            .write
		.avs_read          (avmm_slave_read),                                         //            .read
		.avst_out_data     (local_avalon_slave_to_packets_avst_source_data),          // avst_source.data
		.avst_out_valid    (local_avalon_slave_to_packets_avst_source_valid),         //            .valid
		.avst_out_ready    (local_avalon_slave_to_packets_avst_source_ready),         //            .ready
		.avst_out_sop      (local_avalon_slave_to_packets_avst_source_startofpacket), //            .startofpacket
		.avst_out_eop      (local_avalon_slave_to_packets_avst_source_endofpacket),   //            .endofpacket
		.avst_in_ready     (avalon_st_adapter_001_out_0_ready),                       //   avst_sink.ready
		.avst_in_data      (avalon_st_adapter_001_out_0_data),                        //            .data
		.avst_in_valid     (avalon_st_adapter_001_out_0_valid),                       //            .valid
		.avst_in_sop       (avalon_st_adapter_001_out_0_startofpacket),               //            .startofpacket
		.avst_in_eop       (avalon_st_adapter_001_out_0_endofpacket),                 //            .endofpacket
		.avs_burstcount    (1'b1)                                                     // (terminated)
	);

	altera_avalon_st_bytes_to_packets #(
		.CHANNEL_WIDTH (8),
		.ENCODING      (0)
	) local_st_bytes_to_packets (
		.clk               (rx_clkout_clk),                                              //                clk.clk
		.reset_n           (~rst_controller_reset_out_reset),                            //          clk_reset.reset_n
		.out_channel       (local_st_bytes_to_packets_out_packets_stream_channel),       // out_packets_stream.channel
		.out_ready         (local_st_bytes_to_packets_out_packets_stream_ready),         //                   .ready
		.out_valid         (local_st_bytes_to_packets_out_packets_stream_valid),         //                   .valid
		.out_data          (local_st_bytes_to_packets_out_packets_stream_data),          //                   .data
		.out_startofpacket (local_st_bytes_to_packets_out_packets_stream_startofpacket), //                   .startofpacket
		.out_endofpacket   (local_st_bytes_to_packets_out_packets_stream_endofpacket),   //                   .endofpacket
		.in_ready          (local_bytes_to_lvds_out_bytes_stream_ready),                 //    in_bytes_stream.ready
		.in_valid          (local_bytes_to_lvds_out_bytes_stream_valid),                 //                   .valid
		.in_data           (local_bytes_to_lvds_out_bytes_stream_data)                   //                   .data
	);

	altera_avalon_st_packets_to_bytes #(
		.CHANNEL_WIDTH (8),
		.ENCODING      (0)
	) local_st_packets_to_bytes (
		.clk              (rx_clkout_clk),                                    //               clk.clk
		.reset_n          (~rst_controller_reset_out_reset),                  //         clk_reset.reset_n
		.in_ready         (avalon_st_adapter_out_0_ready),                    // in_packets_stream.ready
		.in_valid         (avalon_st_adapter_out_0_valid),                    //                  .valid
		.in_data          (avalon_st_adapter_out_0_data),                     //                  .data
		.in_channel       (avalon_st_adapter_out_0_channel),                  //                  .channel
		.in_startofpacket (avalon_st_adapter_out_0_startofpacket),            //                  .startofpacket
		.in_endofpacket   (avalon_st_adapter_out_0_endofpacket),              //                  .endofpacket
		.out_ready        (local_st_packets_to_bytes_out_bytes_stream_ready), //  out_bytes_stream.ready
		.out_valid        (local_st_packets_to_bytes_out_bytes_stream_valid), //                  .valid
		.out_data         (local_st_packets_to_bytes_out_bytes_stream_data)   //                  .data
	);

	CycloneV_System_AVMM2LVDS_avalon_st_adapter #(
		.inBitsPerSymbol (8),
		.inUsePackets    (1),
		.inDataWidth     (8),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (8),
		.outChannelWidth (8),
		.outErrorWidth   (0),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk        (rx_clkout_clk),                                           // in_clk_0.clk
		.in_rst_0_reset      (rst_controller_reset_out_reset),                          // in_rst_0.reset
		.in_0_data           (local_avalon_slave_to_packets_avst_source_data),          //     in_0.data
		.in_0_valid          (local_avalon_slave_to_packets_avst_source_valid),         //         .valid
		.in_0_ready          (local_avalon_slave_to_packets_avst_source_ready),         //         .ready
		.in_0_startofpacket  (local_avalon_slave_to_packets_avst_source_startofpacket), //         .startofpacket
		.in_0_endofpacket    (local_avalon_slave_to_packets_avst_source_endofpacket),   //         .endofpacket
		.out_0_data          (avalon_st_adapter_out_0_data),                            //    out_0.data
		.out_0_valid         (avalon_st_adapter_out_0_valid),                           //         .valid
		.out_0_ready         (avalon_st_adapter_out_0_ready),                           //         .ready
		.out_0_startofpacket (avalon_st_adapter_out_0_startofpacket),                   //         .startofpacket
		.out_0_endofpacket   (avalon_st_adapter_out_0_endofpacket),                     //         .endofpacket
		.out_0_channel       (avalon_st_adapter_out_0_channel)                          //         .channel
	);

	CycloneV_System_AVMM2LVDS_avalon_st_adapter_001 #(
		.inBitsPerSymbol (8),
		.inUsePackets    (1),
		.inDataWidth     (8),
		.inChannelWidth  (8),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (8),
		.outChannelWidth (0),
		.outErrorWidth   (0),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk        (rx_clkout_clk),                                              // in_clk_0.clk
		.in_rst_0_reset      (rst_controller_reset_out_reset),                             // in_rst_0.reset
		.in_0_data           (local_st_bytes_to_packets_out_packets_stream_data),          //     in_0.data
		.in_0_valid          (local_st_bytes_to_packets_out_packets_stream_valid),         //         .valid
		.in_0_ready          (local_st_bytes_to_packets_out_packets_stream_ready),         //         .ready
		.in_0_startofpacket  (local_st_bytes_to_packets_out_packets_stream_startofpacket), //         .startofpacket
		.in_0_endofpacket    (local_st_bytes_to_packets_out_packets_stream_endofpacket),   //         .endofpacket
		.in_0_channel        (local_st_bytes_to_packets_out_packets_stream_channel),       //         .channel
		.out_0_data          (avalon_st_adapter_001_out_0_data),                           //    out_0.data
		.out_0_valid         (avalon_st_adapter_001_out_0_valid),                          //         .valid
		.out_0_ready         (avalon_st_adapter_001_out_0_ready),                          //         .ready
		.out_0_startofpacket (avalon_st_adapter_001_out_0_startofpacket),                  //         .startofpacket
		.out_0_endofpacket   (avalon_st_adapter_001_out_0_endofpacket)                     //         .endofpacket
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                 // reset_in0.reset
		.clk            (rx_clkout_clk),                  //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

endmodule
