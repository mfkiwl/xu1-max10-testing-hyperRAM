// avalon_st_sc_fifo_only.v

// Generated using ACDS version 13.0sp1 232 at 2014.07.21.13:38:16

`timescale 1 ps / 1 ps
module avalon_st_sc_fifo_only (
		input  wire        clk_clk,                 //           clk.clk
		input  wire        reset_reset_n,           //         reset.reset_n
		output wire        almost_empty_data,       //  almost_empty.data
		output wire        almost_full_data,        //   almost_full.data
		output wire [31:0] out_data_data,           //      out_data.data
		output wire        out_data_valid,          //              .valid
		input  wire        out_data_ready,          //              .ready
		output wire        out_data_startofpacket,  //              .startofpacket
		output wire        out_data_endofpacket,    //              .endofpacket
		output wire [1:0]  out_data_empty,          //              .empty
		input  wire [31:0] in_data_data,            //       in_data.data
		input  wire        in_data_valid,           //              .valid
		output wire        in_data_ready,           //              .ready
		input  wire        in_data_startofpacket,   //              .startofpacket
		input  wire        in_data_endofpacket,     //              .endofpacket
		input  wire [1:0]  in_data_empty,           //              .empty
		input  wire [2:0]  avalon_mm_slv_address,   // avalon_mm_slv.address
		input  wire        avalon_mm_slv_read,      //              .read
		input  wire        avalon_mm_slv_write,     //              .write
		output wire [31:0] avalon_mm_slv_readdata,  //              .readdata
		input  wire [31:0] avalon_mm_slv_writedata  //              .writedata
	);

	wire    rst_controller_reset_out_reset; // rst_controller:reset_out -> sc_fifo_0:reset

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (4),
		.BITS_PER_SYMBOL     (8),
		.FIFO_DEPTH          (4096),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (1),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (1),
		.USE_ALMOST_FULL_IF  (1),
		.USE_ALMOST_EMPTY_IF (1)
	) sc_fifo_0 (
		.clk               (clk_clk),                        //          clk.clk
		.reset             (rst_controller_reset_out_reset), //    clk_reset.reset
		.csr_address       (avalon_mm_slv_address),          //          csr.address
		.csr_read          (avalon_mm_slv_read),             //             .read
		.csr_write         (avalon_mm_slv_write),            //             .write
		.csr_readdata      (avalon_mm_slv_readdata),         //             .readdata
		.csr_writedata     (avalon_mm_slv_writedata),        //             .writedata
		.almost_full_data  (almost_full_data),               //  almost_full.data
		.almost_empty_data (almost_empty_data),              // almost_empty.data
		.in_data           (in_data_data),                   //           in.data
		.in_valid          (in_data_valid),                  //             .valid
		.in_ready          (in_data_ready),                  //             .ready
		.in_startofpacket  (in_data_startofpacket),          //             .startofpacket
		.in_endofpacket    (in_data_endofpacket),            //             .endofpacket
		.in_empty          (in_data_empty),                  //             .empty
		.out_data          (out_data_data),                  //          out.data
		.out_valid         (out_data_valid),                 //             .valid
		.out_ready         (out_data_ready),                 //             .ready
		.out_startofpacket (out_data_startofpacket),         //             .startofpacket
		.out_endofpacket   (out_data_endofpacket),           //             .endofpacket
		.out_empty         (out_data_empty),                 //             .empty
		.in_error          (1'b0),                           //  (terminated)
		.out_error         (),                               //  (terminated)
		.in_channel        (1'b0),                           //  (terminated)
		.out_channel       ()                                //  (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS        (1),
		.OUTPUT_RESET_SYNC_EDGES ("deassert"),
		.SYNC_DEPTH              (2),
		.RESET_REQUEST_PRESENT   (0)
	) rst_controller (
		.reset_in0  (~reset_reset_n),                 // reset_in0.reset
		.clk        (clk_clk),                        //       clk.clk
		.reset_out  (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req  (),                               // (terminated)
		.reset_in1  (1'b0),                           // (terminated)
		.reset_in2  (1'b0),                           // (terminated)
		.reset_in3  (1'b0),                           // (terminated)
		.reset_in4  (1'b0),                           // (terminated)
		.reset_in5  (1'b0),                           // (terminated)
		.reset_in6  (1'b0),                           // (terminated)
		.reset_in7  (1'b0),                           // (terminated)
		.reset_in8  (1'b0),                           // (terminated)
		.reset_in9  (1'b0),                           // (terminated)
		.reset_in10 (1'b0),                           // (terminated)
		.reset_in11 (1'b0),                           // (terminated)
		.reset_in12 (1'b0),                           // (terminated)
		.reset_in13 (1'b0),                           // (terminated)
		.reset_in14 (1'b0),                           // (terminated)
		.reset_in15 (1'b0)                            // (terminated)
	);

endmodule
