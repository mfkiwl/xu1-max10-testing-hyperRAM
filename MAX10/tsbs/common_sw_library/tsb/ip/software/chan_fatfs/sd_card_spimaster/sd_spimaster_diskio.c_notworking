
#include "sd_spimaster.h"
#include "../diskio.h"		/* Common include file for FatFs and disk I/O layer */


/*-------------------------------------------------------------------------*/
/* Platform dependent macros and functions needed to be modified           */
/*-------------------------------------------------------------------------*/

#include "alt_types.h"  // alt_u32
#include "system.h"
#include "io.h"
#include "../../basedef.h"
#include <time.h>
#include <sys/alt_stdio.h>
#include "../altera_avalon_pio_regs.h"
#include "../../cpp_to_c_header_interface.h"
#include "system.h"


// ------------------------ initSD -----------------------------
DSTATUS initSD(BYTE pdrv) {
  char *s;
  unsigned char transError;

  printStr("Starting SD Init\n");
  REG8(SD_BASE + SPI_TRANS_TYPE_REG) = SPI_INIT_SD;
  REG8(SD_BASE + SPI_TRANS_CTRL_REG) = SPI_TRANS_START;
  printStr("Waiting transaction complete ...\n");
  while (REG8(SD_BASE + SPI_TRANS_STS_REG) == TRANS_BUSY);
  printStr("Transaction completed. Trans error code: ");
  transError = REG8(SD_BASE + SPI_TRANS_ERROR_REG);  
  if (transError) {
	  retrun STA_NOINIT;
  } else {
	  return 0;
  }
}


// ------------------------ SDBlockReadWriteTest -----------------------------
int SDBlockReadWriteTest(unsigned long sdAddr) {
int i;
unsigned char dataWrite;
unsigned char dataRead;
char *s;
unsigned char transError;

  printStr("Writing SD memory at address = ");
  print32bit(sdAddr);
  //write to TX fifo
  dataWrite = 0;
  for (i=0; i<=511; i=i+1) {
    REG8(SD_BASE + SPI_TX_FIFO_DATA_REG) = dataWrite;
    dataWrite = dataWrite + 1;
  }

  //set SD address = SD_FLASH_FILE_START
  REG8(SD_BASE + SD_ADDR_7_0_REG) = (unsigned char) (sdAddr & 0xff);
  REG8(SD_BASE + SD_ADDR_15_8_REG) = (unsigned char) ((sdAddr >> 8) & 0xff);
  REG8(SD_BASE + SD_ADDR_23_16_REG) = (unsigned char) ((sdAddr >> 16) & 0xff);
  REG8(SD_BASE + SD_ADDR_31_24_REG) = (unsigned char) ((sdAddr >> 24) & 0xff);

  //set write trans type, and start
  REG8(SD_BASE + SPI_TRANS_TYPE_REG) = SPI_RW_WRITE_SD_BLOCK;
  REG8(SD_BASE + SPI_TRANS_CTRL_REG) = SPI_TRANS_START;

  //wait for complete
  printStr("Waiting transaction complete ...\n");
  while (REG8(SD_BASE + SPI_TRANS_STS_REG) == TRANS_BUSY);

  //check write error code
  transError = REG8(SD_BASE + SPI_TRANS_ERROR_REG);  
  if (transError != 0) {
    printStr("Transaction error. Trans error code: ");
    print32bit( (unsigned long int) transError);
    return (1);
  }

  printStr("Starting SD block read\n");

  //set read trans type, and start
  REG8(SD_BASE + SPI_TRANS_TYPE_REG) = SPI_RW_READ_SD_BLOCK;
  REG8(SD_BASE + SPI_TRANS_CTRL_REG) = SPI_TRANS_START;

  //wait for complete
  printStr("Waiting transaction complete ...\n");
  while (REG8(SD_BASE + SPI_TRANS_STS_REG) == TRANS_BUSY);

  //check read error code
  transError = REG8(SD_BASE + SPI_TRANS_ERROR_REG);  
  if (transError != 0) {
    printStr("Transaction error. Trans error code: ");
    print32bit( (unsigned long int) transError);
    return (1);
  }

  //read RX fifo
  dataWrite = 0;
  for (i=0; i<=511; i=i+1) {
    dataRead = REG8(SD_BASE + SPI_RX_FIFO_DATA_REG);
    if (dataRead != dataWrite) {
      printStr("Data read error, expected ");
      print32bit( (unsigned long int) dataWrite);
      printStr(" got ");
      print32bit( (unsigned long int) dataRead);
      return (1);
    }
    dataWrite = dataWrite + 1;
  }
  return (0);
}


// ------------------------ SDMultiBlockWrite -----------------------------
int SDMultiBlockWrite(unsigned long sdAddr, unsigned long numBlocks) {
int i;
unsigned long blockCnt;
unsigned int waitCnt;
unsigned long dataWrite;
unsigned char dataRead;
char *s;
unsigned char transError;


  printStr("--- Starting SD memory write\n");
  dataWrite = 0;
  for (blockCnt = 0; blockCnt <= numBlocks; blockCnt++) {
    if ((blockCnt & 0xff) == 0) {
      printStr("Writing SD memory at address = 0x");
      print32bit(sdAddr);
    }
    //write to TX fifo
    for (i=0; i<=127; i=i+1) {
      REG8(SD_BASE + SPI_TX_FIFO_DATA_REG) = (unsigned char) (dataWrite & 0xff);
      REG8(SD_BASE + SPI_TX_FIFO_DATA_REG) = (unsigned char) ((dataWrite >> 8) & 0xff);
      REG8(SD_BASE + SPI_TX_FIFO_DATA_REG) = (unsigned char) ((dataWrite >> 16) & 0xff);
      REG8(SD_BASE + SPI_TX_FIFO_DATA_REG) = (unsigned char) ((dataWrite >> 24) & 0xff);
      dataWrite = dataWrite + 1;
    }

    //set SD address
    REG8(SD_BASE + SD_ADDR_7_0_REG) = (unsigned char) (sdAddr & 0xff);
    REG8(SD_BASE + SD_ADDR_15_8_REG) = (unsigned char) ((sdAddr >> 8) & 0xff);
    REG8(SD_BASE + SD_ADDR_23_16_REG) = (unsigned char) ((sdAddr >> 16) & 0xff);
    REG8(SD_BASE + SD_ADDR_31_24_REG) = (unsigned char) ((sdAddr >> 24) & 0xff);

    //set write trans type, and start
    REG8(SD_BASE + SPI_TRANS_TYPE_REG) = SPI_RW_WRITE_SD_BLOCK;
    REG8(SD_BASE + SPI_TRANS_CTRL_REG) = SPI_TRANS_START;

    //wait for complete
    //printStr("Waiting transaction complete ...\n");
    waitCnt = 0;
    while (REG8(SD_BASE + SPI_TRANS_STS_REG) == TRANS_BUSY) {
      waitCnt++;
      if ((waitCnt & 0x3ff) == 0)
        printStr("Waiting transaction complete ...\n");
    }
    //check write error code
    transError = REG8(SD_BASE + SPI_TRANS_ERROR_REG);  
    if (transError != 0) {
      printStr("Transaction error. Trans error code: ");
      print32bit( (unsigned long int) transError);
      printStr("At SD memory address = 0x");
      print32bit(sdAddr);
      return (1);
    }
    sdAddr += 512;
  }
  return (0);
}

// ------------------------ SDMultiBlockRead -----------------------------
int SDMultiBlockRead(unsigned long sdAddr, unsigned long numBlocks) {
int i;
unsigned long blockCnt;
unsigned int waitCnt;
unsigned long dataWrite;
unsigned long dataRead;
unsigned char dataRead1;
unsigned char dataRead2;
unsigned char dataRead3;
unsigned char dataRead4;
char *s;
unsigned char transError;


  printStr("--- Starting SD memory read\n");
  dataWrite = 0;
  for (blockCnt = 0; blockCnt <= numBlocks; blockCnt++) {
    if ((blockCnt & 0xff) == 0) {
      printStr("Reading SD memory at address = 0x");
      print32bit(sdAddr);
    }

    //set SD address
    REG8(SD_BASE + SD_ADDR_7_0_REG) = (unsigned char) (sdAddr & 0xff);
    REG8(SD_BASE + SD_ADDR_15_8_REG) = (unsigned char) ((sdAddr >> 8) & 0xff);
    REG8(SD_BASE + SD_ADDR_23_16_REG) = (unsigned char) ((sdAddr >> 16) & 0xff);
    REG8(SD_BASE + SD_ADDR_31_24_REG) = (unsigned char) ((sdAddr >> 24) & 0xff);
  
    //set read trans type, and start
    REG8(SD_BASE + SPI_TRANS_TYPE_REG) = SPI_RW_READ_SD_BLOCK;
    REG8(SD_BASE + SPI_TRANS_CTRL_REG) = SPI_TRANS_START;

    //wait for complete
    //printStr("Waiting transaction complete ...\n");
    waitCnt = 0;
    while (REG8(SD_BASE + SPI_TRANS_STS_REG) == TRANS_BUSY) {
      waitCnt++;
      if ((waitCnt & 0x3ff) == 0)
        printStr("Waiting transaction complete ...\n");
    }

    //check read error code
    transError = REG8(SD_BASE + SPI_TRANS_ERROR_REG);  
    if (transError != 0) {
      printStr("Transaction error. Trans error code: ");
      print32bit( (unsigned long int) transError);
      return (1);
    }

    //read RX fifo
    for (i=0; i<=127; i=i+1) {
      dataRead1 = REG8(SD_BASE + SPI_RX_FIFO_DATA_REG);
      dataRead2 = REG8(SD_BASE + SPI_RX_FIFO_DATA_REG);
      dataRead3 = REG8(SD_BASE + SPI_RX_FIFO_DATA_REG);
      dataRead4 = REG8(SD_BASE + SPI_RX_FIFO_DATA_REG);
      dataRead = dataRead1 + (dataRead2 << 8) + (dataRead3 << 16) + (dataRead4 << 24); 
      if (dataRead != dataWrite) {
        printStr("Data read error, expected ");
        print32bit(dataWrite);
        printStr(" got ");
        print32bit(dataRead);
        printStr("At SD memory address = 0x");
        print32bit(sdAddr);
        return (1);
      }
      dataWrite = dataWrite + 1;
    }
    sdAddr += 512;
  }
  return (0);
}
