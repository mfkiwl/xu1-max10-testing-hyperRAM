<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>IOF Library: tostr.hpp File Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
    <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<h1>tostr.hpp File Reference</h1><hr><a name="_details"></a><h2>Detailed Description</h2>
Provides formatted output to a string via std::ostringstream. 
<p>
<div class="fragment"><pre class="fragment">    **  Copyright (c) 2006, Oliver Schoenborn
    **  Distributed under the BSD Software License (see accompanying 
    **  LICENSE_IOF_1_0.txt in root folder of library for complete 
    **  terms and conditions). 
    </pre></div> 
<p>
<code>#include &quot;<a class="el" href="prints_8hpp-source.html">iof/prints.hpp</a>&quot;</code><br>

<p>
Include dependency graph for tostr.hpp:<p><center><img src="tostr_8hpp__incl.png" border="0" usemap="#tostr.hpp_map" alt=""></center>
<map name="tostr.hpp_map">
<area href="prints_8hpp.html" shape="rect" coords="133,33,231,59" alt="">
<area href="fmtr_8hpp.html" shape="rect" coords="281,33,369,59" alt="">
</map>

<p>
This graph shows which files directly or indirectly include this file:<p><center><img src="tostr_8hpp__dep__incl.png" border="0" usemap="#tostr.hppdep_map" alt=""></center>
<map name="tostr.hppdep_map">
<area href="output_8hpp.html" shape="rect" coords="133,8,218,34" alt="">
<area href="io_8hpp.html" shape="rect" coords="266,8,325,34" alt="">
</map>

<p>
<a href="tostr_8hpp-source.html">Go to the source code of this file.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Namespaces</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">namespace &nbsp;</td><td class="memItemRight" valign="bottom"><b>iof</b></td></tr>

<tr><td colspan="2"><br><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><b>GET_STR_FROM_PRINT</b>(printsFmtObj)</td></tr>

<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="437323d3c859cfd2a0c3328f12c2fc71"></a><!-- doxytag: member="tostr.hpp::tostr" ref="437323d3c859cfd2a0c3328f12c2fc71" args="(const char *msg)" -->
std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceiof.html#437323d3c859cfd2a0c3328f12c2fc71">iof::tostr</a> (const char *msg)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns a std::string of <em>str</em>. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="fb2bad179b56c639917c0a5bed8d61ca"></a><!-- doxytag: member="tostr.hpp::tostr" ref="fb2bad179b56c639917c0a5bed8d61ca" args="(const std::string &amp;msg)" -->
std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceiof.html#fb2bad179b56c639917c0a5bed8d61ca">iof::tostr</a> (const std::string &amp;msg)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns a copy of <em>str</em>. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="3a36061f22faa2e8afef8a251355e55d"></a><!-- doxytag: member="tostr.hpp::tostr" ref="3a36061f22faa2e8afef8a251355e55d" args="(const TT &amp;msg)" -->
template&lt;typename TT&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceiof.html#3a36061f22faa2e8afef8a251355e55d">iof::tostr</a> (const TT &amp;msg)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Note that for this overload, str=fmt_spec is allowed but doesn't make sense. <br></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="56a88a3aa953383d2c180b5318ed082a"></a><!-- doxytag: member="tostr.hpp::tostr" ref="56a88a3aa953383d2c180b5318ed082a" args="(const char *fmt, const T1 &amp;obj)" -->
template&lt;typename T1&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::tostr</b> (const char *fmt, const T1 &amp;obj)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="a5f381828dbd1a5bcfb66456cda2aec8"></a><!-- doxytag: member="tostr.hpp::tostr" ref="a5f381828dbd1a5bcfb66456cda2aec8" args="(const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2)" -->
template&lt;typename T1, typename T2&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::tostr</b> (const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="061ac482279f9d12f2f3f33e4d2f246f"></a><!-- doxytag: member="tostr.hpp::tostr" ref="061ac482279f9d12f2f3f33e4d2f246f" args="(const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3)" -->
template&lt;typename T1, typename T2, typename T3&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::tostr</b> (const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="84820f1370dd7bf959a2fd2648c25ce7"></a><!-- doxytag: member="tostr.hpp::tostr" ref="84820f1370dd7bf959a2fd2648c25ce7" args="(const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4)" -->
template&lt;typename T1, typename T2, typename T3, typename T4&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::tostr</b> (const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="3b3beeef7f96d77560e5aabbc0804b55"></a><!-- doxytag: member="tostr.hpp::tostr" ref="3b3beeef7f96d77560e5aabbc0804b55" args="(const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5)" -->
template&lt;typename T1, typename T2, typename T3, typename T4, typename T5&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::tostr</b> (const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="49fa010f37bc0f7fb0522f702a3f96eb"></a><!-- doxytag: member="tostr.hpp::tostr" ref="49fa010f37bc0f7fb0522f702a3f96eb" args="(const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6)" -->
template&lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::tostr</b> (const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="265ef8b0bb7ac73fbe4f9fd3c67b192a"></a><!-- doxytag: member="tostr.hpp::tostr" ref="265ef8b0bb7ac73fbe4f9fd3c67b192a" args="(const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7)" -->
template&lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::tostr</b> (const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="48d2a69f7f942f80e42356e02c5330c2"></a><!-- doxytag: member="tostr.hpp::tostr" ref="48d2a69f7f942f80e42356e02c5330c2" args="(const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7, const T8 &amp;obj8)" -->
template&lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::tostr</b> (const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7, const T8 &amp;obj8)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="7ce90dccf6f5bf0858002317c55c4cf9"></a><!-- doxytag: member="tostr.hpp::tostr" ref="7ce90dccf6f5bf0858002317c55c4cf9" args="(const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7, const T8 &amp;obj8, const T9 &amp;obj9)" -->
template&lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::tostr</b> (const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7, const T8 &amp;obj8, const T9 &amp;obj9)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2"><a class="anchor" name="e8ed9dfe34ea83a7a6c2210791af691f"></a><!-- doxytag: member="tostr.hpp::tostr" ref="e8ed9dfe34ea83a7a6c2210791af691f" args="(const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7, const T8 &amp;obj8, const T9 &amp;obj9, const T10 &amp;obj10)" -->
template&lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memTemplItemRight" valign="bottom"><b>iof::tostr</b> (const char *fmt, const T1 &amp;obj1, const T2 &amp;obj2, const T3 &amp;obj3, const T4 &amp;obj4, const T5 &amp;obj5, const T6 &amp;obj6, const T7 &amp;obj7, const T8 &amp;obj8, const T9 &amp;obj9, const T10 &amp;obj10)</td></tr>

</table>
<hr><h2>Define Documentation</h2>
<a class="anchor" name="1d129551dcc7309f6e7c6649a29a316b"></a><!-- doxytag: member="tostr.hpp::GET_STR_FROM_PRINT" ref="1d129551dcc7309f6e7c6649a29a316b" args="(printsFmtObj)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define GET_STR_FROM_PRINT          </td>
          <td>(</td>
          <td class="paramtype">printsFmtObj&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<b>Value:</b><div class="fragment"><pre class="fragment">std::ostringstream out; \
    printsFmtObj;           \
    <span class="keywordflow">return</span> out.str();
</pre></div>
</div>
</div><p>
<hr size="1"><address style="align: right;"><small>Generated on Sun Oct 15 23:55:35 2006 for IOF Library by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
