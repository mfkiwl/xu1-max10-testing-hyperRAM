// tse_w_sfp.v

// Generated using ACDS version 14.1 190 at 2016.05.18.13:46:17

`timescale 1 ps / 1 ps
module tse_w_sfp (
		input  wire        clk_100_clk,                                       //                               clk_100.clk
		input  wire        clk_125_control_clk,                               //                       clk_125_control.clk
		input  wire        clk_125_enet_base_in_clk_clk,                      //              clk_125_enet_base_in_clk.clk
		input  wire        clk_50_clk,                                        //                                clk_50.clk
		output wire        mm_bridge_0_s0_waitrequest,                        //                        mm_bridge_0_s0.waitrequest
		output wire [31:0] mm_bridge_0_s0_readdata,                           //                                      .readdata
		output wire        mm_bridge_0_s0_readdatavalid,                      //                                      .readdatavalid
		input  wire [0:0]  mm_bridge_0_s0_burstcount,                         //                                      .burstcount
		input  wire [31:0] mm_bridge_0_s0_writedata,                          //                                      .writedata
		input  wire [18:0] mm_bridge_0_s0_address,                            //                                      .address
		input  wire        mm_bridge_0_s0_write,                              //                                      .write
		input  wire        mm_bridge_0_s0_read,                               //                                      .read
		input  wire [3:0]  mm_bridge_0_s0_byteenable,                         //                                      .byteenable
		input  wire        mm_bridge_0_s0_debugaccess,                        //                                      .debugaccess
		input  wire        reset_100_reset_n,                                 //                             reset_100.reset_n
		input  wire        reset_125_control_reset_n,                         //                     reset_125_control.reset_n
		input  wire        reset_50_reset_n,                                  //                              reset_50.reset_n
		output wire        tse_sgdma_rx_csr_irq_irq,                          //                  tse_sgdma_rx_csr_irq.irq
		input  wire        tse_sgdma_rx_m_write_waitrequest,                  //                  tse_sgdma_rx_m_write.waitrequest
		output wire [31:0] tse_sgdma_rx_m_write_address,                      //                                      .address
		output wire        tse_sgdma_rx_m_write_write,                        //                                      .write
		output wire [31:0] tse_sgdma_rx_m_write_writedata,                    //                                      .writedata
		output wire [3:0]  tse_sgdma_rx_m_write_byteenable,                   //                                      .byteenable
		output wire        tse_sgdma_tx_csr_irq_irq,                          //                  tse_sgdma_tx_csr_irq.irq
		input  wire [31:0] tse_sgdma_tx_m_read_readdata,                      //                   tse_sgdma_tx_m_read.readdata
		input  wire        tse_sgdma_tx_m_read_readdatavalid,                 //                                      .readdatavalid
		input  wire        tse_sgdma_tx_m_read_waitrequest,                   //                                      .waitrequest
		output wire [31:0] tse_sgdma_tx_m_read_address,                       //                                      .address
		output wire        tse_sgdma_tx_m_read_read,                          //                                      .read
		output wire [31:0] tse_sgdma_tx_out_data,                             //                      tse_sgdma_tx_out.data
		output wire        tse_sgdma_tx_out_valid,                            //                                      .valid
		input  wire        tse_sgdma_tx_out_ready,                            //                                      .ready
		output wire        tse_sgdma_tx_out_endofpacket,                      //                                      .endofpacket
		output wire        tse_sgdma_tx_out_startofpacket,                    //                                      .startofpacket
		output wire [1:0]  tse_sgdma_tx_out_empty,                            //                                      .empty
		output wire        tse_tse_mac_mac_mdio_connection_mdc,               //       tse_tse_mac_mac_mdio_connection.mdc
		input  wire        tse_tse_mac_mac_mdio_connection_mdio_in,           //                                      .mdio_in
		output wire        tse_tse_mac_mac_mdio_connection_mdio_out,          //                                      .mdio_out
		output wire        tse_tse_mac_mac_mdio_connection_mdio_oen,          //                                      .mdio_oen
		input  wire        tse_tse_mac_mac_misc_connection_xon_gen,           //       tse_tse_mac_mac_misc_connection.xon_gen
		input  wire        tse_tse_mac_mac_misc_connection_xoff_gen,          //                                      .xoff_gen
		input  wire        tse_tse_mac_mac_misc_connection_ff_tx_crc_fwd,     //                                      .ff_tx_crc_fwd
		output wire        tse_tse_mac_mac_misc_connection_ff_tx_septy,       //                                      .ff_tx_septy
		output wire        tse_tse_mac_mac_misc_connection_tx_ff_uflow,       //                                      .tx_ff_uflow
		output wire        tse_tse_mac_mac_misc_connection_ff_tx_a_full,      //                                      .ff_tx_a_full
		output wire        tse_tse_mac_mac_misc_connection_ff_tx_a_empty,     //                                      .ff_tx_a_empty
		output wire [17:0] tse_tse_mac_mac_misc_connection_rx_err_stat,       //                                      .rx_err_stat
		output wire [3:0]  tse_tse_mac_mac_misc_connection_rx_frm_type,       //                                      .rx_frm_type
		output wire        tse_tse_mac_mac_misc_connection_ff_rx_dsav,        //                                      .ff_rx_dsav
		output wire        tse_tse_mac_mac_misc_connection_ff_rx_a_full,      //                                      .ff_rx_a_full
		output wire        tse_tse_mac_mac_misc_connection_ff_rx_a_empty,     //                                      .ff_rx_a_empty
		output wire        tse_tse_mac_serdes_control_connection_sd_loopback, // tse_tse_mac_serdes_control_connection.sd_loopback
		output wire        tse_tse_mac_serdes_control_connection_powerdown,   //                                      .powerdown
		output wire        tse_tse_mac_status_led_connection_crs,             //     tse_tse_mac_status_led_connection.crs
		output wire        tse_tse_mac_status_led_connection_link,            //                                      .link
		output wire        tse_tse_mac_status_led_connection_panel_link,      //                                      .panel_link
		output wire        tse_tse_mac_status_led_connection_col,             //                                      .col
		output wire        tse_tse_mac_status_led_connection_an,              //                                      .an
		output wire        tse_tse_mac_status_led_connection_char_err,        //                                      .char_err
		output wire        tse_tse_mac_status_led_connection_disp_err,        //                                      .disp_err
		input  wire        tse_tse_mac_tbi_connection_rx_clk,                 //            tse_tse_mac_tbi_connection.rx_clk
		input  wire        tse_tse_mac_tbi_connection_tx_clk,                 //                                      .tx_clk
		input  wire [9:0]  tse_tse_mac_tbi_connection_rx_d,                   //                                      .rx_d
		output wire [9:0]  tse_tse_mac_tbi_connection_tx_d,                   //                                      .tx_d
		input  wire [31:0] tse_tse_mac_transmit_data,                         //                  tse_tse_mac_transmit.data
		input  wire        tse_tse_mac_transmit_endofpacket,                  //                                      .endofpacket
		input  wire        tse_tse_mac_transmit_error,                        //                                      .error
		input  wire [1:0]  tse_tse_mac_transmit_empty,                        //                                      .empty
		output wire        tse_tse_mac_transmit_ready,                        //                                      .ready
		input  wire        tse_tse_mac_transmit_startofpacket,                //                                      .startofpacket
		input  wire        tse_tse_mac_transmit_valid,                        //                                      .valid
		output wire        xcvr_ethernet_tx_ready,                            //                                  xcvr.ethernet_tx_ready
		output wire        xcvr_ethernet_rx_ready,                            //                                      .ethernet_rx_ready
		output wire        xcvr_xcvr_clk_pll_locked,                          //                                      .xcvr_clk_pll_locked
		output wire        xcvr_SFP_TX,                                       //                                      .SFP_TX
		input  wire        xcvr_SFP_RX,                                       //                                      .SFP_RX
		output wire        xcvr_tbi_tx_clkout,                                //                                      .tbi_tx_clkout
		output wire        xcvr_tbi_rx_clkout,                                //                                      .tbi_rx_clkout
		input  wire [9:0]  xcvr_tbi_tx_d,                                     //                                      .tbi_tx_d
		output wire [9:0]  xcvr_tbi_rx_d,                                     //                                      .tbi_rx_d
		output wire        xcvr_rx_is_lockedtoref,                            //                                      .rx_is_lockedtoref
		output wire        xcvr_rx_is_lockedtodata,                           //                                      .rx_is_lockedtodata
		output wire        xcvr_rx_signaldetect,                              //                                      .rx_signaldetect
		input  wire        xcvr_tx_forceelecidle,                             //                                      .tx_forceelecidle
		output wire        xcvr_busy,                                         //                                      .busy
		output wire        xcvr_tx_cal_busy,                                  //                                      .tx_cal_busy
		output wire        xcvr_rx_cal_busy                                   //                                      .rx_cal_busy
	);

	wire         mm_bridge_0_m0_waitrequest;                        // mm_interconnect_0:mm_bridge_0_m0_waitrequest -> mm_bridge_0:m0_waitrequest
	wire  [31:0] mm_bridge_0_m0_readdata;                           // mm_interconnect_0:mm_bridge_0_m0_readdata -> mm_bridge_0:m0_readdata
	wire         mm_bridge_0_m0_debugaccess;                        // mm_bridge_0:m0_debugaccess -> mm_interconnect_0:mm_bridge_0_m0_debugaccess
	wire  [18:0] mm_bridge_0_m0_address;                            // mm_bridge_0:m0_address -> mm_interconnect_0:mm_bridge_0_m0_address
	wire         mm_bridge_0_m0_read;                               // mm_bridge_0:m0_read -> mm_interconnect_0:mm_bridge_0_m0_read
	wire   [3:0] mm_bridge_0_m0_byteenable;                         // mm_bridge_0:m0_byteenable -> mm_interconnect_0:mm_bridge_0_m0_byteenable
	wire         mm_bridge_0_m0_readdatavalid;                      // mm_interconnect_0:mm_bridge_0_m0_readdatavalid -> mm_bridge_0:m0_readdatavalid
	wire  [31:0] mm_bridge_0_m0_writedata;                          // mm_bridge_0:m0_writedata -> mm_interconnect_0:mm_bridge_0_m0_writedata
	wire         mm_bridge_0_m0_write;                              // mm_bridge_0:m0_write -> mm_interconnect_0:mm_bridge_0_m0_write
	wire   [0:0] mm_bridge_0_m0_burstcount;                         // mm_bridge_0:m0_burstcount -> mm_interconnect_0:mm_bridge_0_m0_burstcount
	wire  [31:0] mm_interconnect_0_xcvr_avalon_slave_readdata;      // xcvr:avalon_slave_readdata -> mm_interconnect_0:xcvr_avalon_slave_readdata
	wire         mm_interconnect_0_xcvr_avalon_slave_waitrequest;   // xcvr:avalon_slave_waitrequest -> mm_interconnect_0:xcvr_avalon_slave_waitrequest
	wire         mm_interconnect_0_xcvr_avalon_slave_debugaccess;   // mm_interconnect_0:xcvr_avalon_slave_debugaccess -> xcvr:avalon_slave_debugaccess
	wire  [15:0] mm_interconnect_0_xcvr_avalon_slave_address;       // mm_interconnect_0:xcvr_avalon_slave_address -> xcvr:avalon_slave_address
	wire         mm_interconnect_0_xcvr_avalon_slave_read;          // mm_interconnect_0:xcvr_avalon_slave_read -> xcvr:avalon_slave_read
	wire   [3:0] mm_interconnect_0_xcvr_avalon_slave_byteenable;    // mm_interconnect_0:xcvr_avalon_slave_byteenable -> xcvr:avalon_slave_byteenable
	wire         mm_interconnect_0_xcvr_avalon_slave_readdatavalid; // xcvr:avalon_slave_readdatavalid -> mm_interconnect_0:xcvr_avalon_slave_readdatavalid
	wire         mm_interconnect_0_xcvr_avalon_slave_write;         // mm_interconnect_0:xcvr_avalon_slave_write -> xcvr:avalon_slave_write
	wire  [31:0] mm_interconnect_0_xcvr_avalon_slave_writedata;     // mm_interconnect_0:xcvr_avalon_slave_writedata -> xcvr:avalon_slave_writedata
	wire   [0:0] mm_interconnect_0_xcvr_avalon_slave_burstcount;    // mm_interconnect_0:xcvr_avalon_slave_burstcount -> xcvr:avalon_slave_burstcount
	wire  [31:0] mm_interconnect_0_tse_avalon_slave_readdata;       // tse:avalon_slave_readdata -> mm_interconnect_0:tse_avalon_slave_readdata
	wire         mm_interconnect_0_tse_avalon_slave_waitrequest;    // tse:avalon_slave_waitrequest -> mm_interconnect_0:tse_avalon_slave_waitrequest
	wire         mm_interconnect_0_tse_avalon_slave_debugaccess;    // mm_interconnect_0:tse_avalon_slave_debugaccess -> tse:avalon_slave_debugaccess
	wire  [12:0] mm_interconnect_0_tse_avalon_slave_address;        // mm_interconnect_0:tse_avalon_slave_address -> tse:avalon_slave_address
	wire         mm_interconnect_0_tse_avalon_slave_read;           // mm_interconnect_0:tse_avalon_slave_read -> tse:avalon_slave_read
	wire   [3:0] mm_interconnect_0_tse_avalon_slave_byteenable;     // mm_interconnect_0:tse_avalon_slave_byteenable -> tse:avalon_slave_byteenable
	wire         mm_interconnect_0_tse_avalon_slave_readdatavalid;  // tse:avalon_slave_readdatavalid -> mm_interconnect_0:tse_avalon_slave_readdatavalid
	wire         mm_interconnect_0_tse_avalon_slave_write;          // mm_interconnect_0:tse_avalon_slave_write -> tse:avalon_slave_write
	wire  [31:0] mm_interconnect_0_tse_avalon_slave_writedata;      // mm_interconnect_0:tse_avalon_slave_writedata -> tse:avalon_slave_writedata
	wire   [2:0] mm_interconnect_0_tse_avalon_slave_burstcount;     // mm_interconnect_0:tse_avalon_slave_burstcount -> tse:avalon_slave_burstcount
	wire         rst_controller_reset_out_reset;                    // rst_controller:reset_out -> [mm_bridge_0:reset, mm_interconnect_0:mm_bridge_0_reset_reset_bridge_in_reset_reset, mm_interconnect_0:tse_reset_50_reset_bridge_in_reset_reset]
	wire         rst_controller_001_reset_out_reset;                // rst_controller_001:reset_out -> [mm_interconnect_0:xcvr_avalon_slave_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_0:xcvr_reset_for_125_mhz_control_reset_bridge_in_reset_reset]

	altera_avalon_mm_bridge #(
		.DATA_WIDTH        (32),
		.SYMBOL_WIDTH      (8),
		.HDL_ADDR_WIDTH    (19),
		.BURSTCOUNT_WIDTH  (1),
		.PIPELINE_COMMAND  (1),
		.PIPELINE_RESPONSE (1)
	) mm_bridge_0 (
		.clk              (clk_50_clk),                     //   clk.clk
		.reset            (rst_controller_reset_out_reset), // reset.reset
		.s0_waitrequest   (mm_bridge_0_s0_waitrequest),     //    s0.waitrequest
		.s0_readdata      (mm_bridge_0_s0_readdata),        //      .readdata
		.s0_readdatavalid (mm_bridge_0_s0_readdatavalid),   //      .readdatavalid
		.s0_burstcount    (mm_bridge_0_s0_burstcount),      //      .burstcount
		.s0_writedata     (mm_bridge_0_s0_writedata),       //      .writedata
		.s0_address       (mm_bridge_0_s0_address),         //      .address
		.s0_write         (mm_bridge_0_s0_write),           //      .write
		.s0_read          (mm_bridge_0_s0_read),            //      .read
		.s0_byteenable    (mm_bridge_0_s0_byteenable),      //      .byteenable
		.s0_debugaccess   (mm_bridge_0_s0_debugaccess),     //      .debugaccess
		.m0_waitrequest   (mm_bridge_0_m0_waitrequest),     //    m0.waitrequest
		.m0_readdata      (mm_bridge_0_m0_readdata),        //      .readdata
		.m0_readdatavalid (mm_bridge_0_m0_readdatavalid),   //      .readdatavalid
		.m0_burstcount    (mm_bridge_0_m0_burstcount),      //      .burstcount
		.m0_writedata     (mm_bridge_0_m0_writedata),       //      .writedata
		.m0_address       (mm_bridge_0_m0_address),         //      .address
		.m0_write         (mm_bridge_0_m0_write),           //      .write
		.m0_read          (mm_bridge_0_m0_read),            //      .read
		.m0_byteenable    (mm_bridge_0_m0_byteenable),      //      .byteenable
		.m0_debugaccess   (mm_bridge_0_m0_debugaccess)      //      .debugaccess
	);

	tse_w_sfp_tse tse (
		.avalon_slave_waitrequest                      (mm_interconnect_0_tse_avalon_slave_waitrequest),    //                      avalon_slave.waitrequest
		.avalon_slave_readdata                         (mm_interconnect_0_tse_avalon_slave_readdata),       //                                  .readdata
		.avalon_slave_readdatavalid                    (mm_interconnect_0_tse_avalon_slave_readdatavalid),  //                                  .readdatavalid
		.avalon_slave_burstcount                       (mm_interconnect_0_tse_avalon_slave_burstcount),     //                                  .burstcount
		.avalon_slave_writedata                        (mm_interconnect_0_tse_avalon_slave_writedata),      //                                  .writedata
		.avalon_slave_address                          (mm_interconnect_0_tse_avalon_slave_address),        //                                  .address
		.avalon_slave_write                            (mm_interconnect_0_tse_avalon_slave_write),          //                                  .write
		.avalon_slave_read                             (mm_interconnect_0_tse_avalon_slave_read),           //                                  .read
		.avalon_slave_byteenable                       (mm_interconnect_0_tse_avalon_slave_byteenable),     //                                  .byteenable
		.avalon_slave_debugaccess                      (mm_interconnect_0_tse_avalon_slave_debugaccess),    //                                  .debugaccess
		.clk_100_clk                                   (clk_100_clk),                                       //                           clk_100.clk
		.clk_50_clk                                    (clk_50_clk),                                        //                            clk_50.clk
		.reset_100_reset_n                             (reset_100_reset_n),                                 //                         reset_100.reset_n
		.reset_50_reset_n                              (reset_50_reset_n),                                  //                          reset_50.reset_n
		.sgdma_rx_csr_irq_irq                          (tse_sgdma_rx_csr_irq_irq),                          //                  sgdma_rx_csr_irq.irq
		.sgdma_rx_m_write_waitrequest                  (tse_sgdma_rx_m_write_waitrequest),                  //                  sgdma_rx_m_write.waitrequest
		.sgdma_rx_m_write_address                      (tse_sgdma_rx_m_write_address),                      //                                  .address
		.sgdma_rx_m_write_write                        (tse_sgdma_rx_m_write_write),                        //                                  .write
		.sgdma_rx_m_write_writedata                    (tse_sgdma_rx_m_write_writedata),                    //                                  .writedata
		.sgdma_rx_m_write_byteenable                   (tse_sgdma_rx_m_write_byteenable),                   //                                  .byteenable
		.sgdma_tx_csr_irq_irq                          (tse_sgdma_tx_csr_irq_irq),                          //                  sgdma_tx_csr_irq.irq
		.sgdma_tx_m_read_readdata                      (tse_sgdma_tx_m_read_readdata),                      //                   sgdma_tx_m_read.readdata
		.sgdma_tx_m_read_readdatavalid                 (tse_sgdma_tx_m_read_readdatavalid),                 //                                  .readdatavalid
		.sgdma_tx_m_read_waitrequest                   (tse_sgdma_tx_m_read_waitrequest),                   //                                  .waitrequest
		.sgdma_tx_m_read_address                       (tse_sgdma_tx_m_read_address),                       //                                  .address
		.sgdma_tx_m_read_read                          (tse_sgdma_tx_m_read_read),                          //                                  .read
		.sgdma_tx_out_data                             (tse_sgdma_tx_out_data),                             //                      sgdma_tx_out.data
		.sgdma_tx_out_valid                            (tse_sgdma_tx_out_valid),                            //                                  .valid
		.sgdma_tx_out_ready                            (tse_sgdma_tx_out_ready),                            //                                  .ready
		.sgdma_tx_out_endofpacket                      (tse_sgdma_tx_out_endofpacket),                      //                                  .endofpacket
		.sgdma_tx_out_startofpacket                    (tse_sgdma_tx_out_startofpacket),                    //                                  .startofpacket
		.sgdma_tx_out_empty                            (tse_sgdma_tx_out_empty),                            //                                  .empty
		.tse_mac_mac_mdio_connection_mdc               (tse_tse_mac_mac_mdio_connection_mdc),               //       tse_mac_mac_mdio_connection.mdc
		.tse_mac_mac_mdio_connection_mdio_in           (tse_tse_mac_mac_mdio_connection_mdio_in),           //                                  .mdio_in
		.tse_mac_mac_mdio_connection_mdio_out          (tse_tse_mac_mac_mdio_connection_mdio_out),          //                                  .mdio_out
		.tse_mac_mac_mdio_connection_mdio_oen          (tse_tse_mac_mac_mdio_connection_mdio_oen),          //                                  .mdio_oen
		.tse_mac_mac_misc_connection_xon_gen           (tse_tse_mac_mac_misc_connection_xon_gen),           //       tse_mac_mac_misc_connection.xon_gen
		.tse_mac_mac_misc_connection_xoff_gen          (tse_tse_mac_mac_misc_connection_xoff_gen),          //                                  .xoff_gen
		.tse_mac_mac_misc_connection_ff_tx_crc_fwd     (tse_tse_mac_mac_misc_connection_ff_tx_crc_fwd),     //                                  .ff_tx_crc_fwd
		.tse_mac_mac_misc_connection_ff_tx_septy       (tse_tse_mac_mac_misc_connection_ff_tx_septy),       //                                  .ff_tx_septy
		.tse_mac_mac_misc_connection_tx_ff_uflow       (tse_tse_mac_mac_misc_connection_tx_ff_uflow),       //                                  .tx_ff_uflow
		.tse_mac_mac_misc_connection_ff_tx_a_full      (tse_tse_mac_mac_misc_connection_ff_tx_a_full),      //                                  .ff_tx_a_full
		.tse_mac_mac_misc_connection_ff_tx_a_empty     (tse_tse_mac_mac_misc_connection_ff_tx_a_empty),     //                                  .ff_tx_a_empty
		.tse_mac_mac_misc_connection_rx_err_stat       (tse_tse_mac_mac_misc_connection_rx_err_stat),       //                                  .rx_err_stat
		.tse_mac_mac_misc_connection_rx_frm_type       (tse_tse_mac_mac_misc_connection_rx_frm_type),       //                                  .rx_frm_type
		.tse_mac_mac_misc_connection_ff_rx_dsav        (tse_tse_mac_mac_misc_connection_ff_rx_dsav),        //                                  .ff_rx_dsav
		.tse_mac_mac_misc_connection_ff_rx_a_full      (tse_tse_mac_mac_misc_connection_ff_rx_a_full),      //                                  .ff_rx_a_full
		.tse_mac_mac_misc_connection_ff_rx_a_empty     (tse_tse_mac_mac_misc_connection_ff_rx_a_empty),     //                                  .ff_rx_a_empty
		.tse_mac_serdes_control_connection_sd_loopback (tse_tse_mac_serdes_control_connection_sd_loopback), // tse_mac_serdes_control_connection.sd_loopback
		.tse_mac_serdes_control_connection_powerdown   (tse_tse_mac_serdes_control_connection_powerdown),   //                                  .powerdown
		.tse_mac_status_led_connection_crs             (tse_tse_mac_status_led_connection_crs),             //     tse_mac_status_led_connection.crs
		.tse_mac_status_led_connection_link            (tse_tse_mac_status_led_connection_link),            //                                  .link
		.tse_mac_status_led_connection_panel_link      (tse_tse_mac_status_led_connection_panel_link),      //                                  .panel_link
		.tse_mac_status_led_connection_col             (tse_tse_mac_status_led_connection_col),             //                                  .col
		.tse_mac_status_led_connection_an              (tse_tse_mac_status_led_connection_an),              //                                  .an
		.tse_mac_status_led_connection_char_err        (tse_tse_mac_status_led_connection_char_err),        //                                  .char_err
		.tse_mac_status_led_connection_disp_err        (tse_tse_mac_status_led_connection_disp_err),        //                                  .disp_err
		.tse_mac_tbi_connection_rx_clk                 (tse_tse_mac_tbi_connection_rx_clk),                 //            tse_mac_tbi_connection.rx_clk
		.tse_mac_tbi_connection_tx_clk                 (tse_tse_mac_tbi_connection_tx_clk),                 //                                  .tx_clk
		.tse_mac_tbi_connection_rx_d                   (tse_tse_mac_tbi_connection_rx_d),                   //                                  .rx_d
		.tse_mac_tbi_connection_tx_d                   (tse_tse_mac_tbi_connection_tx_d),                   //                                  .tx_d
		.tse_mac_transmit_data                         (tse_tse_mac_transmit_data),                         //                  tse_mac_transmit.data
		.tse_mac_transmit_endofpacket                  (tse_tse_mac_transmit_endofpacket),                  //                                  .endofpacket
		.tse_mac_transmit_error                        (tse_tse_mac_transmit_error),                        //                                  .error
		.tse_mac_transmit_empty                        (tse_tse_mac_transmit_empty),                        //                                  .empty
		.tse_mac_transmit_ready                        (tse_tse_mac_transmit_ready),                        //                                  .ready
		.tse_mac_transmit_startofpacket                (tse_tse_mac_transmit_startofpacket),                //                                  .startofpacket
		.tse_mac_transmit_valid                        (tse_tse_mac_transmit_valid)                         //                                  .valid
	);

	av_sfp xcvr (
		.avalon_slave_waitrequest        (mm_interconnect_0_xcvr_avalon_slave_waitrequest),   //              avalon_slave.waitrequest
		.avalon_slave_readdata           (mm_interconnect_0_xcvr_avalon_slave_readdata),      //                          .readdata
		.avalon_slave_readdatavalid      (mm_interconnect_0_xcvr_avalon_slave_readdatavalid), //                          .readdatavalid
		.avalon_slave_burstcount         (mm_interconnect_0_xcvr_avalon_slave_burstcount),    //                          .burstcount
		.avalon_slave_writedata          (mm_interconnect_0_xcvr_avalon_slave_writedata),     //                          .writedata
		.avalon_slave_address            (mm_interconnect_0_xcvr_avalon_slave_address),       //                          .address
		.avalon_slave_write              (mm_interconnect_0_xcvr_avalon_slave_write),         //                          .write
		.avalon_slave_read               (mm_interconnect_0_xcvr_avalon_slave_read),          //                          .read
		.avalon_slave_byteenable         (mm_interconnect_0_xcvr_avalon_slave_byteenable),    //                          .byteenable
		.avalon_slave_debugaccess        (mm_interconnect_0_xcvr_avalon_slave_debugaccess),   //                          .debugaccess
		.ethernet_tx_ready               (xcvr_ethernet_tx_ready),                            //               conduit_end.export
		.ethernet_rx_ready               (xcvr_ethernet_rx_ready),                            //                          .export
		.xcvr_clk_pll_locked             (xcvr_xcvr_clk_pll_locked),                          //                          .export
		.SFP_TX                          (xcvr_SFP_TX),                                       //                          .export
		.SFP_RX                          (xcvr_SFP_RX),                                       //                          .export
		.tbi_tx_clkout                   (xcvr_tbi_tx_clkout),                                //                          .export
		.tbi_rx_clkout                   (xcvr_tbi_rx_clkout),                                //                          .export
		.tbi_tx_d                        (xcvr_tbi_tx_d),                                     //                          .export
		.tbi_rx_d                        (xcvr_tbi_rx_d),                                     //                          .export
		.rx_is_lockedtoref               (xcvr_rx_is_lockedtoref),                            //                          .export
		.rx_is_lockedtodata              (xcvr_rx_is_lockedtodata),                           //                          .export
		.rx_signaldetect                 (xcvr_rx_signaldetect),                              //                          .export
		.tx_forceelecidle                (xcvr_tx_forceelecidle),                             //                          .export
		.busy                            (xcvr_busy),                                         //                          .export
		.tx_cal_busy                     (xcvr_tx_cal_busy),                                  //                          .export
		.rx_cal_busy                     (xcvr_rx_cal_busy),                                  //                          .export
		.ethernet_clk_125mhz_control_clk (clk_125_control_clk),                               // clock_125_mhz_for_control.clk
		.ethernet_clk_125mhz_reset_n     (~reset_125_control_reset_n),                        // reset_for_125_mhz_control.reset
		.ethernet_125Mhz_pll_base_clk    (clk_125_enet_base_in_clk_clk)                       // clock_125_mhz_for_sfp_pll.clk
	);

	tse_w_sfp_mm_interconnect_0 mm_interconnect_0 (
		.clk_125_clk_clk                                                (clk_125_control_clk),                               //                                              clk_125_clk.clk
		.clk_50_clk_clk                                                 (clk_50_clk),                                        //                                               clk_50_clk.clk
		.mm_bridge_0_reset_reset_bridge_in_reset_reset                  (rst_controller_reset_out_reset),                    //                  mm_bridge_0_reset_reset_bridge_in_reset.reset
		.tse_reset_50_reset_bridge_in_reset_reset                       (rst_controller_reset_out_reset),                    //                       tse_reset_50_reset_bridge_in_reset.reset
		.xcvr_avalon_slave_translator_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                // xcvr_avalon_slave_translator_reset_reset_bridge_in_reset.reset
		.xcvr_reset_for_125_mhz_control_reset_bridge_in_reset_reset     (rst_controller_001_reset_out_reset),                //     xcvr_reset_for_125_mhz_control_reset_bridge_in_reset.reset
		.mm_bridge_0_m0_address                                         (mm_bridge_0_m0_address),                            //                                           mm_bridge_0_m0.address
		.mm_bridge_0_m0_waitrequest                                     (mm_bridge_0_m0_waitrequest),                        //                                                         .waitrequest
		.mm_bridge_0_m0_burstcount                                      (mm_bridge_0_m0_burstcount),                         //                                                         .burstcount
		.mm_bridge_0_m0_byteenable                                      (mm_bridge_0_m0_byteenable),                         //                                                         .byteenable
		.mm_bridge_0_m0_read                                            (mm_bridge_0_m0_read),                               //                                                         .read
		.mm_bridge_0_m0_readdata                                        (mm_bridge_0_m0_readdata),                           //                                                         .readdata
		.mm_bridge_0_m0_readdatavalid                                   (mm_bridge_0_m0_readdatavalid),                      //                                                         .readdatavalid
		.mm_bridge_0_m0_write                                           (mm_bridge_0_m0_write),                              //                                                         .write
		.mm_bridge_0_m0_writedata                                       (mm_bridge_0_m0_writedata),                          //                                                         .writedata
		.mm_bridge_0_m0_debugaccess                                     (mm_bridge_0_m0_debugaccess),                        //                                                         .debugaccess
		.tse_avalon_slave_address                                       (mm_interconnect_0_tse_avalon_slave_address),        //                                         tse_avalon_slave.address
		.tse_avalon_slave_write                                         (mm_interconnect_0_tse_avalon_slave_write),          //                                                         .write
		.tse_avalon_slave_read                                          (mm_interconnect_0_tse_avalon_slave_read),           //                                                         .read
		.tse_avalon_slave_readdata                                      (mm_interconnect_0_tse_avalon_slave_readdata),       //                                                         .readdata
		.tse_avalon_slave_writedata                                     (mm_interconnect_0_tse_avalon_slave_writedata),      //                                                         .writedata
		.tse_avalon_slave_burstcount                                    (mm_interconnect_0_tse_avalon_slave_burstcount),     //                                                         .burstcount
		.tse_avalon_slave_byteenable                                    (mm_interconnect_0_tse_avalon_slave_byteenable),     //                                                         .byteenable
		.tse_avalon_slave_readdatavalid                                 (mm_interconnect_0_tse_avalon_slave_readdatavalid),  //                                                         .readdatavalid
		.tse_avalon_slave_waitrequest                                   (mm_interconnect_0_tse_avalon_slave_waitrequest),    //                                                         .waitrequest
		.tse_avalon_slave_debugaccess                                   (mm_interconnect_0_tse_avalon_slave_debugaccess),    //                                                         .debugaccess
		.xcvr_avalon_slave_address                                      (mm_interconnect_0_xcvr_avalon_slave_address),       //                                        xcvr_avalon_slave.address
		.xcvr_avalon_slave_write                                        (mm_interconnect_0_xcvr_avalon_slave_write),         //                                                         .write
		.xcvr_avalon_slave_read                                         (mm_interconnect_0_xcvr_avalon_slave_read),          //                                                         .read
		.xcvr_avalon_slave_readdata                                     (mm_interconnect_0_xcvr_avalon_slave_readdata),      //                                                         .readdata
		.xcvr_avalon_slave_writedata                                    (mm_interconnect_0_xcvr_avalon_slave_writedata),     //                                                         .writedata
		.xcvr_avalon_slave_burstcount                                   (mm_interconnect_0_xcvr_avalon_slave_burstcount),    //                                                         .burstcount
		.xcvr_avalon_slave_byteenable                                   (mm_interconnect_0_xcvr_avalon_slave_byteenable),    //                                                         .byteenable
		.xcvr_avalon_slave_readdatavalid                                (mm_interconnect_0_xcvr_avalon_slave_readdatavalid), //                                                         .readdatavalid
		.xcvr_avalon_slave_waitrequest                                  (mm_interconnect_0_xcvr_avalon_slave_waitrequest),   //                                                         .waitrequest
		.xcvr_avalon_slave_debugaccess                                  (mm_interconnect_0_xcvr_avalon_slave_debugaccess)    //                                                         .debugaccess
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_50_reset_n),              // reset_in0.reset
		.clk            (clk_50_clk),                     //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_125_control_reset_n),         // reset_in0.reset
		.clk            (clk_125_control_clk),                //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
