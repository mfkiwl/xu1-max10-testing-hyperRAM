	component tse_w_sgdma_simple_2_intercon is
		port (
			avalon_slave_waitrequest                           : out std_logic;                                         -- waitrequest
			avalon_slave_readdata                              : out std_logic_vector(31 downto 0);                     -- readdata
			avalon_slave_readdatavalid                         : out std_logic;                                         -- readdatavalid
			avalon_slave_burstcount                            : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- burstcount
			avalon_slave_writedata                             : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- writedata
			avalon_slave_address                               : in  std_logic_vector(12 downto 0)  := (others => 'X'); -- address
			avalon_slave_write                                 : in  std_logic                      := 'X';             -- write
			avalon_slave_read                                  : in  std_logic                      := 'X';             -- read
			avalon_slave_byteenable                            : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- byteenable
			avalon_slave_debugaccess                           : in  std_logic                      := 'X';             -- debugaccess
			clk_10_clk                                         : in  std_logic                      := 'X';             -- clk
			clk_100_clk                                        : in  std_logic                      := 'X';             -- clk
			clk_50_clk                                         : in  std_logic                      := 'X';             -- clk
			reset_100_reset_n                                  : in  std_logic                      := 'X';             -- reset_n
			reset_50_reset_n                                   : in  std_logic                      := 'X';             -- reset_n
			sgdma_rx_csr_irq_irq                               : out std_logic;                                         -- irq
			sgdma_rx_m_write_waitrequest                       : in  std_logic                      := 'X';             -- waitrequest
			sgdma_rx_m_write_address                           : out std_logic_vector(31 downto 0);                     -- address
			sgdma_rx_m_write_write                             : out std_logic;                                         -- write
			sgdma_rx_m_write_writedata                         : out std_logic_vector(31 downto 0);                     -- writedata
			sgdma_rx_m_write_byteenable                        : out std_logic_vector(3 downto 0);                      -- byteenable
			sgdma_tx_csr_irq_irq                               : out std_logic;                                         -- irq
			sgdma_tx_m_read_readdata                           : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- readdata
			sgdma_tx_m_read_readdatavalid                      : in  std_logic                      := 'X';             -- readdatavalid
			sgdma_tx_m_read_waitrequest                        : in  std_logic                      := 'X';             -- waitrequest
			sgdma_tx_m_read_address                            : out std_logic_vector(31 downto 0);                     -- address
			sgdma_tx_m_read_read                               : out std_logic;                                         -- read
			sgdma_tx_out_data                                  : out std_logic_vector(31 downto 0);                     -- data
			sgdma_tx_out_valid                                 : out std_logic;                                         -- valid
			sgdma_tx_out_ready                                 : in  std_logic                      := 'X';             -- ready
			sgdma_tx_out_endofpacket                           : out std_logic;                                         -- endofpacket
			sgdma_tx_out_startofpacket                         : out std_logic;                                         -- startofpacket
			sgdma_tx_out_empty                                 : out std_logic_vector(1 downto 0);                      -- empty
			tse_mac_mac_mdio_connection_mdc                    : out std_logic;                                         -- mdc
			tse_mac_mac_mdio_connection_mdio_in                : in  std_logic                      := 'X';             -- mdio_in
			tse_mac_mac_mdio_connection_mdio_out               : out std_logic;                                         -- mdio_out
			tse_mac_mac_mdio_connection_mdio_oen               : out std_logic;                                         -- mdio_oen
			tse_mac_mac_misc_connection_xon_gen                : in  std_logic                      := 'X';             -- xon_gen
			tse_mac_mac_misc_connection_xoff_gen               : in  std_logic                      := 'X';             -- xoff_gen
			tse_mac_mac_misc_connection_ff_tx_crc_fwd          : in  std_logic                      := 'X';             -- ff_tx_crc_fwd
			tse_mac_mac_misc_connection_ff_tx_septy            : out std_logic;                                         -- ff_tx_septy
			tse_mac_mac_misc_connection_tx_ff_uflow            : out std_logic;                                         -- tx_ff_uflow
			tse_mac_mac_misc_connection_ff_tx_a_full           : out std_logic;                                         -- ff_tx_a_full
			tse_mac_mac_misc_connection_ff_tx_a_empty          : out std_logic;                                         -- ff_tx_a_empty
			tse_mac_mac_misc_connection_rx_err_stat            : out std_logic_vector(17 downto 0);                     -- rx_err_stat
			tse_mac_mac_misc_connection_rx_frm_type            : out std_logic_vector(3 downto 0);                      -- rx_frm_type
			tse_mac_mac_misc_connection_ff_rx_dsav             : out std_logic;                                         -- ff_rx_dsav
			tse_mac_mac_misc_connection_ff_rx_a_full           : out std_logic;                                         -- ff_rx_a_full
			tse_mac_mac_misc_connection_ff_rx_a_empty          : out std_logic;                                         -- ff_rx_a_empty
			tse_mac_pcs_ref_clk_clock_connection_clk           : in  std_logic                      := 'X';             -- clk
			tse_mac_serdes_control_connection_rx_recovclkout   : out std_logic;                                         -- rx_recovclkout
			tse_mac_serdes_control_connection_reconfig_togxb   : in  std_logic_vector(139 downto 0) := (others => 'X'); -- reconfig_togxb
			tse_mac_serdes_control_connection_reconfig_fromgxb : out std_logic_vector(91 downto 0);                     -- reconfig_fromgxb
			tse_mac_serial_connection_rxp                      : in  std_logic                      := 'X';             -- rxp
			tse_mac_serial_connection_txp                      : out std_logic;                                         -- txp
			tse_mac_status_led_connection_crs                  : out std_logic;                                         -- crs
			tse_mac_status_led_connection_link                 : out std_logic;                                         -- link
			tse_mac_status_led_connection_panel_link           : out std_logic;                                         -- panel_link
			tse_mac_status_led_connection_col                  : out std_logic;                                         -- col
			tse_mac_status_led_connection_an                   : out std_logic;                                         -- an
			tse_mac_status_led_connection_char_err             : out std_logic;                                         -- char_err
			tse_mac_status_led_connection_disp_err             : out std_logic;                                         -- disp_err
			tse_mac_transmit_data                              : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- data
			tse_mac_transmit_endofpacket                       : in  std_logic                      := 'X';             -- endofpacket
			tse_mac_transmit_error                             : in  std_logic                      := 'X';             -- error
			tse_mac_transmit_empty                             : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- empty
			tse_mac_transmit_ready                             : out std_logic;                                         -- ready
			tse_mac_transmit_startofpacket                     : in  std_logic                      := 'X';             -- startofpacket
			tse_mac_transmit_valid                             : in  std_logic                      := 'X'              -- valid
		);
	end component tse_w_sgdma_simple_2_intercon;

