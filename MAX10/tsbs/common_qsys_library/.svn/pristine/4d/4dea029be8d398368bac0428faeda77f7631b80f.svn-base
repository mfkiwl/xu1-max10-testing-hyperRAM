// arria_v_sfp_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.1 190 at 2016.04.27.15:01:33

`timescale 1 ps / 1 ps
module arria_v_sfp_mm_interconnect_0 (
		input  wire        ethernet_125_MHz_clock_clk_clk,                           //                         ethernet_125_MHz_clock_clk.clk
		input  wire        mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset, // mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset.reset
		input  wire [15:0] mm_bridge_to_arria_sfp_m0_address,                        //                          mm_bridge_to_arria_sfp_m0.address
		output wire        mm_bridge_to_arria_sfp_m0_waitrequest,                    //                                                   .waitrequest
		input  wire [0:0]  mm_bridge_to_arria_sfp_m0_burstcount,                     //                                                   .burstcount
		input  wire [3:0]  mm_bridge_to_arria_sfp_m0_byteenable,                     //                                                   .byteenable
		input  wire        mm_bridge_to_arria_sfp_m0_read,                           //                                                   .read
		output wire [31:0] mm_bridge_to_arria_sfp_m0_readdata,                       //                                                   .readdata
		output wire        mm_bridge_to_arria_sfp_m0_readdatavalid,                  //                                                   .readdatavalid
		input  wire        mm_bridge_to_arria_sfp_m0_write,                          //                                                   .write
		input  wire [31:0] mm_bridge_to_arria_sfp_m0_writedata,                      //                                                   .writedata
		input  wire        mm_bridge_to_arria_sfp_m0_debugaccess,                    //                                                   .debugaccess
		output wire [6:0]  alt_xcvr_reconfig_reconfig_mgmt_address,                  //                    alt_xcvr_reconfig_reconfig_mgmt.address
		output wire        alt_xcvr_reconfig_reconfig_mgmt_write,                    //                                                   .write
		output wire        alt_xcvr_reconfig_reconfig_mgmt_read,                     //                                                   .read
		input  wire [31:0] alt_xcvr_reconfig_reconfig_mgmt_readdata,                 //                                                   .readdata
		output wire [31:0] alt_xcvr_reconfig_reconfig_mgmt_writedata,                //                                                   .writedata
		input  wire        alt_xcvr_reconfig_reconfig_mgmt_waitrequest,              //                                                   .waitrequest
		output wire [8:0]  arriav_v_standalone_gigabit_xcvr_phy_mgmt_address,        //          arriav_v_standalone_gigabit_xcvr_phy_mgmt.address
		output wire        arriav_v_standalone_gigabit_xcvr_phy_mgmt_write,          //                                                   .write
		output wire        arriav_v_standalone_gigabit_xcvr_phy_mgmt_read,           //                                                   .read
		input  wire [31:0] arriav_v_standalone_gigabit_xcvr_phy_mgmt_readdata,       //                                                   .readdata
		output wire [31:0] arriav_v_standalone_gigabit_xcvr_phy_mgmt_writedata,      //                                                   .writedata
		input  wire        arriav_v_standalone_gigabit_xcvr_phy_mgmt_waitrequest     //                                                   .waitrequest
	);

	wire         mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_waitrequest;   // mm_bridge_to_arria_sfp_m0_agent:av_waitrequest -> mm_bridge_to_arria_sfp_m0_translator:uav_waitrequest
	wire  [31:0] mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_readdata;      // mm_bridge_to_arria_sfp_m0_agent:av_readdata -> mm_bridge_to_arria_sfp_m0_translator:uav_readdata
	wire         mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_debugaccess;   // mm_bridge_to_arria_sfp_m0_translator:uav_debugaccess -> mm_bridge_to_arria_sfp_m0_agent:av_debugaccess
	wire  [15:0] mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_address;       // mm_bridge_to_arria_sfp_m0_translator:uav_address -> mm_bridge_to_arria_sfp_m0_agent:av_address
	wire         mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_read;          // mm_bridge_to_arria_sfp_m0_translator:uav_read -> mm_bridge_to_arria_sfp_m0_agent:av_read
	wire   [3:0] mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_byteenable;    // mm_bridge_to_arria_sfp_m0_translator:uav_byteenable -> mm_bridge_to_arria_sfp_m0_agent:av_byteenable
	wire         mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_readdatavalid; // mm_bridge_to_arria_sfp_m0_agent:av_readdatavalid -> mm_bridge_to_arria_sfp_m0_translator:uav_readdatavalid
	wire         mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_lock;          // mm_bridge_to_arria_sfp_m0_translator:uav_lock -> mm_bridge_to_arria_sfp_m0_agent:av_lock
	wire         mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_write;         // mm_bridge_to_arria_sfp_m0_translator:uav_write -> mm_bridge_to_arria_sfp_m0_agent:av_write
	wire  [31:0] mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_writedata;     // mm_bridge_to_arria_sfp_m0_translator:uav_writedata -> mm_bridge_to_arria_sfp_m0_agent:av_writedata
	wire   [2:0] mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_burstcount;    // mm_bridge_to_arria_sfp_m0_translator:uav_burstcount -> mm_bridge_to_arria_sfp_m0_agent:av_burstcount
	wire  [31:0] arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_readdata;                  // arriav_v_standalone_gigabit_xcvr_phy_mgmt_translator:uav_readdata -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:m0_readdata
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_waitrequest;               // arriav_v_standalone_gigabit_xcvr_phy_mgmt_translator:uav_waitrequest -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:m0_waitrequest
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_debugaccess;               // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:m0_debugaccess -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_translator:uav_debugaccess
	wire  [15:0] arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_address;                   // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:m0_address -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_translator:uav_address
	wire   [3:0] arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_byteenable;                // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:m0_byteenable -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_translator:uav_byteenable
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_read;                      // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:m0_read -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_translator:uav_read
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_readdatavalid;             // arriav_v_standalone_gigabit_xcvr_phy_mgmt_translator:uav_readdatavalid -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:m0_readdatavalid
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_lock;                      // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:m0_lock -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_translator:uav_lock
	wire  [31:0] arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_writedata;                 // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:m0_writedata -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_translator:uav_writedata
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_write;                     // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:m0_write -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_translator:uav_write
	wire   [2:0] arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_burstcount;                // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:m0_burstcount -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_translator:uav_burstcount
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rf_source_valid;              // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rf_source_valid -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo:in_valid
	wire  [86:0] arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rf_source_data;               // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rf_source_data -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo:in_data
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rf_source_ready;              // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo:in_ready -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rf_source_ready
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rf_source_startofpacket;      // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rf_source_startofpacket -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo:in_startofpacket
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rf_source_endofpacket;        // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rf_source_endofpacket -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo:in_endofpacket
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo_out_valid;           // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo:out_valid -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rf_sink_valid
	wire  [86:0] arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo_out_data;            // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo:out_data -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rf_sink_data
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo_out_ready;           // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rf_sink_ready -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo:out_ready
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo_out_startofpacket;   // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo:out_startofpacket -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rf_sink_startofpacket
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo_out_endofpacket;     // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo:out_endofpacket -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rf_sink_endofpacket
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rdata_fifo_src_valid;         // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rdata_fifo_src_valid -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rdata_fifo_sink_valid
	wire  [33:0] arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rdata_fifo_src_data;          // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rdata_fifo_src_data -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rdata_fifo_sink_data
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rdata_fifo_src_ready;         // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rdata_fifo_sink_ready -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_valid;                                                            // cmd_mux:src_valid -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:cp_valid
	wire  [85:0] cmd_mux_src_data;                                                             // cmd_mux:src_data -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:cp_data
	wire         cmd_mux_src_ready;                                                            // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:cp_ready -> cmd_mux:src_ready
	wire   [1:0] cmd_mux_src_channel;                                                          // cmd_mux:src_channel -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                    // cmd_mux:src_startofpacket -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                      // cmd_mux:src_endofpacket -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:cp_endofpacket
	wire  [31:0] alt_xcvr_reconfig_reconfig_mgmt_agent_m0_readdata;                            // alt_xcvr_reconfig_reconfig_mgmt_translator:uav_readdata -> alt_xcvr_reconfig_reconfig_mgmt_agent:m0_readdata
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_m0_waitrequest;                         // alt_xcvr_reconfig_reconfig_mgmt_translator:uav_waitrequest -> alt_xcvr_reconfig_reconfig_mgmt_agent:m0_waitrequest
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_m0_debugaccess;                         // alt_xcvr_reconfig_reconfig_mgmt_agent:m0_debugaccess -> alt_xcvr_reconfig_reconfig_mgmt_translator:uav_debugaccess
	wire  [15:0] alt_xcvr_reconfig_reconfig_mgmt_agent_m0_address;                             // alt_xcvr_reconfig_reconfig_mgmt_agent:m0_address -> alt_xcvr_reconfig_reconfig_mgmt_translator:uav_address
	wire   [3:0] alt_xcvr_reconfig_reconfig_mgmt_agent_m0_byteenable;                          // alt_xcvr_reconfig_reconfig_mgmt_agent:m0_byteenable -> alt_xcvr_reconfig_reconfig_mgmt_translator:uav_byteenable
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_m0_read;                                // alt_xcvr_reconfig_reconfig_mgmt_agent:m0_read -> alt_xcvr_reconfig_reconfig_mgmt_translator:uav_read
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_m0_readdatavalid;                       // alt_xcvr_reconfig_reconfig_mgmt_translator:uav_readdatavalid -> alt_xcvr_reconfig_reconfig_mgmt_agent:m0_readdatavalid
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_m0_lock;                                // alt_xcvr_reconfig_reconfig_mgmt_agent:m0_lock -> alt_xcvr_reconfig_reconfig_mgmt_translator:uav_lock
	wire  [31:0] alt_xcvr_reconfig_reconfig_mgmt_agent_m0_writedata;                           // alt_xcvr_reconfig_reconfig_mgmt_agent:m0_writedata -> alt_xcvr_reconfig_reconfig_mgmt_translator:uav_writedata
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_m0_write;                               // alt_xcvr_reconfig_reconfig_mgmt_agent:m0_write -> alt_xcvr_reconfig_reconfig_mgmt_translator:uav_write
	wire   [2:0] alt_xcvr_reconfig_reconfig_mgmt_agent_m0_burstcount;                          // alt_xcvr_reconfig_reconfig_mgmt_agent:m0_burstcount -> alt_xcvr_reconfig_reconfig_mgmt_translator:uav_burstcount
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_rf_source_valid;                        // alt_xcvr_reconfig_reconfig_mgmt_agent:rf_source_valid -> alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo:in_valid
	wire  [86:0] alt_xcvr_reconfig_reconfig_mgmt_agent_rf_source_data;                         // alt_xcvr_reconfig_reconfig_mgmt_agent:rf_source_data -> alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo:in_data
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_rf_source_ready;                        // alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo:in_ready -> alt_xcvr_reconfig_reconfig_mgmt_agent:rf_source_ready
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_rf_source_startofpacket;                // alt_xcvr_reconfig_reconfig_mgmt_agent:rf_source_startofpacket -> alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo:in_startofpacket
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_rf_source_endofpacket;                  // alt_xcvr_reconfig_reconfig_mgmt_agent:rf_source_endofpacket -> alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo:in_endofpacket
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo_out_valid;                     // alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo:out_valid -> alt_xcvr_reconfig_reconfig_mgmt_agent:rf_sink_valid
	wire  [86:0] alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo_out_data;                      // alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo:out_data -> alt_xcvr_reconfig_reconfig_mgmt_agent:rf_sink_data
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo_out_ready;                     // alt_xcvr_reconfig_reconfig_mgmt_agent:rf_sink_ready -> alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo:out_ready
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo_out_startofpacket;             // alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo:out_startofpacket -> alt_xcvr_reconfig_reconfig_mgmt_agent:rf_sink_startofpacket
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo_out_endofpacket;               // alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo:out_endofpacket -> alt_xcvr_reconfig_reconfig_mgmt_agent:rf_sink_endofpacket
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_rdata_fifo_src_valid;                   // alt_xcvr_reconfig_reconfig_mgmt_agent:rdata_fifo_src_valid -> alt_xcvr_reconfig_reconfig_mgmt_agent:rdata_fifo_sink_valid
	wire  [33:0] alt_xcvr_reconfig_reconfig_mgmt_agent_rdata_fifo_src_data;                    // alt_xcvr_reconfig_reconfig_mgmt_agent:rdata_fifo_src_data -> alt_xcvr_reconfig_reconfig_mgmt_agent:rdata_fifo_sink_data
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_rdata_fifo_src_ready;                   // alt_xcvr_reconfig_reconfig_mgmt_agent:rdata_fifo_sink_ready -> alt_xcvr_reconfig_reconfig_mgmt_agent:rdata_fifo_src_ready
	wire         cmd_mux_001_src_valid;                                                        // cmd_mux_001:src_valid -> alt_xcvr_reconfig_reconfig_mgmt_agent:cp_valid
	wire  [85:0] cmd_mux_001_src_data;                                                         // cmd_mux_001:src_data -> alt_xcvr_reconfig_reconfig_mgmt_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                        // alt_xcvr_reconfig_reconfig_mgmt_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [1:0] cmd_mux_001_src_channel;                                                      // cmd_mux_001:src_channel -> alt_xcvr_reconfig_reconfig_mgmt_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                // cmd_mux_001:src_startofpacket -> alt_xcvr_reconfig_reconfig_mgmt_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                  // cmd_mux_001:src_endofpacket -> alt_xcvr_reconfig_reconfig_mgmt_agent:cp_endofpacket
	wire         mm_bridge_to_arria_sfp_m0_agent_cp_valid;                                     // mm_bridge_to_arria_sfp_m0_agent:cp_valid -> router:sink_valid
	wire  [85:0] mm_bridge_to_arria_sfp_m0_agent_cp_data;                                      // mm_bridge_to_arria_sfp_m0_agent:cp_data -> router:sink_data
	wire         mm_bridge_to_arria_sfp_m0_agent_cp_ready;                                     // router:sink_ready -> mm_bridge_to_arria_sfp_m0_agent:cp_ready
	wire         mm_bridge_to_arria_sfp_m0_agent_cp_startofpacket;                             // mm_bridge_to_arria_sfp_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         mm_bridge_to_arria_sfp_m0_agent_cp_endofpacket;                               // mm_bridge_to_arria_sfp_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rp_valid;                     // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rp_valid -> router_001:sink_valid
	wire  [85:0] arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rp_data;                      // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rp_data -> router_001:sink_data
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rp_ready;                     // router_001:sink_ready -> arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rp_ready
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rp_startofpacket;             // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rp_endofpacket;               // arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                         // router_001:src_valid -> rsp_demux:sink_valid
	wire  [85:0] router_001_src_data;                                                          // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                         // rsp_demux:sink_ready -> router_001:src_ready
	wire   [1:0] router_001_src_channel;                                                       // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                                 // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                                   // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_rp_valid;                               // alt_xcvr_reconfig_reconfig_mgmt_agent:rp_valid -> router_002:sink_valid
	wire  [85:0] alt_xcvr_reconfig_reconfig_mgmt_agent_rp_data;                                // alt_xcvr_reconfig_reconfig_mgmt_agent:rp_data -> router_002:sink_data
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_rp_ready;                               // router_002:sink_ready -> alt_xcvr_reconfig_reconfig_mgmt_agent:rp_ready
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_rp_startofpacket;                       // alt_xcvr_reconfig_reconfig_mgmt_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         alt_xcvr_reconfig_reconfig_mgmt_agent_rp_endofpacket;                         // alt_xcvr_reconfig_reconfig_mgmt_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                         // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [85:0] router_002_src_data;                                                          // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                                         // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [1:0] router_002_src_channel;                                                       // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                                 // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                                   // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         router_src_valid;                                                             // router:src_valid -> mm_bridge_to_arria_sfp_m0_limiter:cmd_sink_valid
	wire  [85:0] router_src_data;                                                              // router:src_data -> mm_bridge_to_arria_sfp_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                             // mm_bridge_to_arria_sfp_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [1:0] router_src_channel;                                                           // router:src_channel -> mm_bridge_to_arria_sfp_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                     // router:src_startofpacket -> mm_bridge_to_arria_sfp_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                       // router:src_endofpacket -> mm_bridge_to_arria_sfp_m0_limiter:cmd_sink_endofpacket
	wire         mm_bridge_to_arria_sfp_m0_limiter_rsp_src_valid;                              // mm_bridge_to_arria_sfp_m0_limiter:rsp_src_valid -> mm_bridge_to_arria_sfp_m0_agent:rp_valid
	wire  [85:0] mm_bridge_to_arria_sfp_m0_limiter_rsp_src_data;                               // mm_bridge_to_arria_sfp_m0_limiter:rsp_src_data -> mm_bridge_to_arria_sfp_m0_agent:rp_data
	wire         mm_bridge_to_arria_sfp_m0_limiter_rsp_src_ready;                              // mm_bridge_to_arria_sfp_m0_agent:rp_ready -> mm_bridge_to_arria_sfp_m0_limiter:rsp_src_ready
	wire   [1:0] mm_bridge_to_arria_sfp_m0_limiter_rsp_src_channel;                            // mm_bridge_to_arria_sfp_m0_limiter:rsp_src_channel -> mm_bridge_to_arria_sfp_m0_agent:rp_channel
	wire         mm_bridge_to_arria_sfp_m0_limiter_rsp_src_startofpacket;                      // mm_bridge_to_arria_sfp_m0_limiter:rsp_src_startofpacket -> mm_bridge_to_arria_sfp_m0_agent:rp_startofpacket
	wire         mm_bridge_to_arria_sfp_m0_limiter_rsp_src_endofpacket;                        // mm_bridge_to_arria_sfp_m0_limiter:rsp_src_endofpacket -> mm_bridge_to_arria_sfp_m0_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                         // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [85:0] cmd_demux_src0_data;                                                          // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                         // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [1:0] cmd_demux_src0_channel;                                                       // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                 // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                   // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                         // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [85:0] cmd_demux_src1_data;                                                          // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                         // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [1:0] cmd_demux_src1_channel;                                                       // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                 // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                   // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                         // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [85:0] rsp_demux_src0_data;                                                          // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                         // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [1:0] rsp_demux_src0_channel;                                                       // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                 // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                   // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                     // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [85:0] rsp_demux_001_src0_data;                                                      // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                     // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [1:0] rsp_demux_001_src0_channel;                                                   // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                             // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                               // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire   [0:0] mm_bridge_to_arria_sfp_m0_limiter_cmd_src_valid;                              // mm_bridge_to_arria_sfp_m0_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [85:0] mm_bridge_to_arria_sfp_m0_limiter_cmd_src_data;                               // mm_bridge_to_arria_sfp_m0_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire         mm_bridge_to_arria_sfp_m0_limiter_cmd_src_ready;                              // limiter_pipeline:in_ready -> mm_bridge_to_arria_sfp_m0_limiter:cmd_src_ready
	wire   [1:0] mm_bridge_to_arria_sfp_m0_limiter_cmd_src_channel;                            // mm_bridge_to_arria_sfp_m0_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire         mm_bridge_to_arria_sfp_m0_limiter_cmd_src_startofpacket;                      // mm_bridge_to_arria_sfp_m0_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire         mm_bridge_to_arria_sfp_m0_limiter_cmd_src_endofpacket;                        // mm_bridge_to_arria_sfp_m0_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire         limiter_pipeline_source0_valid;                                               // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [85:0] limiter_pipeline_source0_data;                                                // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire         limiter_pipeline_source0_ready;                                               // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire   [1:0] limiter_pipeline_source0_channel;                                             // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire         limiter_pipeline_source0_startofpacket;                                       // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire         limiter_pipeline_source0_endofpacket;                                         // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                            // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [85:0] rsp_mux_src_data;                                                             // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire         rsp_mux_src_ready;                                                            // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire   [1:0] rsp_mux_src_channel;                                                          // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire         rsp_mux_src_startofpacket;                                                    // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire         rsp_mux_src_endofpacket;                                                      // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire         limiter_pipeline_001_source0_valid;                                           // limiter_pipeline_001:out_valid -> mm_bridge_to_arria_sfp_m0_limiter:rsp_sink_valid
	wire  [85:0] limiter_pipeline_001_source0_data;                                            // limiter_pipeline_001:out_data -> mm_bridge_to_arria_sfp_m0_limiter:rsp_sink_data
	wire         limiter_pipeline_001_source0_ready;                                           // mm_bridge_to_arria_sfp_m0_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire   [1:0] limiter_pipeline_001_source0_channel;                                         // limiter_pipeline_001:out_channel -> mm_bridge_to_arria_sfp_m0_limiter:rsp_sink_channel
	wire         limiter_pipeline_001_source0_startofpacket;                                   // limiter_pipeline_001:out_startofpacket -> mm_bridge_to_arria_sfp_m0_limiter:rsp_sink_startofpacket
	wire         limiter_pipeline_001_source0_endofpacket;                                     // limiter_pipeline_001:out_endofpacket -> mm_bridge_to_arria_sfp_m0_limiter:rsp_sink_endofpacket

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (16),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (16),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_to_arria_sfp_m0_translator (
		.clk                    (ethernet_125_MHz_clock_clk_clk),                                               //                       clk.clk
		.reset                  (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_bridge_to_arria_sfp_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_bridge_to_arria_sfp_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_bridge_to_arria_sfp_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_bridge_to_arria_sfp_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_bridge_to_arria_sfp_m0_read),                                               //                          .read
		.av_readdata            (mm_bridge_to_arria_sfp_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_bridge_to_arria_sfp_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_bridge_to_arria_sfp_m0_write),                                              //                          .write
		.av_writedata           (mm_bridge_to_arria_sfp_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (mm_bridge_to_arria_sfp_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) arriav_v_standalone_gigabit_xcvr_phy_mgmt_translator (
		.clk                    (ethernet_125_MHz_clock_clk_clk),                                   //                      clk.clk
		.reset                  (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_read),          //                         .read
		.uav_write              (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_write),         //                         .write
		.uav_waitrequest        (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_writedata),     //                         .writedata
		.uav_lock               (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (arriav_v_standalone_gigabit_xcvr_phy_mgmt_address),                //      avalon_anti_slave_0.address
		.av_write               (arriav_v_standalone_gigabit_xcvr_phy_mgmt_write),                  //                         .write
		.av_read                (arriav_v_standalone_gigabit_xcvr_phy_mgmt_read),                   //                         .read
		.av_readdata            (arriav_v_standalone_gigabit_xcvr_phy_mgmt_readdata),               //                         .readdata
		.av_writedata           (arriav_v_standalone_gigabit_xcvr_phy_mgmt_writedata),              //                         .writedata
		.av_waitrequest         (arriav_v_standalone_gigabit_xcvr_phy_mgmt_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_burstcount          (),                                                                 //              (terminated)
		.av_byteenable          (),                                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                                             //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.av_chipselect          (),                                                                 //              (terminated)
		.av_clken               (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_debugaccess         (),                                                                 //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (7),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alt_xcvr_reconfig_reconfig_mgmt_translator (
		.clk                    (ethernet_125_MHz_clock_clk_clk),                           //                      clk.clk
		.reset                  (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_read),            //                         .read
		.uav_write              (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_write),           //                         .write
		.uav_waitrequest        (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_writedata),       //                         .writedata
		.uav_lock               (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (alt_xcvr_reconfig_reconfig_mgmt_address),                  //      avalon_anti_slave_0.address
		.av_write               (alt_xcvr_reconfig_reconfig_mgmt_write),                    //                         .write
		.av_read                (alt_xcvr_reconfig_reconfig_mgmt_read),                     //                         .read
		.av_readdata            (alt_xcvr_reconfig_reconfig_mgmt_readdata),                 //                         .readdata
		.av_writedata           (alt_xcvr_reconfig_reconfig_mgmt_writedata),                //                         .writedata
		.av_waitrequest         (alt_xcvr_reconfig_reconfig_mgmt_waitrequest),              //                         .waitrequest
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_byteenable          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_chipselect          (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_CACHE_H               (80),
		.PKT_CACHE_L               (77),
		.PKT_THREAD_ID_H           (73),
		.PKT_THREAD_ID_L           (73),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_EXCLUSIVE       (57),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (71),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (72),
		.ST_DATA_W                 (86),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_to_arria_sfp_m0_agent (
		.clk                   (ethernet_125_MHz_clock_clk_clk),                                               //       clk.clk
		.reset                 (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_bridge_to_arria_sfp_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_bridge_to_arria_sfp_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_bridge_to_arria_sfp_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_bridge_to_arria_sfp_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_bridge_to_arria_sfp_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_bridge_to_arria_sfp_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (mm_bridge_to_arria_sfp_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mm_bridge_to_arria_sfp_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mm_bridge_to_arria_sfp_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mm_bridge_to_arria_sfp_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mm_bridge_to_arria_sfp_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mm_bridge_to_arria_sfp_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (71),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (72),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent (
		.clk                     (ethernet_125_MHz_clock_clk_clk),                                             //             clk.clk
		.reset                   (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_address),                 //              m0.address
		.m0_burstcount           (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_lock),                    //                .lock
		.m0_readdata             (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_read),                    //                .read
		.m0_waitrequest          (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_writedata),               //                .writedata
		.m0_write                (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_m0_write),                   //                .write
		.rp_endofpacket          (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rp_ready),                   //                .ready
		.rp_valid                (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rp_valid),                   //                .valid
		.rp_data                 (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rp_data),                    //                .data
		.rp_startofpacket        (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                          //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                          //                .valid
		.cp_data                 (cmd_mux_src_data),                                                           //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                                    //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                        //                .channel
		.rf_sink_ready           (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo (
		.clk               (ethernet_125_MHz_clock_clk_clk),                                             //       clk.clk
		.reset             (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rf_source_data),             //        in.data
		.in_valid          (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rf_source_valid),            //          .valid
		.in_ready          (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (71),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (72),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) alt_xcvr_reconfig_reconfig_mgmt_agent (
		.clk                     (ethernet_125_MHz_clock_clk_clk),                                   //             clk.clk
		.reset                   (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_address),                 //              m0.address
		.m0_burstcount           (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_lock),                    //                .lock
		.m0_readdata             (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_read),                    //                .read
		.m0_waitrequest          (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_writedata),               //                .writedata
		.m0_write                (alt_xcvr_reconfig_reconfig_mgmt_agent_m0_write),                   //                .write
		.rp_endofpacket          (alt_xcvr_reconfig_reconfig_mgmt_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (alt_xcvr_reconfig_reconfig_mgmt_agent_rp_ready),                   //                .ready
		.rp_valid                (alt_xcvr_reconfig_reconfig_mgmt_agent_rp_valid),                   //                .valid
		.rp_data                 (alt_xcvr_reconfig_reconfig_mgmt_agent_rp_data),                    //                .data
		.rp_startofpacket        (alt_xcvr_reconfig_reconfig_mgmt_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                          //                .channel
		.rf_sink_ready           (alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (alt_xcvr_reconfig_reconfig_mgmt_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (alt_xcvr_reconfig_reconfig_mgmt_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (alt_xcvr_reconfig_reconfig_mgmt_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (alt_xcvr_reconfig_reconfig_mgmt_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (alt_xcvr_reconfig_reconfig_mgmt_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (alt_xcvr_reconfig_reconfig_mgmt_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (alt_xcvr_reconfig_reconfig_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (alt_xcvr_reconfig_reconfig_mgmt_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (alt_xcvr_reconfig_reconfig_mgmt_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alt_xcvr_reconfig_reconfig_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (alt_xcvr_reconfig_reconfig_mgmt_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo (
		.clk               (ethernet_125_MHz_clock_clk_clk),                                   //       clk.clk
		.reset             (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (alt_xcvr_reconfig_reconfig_mgmt_agent_rf_source_data),             //        in.data
		.in_valid          (alt_xcvr_reconfig_reconfig_mgmt_agent_rf_source_valid),            //          .valid
		.in_ready          (alt_xcvr_reconfig_reconfig_mgmt_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (alt_xcvr_reconfig_reconfig_mgmt_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (alt_xcvr_reconfig_reconfig_mgmt_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (alt_xcvr_reconfig_reconfig_mgmt_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	arria_v_sfp_mm_interconnect_0_router router (
		.sink_ready         (mm_bridge_to_arria_sfp_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (mm_bridge_to_arria_sfp_m0_agent_cp_valid),                 //          .valid
		.sink_data          (mm_bridge_to_arria_sfp_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (mm_bridge_to_arria_sfp_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (mm_bridge_to_arria_sfp_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (ethernet_125_MHz_clock_clk_clk),                           //       clk.clk
		.reset              (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                         //       src.ready
		.src_valid          (router_src_valid),                                         //          .valid
		.src_data           (router_src_data),                                          //          .data
		.src_channel        (router_src_channel),                                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                    //          .endofpacket
	);

	arria_v_sfp_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rp_ready),         //      sink.ready
		.sink_valid         (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rp_valid),         //          .valid
		.sink_data          (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rp_data),          //          .data
		.sink_startofpacket (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (arriav_v_standalone_gigabit_xcvr_phy_mgmt_agent_rp_endofpacket),   //          .endofpacket
		.clk                (ethernet_125_MHz_clock_clk_clk),                                   //       clk.clk
		.reset              (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	arria_v_sfp_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (alt_xcvr_reconfig_reconfig_mgmt_agent_rp_ready),           //      sink.ready
		.sink_valid         (alt_xcvr_reconfig_reconfig_mgmt_agent_rp_valid),           //          .valid
		.sink_data          (alt_xcvr_reconfig_reconfig_mgmt_agent_rp_data),            //          .data
		.sink_startofpacket (alt_xcvr_reconfig_reconfig_mgmt_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (alt_xcvr_reconfig_reconfig_mgmt_agent_rp_endofpacket),     //          .endofpacket
		.clk                (ethernet_125_MHz_clock_clk_clk),                           //       clk.clk
		.reset              (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                     //       src.ready
		.src_valid          (router_002_src_valid),                                     //          .valid
		.src_data           (router_002_src_data),                                      //          .data
		.src_channel        (router_002_src_channel),                                   //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (72),
		.PKT_SRC_ID_H              (71),
		.PKT_SRC_ID_L              (71),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (86),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.REORDER                   (0)
	) mm_bridge_to_arria_sfp_m0_limiter (
		.clk                    (ethernet_125_MHz_clock_clk_clk),                           //       clk.clk
		.reset                  (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                         //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                         //          .valid
		.cmd_sink_data          (router_src_data),                                          //          .data
		.cmd_sink_channel       (router_src_channel),                                       //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                 //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                   //          .endofpacket
		.cmd_src_ready          (mm_bridge_to_arria_sfp_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (mm_bridge_to_arria_sfp_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (mm_bridge_to_arria_sfp_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (mm_bridge_to_arria_sfp_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (mm_bridge_to_arria_sfp_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (mm_bridge_to_arria_sfp_m0_limiter_cmd_src_valid),          //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),                       //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),                       //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),                     //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                        //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),               //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),                 //          .endofpacket
		.rsp_src_ready          (mm_bridge_to_arria_sfp_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (mm_bridge_to_arria_sfp_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (mm_bridge_to_arria_sfp_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (mm_bridge_to_arria_sfp_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (mm_bridge_to_arria_sfp_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (mm_bridge_to_arria_sfp_m0_limiter_rsp_src_endofpacket)     //          .endofpacket
	);

	arria_v_sfp_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (ethernet_125_MHz_clock_clk_clk),                           //       clk.clk
		.reset              (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                           //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                         //          .channel
		.sink_data          (limiter_pipeline_source0_data),                            //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),                     //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                           //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                     //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                     //          .valid
		.src0_data          (cmd_demux_src0_data),                                      //          .data
		.src0_channel       (cmd_demux_src0_channel),                                   //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                               //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                     //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                     //          .valid
		.src1_data          (cmd_demux_src1_data),                                      //          .data
		.src1_channel       (cmd_demux_src1_channel),                                   //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                             //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                                //          .endofpacket
	);

	arria_v_sfp_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (ethernet_125_MHz_clock_clk_clk),                           //       clk.clk
		.reset               (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_src_valid),                                        //          .valid
		.src_data            (cmd_mux_src_data),                                         //          .data
		.src_channel         (cmd_mux_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                     //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                     //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                   //          .channel
		.sink0_data          (cmd_demux_src0_data),                                      //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                //          .endofpacket
	);

	arria_v_sfp_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (ethernet_125_MHz_clock_clk_clk),                           //       clk.clk
		.reset               (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                    //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                    //          .valid
		.src_data            (cmd_mux_001_src_data),                                     //          .data
		.src_channel         (cmd_mux_001_src_channel),                                  //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                     //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                     //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                   //          .channel
		.sink0_data          (cmd_demux_src1_data),                                      //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                //          .endofpacket
	);

	arria_v_sfp_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (ethernet_125_MHz_clock_clk_clk),                           //       clk.clk
		.reset              (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                     //      sink.ready
		.sink_channel       (router_001_src_channel),                                   //          .channel
		.sink_data          (router_001_src_data),                                      //          .data
		.sink_startofpacket (router_001_src_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                               //          .endofpacket
		.sink_valid         (router_001_src_valid),                                     //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                //          .endofpacket
	);

	arria_v_sfp_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (ethernet_125_MHz_clock_clk_clk),                           //       clk.clk
		.reset              (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                     //      sink.ready
		.sink_channel       (router_002_src_channel),                                   //          .channel
		.sink_data          (router_002_src_data),                                      //          .data
		.sink_startofpacket (router_002_src_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                               //          .endofpacket
		.sink_valid         (router_002_src_valid),                                     //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                 //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                 //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                  //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                               //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                            //          .endofpacket
	);

	arria_v_sfp_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (ethernet_125_MHz_clock_clk_clk),                           //       clk.clk
		.reset               (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                        //       src.ready
		.src_valid           (rsp_mux_src_valid),                                        //          .valid
		.src_data            (rsp_mux_src_data),                                         //          .data
		.src_channel         (rsp_mux_src_channel),                                      //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                     //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                     //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                   //          .channel
		.sink0_data          (rsp_demux_src0_data),                                      //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                               //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                 //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                 //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                               //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                  //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                            //          .endofpacket
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (86),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (ethernet_125_MHz_clock_clk_clk),                           //       cr0.clk
		.reset             (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (mm_bridge_to_arria_sfp_m0_limiter_cmd_src_ready),          //     sink0.ready
		.in_valid          (mm_bridge_to_arria_sfp_m0_limiter_cmd_src_valid),          //          .valid
		.in_startofpacket  (mm_bridge_to_arria_sfp_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.in_endofpacket    (mm_bridge_to_arria_sfp_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.in_data           (mm_bridge_to_arria_sfp_m0_limiter_cmd_src_data),           //          .data
		.in_channel        (mm_bridge_to_arria_sfp_m0_limiter_cmd_src_channel),        //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                           //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                           //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),                   //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),                     //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                            //          .data
		.out_channel       (limiter_pipeline_source0_channel),                         //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (86),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (2),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (ethernet_125_MHz_clock_clk_clk),                           //       cr0.clk
		.reset             (mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                                        //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                                        //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                                  //          .endofpacket
		.in_data           (rsp_mux_src_data),                                         //          .data
		.in_channel        (rsp_mux_src_channel),                                      //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),                       //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),                       //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),                 //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                        //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_error          (1'b0)                                                      // (terminated)
	);

endmodule
