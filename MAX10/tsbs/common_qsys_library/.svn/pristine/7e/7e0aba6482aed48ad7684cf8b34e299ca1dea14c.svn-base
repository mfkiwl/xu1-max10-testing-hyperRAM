// arria_v_sfp.v

// Generated using ACDS version 14.1 190 at 2016.04.27.15:01:10

`timescale 1 ps / 1 ps
module arria_v_sfp (
		output wire         alt_xcvr_reconfig_reconfig_busy_reconfig_busy,           //      alt_xcvr_reconfig_reconfig_busy.reconfig_busy
		input  wire [91:0]  alt_xcvr_reconfig_reconfig_from_xcvr_reconfig_from_xcvr, // alt_xcvr_reconfig_reconfig_from_xcvr.reconfig_from_xcvr
		output wire [139:0] alt_xcvr_reconfig_reconfig_to_xcvr_reconfig_to_xcvr,     //   alt_xcvr_reconfig_reconfig_to_xcvr.reconfig_to_xcvr
		output wire         alt_xcvr_reconfig_rx_cal_busy_tx_cal_busy,               //        alt_xcvr_reconfig_rx_cal_busy.tx_cal_busy
		output wire         alt_xcvr_reconfig_tx_cal_busy_tx_cal_busy,               //        alt_xcvr_reconfig_tx_cal_busy.tx_cal_busy
		output wire         arriav_v_standalone_gigabit_xcvr_tx_ready,               //     arriav_v_standalone_gigabit_xcvr.tx_ready
		output wire         arriav_v_standalone_gigabit_xcvr_rx_ready,               //                                     .rx_ready
		input  wire         arriav_v_standalone_gigabit_xcvr_pll_ref_clk,            //                                     .pll_ref_clk
		output wire         arriav_v_standalone_gigabit_xcvr_tx_serial_data,         //                                     .tx_serial_data
		input  wire         arriav_v_standalone_gigabit_xcvr_tx_forceelecidle,       //                                     .tx_forceelecidle
		output wire         arriav_v_standalone_gigabit_xcvr_pll_locked,             //                                     .pll_locked
		input  wire         arriav_v_standalone_gigabit_xcvr_rx_serial_data,         //                                     .rx_serial_data
		output wire         arriav_v_standalone_gigabit_xcvr_rx_is_lockedtoref,      //                                     .rx_is_lockedtoref
		output wire         arriav_v_standalone_gigabit_xcvr_rx_is_lockedtodata,     //                                     .rx_is_lockedtodata
		output wire         arriav_v_standalone_gigabit_xcvr_rx_signaldetect,        //                                     .rx_signaldetect
		output wire         arriav_v_standalone_gigabit_xcvr_tx_clkout,              //                                     .tx_clkout
		output wire         arriav_v_standalone_gigabit_xcvr_rx_clkout,              //                                     .rx_clkout
		input  wire [9:0]   arriav_v_standalone_gigabit_xcvr_tx_parallel_data,       //                                     .tx_parallel_data
		output wire [9:0]   arriav_v_standalone_gigabit_xcvr_rx_parallel_data,       //                                     .rx_parallel_data
		output wire [91:0]  arriav_v_standalone_gigabit_xcvr_reconfig_from_xcvr,     //                                     .reconfig_from_xcvr
		input  wire [139:0] arriav_v_standalone_gigabit_xcvr_reconfig_to_xcvr,       //                                     .reconfig_to_xcvr
		output wire         avalon_slave_waitrequest,                                //                         avalon_slave.waitrequest
		output wire [31:0]  avalon_slave_readdata,                                   //                                     .readdata
		output wire         avalon_slave_readdatavalid,                              //                                     .readdatavalid
		input  wire [0:0]   avalon_slave_burstcount,                                 //                                     .burstcount
		input  wire [31:0]  avalon_slave_writedata,                                  //                                     .writedata
		input  wire [15:0]  avalon_slave_address,                                    //                                     .address
		input  wire         avalon_slave_write,                                      //                                     .write
		input  wire         avalon_slave_read,                                       //                                     .read
		input  wire [3:0]   avalon_slave_byteenable,                                 //                                     .byteenable
		input  wire         avalon_slave_debugaccess,                                //                                     .debugaccess
		input  wire         ethernet_clk_125mhz_clk,                                 //                  ethernet_clk_125mhz.clk
		input  wire         ethernet_clk_125mhz_reset_reset_n                        //            ethernet_clk_125mhz_reset.reset_n
	);

	wire         mm_bridge_to_arria_sfp_m0_waitrequest;                                   // mm_interconnect_0:mm_bridge_to_arria_sfp_m0_waitrequest -> mm_bridge_to_arria_sfp:m0_waitrequest
	wire  [31:0] mm_bridge_to_arria_sfp_m0_readdata;                                      // mm_interconnect_0:mm_bridge_to_arria_sfp_m0_readdata -> mm_bridge_to_arria_sfp:m0_readdata
	wire         mm_bridge_to_arria_sfp_m0_debugaccess;                                   // mm_bridge_to_arria_sfp:m0_debugaccess -> mm_interconnect_0:mm_bridge_to_arria_sfp_m0_debugaccess
	wire  [15:0] mm_bridge_to_arria_sfp_m0_address;                                       // mm_bridge_to_arria_sfp:m0_address -> mm_interconnect_0:mm_bridge_to_arria_sfp_m0_address
	wire         mm_bridge_to_arria_sfp_m0_read;                                          // mm_bridge_to_arria_sfp:m0_read -> mm_interconnect_0:mm_bridge_to_arria_sfp_m0_read
	wire   [3:0] mm_bridge_to_arria_sfp_m0_byteenable;                                    // mm_bridge_to_arria_sfp:m0_byteenable -> mm_interconnect_0:mm_bridge_to_arria_sfp_m0_byteenable
	wire         mm_bridge_to_arria_sfp_m0_readdatavalid;                                 // mm_interconnect_0:mm_bridge_to_arria_sfp_m0_readdatavalid -> mm_bridge_to_arria_sfp:m0_readdatavalid
	wire  [31:0] mm_bridge_to_arria_sfp_m0_writedata;                                     // mm_bridge_to_arria_sfp:m0_writedata -> mm_interconnect_0:mm_bridge_to_arria_sfp_m0_writedata
	wire         mm_bridge_to_arria_sfp_m0_write;                                         // mm_bridge_to_arria_sfp:m0_write -> mm_interconnect_0:mm_bridge_to_arria_sfp_m0_write
	wire   [0:0] mm_bridge_to_arria_sfp_m0_burstcount;                                    // mm_bridge_to_arria_sfp:m0_burstcount -> mm_interconnect_0:mm_bridge_to_arria_sfp_m0_burstcount
	wire  [31:0] mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_readdata;    // arriav_v_standalone_gigabit_xcvr:phy_mgmt_readdata -> mm_interconnect_0:arriav_v_standalone_gigabit_xcvr_phy_mgmt_readdata
	wire         mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_waitrequest; // arriav_v_standalone_gigabit_xcvr:phy_mgmt_waitrequest -> mm_interconnect_0:arriav_v_standalone_gigabit_xcvr_phy_mgmt_waitrequest
	wire   [8:0] mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_address;     // mm_interconnect_0:arriav_v_standalone_gigabit_xcvr_phy_mgmt_address -> arriav_v_standalone_gigabit_xcvr:phy_mgmt_address
	wire         mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_read;        // mm_interconnect_0:arriav_v_standalone_gigabit_xcvr_phy_mgmt_read -> arriav_v_standalone_gigabit_xcvr:phy_mgmt_read
	wire         mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_write;       // mm_interconnect_0:arriav_v_standalone_gigabit_xcvr_phy_mgmt_write -> arriav_v_standalone_gigabit_xcvr:phy_mgmt_write
	wire  [31:0] mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_writedata;   // mm_interconnect_0:arriav_v_standalone_gigabit_xcvr_phy_mgmt_writedata -> arriav_v_standalone_gigabit_xcvr:phy_mgmt_writedata
	wire  [31:0] mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_readdata;              // alt_xcvr_reconfig:reconfig_mgmt_readdata -> mm_interconnect_0:alt_xcvr_reconfig_reconfig_mgmt_readdata
	wire         mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_waitrequest;           // alt_xcvr_reconfig:reconfig_mgmt_waitrequest -> mm_interconnect_0:alt_xcvr_reconfig_reconfig_mgmt_waitrequest
	wire   [6:0] mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_address;               // mm_interconnect_0:alt_xcvr_reconfig_reconfig_mgmt_address -> alt_xcvr_reconfig:reconfig_mgmt_address
	wire         mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_read;                  // mm_interconnect_0:alt_xcvr_reconfig_reconfig_mgmt_read -> alt_xcvr_reconfig:reconfig_mgmt_read
	wire         mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_write;                 // mm_interconnect_0:alt_xcvr_reconfig_reconfig_mgmt_write -> alt_xcvr_reconfig:reconfig_mgmt_write
	wire  [31:0] mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_writedata;             // mm_interconnect_0:alt_xcvr_reconfig_reconfig_mgmt_writedata -> alt_xcvr_reconfig:reconfig_mgmt_writedata
	wire         rst_controller_reset_out_reset;                                          // rst_controller:reset_out -> [alt_xcvr_reconfig:mgmt_rst_reset, arriav_v_standalone_gigabit_xcvr:phy_mgmt_clk_reset, mm_bridge_to_arria_sfp:reset, mm_interconnect_0:mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset]

	alt_xcvr_reconfig #(
		.device_family                 ("Arria V"),
		.number_of_reconfig_interfaces (2),
		.enable_offset                 (1),
		.enable_lc                     (0),
		.enable_dcd                    (0),
		.enable_dcd_power_up           (1),
		.enable_analog                 (1),
		.enable_eyemon                 (0),
		.enable_ber                    (0),
		.enable_dfe                    (0),
		.enable_adce                   (0),
		.enable_mif                    (0),
		.enable_pll                    (0)
	) alt_xcvr_reconfig (
		.reconfig_busy             (alt_xcvr_reconfig_reconfig_busy_reconfig_busy),                 //      reconfig_busy.reconfig_busy
		.tx_cal_busy               (alt_xcvr_reconfig_tx_cal_busy_tx_cal_busy),                     //        tx_cal_busy.tx_cal_busy
		.rx_cal_busy               (alt_xcvr_reconfig_rx_cal_busy_tx_cal_busy),                     //        rx_cal_busy.tx_cal_busy
		.mgmt_clk_clk              (ethernet_clk_125mhz_clk),                                       //       mgmt_clk_clk.clk
		.mgmt_rst_reset            (rst_controller_reset_out_reset),                                //     mgmt_rst_reset.reset
		.reconfig_mgmt_address     (mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_address),     //      reconfig_mgmt.address
		.reconfig_mgmt_read        (mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_read),        //                   .read
		.reconfig_mgmt_readdata    (mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_readdata),    //                   .readdata
		.reconfig_mgmt_waitrequest (mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_waitrequest), //                   .waitrequest
		.reconfig_mgmt_write       (mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_write),       //                   .write
		.reconfig_mgmt_writedata   (mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_writedata),   //                   .writedata
		.reconfig_to_xcvr          (alt_xcvr_reconfig_reconfig_to_xcvr_reconfig_to_xcvr),           //   reconfig_to_xcvr.reconfig_to_xcvr
		.reconfig_from_xcvr        (alt_xcvr_reconfig_reconfig_from_xcvr_reconfig_from_xcvr),       // reconfig_from_xcvr.reconfig_from_xcvr
		.cal_busy_in               (1'b0),                                                          //        (terminated)
		.reconfig_mif_address      (),                                                              //        (terminated)
		.reconfig_mif_read         (),                                                              //        (terminated)
		.reconfig_mif_readdata     (16'b0000000000000000),                                          //        (terminated)
		.reconfig_mif_waitrequest  (1'b0)                                                           //        (terminated)
	);

	arriav_eth_quartus_13 arriav_v_standalone_gigabit_xcvr (
		.phy_mgmt_read        (mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_read),        //    phy_mgmt.read
		.phy_mgmt_readdata    (mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_readdata),    //            .readdata
		.phy_mgmt_waitrequest (mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_waitrequest), //            .waitrequest
		.phy_mgmt_write       (mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_write),       //            .write
		.phy_mgmt_writedata   (mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_writedata),   //            .writedata
		.phy_mgmt_address     (mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_address),     //            .address
		.phy_mgmt_clk         (ethernet_clk_125mhz_clk),                                                 //  clock_sink.clk
		.phy_mgmt_clk_reset   (rst_controller_reset_out_reset),                                          //  reset_sink.reset
		.tx_ready             (arriav_v_standalone_gigabit_xcvr_tx_ready),                               // conduit_end.export
		.rx_ready             (arriav_v_standalone_gigabit_xcvr_rx_ready),                               //            .export
		.pll_ref_clk          (arriav_v_standalone_gigabit_xcvr_pll_ref_clk),                            //            .export
		.tx_serial_data       (arriav_v_standalone_gigabit_xcvr_tx_serial_data),                         //            .export
		.tx_forceelecidle     (arriav_v_standalone_gigabit_xcvr_tx_forceelecidle),                       //            .export
		.pll_locked           (arriav_v_standalone_gigabit_xcvr_pll_locked),                             //            .export
		.rx_serial_data       (arriav_v_standalone_gigabit_xcvr_rx_serial_data),                         //            .export
		.rx_is_lockedtoref    (arriav_v_standalone_gigabit_xcvr_rx_is_lockedtoref),                      //            .export
		.rx_is_lockedtodata   (arriav_v_standalone_gigabit_xcvr_rx_is_lockedtodata),                     //            .export
		.rx_signaldetect      (arriav_v_standalone_gigabit_xcvr_rx_signaldetect),                        //            .export
		.tx_clkout            (arriav_v_standalone_gigabit_xcvr_tx_clkout),                              //            .export
		.rx_clkout            (arriav_v_standalone_gigabit_xcvr_rx_clkout),                              //            .export
		.tx_parallel_data     (arriav_v_standalone_gigabit_xcvr_tx_parallel_data),                       //            .export
		.rx_parallel_data     (arriav_v_standalone_gigabit_xcvr_rx_parallel_data),                       //            .export
		.reconfig_from_xcvr   (arriav_v_standalone_gigabit_xcvr_reconfig_from_xcvr),                     //            .export
		.reconfig_to_xcvr     (arriav_v_standalone_gigabit_xcvr_reconfig_to_xcvr)                        //            .export
	);

	altera_avalon_mm_bridge #(
		.DATA_WIDTH        (32),
		.SYMBOL_WIDTH      (8),
		.HDL_ADDR_WIDTH    (16),
		.BURSTCOUNT_WIDTH  (1),
		.PIPELINE_COMMAND  (1),
		.PIPELINE_RESPONSE (1)
	) mm_bridge_to_arria_sfp (
		.clk              (ethernet_clk_125mhz_clk),                 //   clk.clk
		.reset            (rst_controller_reset_out_reset),          // reset.reset
		.s0_waitrequest   (avalon_slave_waitrequest),                //    s0.waitrequest
		.s0_readdata      (avalon_slave_readdata),                   //      .readdata
		.s0_readdatavalid (avalon_slave_readdatavalid),              //      .readdatavalid
		.s0_burstcount    (avalon_slave_burstcount),                 //      .burstcount
		.s0_writedata     (avalon_slave_writedata),                  //      .writedata
		.s0_address       (avalon_slave_address),                    //      .address
		.s0_write         (avalon_slave_write),                      //      .write
		.s0_read          (avalon_slave_read),                       //      .read
		.s0_byteenable    (avalon_slave_byteenable),                 //      .byteenable
		.s0_debugaccess   (avalon_slave_debugaccess),                //      .debugaccess
		.m0_waitrequest   (mm_bridge_to_arria_sfp_m0_waitrequest),   //    m0.waitrequest
		.m0_readdata      (mm_bridge_to_arria_sfp_m0_readdata),      //      .readdata
		.m0_readdatavalid (mm_bridge_to_arria_sfp_m0_readdatavalid), //      .readdatavalid
		.m0_burstcount    (mm_bridge_to_arria_sfp_m0_burstcount),    //      .burstcount
		.m0_writedata     (mm_bridge_to_arria_sfp_m0_writedata),     //      .writedata
		.m0_address       (mm_bridge_to_arria_sfp_m0_address),       //      .address
		.m0_write         (mm_bridge_to_arria_sfp_m0_write),         //      .write
		.m0_read          (mm_bridge_to_arria_sfp_m0_read),          //      .read
		.m0_byteenable    (mm_bridge_to_arria_sfp_m0_byteenable),    //      .byteenable
		.m0_debugaccess   (mm_bridge_to_arria_sfp_m0_debugaccess)    //      .debugaccess
	);

	arria_v_sfp_mm_interconnect_0 mm_interconnect_0 (
		.ethernet_125_MHz_clock_clk_clk                           (ethernet_clk_125mhz_clk),                                                 //                         ethernet_125_MHz_clock_clk.clk
		.mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                                          // mm_bridge_to_arria_sfp_reset_reset_bridge_in_reset.reset
		.mm_bridge_to_arria_sfp_m0_address                        (mm_bridge_to_arria_sfp_m0_address),                                       //                          mm_bridge_to_arria_sfp_m0.address
		.mm_bridge_to_arria_sfp_m0_waitrequest                    (mm_bridge_to_arria_sfp_m0_waitrequest),                                   //                                                   .waitrequest
		.mm_bridge_to_arria_sfp_m0_burstcount                     (mm_bridge_to_arria_sfp_m0_burstcount),                                    //                                                   .burstcount
		.mm_bridge_to_arria_sfp_m0_byteenable                     (mm_bridge_to_arria_sfp_m0_byteenable),                                    //                                                   .byteenable
		.mm_bridge_to_arria_sfp_m0_read                           (mm_bridge_to_arria_sfp_m0_read),                                          //                                                   .read
		.mm_bridge_to_arria_sfp_m0_readdata                       (mm_bridge_to_arria_sfp_m0_readdata),                                      //                                                   .readdata
		.mm_bridge_to_arria_sfp_m0_readdatavalid                  (mm_bridge_to_arria_sfp_m0_readdatavalid),                                 //                                                   .readdatavalid
		.mm_bridge_to_arria_sfp_m0_write                          (mm_bridge_to_arria_sfp_m0_write),                                         //                                                   .write
		.mm_bridge_to_arria_sfp_m0_writedata                      (mm_bridge_to_arria_sfp_m0_writedata),                                     //                                                   .writedata
		.mm_bridge_to_arria_sfp_m0_debugaccess                    (mm_bridge_to_arria_sfp_m0_debugaccess),                                   //                                                   .debugaccess
		.alt_xcvr_reconfig_reconfig_mgmt_address                  (mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_address),               //                    alt_xcvr_reconfig_reconfig_mgmt.address
		.alt_xcvr_reconfig_reconfig_mgmt_write                    (mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_write),                 //                                                   .write
		.alt_xcvr_reconfig_reconfig_mgmt_read                     (mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_read),                  //                                                   .read
		.alt_xcvr_reconfig_reconfig_mgmt_readdata                 (mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_readdata),              //                                                   .readdata
		.alt_xcvr_reconfig_reconfig_mgmt_writedata                (mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_writedata),             //                                                   .writedata
		.alt_xcvr_reconfig_reconfig_mgmt_waitrequest              (mm_interconnect_0_alt_xcvr_reconfig_reconfig_mgmt_waitrequest),           //                                                   .waitrequest
		.arriav_v_standalone_gigabit_xcvr_phy_mgmt_address        (mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_address),     //          arriav_v_standalone_gigabit_xcvr_phy_mgmt.address
		.arriav_v_standalone_gigabit_xcvr_phy_mgmt_write          (mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_write),       //                                                   .write
		.arriav_v_standalone_gigabit_xcvr_phy_mgmt_read           (mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_read),        //                                                   .read
		.arriav_v_standalone_gigabit_xcvr_phy_mgmt_readdata       (mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_readdata),    //                                                   .readdata
		.arriav_v_standalone_gigabit_xcvr_phy_mgmt_writedata      (mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_writedata),   //                                                   .writedata
		.arriav_v_standalone_gigabit_xcvr_phy_mgmt_waitrequest    (mm_interconnect_0_arriav_v_standalone_gigabit_xcvr_phy_mgmt_waitrequest)  //                                                   .waitrequest
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~ethernet_clk_125mhz_reset_reset_n), // reset_in0.reset
		.clk            (ethernet_clk_125mhz_clk),            //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
