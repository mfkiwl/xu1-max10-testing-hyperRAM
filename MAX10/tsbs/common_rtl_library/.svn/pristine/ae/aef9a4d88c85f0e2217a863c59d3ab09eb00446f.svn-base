// CycloneV_System.v

// Generated using ACDS version 14.1 190 at 2015.10.20.13:23:34

`timescale 1 ps / 1 ps
module CycloneV_System (
		input  wire       aligner_ctrl_aligner_ena,   // aligner_ctrl.aligner_ena
		input  wire       aligner_ctrl_aligner_shift, //             .aligner_shift
		output wire       aligner_ctrl_aligner_oos,   //             .aligner_oos
		input  wire       clk_clk,                    //          clk.clk
		input  wire [1:0] lvds_rx_lvds,               //      lvds_rx.lvds
		output wire [1:0] lvds_tx_lvds,               //      lvds_tx.lvds
		input  wire       reset_reset_n,              //        reset.reset_n
		input  wire       tg_reset_n,                 //           tg.reset_n
		output wire       txclk_out_clk               //    txclk_out.clk
	);

	wire         avmm2lvds_rx_clkout_clk;                                                // AVMM2LVDS:rx_clkout_clk -> [JTAG_Master:clk_clk, address_span_extender_0:clk, mm_interconnect_0:AVMM2LVDS_rx_clkout_clk, mm_interconnect_1:AVMM2LVDS_rx_clkout_clk, mm_traffic_generator_0:clk, rst_controller:clk, rst_controller_001:clk]
	wire         mm_traffic_generator_0_avl_waitrequest;                                 // mm_interconnect_0:mm_traffic_generator_0_avl_waitrequest -> mm_traffic_generator_0:avl_ready
	wire   [7:0] mm_traffic_generator_0_avl_readdata;                                    // mm_interconnect_0:mm_traffic_generator_0_avl_readdata -> mm_traffic_generator_0:avl_rdata
	wire  [11:0] mm_traffic_generator_0_avl_address;                                     // mm_traffic_generator_0:avl_addr -> mm_interconnect_0:mm_traffic_generator_0_avl_address
	wire         mm_traffic_generator_0_avl_read;                                        // mm_traffic_generator_0:avl_read_req -> mm_interconnect_0:mm_traffic_generator_0_avl_read
	wire         mm_traffic_generator_0_avl_readdatavalid;                               // mm_interconnect_0:mm_traffic_generator_0_avl_readdatavalid -> mm_traffic_generator_0:avl_rdata_valid
	wire   [7:0] mm_traffic_generator_0_avl_writedata;                                   // mm_traffic_generator_0:avl_wdata -> mm_interconnect_0:mm_traffic_generator_0_avl_writedata
	wire         mm_traffic_generator_0_avl_write;                                       // mm_traffic_generator_0:avl_write_req -> mm_interconnect_0:mm_traffic_generator_0_avl_write
	wire         mm_traffic_generator_0_avl_burstcount;                                  // mm_traffic_generator_0:avl_size -> mm_interconnect_0:mm_traffic_generator_0_avl_burstcount
	wire   [7:0] mm_interconnect_0_address_span_extender_0_windowed_slave_readdata;      // address_span_extender_0:avs_s0_readdata -> mm_interconnect_0:address_span_extender_0_windowed_slave_readdata
	wire         mm_interconnect_0_address_span_extender_0_windowed_slave_waitrequest;   // address_span_extender_0:avs_s0_waitrequest -> mm_interconnect_0:address_span_extender_0_windowed_slave_waitrequest
	wire  [11:0] mm_interconnect_0_address_span_extender_0_windowed_slave_address;       // mm_interconnect_0:address_span_extender_0_windowed_slave_address -> address_span_extender_0:avs_s0_address
	wire         mm_interconnect_0_address_span_extender_0_windowed_slave_read;          // mm_interconnect_0:address_span_extender_0_windowed_slave_read -> address_span_extender_0:avs_s0_read
	wire   [0:0] mm_interconnect_0_address_span_extender_0_windowed_slave_byteenable;    // mm_interconnect_0:address_span_extender_0_windowed_slave_byteenable -> address_span_extender_0:avs_s0_byteenable
	wire         mm_interconnect_0_address_span_extender_0_windowed_slave_readdatavalid; // address_span_extender_0:avs_s0_readdatavalid -> mm_interconnect_0:address_span_extender_0_windowed_slave_readdatavalid
	wire         mm_interconnect_0_address_span_extender_0_windowed_slave_write;         // mm_interconnect_0:address_span_extender_0_windowed_slave_write -> address_span_extender_0:avs_s0_write
	wire   [7:0] mm_interconnect_0_address_span_extender_0_windowed_slave_writedata;     // mm_interconnect_0:address_span_extender_0_windowed_slave_writedata -> address_span_extender_0:avs_s0_writedata
	wire   [2:0] mm_interconnect_0_address_span_extender_0_windowed_slave_burstcount;    // mm_interconnect_0:address_span_extender_0_windowed_slave_burstcount -> address_span_extender_0:avs_s0_burstcount
	wire         address_span_extender_0_expanded_master_waitrequest;                    // mm_interconnect_1:address_span_extender_0_expanded_master_waitrequest -> address_span_extender_0:avm_m0_waitrequest
	wire   [7:0] address_span_extender_0_expanded_master_readdata;                       // mm_interconnect_1:address_span_extender_0_expanded_master_readdata -> address_span_extender_0:avm_m0_readdata
	wire  [23:0] address_span_extender_0_expanded_master_address;                        // address_span_extender_0:avm_m0_address -> mm_interconnect_1:address_span_extender_0_expanded_master_address
	wire         address_span_extender_0_expanded_master_read;                           // address_span_extender_0:avm_m0_read -> mm_interconnect_1:address_span_extender_0_expanded_master_read
	wire   [0:0] address_span_extender_0_expanded_master_byteenable;                     // address_span_extender_0:avm_m0_byteenable -> mm_interconnect_1:address_span_extender_0_expanded_master_byteenable
	wire         address_span_extender_0_expanded_master_readdatavalid;                  // mm_interconnect_1:address_span_extender_0_expanded_master_readdatavalid -> address_span_extender_0:avm_m0_readdatavalid
	wire         address_span_extender_0_expanded_master_write;                          // address_span_extender_0:avm_m0_write -> mm_interconnect_1:address_span_extender_0_expanded_master_write
	wire   [7:0] address_span_extender_0_expanded_master_writedata;                      // address_span_extender_0:avm_m0_writedata -> mm_interconnect_1:address_span_extender_0_expanded_master_writedata
	wire   [2:0] address_span_extender_0_expanded_master_burstcount;                     // address_span_extender_0:avm_m0_burstcount -> mm_interconnect_1:address_span_extender_0_expanded_master_burstcount
	wire  [31:0] jtag_master_master_readdata;                                            // mm_interconnect_1:JTAG_Master_master_readdata -> JTAG_Master:master_readdata
	wire         jtag_master_master_waitrequest;                                         // mm_interconnect_1:JTAG_Master_master_waitrequest -> JTAG_Master:master_waitrequest
	wire  [31:0] jtag_master_master_address;                                             // JTAG_Master:master_address -> mm_interconnect_1:JTAG_Master_master_address
	wire         jtag_master_master_read;                                                // JTAG_Master:master_read -> mm_interconnect_1:JTAG_Master_master_read
	wire   [3:0] jtag_master_master_byteenable;                                          // JTAG_Master:master_byteenable -> mm_interconnect_1:JTAG_Master_master_byteenable
	wire         jtag_master_master_readdatavalid;                                       // mm_interconnect_1:JTAG_Master_master_readdatavalid -> JTAG_Master:master_readdatavalid
	wire         jtag_master_master_write;                                               // JTAG_Master:master_write -> mm_interconnect_1:JTAG_Master_master_write
	wire  [31:0] jtag_master_master_writedata;                                           // JTAG_Master:master_writedata -> mm_interconnect_1:JTAG_Master_master_writedata
	wire   [7:0] mm_interconnect_1_avmm2lvds_avmm_slave_readdata;                        // AVMM2LVDS:avmm_slave_readdata -> mm_interconnect_1:AVMM2LVDS_avmm_slave_readdata
	wire         mm_interconnect_1_avmm2lvds_avmm_slave_waitrequest;                     // AVMM2LVDS:avmm_slave_waitrequest -> mm_interconnect_1:AVMM2LVDS_avmm_slave_waitrequest
	wire  [12:0] mm_interconnect_1_avmm2lvds_avmm_slave_address;                         // mm_interconnect_1:AVMM2LVDS_avmm_slave_address -> AVMM2LVDS:avmm_slave_address
	wire         mm_interconnect_1_avmm2lvds_avmm_slave_read;                            // mm_interconnect_1:AVMM2LVDS_avmm_slave_read -> AVMM2LVDS:avmm_slave_read
	wire         mm_interconnect_1_avmm2lvds_avmm_slave_readdatavalid;                   // AVMM2LVDS:avmm_slave_readdatavalid -> mm_interconnect_1:AVMM2LVDS_avmm_slave_readdatavalid
	wire         mm_interconnect_1_avmm2lvds_avmm_slave_write;                           // mm_interconnect_1:AVMM2LVDS_avmm_slave_write -> AVMM2LVDS:avmm_slave_write
	wire   [7:0] mm_interconnect_1_avmm2lvds_avmm_slave_writedata;                       // mm_interconnect_1:AVMM2LVDS_avmm_slave_writedata -> AVMM2LVDS:avmm_slave_writedata
	wire         rst_controller_reset_out_reset;                                         // rst_controller:reset_out -> [address_span_extender_0:reset, mm_interconnect_0:address_span_extender_0_reset_reset_bridge_in_reset_reset, mm_interconnect_0:mm_traffic_generator_0_avl_reset_reset_bridge_in_reset_reset, mm_interconnect_1:address_span_extender_0_reset_reset_bridge_in_reset_reset]
	wire         rst_controller_001_reset_out_reset;                                     // rst_controller_001:reset_out -> [mm_interconnect_1:AVMM2LVDS_reset_reset_bridge_in_reset_reset, mm_interconnect_1:JTAG_Master_master_translator_reset_reset_bridge_in_reset_reset]

	CycloneV_System_AVMM2LVDS avmm2lvds (
		.aligner_ctrl_aligner_ena   (aligner_ctrl_aligner_ena),                             // aligner_ctrl.aligner_ena
		.aligner_ctrl_aligner_shift (aligner_ctrl_aligner_shift),                           //             .aligner_shift
		.aligner_ctrl_aligner_oos   (aligner_ctrl_aligner_oos),                             //             .aligner_oos
		.avmm_slave_readdatavalid   (mm_interconnect_1_avmm2lvds_avmm_slave_readdatavalid), //   avmm_slave.readdatavalid
		.avmm_slave_waitrequest     (mm_interconnect_1_avmm2lvds_avmm_slave_waitrequest),   //             .waitrequest
		.avmm_slave_readdata        (mm_interconnect_1_avmm2lvds_avmm_slave_readdata),      //             .readdata
		.avmm_slave_writedata       (mm_interconnect_1_avmm2lvds_avmm_slave_writedata),     //             .writedata
		.avmm_slave_address         (mm_interconnect_1_avmm2lvds_avmm_slave_address),       //             .address
		.avmm_slave_write           (mm_interconnect_1_avmm2lvds_avmm_slave_write),         //             .write
		.avmm_slave_read            (mm_interconnect_1_avmm2lvds_avmm_slave_read),          //             .read
		.lvds_rx_lvds               (lvds_rx_lvds),                                         //      lvds_rx.lvds
		.lvds_tx_lvds               (lvds_tx_lvds),                                         //      lvds_tx.lvds
		.reset_reset_n              (reset_reset_n),                                        //        reset.reset_n
		.rx_clkin_clk               (clk_clk),                                              //     rx_clkin.clk
		.rx_clkout_clk              (avmm2lvds_rx_clkout_clk),                              //    rx_clkout.clk
		.tx_clkin_clk               (clk_clk),                                              //     tx_clkin.clk
		.tx_clkout_clk              (txclk_out_clk)                                         //    tx_clkout.clk
	);

	CycloneV_System_JTAG_Master #(
		.USE_PLI     (0),
		.PLI_PORT    (50000),
		.FIFO_DEPTHS (2)
	) jtag_master (
		.clk_clk              (avmm2lvds_rx_clkout_clk),          //          clk.clk
		.clk_reset_reset      (~reset_reset_n),                   //    clk_reset.reset
		.master_address       (jtag_master_master_address),       //       master.address
		.master_readdata      (jtag_master_master_readdata),      //             .readdata
		.master_read          (jtag_master_master_read),          //             .read
		.master_write         (jtag_master_master_write),         //             .write
		.master_writedata     (jtag_master_master_writedata),     //             .writedata
		.master_waitrequest   (jtag_master_master_waitrequest),   //             .waitrequest
		.master_readdatavalid (jtag_master_master_readdatavalid), //             .readdatavalid
		.master_byteenable    (jtag_master_master_byteenable),    //             .byteenable
		.master_reset_reset   ()                                  // master_reset.reset
	);

	altera_address_span_extender #(
		.DATA_WIDTH           (8),
		.BYTEENABLE_WIDTH     (1),
		.MASTER_ADDRESS_WIDTH (24),
		.SLAVE_ADDRESS_WIDTH  (12),
		.SLAVE_ADDRESS_SHIFT  (0),
		.BURSTCOUNT_WIDTH     (3),
		.CNTL_ADDRESS_WIDTH   (1),
		.SUB_WINDOW_COUNT     (1),
		.MASTER_ADDRESS_DEF   (64'b0000000000000000000000000000000000000000000000000000000000000000)
	) address_span_extender_0 (
		.clk                  (avmm2lvds_rx_clkout_clk),                                                //           clock.clk
		.reset                (rst_controller_reset_out_reset),                                         //           reset.reset
		.avs_s0_address       (mm_interconnect_0_address_span_extender_0_windowed_slave_address),       //  windowed_slave.address
		.avs_s0_read          (mm_interconnect_0_address_span_extender_0_windowed_slave_read),          //                .read
		.avs_s0_readdata      (mm_interconnect_0_address_span_extender_0_windowed_slave_readdata),      //                .readdata
		.avs_s0_write         (mm_interconnect_0_address_span_extender_0_windowed_slave_write),         //                .write
		.avs_s0_writedata     (mm_interconnect_0_address_span_extender_0_windowed_slave_writedata),     //                .writedata
		.avs_s0_readdatavalid (mm_interconnect_0_address_span_extender_0_windowed_slave_readdatavalid), //                .readdatavalid
		.avs_s0_waitrequest   (mm_interconnect_0_address_span_extender_0_windowed_slave_waitrequest),   //                .waitrequest
		.avs_s0_byteenable    (mm_interconnect_0_address_span_extender_0_windowed_slave_byteenable),    //                .byteenable
		.avs_s0_burstcount    (mm_interconnect_0_address_span_extender_0_windowed_slave_burstcount),    //                .burstcount
		.avm_m0_address       (address_span_extender_0_expanded_master_address),                        // expanded_master.address
		.avm_m0_read          (address_span_extender_0_expanded_master_read),                           //                .read
		.avm_m0_waitrequest   (address_span_extender_0_expanded_master_waitrequest),                    //                .waitrequest
		.avm_m0_readdata      (address_span_extender_0_expanded_master_readdata),                       //                .readdata
		.avm_m0_write         (address_span_extender_0_expanded_master_write),                          //                .write
		.avm_m0_writedata     (address_span_extender_0_expanded_master_writedata),                      //                .writedata
		.avm_m0_readdatavalid (address_span_extender_0_expanded_master_readdatavalid),                  //                .readdatavalid
		.avm_m0_byteenable    (address_span_extender_0_expanded_master_byteenable),                     //                .byteenable
		.avm_m0_burstcount    (address_span_extender_0_expanded_master_burstcount),                     //                .burstcount
		.avs_cntl_read        (),                                                                       //            cntl.read
		.avs_cntl_readdata    (),                                                                       //                .readdata
		.avs_cntl_write       (),                                                                       //                .write
		.avs_cntl_writedata   (),                                                                       //                .writedata
		.avs_cntl_byteenable  (),                                                                       //                .byteenable
		.avs_cntl_address     (1'b0)                                                                    //     (terminated)
	);

	CycloneV_System_mm_traffic_generator_0 #(
		.DEVICE_FAMILY                          ("Cyclone V"),
		.TG_AVL_DATA_WIDTH                      (8),
		.TG_AVL_ADDR_WIDTH                      (12),
		.TG_AVL_WORD_ADDR_WIDTH                 (12),
		.TG_AVL_SIZE_WIDTH                      (1),
		.TG_AVL_BE_WIDTH                        (1),
		.DRIVER_SIGNATURE                       (1431634061),
		.TG_GEN_BYTE_ADDR                       (1),
		.TG_NUM_DRIVER_LOOP                     (1),
		.TG_ENABLE_UNIX_ID                      (0),
		.TG_USE_UNIX_ID                         (0),
		.TG_RANDOM_BYTE_ENABLE                  (0),
		.TG_ENABLE_READ_COMPARE                 (1),
		.TG_POWER_OF_TWO_BURSTS_ONLY            (0),
		.TG_BURST_ON_BURST_BOUNDARY             (0),
		.TG_DO_NOT_CROSS_4KB_BOUNDARY           (0),
		.TG_TIMEOUT_COUNTER_WIDTH               (64),
		.TG_MAX_READ_LATENCY                    (128),
		.TG_SINGLE_RW_SEQ_ADDR_COUNT            (32),
		.TG_SINGLE_RW_RAND_ADDR_COUNT           (32),
		.TG_SINGLE_RW_RAND_SEQ_ADDR_COUNT       (32),
		.TG_BLOCK_RW_SEQ_ADDR_COUNT             (8),
		.TG_BLOCK_RW_RAND_ADDR_COUNT            (8),
		.TG_BLOCK_RW_RAND_SEQ_ADDR_COUNT        (8),
		.TG_BLOCK_RW_BLOCK_SIZE                 (8),
		.TG_TEMPLATE_STAGE_COUNT                (4),
		.TG_SEQ_ADDR_GEN_MIN_BURSTCOUNT         (1),
		.TG_SEQ_ADDR_GEN_MAX_BURSTCOUNT         (1),
		.TG_RAND_ADDR_GEN_MIN_BURSTCOUNT        (1),
		.TG_RAND_ADDR_GEN_MAX_BURSTCOUNT        (1),
		.TG_RAND_SEQ_ADDR_GEN_MIN_BURSTCOUNT    (1),
		.TG_RAND_SEQ_ADDR_GEN_MAX_BURSTCOUNT    (1),
		.TG_RAND_SEQ_ADDR_GEN_RAND_ADDR_PERCENT (50)
	) mm_traffic_generator_0 (
		.clk                 (avmm2lvds_rx_clkout_clk),                  // avl_clock.clk
		.reset_n             (tg_reset_n),                               // avl_reset.reset_n
		.pass                (),                                         //    status.pass
		.fail                (),                                         //          .fail
		.test_complete       (),                                         //          .test_complete
		.pnf_per_bit         (),                                         //       pnf.pnf_per_bit
		.pnf_per_bit_persist (),                                         //          .pnf_per_bit_persist
		.avl_ready           (~mm_traffic_generator_0_avl_waitrequest),  //       avl.waitrequest_n
		.avl_addr            (mm_traffic_generator_0_avl_address),       //          .address
		.avl_size            (mm_traffic_generator_0_avl_burstcount),    //          .burstcount
		.avl_wdata           (mm_traffic_generator_0_avl_writedata),     //          .writedata
		.avl_rdata           (mm_traffic_generator_0_avl_readdata),      //          .readdata
		.avl_write_req       (mm_traffic_generator_0_avl_write),         //          .write
		.avl_read_req        (mm_traffic_generator_0_avl_read),          //          .read
		.avl_rdata_valid     (mm_traffic_generator_0_avl_readdatavalid)  //          .readdatavalid
	);

	CycloneV_System_mm_interconnect_0 mm_interconnect_0 (
		.AVMM2LVDS_rx_clkout_clk                                      (avmm2lvds_rx_clkout_clk),                                                //                                    AVMM2LVDS_rx_clkout.clk
		.address_span_extender_0_reset_reset_bridge_in_reset_reset    (rst_controller_reset_out_reset),                                         //    address_span_extender_0_reset_reset_bridge_in_reset.reset
		.mm_traffic_generator_0_avl_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                                         // mm_traffic_generator_0_avl_reset_reset_bridge_in_reset.reset
		.mm_traffic_generator_0_avl_address                           (mm_traffic_generator_0_avl_address),                                     //                             mm_traffic_generator_0_avl.address
		.mm_traffic_generator_0_avl_waitrequest                       (mm_traffic_generator_0_avl_waitrequest),                                 //                                                       .waitrequest
		.mm_traffic_generator_0_avl_burstcount                        (mm_traffic_generator_0_avl_burstcount),                                  //                                                       .burstcount
		.mm_traffic_generator_0_avl_read                              (mm_traffic_generator_0_avl_read),                                        //                                                       .read
		.mm_traffic_generator_0_avl_readdata                          (mm_traffic_generator_0_avl_readdata),                                    //                                                       .readdata
		.mm_traffic_generator_0_avl_readdatavalid                     (mm_traffic_generator_0_avl_readdatavalid),                               //                                                       .readdatavalid
		.mm_traffic_generator_0_avl_write                             (mm_traffic_generator_0_avl_write),                                       //                                                       .write
		.mm_traffic_generator_0_avl_writedata                         (mm_traffic_generator_0_avl_writedata),                                   //                                                       .writedata
		.address_span_extender_0_windowed_slave_address               (mm_interconnect_0_address_span_extender_0_windowed_slave_address),       //                 address_span_extender_0_windowed_slave.address
		.address_span_extender_0_windowed_slave_write                 (mm_interconnect_0_address_span_extender_0_windowed_slave_write),         //                                                       .write
		.address_span_extender_0_windowed_slave_read                  (mm_interconnect_0_address_span_extender_0_windowed_slave_read),          //                                                       .read
		.address_span_extender_0_windowed_slave_readdata              (mm_interconnect_0_address_span_extender_0_windowed_slave_readdata),      //                                                       .readdata
		.address_span_extender_0_windowed_slave_writedata             (mm_interconnect_0_address_span_extender_0_windowed_slave_writedata),     //                                                       .writedata
		.address_span_extender_0_windowed_slave_burstcount            (mm_interconnect_0_address_span_extender_0_windowed_slave_burstcount),    //                                                       .burstcount
		.address_span_extender_0_windowed_slave_byteenable            (mm_interconnect_0_address_span_extender_0_windowed_slave_byteenable),    //                                                       .byteenable
		.address_span_extender_0_windowed_slave_readdatavalid         (mm_interconnect_0_address_span_extender_0_windowed_slave_readdatavalid), //                                                       .readdatavalid
		.address_span_extender_0_windowed_slave_waitrequest           (mm_interconnect_0_address_span_extender_0_windowed_slave_waitrequest)    //                                                       .waitrequest
	);

	CycloneV_System_mm_interconnect_1 mm_interconnect_1 (
		.AVMM2LVDS_rx_clkout_clk                                         (avmm2lvds_rx_clkout_clk),                               //                                       AVMM2LVDS_rx_clkout.clk
		.address_span_extender_0_reset_reset_bridge_in_reset_reset       (rst_controller_reset_out_reset),                        //       address_span_extender_0_reset_reset_bridge_in_reset.reset
		.AVMM2LVDS_reset_reset_bridge_in_reset_reset                     (rst_controller_001_reset_out_reset),                    //                     AVMM2LVDS_reset_reset_bridge_in_reset.reset
		.JTAG_Master_master_translator_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                    // JTAG_Master_master_translator_reset_reset_bridge_in_reset.reset
		.address_span_extender_0_expanded_master_address                 (address_span_extender_0_expanded_master_address),       //                   address_span_extender_0_expanded_master.address
		.address_span_extender_0_expanded_master_waitrequest             (address_span_extender_0_expanded_master_waitrequest),   //                                                          .waitrequest
		.address_span_extender_0_expanded_master_burstcount              (address_span_extender_0_expanded_master_burstcount),    //                                                          .burstcount
		.address_span_extender_0_expanded_master_byteenable              (address_span_extender_0_expanded_master_byteenable),    //                                                          .byteenable
		.address_span_extender_0_expanded_master_read                    (address_span_extender_0_expanded_master_read),          //                                                          .read
		.address_span_extender_0_expanded_master_readdata                (address_span_extender_0_expanded_master_readdata),      //                                                          .readdata
		.address_span_extender_0_expanded_master_readdatavalid           (address_span_extender_0_expanded_master_readdatavalid), //                                                          .readdatavalid
		.address_span_extender_0_expanded_master_write                   (address_span_extender_0_expanded_master_write),         //                                                          .write
		.address_span_extender_0_expanded_master_writedata               (address_span_extender_0_expanded_master_writedata),     //                                                          .writedata
		.JTAG_Master_master_address                                      (jtag_master_master_address),                            //                                        JTAG_Master_master.address
		.JTAG_Master_master_waitrequest                                  (jtag_master_master_waitrequest),                        //                                                          .waitrequest
		.JTAG_Master_master_byteenable                                   (jtag_master_master_byteenable),                         //                                                          .byteenable
		.JTAG_Master_master_read                                         (jtag_master_master_read),                               //                                                          .read
		.JTAG_Master_master_readdata                                     (jtag_master_master_readdata),                           //                                                          .readdata
		.JTAG_Master_master_readdatavalid                                (jtag_master_master_readdatavalid),                      //                                                          .readdatavalid
		.JTAG_Master_master_write                                        (jtag_master_master_write),                              //                                                          .write
		.JTAG_Master_master_writedata                                    (jtag_master_master_writedata),                          //                                                          .writedata
		.AVMM2LVDS_avmm_slave_address                                    (mm_interconnect_1_avmm2lvds_avmm_slave_address),        //                                      AVMM2LVDS_avmm_slave.address
		.AVMM2LVDS_avmm_slave_write                                      (mm_interconnect_1_avmm2lvds_avmm_slave_write),          //                                                          .write
		.AVMM2LVDS_avmm_slave_read                                       (mm_interconnect_1_avmm2lvds_avmm_slave_read),           //                                                          .read
		.AVMM2LVDS_avmm_slave_readdata                                   (mm_interconnect_1_avmm2lvds_avmm_slave_readdata),       //                                                          .readdata
		.AVMM2LVDS_avmm_slave_writedata                                  (mm_interconnect_1_avmm2lvds_avmm_slave_writedata),      //                                                          .writedata
		.AVMM2LVDS_avmm_slave_readdatavalid                              (mm_interconnect_1_avmm2lvds_avmm_slave_readdatavalid),  //                                                          .readdatavalid
		.AVMM2LVDS_avmm_slave_waitrequest                                (mm_interconnect_1_avmm2lvds_avmm_slave_waitrequest)     //                                                          .waitrequest
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~tg_reset_n),                    // reset_in0.reset
		.clk            (avmm2lvds_rx_clkout_clk),        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (avmm2lvds_rx_clkout_clk),            //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
