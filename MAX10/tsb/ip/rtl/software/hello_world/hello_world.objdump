
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008244

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002fb4 memsz 0x00002fb4 flags r-x
    LOAD off    0x00003fd4 vaddr 0x0000afd4 paddr 0x0000b294 align 2**12
         filesz 0x000002c0 memsz 0x000002c0 flags rw-
    LOAD off    0x00004554 vaddr 0x0000b554 paddr 0x0000b554 align 2**12
         filesz 0x00000000 memsz 0x00000238 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002990  00008244  00008244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000400  0000abd4  0000abd4  00003bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002c0  0000afd4  0000b294  00003fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000238  0000b554  0000b554  00004554  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0000b78c  0000b78c  00004294  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00004294  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000668  00000000  00000000  000042b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007b24  00000000  00000000  00004920  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002dfd  00000000  00000000  0000c444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000034ce  00000000  00000000  0000f241  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d3c  00000000  00000000  00012710  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e60  00000000  00000000  0001344c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002337  00000000  00000000  000152ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000175e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000278  00000000  00000000  00017618  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000196a6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000196a9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000196ac  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000196ad  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000196ae  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000196b2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000196b6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000196ba  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000196c5  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000196d0  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000015  00000000  00000000  000196db  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002f  00000000  00000000  000196f0  2**0
                  CONTENTS, READONLY
 29 .jdi          000066d3  00000000  00000000  0001971f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00043874  00000000  00000000  0001fdf2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008244 l    d  .text	00000000 .text
0000abd4 l    d  .rodata	00000000 .rodata
0000afd4 l    d  .rwdata	00000000 .rwdata
0000b554 l    d  .bss	00000000 .bss
0000b78c l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_bsp//obj/HAL/src/crt0.o
0000828c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 control.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 setup.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 rsscanf.c
00000000 l    df *ABS*	00000000 xprintf.c
00008d34 l     F .text	000004ac xvprintf
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 ctype_.c
0000ae45 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 impure.c
0000afd4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0000a0a4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000b26c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000a4e8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
0000a5dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000a69c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000b580 g     O .bss	00000004 alt_instruction_exception_handler
0000a190 g     F .text	00000050 alt_main
0000b68c g     O .bss	00000100 alt_irq
0000b294 g       *ABS*	00000000 __flash_rwdata_start
0000b78c g       *ABS*	00000000 __alt_heap_start
00009458 g     F .text	00000014 xgets
00009390 g     F .text	000000c8 xfgets
0000b558 g     O .bss	00000004 xfunc_in
0000a93c g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000b568 g     O .bss	00000004 errno
0000b574 g     O .bss	00000004 alt_argv
0001325c g       *ABS*	00000000 _gp
0000b0dc g     O .rwdata	00000180 alt_fd_list
0000a6fc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00008d2c g     F .text	00000008 xfputs
0000a368 g     F .text	000000ec altera_avalon_jtag_uart_read
000097a0 g     F .text	00000014 malloc
000096cc g     F .text	00000064 .hidden __udivsi3
00008898 g     F .text	00000028 clear_jtag_buffer
0000a960 g     F .text	00000090 alt_icache_flush
0000b58c g     O .bss	00000100 input
0000946c g     F .text	00000168 xatoi
0000b55c g     O .bss	00000004 xfunc_out
00009a04 g     F .text	00000050 _sbrk_r
0000927c g     F .text	00000114 put_dump
0000b284 g     O .rwdata	00000004 alt_max_fd
000082e8 g     F .text	00000068 display_commands
000083a8 g     F .text	0000008c send_pmt_uart_command
0000b260 g     O .rwdata	00000004 _global_impure_ptr
0000b78c g       *ABS*	00000000 __bss_end
00009fb4 g     F .text	000000f0 alt_iic_isr_register
00009da0 g     F .text	00000064 alt_getchar
0000a834 g     F .text	00000108 alt_tick
000084c8 g     F .text	000000bc parse_command
000088c0 g     F .text	00000004 config_jtag_echo
00009f68 g     F .text	0000004c alt_ic_irq_enabled
0000a798 g     F .text	0000009c alt_alarm_stop
00009d84 g     F .text	0000001c strtol
000091e0 g     F .text	00000034 xprintf
0000b56c g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080fc g     F .exceptions	000000d4 alt_irq_handler
0000b0b4 g     O .rwdata	00000028 alt_dev_null
000085fc g     F .text	00000008 bootloader_chan_putc
0000a654 g     F .text	00000048 alt_dcache_flush_all
0000b294 g       *ABS*	00000000 __ram_rwdata_end
00008434 g     F .text	00000044 display_eop_status
0000b27c g     O .rwdata	00000008 alt_dev_list
0000afd4 g       *ABS*	00000000 __ram_rodata_end
0000b270 g     O .rwdata	00000004 jtag_uart_0
000086c0 g     F .text	00000068 uart_tx
00009a54 g     F .text	0000003c strcat
00009730 g     F .text	00000058 .hidden __umodsi3
00008350 g     F .text	00000058 select_base
0000b78c g       *ABS*	00000000 end
00009794 g     F .text	0000000c _atoi_r
000081d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000d000 g       *ABS*	00000000 __alt_stack_pointer
0000a560 g     F .text	0000007c alt_avalon_timer_sc_init
0000a454 g     F .text	00000094 altera_avalon_jtag_uart_write
000097c8 g     F .text	000000e4 _free_r
00008d1c g     F .text	00000010 xputs
0000aa10 g     F .text	00000190 __call_exitprocs
000087e0 g     F .text	000000b8 uart_trx
00008728 g     F .text	0000000c uart_rx_char
0000866c g     F .text	0000000c init_lightweight_uart
00008244 g     F .text	0000004c _start
0000b584 g     O .bss	00000004 _alt_tick_rate
00009b14 g     F .text	00000060 strstr
0000b588 g     O .bss	00000004 _alt_nticks
0000a324 g     F .text	00000044 alt_sys_init
000088c4 g     F .text	000002d0 rsscanf
0000afd4 g       *ABS*	00000000 __ram_rwdata_start
0000abd4 g       *ABS*	00000000 __ram_rodata_start
00008734 g     F .text	000000ac uart_rx
00008604 g     F .text	0000001c config_xdev
0000b78c g       *ABS*	00000000 __alt_stack_base
000086a8 g     F .text	00000018 uart_tx_char
00008478 g     F .text	00000050 clear_eop_flag
00008290 g     F .text	00000058 select_pmt_connector
00008678 g     F .text	00000030 set_eop_char
0000a23c g     F .text	000000b0 sbrk
000085dc g     F .text	00000020 bootloader_chan_getc
0000b554 g       *ABS*	00000000 __bss_start
00008584 g     F .text	00000058 main
0000b578 g     O .bss	00000004 alt_envp
0000b57c g     O .bss	00000004 uart_0
0000d000 g       *ABS*	00000000 __alt_heap_limit
00009b74 g     F .text	00000210 _strtol_r
00008cb0 g     F .text	0000006c xfputs_or_to_string
000098ac g     F .text	00000158 _malloc_r
0000b288 g     O .rwdata	00000004 alt_errno
000095d4 g     F .text	00000084 .hidden __divsi3
00009ac0 g     F .text	00000038 strcmp
0000abd4 g       *ABS*	00000000 __flash_rodata_start
00008b94 g     F .text	00000078 xputc
0000a2ec g     F .text	00000038 alt_irq_init
0000b554 g     O .bss	00000004 timer_flag
0000863c g     F .text	00000030 timer_isr_setup
0000b264 g     O .rwdata	00000004 _impure_ptr
0000b570 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
0000b274 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009e04 g     F .text	00000050 alt_ic_isr_register
0000b294 g       *ABS*	00000000 _edata
0000b78c g       *ABS*	00000000 _end
00008244 g       *ABS*	00000000 __ram_exceptions_end
00009edc g     F .text	0000008c alt_ic_irq_disable
00008c0c g     F .text	000000a4 xputc_for_xsprintf
0000a9f0 g     F .text	00000020 exit
00009658 g     F .text	00000074 .hidden __modsi3
0000b25c g     O .rwdata	00000004 __ctype_ptr__
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
00009788 g     F .text	0000000c atoi
0000ad44 g     O .rodata	00000101 _ctype_
0000aba0 g     F .text	00000034 _exit
00009214 g     F .text	0000003c xsprintf
00009af8 g     F .text	0000001c strlen
0000a1e0 g     F .text	0000005c alt_putchar
0000b560 g     O .bss	00000004 __malloc_sbrk_start
0000a6c8 g     F .text	00000034 alt_icache_flush_all
00009a90 g     F .text	00000030 strchr
0000b268 g     O .rwdata	00000004 alt_priority_mask
0000b564 g     O .bss	00000004 __malloc_free_list
00009e54 g     F .text	00000088 alt_ic_irq_enable
00009250 g     F .text	0000002c xfprintf
0000b28c g     O .rwdata	00000008 alt_alarm_list
0000a618 g     F .text	0000003c close
0000a10c g     F .text	00000084 alt_load
00008620 g     F .text	0000001c handle_timer_interrupt
000097b4 g     F .text	00000014 free



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff4da8>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08609114 	ori	at,at,33348
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__reset-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10ada304 	addi	r2,r2,-18804
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10ada304 	addi	r2,r2,-18804
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff4ed0>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff4ec4>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
    81e4:	000531fa 	rdctl	r2,exception
    81e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
    81ec:	e0bffd17 	ldw	r2,-12(fp)
    81f0:	10801f0c 	andi	r2,r2,124
    81f4:	1004d0ba 	srli	r2,r2,2
    81f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
    81fc:	0005333a 	rdctl	r2,badaddr
    8200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    8204:	d0a0c917 	ldw	r2,-31964(gp)
    8208:	10000726 	beq	r2,zero,8228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    820c:	d0a0c917 	ldw	r2,-31964(gp)
    8210:	e0fffd17 	ldw	r3,-12(fp)
    8214:	e1bffe17 	ldw	r6,-8(fp)
    8218:	e17fff17 	ldw	r5,-4(fp)
    821c:	1809883a 	mov	r4,r3
    8220:	103ee83a 	callr	r2
    8224:	00000206 	br	8230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    822c:	0005883a 	mov	r2,zero
}
    8230:	e037883a 	mov	sp,fp
    8234:	dfc00117 	ldw	ra,4(sp)
    8238:	df000017 	ldw	fp,0(sp)
    823c:	dec00204 	addi	sp,sp,8
    8240:	f800283a 	ret

Disassembly of section .text:

00008244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    8248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    824c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    8250:	00bffd16 	blt	zero,r2,8248 <_gp+0xffff4fec>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8254:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8258:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    825c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8260:	d68c9714 	ori	gp,gp,12892
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8264:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8268:	10ad5514 	ori	r2,r2,46420

    movhi r3, %hi(__bss_end)
    826c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    8270:	18ede314 	ori	r3,r3,46988

    beq r2, r3, 1f
    8274:	10c00326 	beq	r2,r3,8284 <_start+0x40>

0:
    stw zero, (r2)
    8278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    827c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    8280:	10fffd36 	bltu	r2,r3,8278 <_gp+0xffff501c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8284:	000a10c0 	call	a10c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8288:	000a1900 	call	a190 <alt_main>

0000828c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    828c:	003fff06 	br	828c <_gp+0xffff5030>

00008290 <select_pmt_connector>:
//#include "uart.h"
#include "altera_avalon_uart_regs.h"
#include "alt_types.h"

alt_u8 select_pmt_connector(alt_u8 sel, alt_u32 base){
	if (sel >= 1 && sel <= 20) {
    8290:	20bfffc4 	addi	r2,r4,-1
    8294:	10803fcc 	andi	r2,r2,255
    8298:	00c004c4 	movi	r3,19
    829c:	18800536 	bltu	r3,r2,82b4 <select_pmt_connector+0x24>
		IOWR_ALTERA_AVALON_PIO_DATA(base, sel-1);
    82a0:	20803fcc 	andi	r2,r4,255
    82a4:	10bfffc4 	addi	r2,r2,-1
    82a8:	28800035 	stwio	r2,0(r5)
		return sel;
    82ac:	2005883a 	mov	r2,r4
	} else {
		xprintf("pmt selection out of bounds, defaulting to 1");
		IOWR_ALTERA_AVALON_PIO_DATA(base, 0);
		return 0;
	}
}
    82b0:	f800283a 	ret
alt_u8 select_pmt_connector(alt_u8 sel, alt_u32 base){
	if (sel >= 1 && sel <= 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(base, sel-1);
		return sel;
	} else {
		xprintf("pmt selection out of bounds, defaulting to 1");
    82b4:	01000074 	movhi	r4,1
#include <stdlib.h>
//#include "uart.h"
#include "altera_avalon_uart_regs.h"
#include "alt_types.h"

alt_u8 select_pmt_connector(alt_u8 sel, alt_u32 base){
    82b8:	defffe04 	addi	sp,sp,-8
	if (sel >= 1 && sel <= 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(base, sel-1);
		return sel;
	} else {
		xprintf("pmt selection out of bounds, defaulting to 1");
    82bc:	212af504 	addi	r4,r4,-21548
#include <stdlib.h>
//#include "uart.h"
#include "altera_avalon_uart_regs.h"
#include "alt_types.h"

alt_u8 select_pmt_connector(alt_u8 sel, alt_u32 base){
    82c0:	dc000015 	stw	r16,0(sp)
    82c4:	dfc00115 	stw	ra,4(sp)
    82c8:	2821883a 	mov	r16,r5
	if (sel >= 1 && sel <= 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(base, sel-1);
		return sel;
	} else {
		xprintf("pmt selection out of bounds, defaulting to 1");
    82cc:	00091e00 	call	91e0 <xprintf>
		IOWR_ALTERA_AVALON_PIO_DATA(base, 0);
    82d0:	80000035 	stwio	zero,0(r16)
		return 0;
    82d4:	0005883a 	mov	r2,zero
	}
}
    82d8:	dfc00117 	ldw	ra,4(sp)
    82dc:	dc000017 	ldw	r16,0(sp)
    82e0:	dec00204 	addi	sp,sp,8
    82e4:	f800283a 	ret

000082e8 <display_commands>:
		xprintf("command not recognized, try entering 'help' \n");
		return 0;
	}
}

int display_commands(void){
    82e8:	defffe04 	addi	sp,sp,-8
    82ec:	dc000015 	stw	r16,0(sp)
	xprintf("\n");
    82f0:	04000074 	movhi	r16,1
    82f4:	842b4504 	addi	r16,r16,-21228
    82f8:	8009883a 	mov	r4,r16
		xprintf("command not recognized, try entering 'help' \n");
		return 0;
	}
}

int display_commands(void){
    82fc:	dfc00115 	stw	ra,4(sp)
	xprintf("\n");
    8300:	00091e00 	call	91e0 <xprintf>
	xprintf("command list:\n");
    8304:	01000074 	movhi	r4,1
    8308:	212b0104 	addi	r4,r4,-21500
    830c:	00091e00 	call	91e0 <xprintf>
	xprintf("	$<pmt command>\n");
    8310:	01000074 	movhi	r4,1
    8314:	212b0504 	addi	r4,r4,-21484
    8318:	00091e00 	call	91e0 <xprintf>
	xprintf("	selbase <base number (index 1)>\n");
    831c:	01000074 	movhi	r4,1
    8320:	212b0a04 	addi	r4,r4,-21464
    8324:	00091e00 	call	91e0 <xprintf>
	xprintf("	ceop [clear]\n");
    8328:	01000074 	movhi	r4,1
    832c:	212b1304 	addi	r4,r4,-21428
    8330:	00091e00 	call	91e0 <xprintf>
	xprintf("\n");
    8334:	8009883a 	mov	r4,r16
    8338:	00091e00 	call	91e0 <xprintf>
	return 1;
}
    833c:	00800044 	movi	r2,1
    8340:	dfc00117 	ldw	ra,4(sp)
    8344:	dc000017 	ldw	r16,0(sp)
    8348:	dec00204 	addi	sp,sp,8
    834c:	f800283a 	ret

00008350 <select_base>:

int select_base(char * command){
	char* str = strstr(command,"selbase ");
    8350:	01400074 	movhi	r5,1
	xprintf("	ceop [clear]\n");
	xprintf("\n");
	return 1;
}

int select_base(char * command){
    8354:	defffe04 	addi	sp,sp,-8
	char* str = strstr(command,"selbase ");
    8358:	296b1704 	addi	r5,r5,-21412
	xprintf("	ceop [clear]\n");
	xprintf("\n");
	return 1;
}

int select_base(char * command){
    835c:	dfc00115 	stw	ra,4(sp)
    8360:	dc000015 	stw	r16,0(sp)
	char* str = strstr(command,"selbase ");
    8364:	0009b140 	call	9b14 <strstr>
	alt_u8 basenum = atoi((str + strlen("selbase"))+1);
    8368:	11000204 	addi	r4,r2,8
    836c:	00097880 	call	9788 <atoi>
    8370:	14003fcc 	andi	r16,r2,255
	select_pmt_connector(basenum, PIO_0_BASE);
    8374:	01400074 	movhi	r5,1
    8378:	8009883a 	mov	r4,r16
    837c:	29440804 	addi	r5,r5,4128
    8380:	00082900 	call	8290 <select_pmt_connector>
	xprintf("base set to J%d", basenum);
    8384:	01000074 	movhi	r4,1
    8388:	800b883a 	mov	r5,r16
    838c:	212b1a04 	addi	r4,r4,-21400
    8390:	00091e00 	call	91e0 <xprintf>
	return 1;
}
    8394:	00800044 	movi	r2,1
    8398:	dfc00117 	ldw	ra,4(sp)
    839c:	dc000017 	ldw	r16,0(sp)
    83a0:	dec00204 	addi	sp,sp,8
    83a4:	f800283a 	ret

000083a8 <send_pmt_uart_command>:

int send_pmt_uart_command(char* command){
    83a8:	defffd04 	addi	sp,sp,-12
    83ac:	dc000015 	stw	r16,0(sp)
    83b0:	2021883a 	mov	r16,r4
	char * cmd = (char *) malloc(256);
	char * ret = (char *) malloc(256);
    83b4:	01004004 	movi	r4,256
	select_pmt_connector(basenum, PIO_0_BASE);
	xprintf("base set to J%d", basenum);
	return 1;
}

int send_pmt_uart_command(char* command){
    83b8:	dfc00215 	stw	ra,8(sp)
    83bc:	dc400115 	stw	r17,4(sp)
	char * cmd = (char *) malloc(256);
	char * ret = (char *) malloc(256);
    83c0:	00097a00 	call	97a0 <malloc>
	alt_u8 check = 0;

	cmd = (command + strlen("$"));
    83c4:	84000044 	addi	r16,r16,1
	uart_tx(UART_0_BASE, strcat(cmd,"\r"));
    83c8:	01400074 	movhi	r5,1
    83cc:	296b1e04 	addi	r5,r5,-21384
    83d0:	8009883a 	mov	r4,r16
	return 1;
}

int send_pmt_uart_command(char* command){
	char * cmd = (char *) malloc(256);
	char * ret = (char *) malloc(256);
    83d4:	1023883a 	mov	r17,r2
	alt_u8 check = 0;

	cmd = (command + strlen("$"));
	uart_tx(UART_0_BASE, strcat(cmd,"\r"));
    83d8:	0009a540 	call	9a54 <strcat>
    83dc:	100b883a 	mov	r5,r2
    83e0:	0009883a 	mov	r4,zero
    83e4:	00086c00 	call	86c0 <uart_tx>
	check = uart_rx(UART_0_BASE, ret);
    83e8:	880b883a 	mov	r5,r17
    83ec:	0009883a 	mov	r4,zero
    83f0:	00087340 	call	8734 <uart_rx>

	if(check){
    83f4:	10803fcc 	andi	r2,r2,255
    83f8:	10000426 	beq	r2,zero,840c <send_pmt_uart_command+0x64>
		xprintf("%s",ret);
    83fc:	01000074 	movhi	r4,1
    8400:	880b883a 	mov	r5,r17
    8404:	212b1f04 	addi	r4,r4,-21380
    8408:	00091e00 	call	91e0 <xprintf>
	}

	free(cmd);
    840c:	8009883a 	mov	r4,r16
    8410:	00097b40 	call	97b4 <free>
	free(ret);
    8414:	8809883a 	mov	r4,r17
    8418:	00097b40 	call	97b4 <free>
	return 1;
}
    841c:	00800044 	movi	r2,1
    8420:	dfc00217 	ldw	ra,8(sp)
    8424:	dc400117 	ldw	r17,4(sp)
    8428:	dc000017 	ldw	r16,0(sp)
    842c:	dec00304 	addi	sp,sp,12
    8430:	f800283a 	ret

00008434 <display_eop_status>:

int display_eop_status(void){
    8434:	deffff04 	addi	sp,sp,-4
	xprintf("ceop status: %d\n",(IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_EOP_MSK));
    8438:	00800204 	movi	r2,8
	free(cmd);
	free(ret);
	return 1;
}

int display_eop_status(void){
    843c:	dfc00015 	stw	ra,0(sp)
	xprintf("ceop status: %d\n",(IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_EOP_MSK));
    8440:	11400037 	ldwio	r5,0(r2)
    8444:	01000074 	movhi	r4,1
    8448:	2944000c 	andi	r5,r5,4096
    844c:	212b2004 	addi	r4,r4,-21376
    8450:	00091e00 	call	91e0 <xprintf>
	xprintf("ceop char:   %02X\n",IORD_ALTERA_AVALON_UART_EOP(UART_0_BASE));
    8454:	00800504 	movi	r2,20
    8458:	11400037 	ldwio	r5,0(r2)
    845c:	01000074 	movhi	r4,1
    8460:	212b2504 	addi	r4,r4,-21356
    8464:	00091e00 	call	91e0 <xprintf>
	return 1;
}
    8468:	00800044 	movi	r2,1
    846c:	dfc00017 	ldw	ra,0(sp)
    8470:	dec00104 	addi	sp,sp,4
    8474:	f800283a 	ret

00008478 <clear_eop_flag>:

int clear_eop_flag(void){
    8478:	defffe04 	addi	sp,sp,-8
    847c:	dc000015 	stw	r16,0(sp)
	xprintf("before: %04X\n",IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE));
    8480:	04000204 	movi	r16,8
	xprintf("ceop status: %d\n",(IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_EOP_MSK));
	xprintf("ceop char:   %02X\n",IORD_ALTERA_AVALON_UART_EOP(UART_0_BASE));
	return 1;
}

int clear_eop_flag(void){
    8484:	dfc00115 	stw	ra,4(sp)
	xprintf("before: %04X\n",IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE));
    8488:	81400037 	ldwio	r5,0(r16)
    848c:	01000074 	movhi	r4,1
    8490:	212b2a04 	addi	r4,r4,-21336
    8494:	00091e00 	call	91e0 <xprintf>
	alt_u16 newval = (IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ~ALTERA_AVALON_UART_STATUS_EOP_MSK);
    8498:	80800037 	ldwio	r2,0(r16)
	IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, newval);
    849c:	10bbffcc 	andi	r2,r2,61439
    84a0:	80800035 	stwio	r2,0(r16)
	xprintf("after:  %04X\n",IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE));
    84a4:	81400037 	ldwio	r5,0(r16)
    84a8:	01000074 	movhi	r4,1
    84ac:	212b2e04 	addi	r4,r4,-21320
    84b0:	00091e00 	call	91e0 <xprintf>
	return 1;
}
    84b4:	00800044 	movi	r2,1
    84b8:	dfc00117 	ldw	ra,4(sp)
    84bc:	dc000017 	ldw	r16,0(sp)
    84c0:	dec00204 	addi	sp,sp,8
    84c4:	f800283a 	ret

000084c8 <parse_command>:
		return 0;
	}
}

alt_u8 parse_command(char* command){
	if(!strcmp(command,"help")){
    84c8:	01400074 	movhi	r5,1
		IOWR_ALTERA_AVALON_PIO_DATA(base, 0);
		return 0;
	}
}

alt_u8 parse_command(char* command){
    84cc:	defffe04 	addi	sp,sp,-8
	if(!strcmp(command,"help")){
    84d0:	296b3204 	addi	r5,r5,-21304
		IOWR_ALTERA_AVALON_PIO_DATA(base, 0);
		return 0;
	}
}

alt_u8 parse_command(char* command){
    84d4:	dc000015 	stw	r16,0(sp)
    84d8:	dfc00115 	stw	ra,4(sp)
    84dc:	2021883a 	mov	r16,r4
	if(!strcmp(command,"help")){
    84e0:	0009ac00 	call	9ac0 <strcmp>
    84e4:	1000021e 	bne	r2,zero,84f0 <parse_command+0x28>
		return display_commands();
    84e8:	00082e80 	call	82e8 <display_commands>
    84ec:	00002106 	br	8574 <parse_command+0xac>
	}
	else if(strstr(command,"selbase") != NULL){
    84f0:	01400074 	movhi	r5,1
    84f4:	296b3404 	addi	r5,r5,-21296
    84f8:	8009883a 	mov	r4,r16
    84fc:	0009b140 	call	9b14 <strstr>
    8500:	10000326 	beq	r2,zero,8510 <parse_command+0x48>
		return select_base(command);
    8504:	8009883a 	mov	r4,r16
    8508:	00083500 	call	8350 <select_base>
    850c:	00001906 	br	8574 <parse_command+0xac>
	}
	else if(strstr(command,"$") != NULL){
    8510:	01400904 	movi	r5,36
    8514:	8009883a 	mov	r4,r16
    8518:	0009a900 	call	9a90 <strchr>
    851c:	10000326 	beq	r2,zero,852c <parse_command+0x64>
		return send_pmt_uart_command(command);
    8520:	8009883a 	mov	r4,r16
    8524:	00083a80 	call	83a8 <send_pmt_uart_command>
    8528:	00001206 	br	8574 <parse_command+0xac>
	}
	else if(strstr(command,"ceop") != NULL){
    852c:	01400074 	movhi	r5,1
    8530:	296b3604 	addi	r5,r5,-21288
    8534:	8009883a 	mov	r4,r16
    8538:	0009b140 	call	9b14 <strstr>
    853c:	10000926 	beq	r2,zero,8564 <parse_command+0x9c>
		if (strstr(command,"clear") != NULL){
    8540:	01400074 	movhi	r5,1
    8544:	296b3804 	addi	r5,r5,-21280
    8548:	8009883a 	mov	r4,r16
    854c:	0009b140 	call	9b14 <strstr>
    8550:	10000226 	beq	r2,zero,855c <parse_command+0x94>
			return clear_eop_flag();
    8554:	00084780 	call	8478 <clear_eop_flag>
    8558:	00000606 	br	8574 <parse_command+0xac>
		}
		else{
			return display_eop_status();
    855c:	00084340 	call	8434 <display_eop_status>
    8560:	00000406 	br	8574 <parse_command+0xac>
		}
	}
	else {
		xprintf("command not recognized, try entering 'help' \n");
    8564:	01000074 	movhi	r4,1
    8568:	212b3a04 	addi	r4,r4,-21272
    856c:	00091e00 	call	91e0 <xprintf>
		return 0;
    8570:	0005883a 	mov	r2,zero
	}
}
    8574:	dfc00117 	ldw	ra,4(sp)
    8578:	dc000017 	ldw	r16,0(sp)
    857c:	dec00204 	addi	sp,sp,8
    8580:	f800283a 	ret

00008584 <main>:
char input[256] = "";

/*search*/
// jtag

int main() {
    8584:	deffff04 	addi	sp,sp,-4
    8588:	dfc00015 	stw	ra,0(sp)
	/*initialize*/
	config_xdev();
    858c:	00086040 	call	8604 <config_xdev>
	timer_isr_setup();
    8590:	000863c0 	call	863c <timer_isr_setup>
	clear_jtag_buffer();
    8594:	00088980 	call	8898 <clear_jtag_buffer>

	/*init lightweight uart*/
	altera_avalon_uart_state * uart_0 = init_lightweight_uart(UART_0_BASE);
    8598:	0009883a 	mov	r4,zero
    859c:	000866c0 	call	866c <init_lightweight_uart>
	set_eop_char(uart_0,0x0D);
    85a0:	01400344 	movi	r5,13
    85a4:	1009883a 	mov	r4,r2
    85a8:	00086780 	call	8678 <set_eop_char>

	/*main loop variables*/
	char msg_in[256] = "";
	alt_u8 i = 0;

	select_pmt_connector(15, PIO_0_BASE);
    85ac:	01400074 	movhi	r5,1
    85b0:	29440804 	addi	r5,r5,4128
    85b4:	010003c4 	movi	r4,15
    85b8:	00082900 	call	8290 <select_pmt_connector>

	/*main loop*/
	while (1) {
		xgets(input, sizeof input);
    85bc:	01000074 	movhi	r4,1
    85c0:	01404004 	movi	r5,256
    85c4:	212d6304 	addi	r4,r4,-19060
    85c8:	00094580 	call	9458 <xgets>
		parse_command(input);
    85cc:	01000074 	movhi	r4,1
    85d0:	212d6304 	addi	r4,r4,-19060
    85d4:	00084c80 	call	84c8 <parse_command>
    85d8:	003ff806 	br	85bc <_gp+0xffff5360>

000085dc <bootloader_chan_getc>:

#include "xprintf.h"
#include "rsscanf.h"
#include "sys/alt_stdio.h"

unsigned char bootloader_chan_getc() {
    85dc:	deffff04 	addi	sp,sp,-4
    85e0:	dfc00015 	stw	ra,0(sp)
	int c;
	c = alt_getchar();
    85e4:	0009da00 	call	9da0 <alt_getchar>
	if (c > 0) {
    85e8:	00800116 	blt	zero,r2,85f0 <bootloader_chan_getc+0x14>
		return ((char) c);
	} else {
		return 0;
    85ec:	0005883a 	mov	r2,zero
	}
}
    85f0:	dfc00017 	ldw	ra,0(sp)
    85f4:	dec00104 	addi	sp,sp,4
    85f8:	f800283a 	ret

000085fc <bootloader_chan_putc>:

void bootloader_chan_putc(unsigned char c) {
	alt_putchar((int) c);
    85fc:	21003fcc 	andi	r4,r4,255
    8600:	000a1e01 	jmpi	a1e0 <alt_putchar>

00008604 <config_xdev>:
}

void config_xdev() {
	xdev_in(bootloader_chan_getc);
    8604:	00800074 	movhi	r2,1
    8608:	10a17704 	addi	r2,r2,-31268
    860c:	d0a0bf15 	stw	r2,-32004(gp)
	xdev_out(bootloader_chan_putc);
    8610:	00800074 	movhi	r2,1
    8614:	10a17f04 	addi	r2,r2,-31236
    8618:	d0a0c015 	stw	r2,-32000(gp)
    861c:	f800283a 	ret

00008620 <handle_timer_interrupt>:
extern volatile alt_u32 timer_flag = 0;

void handle_timer_interrupt(void* context) {
	volatile alt_u32 * timer_flag_ptr;
	timer_flag_ptr = (volatile alt_u32*) context;
	*timer_flag_ptr = *timer_flag_ptr + 1;
    8620:	20800017 	ldw	r2,0(r4)
    8624:	10800044 	addi	r2,r2,1
    8628:	20800015 	stw	r2,0(r4)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0x00);
    862c:	00800074 	movhi	r2,1
    8630:	10840004 	addi	r2,r2,4096
    8634:	10000035 	stwio	zero,0(r2)
    8638:	f800283a 	ret

0000863c <timer_isr_setup>:
}

void timer_isr_setup() {
    863c:	defffe04 	addi	sp,sp,-8
	void * timer_flag_ptr;
	timer_flag_ptr = (void*) &timer_flag;
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,
    8640:	01800074 	movhi	r6,1
    8644:	d8000015 	stw	zero,0(sp)
    8648:	d1e0be04 	addi	r7,gp,-32008
    864c:	31a18804 	addi	r6,r6,-31200
    8650:	01400044 	movi	r5,1
    8654:	0009883a 	mov	r4,zero
	timer_flag_ptr = (volatile alt_u32*) context;
	*timer_flag_ptr = *timer_flag_ptr + 1;
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0x00);
}

void timer_isr_setup() {
    8658:	dfc00115 	stw	ra,4(sp)
	void * timer_flag_ptr;
	timer_flag_ptr = (void*) &timer_flag;
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,
    865c:	0009e040 	call	9e04 <alt_ic_isr_register>
	TIMER_0_IRQ, handle_timer_interrupt, timer_flag_ptr, 0x00);
}
    8660:	dfc00117 	ldw	ra,4(sp)
    8664:	dec00204 	addi	sp,sp,8
    8668:	f800283a 	ret

0000866c <init_lightweight_uart>:
#include <stdlib.h>
#include "altera_avalon_jtag_uart_regs.h"

altera_avalon_uart_state * init_lightweight_uart(alt_u32 base_address) {
	altera_avalon_uart_state * sp_uart = { NULL };
	sp_uart->base = base_address;
    866c:	0005883a 	mov	r2,zero
    8670:	11000015 	stw	r4,0(r2)
	return sp_uart;
}
    8674:	f800283a 	ret

00008678 <set_eop_char>:

void set_eop_char(altera_avalon_uart_state * uart,char eop){
	IOWR_ALTERA_AVALON_UART_EOP(uart->base, eop);
    8678:	20800017 	ldw	r2,0(r4)
    867c:	29403fcc 	andi	r5,r5,255
    8680:	2940201c 	xori	r5,r5,128
    8684:	297fe004 	addi	r5,r5,-128
    8688:	11400535 	stwio	r5,20(r2)
	IOWR_ALTERA_AVALON_UART_STATUS(uart->base,(IORD_ALTERA_AVALON_UART_STATUS(uart->base) & ~ALTERA_AVALON_UART_STATUS_EOP_MSK));
    868c:	20800017 	ldw	r2,0(r4)
    8690:	10800204 	addi	r2,r2,8
    8694:	11000037 	ldwio	r4,0(r2)
    8698:	00fbffc4 	movi	r3,-4097
    869c:	20c6703a 	and	r3,r4,r3
    86a0:	10c00035 	stwio	r3,0(r2)
    86a4:	f800283a 	ret

000086a8 <uart_tx_char>:
}

void uart_tx_char(altera_avalon_uart_state * uart, char tx_char) {
	IOWR_ALTERA_AVALON_UART_TXDATA(uart->base, tx_char);
    86a8:	20800017 	ldw	r2,0(r4)
    86ac:	29403fcc 	andi	r5,r5,255
    86b0:	2940201c 	xori	r5,r5,128
    86b4:	297fe004 	addi	r5,r5,-128
    86b8:	11400135 	stwio	r5,4(r2)
    86bc:	f800283a 	ret

000086c0 <uart_tx>:
}

void uart_tx(altera_avalon_uart_state * uart, char* str) {
    86c0:	defffc04 	addi	sp,sp,-16
    86c4:	dc800215 	stw	r18,8(sp)
    86c8:	dc400115 	stw	r17,4(sp)
    86cc:	dc000015 	stw	r16,0(sp)
    86d0:	dfc00315 	stw	ra,12(sp)
    86d4:	2025883a 	mov	r18,r4
    86d8:	2823883a 	mov	r17,r5
	for (alt_u32 i = 0; i < strlen(str); i++) {
    86dc:	2821883a 	mov	r16,r5
    86e0:	8809883a 	mov	r4,r17
    86e4:	0009af80 	call	9af8 <strlen>
    86e8:	8447c83a 	sub	r3,r16,r17
    86ec:	1880082e 	bgeu	r3,r2,8710 <uart_tx+0x50>
		while (!(IORD_ALTERA_AVALON_UART_STATUS(uart->base)
    86f0:	90c00017 	ldw	r3,0(r18)
    86f4:	18800237 	ldwio	r2,8(r3)
    86f8:	1080100c 	andi	r2,r2,64
    86fc:	103ffc26 	beq	r2,zero,86f0 <_gp+0xffff5494>
				& ALTERA_AVALON_UART_STATUS_TRDY_MSK))
			;
		IOWR_ALTERA_AVALON_UART_TXDATA(uart->base, str[i]);
    8700:	80800007 	ldb	r2,0(r16)
    8704:	18800135 	stwio	r2,4(r3)
    8708:	84000044 	addi	r16,r16,1
    870c:	003ff406 	br	86e0 <_gp+0xffff5484>
	}
}
    8710:	dfc00317 	ldw	ra,12(sp)
    8714:	dc800217 	ldw	r18,8(sp)
    8718:	dc400117 	ldw	r17,4(sp)
    871c:	dc000017 	ldw	r16,0(sp)
    8720:	dec00404 	addi	sp,sp,16
    8724:	f800283a 	ret

00008728 <uart_rx_char>:

char uart_rx_char(altera_avalon_uart_state * uart) {
	return IORD_ALTERA_AVALON_UART_RXDATA(uart->base);
    8728:	20800017 	ldw	r2,0(r4)
}
    872c:	10800037 	ldwio	r2,0(r2)
    8730:	f800283a 	ret

00008734 <uart_rx>:

int uart_rx(altera_avalon_uart_state * uart, char* str) {
    8734:	defffe04 	addi	sp,sp,-8
    8738:	dfc00115 	stw	ra,4(sp)
    873c:	dc000015 	stw	r16,0(sp)
	alt_u32 i = 0;
	alt_u32 j = 0;
	alt_u32 UART_TIMEOUT = 10000000;
	IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0x01E8);
    8740:	00800204 	movi	r2,8
    8744:	00c07a04 	movi	r3,488
    8748:	10c00035 	stwio	r3,0(r2)
    874c:	01002674 	movhi	r4,153
    8750:	2125a004 	addi	r4,r4,-27008
char uart_rx_char(altera_avalon_uart_state * uart) {
	return IORD_ALTERA_AVALON_UART_RXDATA(uart->base);
}

int uart_rx(altera_avalon_uart_state * uart, char* str) {
	alt_u32 i = 0;
    8754:	0007883a 	mov	r3,zero
	alt_u32 j = 0;
	alt_u32 UART_TIMEOUT = 10000000;
	IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0x01E8);

	for(j = 0; j < UART_TIMEOUT; j++){
		if (!(IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_EOP_MSK)) {
    8758:	14000037 	ldwio	r16,0(r2)
    875c:	8404000c 	andi	r16,r16,4096
    8760:	8000081e 	bne	r16,zero,8784 <uart_rx+0x50>
			if((IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & ALTERA_AVALON_UART_STATUS_RRDY_MSK)){
    8764:	11800037 	ldwio	r6,0(r2)
    8768:	3180200c 	andi	r6,r6,128
    876c:	30000f26 	beq	r6,zero,87ac <uart_rx+0x78>
				str[i] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
    8770:	81c00037 	ldwio	r7,0(r16)
    8774:	28cd883a 	add	r6,r5,r3
    8778:	31c00005 	stb	r7,0(r6)
				i++;
    877c:	18c00044 	addi	r3,r3,1
    8780:	00000a06 	br	87ac <uart_rx+0x78>
			}
		}
		else{
			str[i] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
    8784:	0005883a 	mov	r2,zero
    8788:	10800037 	ldwio	r2,0(r2)
    878c:	28c7883a 	add	r3,r5,r3
    8790:	18800005 	stb	r2,0(r3)
			str[i+1] = '\0';
    8794:	18000045 	stb	zero,1(r3)
			IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0x01E8);
    8798:	00800204 	movi	r2,8
    879c:	00c07a04 	movi	r3,488
    87a0:	10c00035 	stwio	r3,0(r2)
			return 1;
    87a4:	04000044 	movi	r16,1
    87a8:	00000806 	br	87cc <uart_rx+0x98>
    87ac:	213fffc4 	addi	r4,r4,-1
	alt_u32 i = 0;
	alt_u32 j = 0;
	alt_u32 UART_TIMEOUT = 10000000;
	IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0x01E8);

	for(j = 0; j < UART_TIMEOUT; j++){
    87b0:	203fe91e 	bne	r4,zero,8758 <_gp+0xffff54fc>
			str[i+1] = '\0';
			IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0x01E8);
			return 1;
		}
	}
	IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0x01E8);
    87b4:	00800204 	movi	r2,8
    87b8:	00c07a04 	movi	r3,488
    87bc:	10c00035 	stwio	r3,0(r2)
	xprintf("timeout\n");
    87c0:	01000074 	movhi	r4,1
    87c4:	212b4604 	addi	r4,r4,-21224
    87c8:	00091e00 	call	91e0 <xprintf>
	return 0;
}
    87cc:	8005883a 	mov	r2,r16
    87d0:	dfc00117 	ldw	ra,4(sp)
    87d4:	dc000017 	ldw	r16,0(sp)
    87d8:	dec00204 	addi	sp,sp,8
    87dc:	f800283a 	ret

000087e0 <uart_trx>:

void uart_trx(altera_avalon_uart_state * uart, char* tx_str, char* rx_str) {
    87e0:	defff804 	addi	sp,sp,-32
    87e4:	dd800615 	stw	r22,24(sp)
    87e8:	dd400515 	stw	r21,20(sp)
    87ec:	dd000415 	stw	r20,16(sp)
    87f0:	dcc00315 	stw	r19,12(sp)
    87f4:	dc800215 	stw	r18,8(sp)
    87f8:	dc400115 	stw	r17,4(sp)
    87fc:	dfc00715 	stw	ra,28(sp)
    8800:	dc000015 	stw	r16,0(sp)
    8804:	202b883a 	mov	r21,r4
    8808:	2829883a 	mov	r20,r5
    880c:	3025883a 	mov	r18,r6
    8810:	2827883a 	mov	r19,r5
	alt_u32 i;
	for (i = 0; i < strlen(tx_str); i++) {
    8814:	3023883a 	mov	r17,r6
		while (!(IORD_ALTERA_AVALON_UART_STATUS(uart->base)
				& ALTERA_AVALON_UART_STATUS_TRDY_MSK))
			;
		IOWR_ALTERA_AVALON_UART_TXDATA(uart->base, tx_str[i]);
		while (!(IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE)
    8818:	05800204 	movi	r22,8
	return 0;
}

void uart_trx(altera_avalon_uart_state * uart, char* tx_str, char* rx_str) {
	alt_u32 i;
	for (i = 0; i < strlen(tx_str); i++) {
    881c:	a009883a 	mov	r4,r20
    8820:	8ca1c83a 	sub	r16,r17,r18
    8824:	0009af80 	call	9af8 <strlen>
    8828:	80800f2e 	bgeu	r16,r2,8868 <uart_trx+0x88>
		while (!(IORD_ALTERA_AVALON_UART_STATUS(uart->base)
    882c:	a8c00017 	ldw	r3,0(r21)
    8830:	18800237 	ldwio	r2,8(r3)
    8834:	1080100c 	andi	r2,r2,64
    8838:	103ffc26 	beq	r2,zero,882c <_gp+0xffff55d0>
				& ALTERA_AVALON_UART_STATUS_TRDY_MSK))
			;
		IOWR_ALTERA_AVALON_UART_TXDATA(uart->base, tx_str[i]);
    883c:	98800007 	ldb	r2,0(r19)
    8840:	18800135 	stwio	r2,4(r3)
		while (!(IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE)
    8844:	b0800037 	ldwio	r2,0(r22)
    8848:	1080200c 	andi	r2,r2,128
    884c:	103ffd26 	beq	r2,zero,8844 <_gp+0xffff55e8>
				& ALTERA_AVALON_UART_STATUS_RRDY_MSK))
			;
		rx_str[i] = IORD_ALTERA_AVALON_UART_RXDATA(uart->base);
    8850:	a8800017 	ldw	r2,0(r21)
    8854:	10800037 	ldwio	r2,0(r2)
    8858:	88800005 	stb	r2,0(r17)
    885c:	9cc00044 	addi	r19,r19,1
    8860:	8c400044 	addi	r17,r17,1
    8864:	003fed06 	br	881c <_gp+0xffff55c0>
	}
	rx_str[i] = NULL;
    8868:	9421883a 	add	r16,r18,r16
    886c:	80000005 	stb	zero,0(r16)
}
    8870:	dfc00717 	ldw	ra,28(sp)
    8874:	dd800617 	ldw	r22,24(sp)
    8878:	dd400517 	ldw	r21,20(sp)
    887c:	dd000417 	ldw	r20,16(sp)
    8880:	dcc00317 	ldw	r19,12(sp)
    8884:	dc800217 	ldw	r18,8(sp)
    8888:	dc400117 	ldw	r17,4(sp)
    888c:	dc000017 	ldw	r16,0(sp)
    8890:	dec00804 	addi	sp,sp,32
    8894:	f800283a 	ret

00008898 <clear_jtag_buffer>:

int clear_jtag_buffer() {
	while (((alt_u32) IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE)
    8898:	00c00074 	movhi	r3,1
    889c:	18c40e04 	addi	r3,r3,4152
    88a0:	18800037 	ldwio	r2,0(r3)
    88a4:	10bfffec 	andhi	r2,r2,65535
    88a8:	103ffd1e 	bne	r2,zero,88a0 <_gp+0xffff5644>
			& ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK) != 0)
		;
	return (alt_u32) IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE)
    88ac:	00800074 	movhi	r2,1
    88b0:	10840e04 	addi	r2,r2,4152
    88b4:	10800037 	ldwio	r2,0(r2)
			& ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK;
}
    88b8:	10bfffec 	andhi	r2,r2,65535
    88bc:	f800283a 	ret

000088c0 <config_jtag_echo>:

void config_jtag_echo() {
    88c0:	f800283a 	ret

000088c4 <rsscanf>:
// %x hex integer (E.g.: 0xa0)
// %b bin integer (E.g.: b1010100010)
// %n hex, de or bin integer (e.g: 12, 0xa0, b1010100010)
// %c any character
//
int rsscanf(const char* str, const char* format, ...) {
    88c4:	defff404 	addi	sp,sp,-48
    88c8:	dfc00915 	stw	ra,36(sp)
    88cc:	df000815 	stw	fp,32(sp)
    88d0:	ddc00715 	stw	r23,28(sp)
    88d4:	dd800615 	stw	r22,24(sp)
    88d8:	dd400515 	stw	r21,20(sp)
    88dc:	dd000415 	stw	r20,16(sp)
    88e0:	dcc00315 	stw	r19,12(sp)
    88e4:	dc800215 	stw	r18,8(sp)
    88e8:	dc400115 	stw	r17,4(sp)
    88ec:	dc000015 	stw	r16,0(sp)
    88f0:	d9800a15 	stw	r6,40(sp)
    88f4:	d9c00b15 	stw	r7,44(sp)
	char neg, fmt_code;
	const char* pf;

	va_start(ap, format);

	for (pf = format, count = 0; *format != 0 && *str != 0;
    88f8:	0005883a 	mov	r2,zero
    88fc:	d8c00a04 	addi	r3,sp,40
    8900:	02400804 	movi	r9,32
		while (*str == ' ' && *str != 0)
			str++;
		if (*str == 0)
			break;

		if (*format == '%') {
    8904:	07c00944 	movi	ra,37
			format++;
			if (*format == 'n') {
    8908:	04001b84 	movi	r16,110
				if (*str == '-') {
					neg = 1;
					str++;
				} else
					neg = 0;
				for (value = 0, pos = 0; *str != 0; str++, pos++) {
    890c:	02800244 	movi	r10,9
				*(va_arg(ap, int*)) = value;
				count++;
				break;

			case 'd':
				if (*str == '-') {
    8910:	04400b44 	movi	r17,45
			case 'x':
			case 'X':
				for (value = 0, pos = 0; *str != 0; str++, pos++) {
					if ('0' <= *str && *str <= '9')
						tmp = *str - '0';
					else if ('a' <= *str && *str <= 'f')
    8914:	02c00144 	movi	r11,5
				*(va_arg(ap, int*)) = value;
				count++;
				break;

			case 'b':
				for (value = 0, pos = 0; *str != 0; str++, pos++) {
    8918:	04800044 	movi	r18,1
				} else
					fmt_code = 'd';
			} else
				fmt_code = *format;

			switch (fmt_code) {
    891c:	030018c4 	movi	r12,99
    8920:	04c01904 	movi	r19,100
    8924:	05001e04 	movi	r20,120
    8928:	03401604 	movi	r13,88
    892c:	03801884 	movi	r14,98
			break;

		if (*format == '%') {
			format++;
			if (*format == 'n') {
				if (str[0] == '0' && (str[1] == 'x' || str[1] == 'X')) {
    8930:	05400c04 	movi	r21,48
    8934:	05bff7c4 	movi	r22,-33
	char neg, fmt_code;
	const char* pf;

	va_start(ap, format);

	for (pf = format, count = 0; *format != 0 && *str != 0;
    8938:	29800007 	ldb	r6,0(r5)
    893c:	30008926 	beq	r6,zero,8b64 <rsscanf+0x2a0>
    8940:	21800007 	ldb	r6,0(r4)
    8944:	30008726 	beq	r6,zero,8b64 <rsscanf+0x2a0>
			format++, str = (*str != 0) ? (str + 1) : str) {
		while (*format == ' ' && *format != 0)
    8948:	29c00007 	ldb	r7,0(r5)
    894c:	3a40021e 	bne	r7,r9,8958 <rsscanf+0x94>
			format++;
    8950:	29400044 	addi	r5,r5,1
    8954:	003ffc06 	br	8948 <_gp+0xffff56ec>
		if (*format == 0)
    8958:	38008226 	beq	r7,zero,8b64 <rsscanf+0x2a0>
			break;

		while (*str == ' ' && *str != 0)
    895c:	22000003 	ldbu	r8,0(r4)
    8960:	03c00804 	movi	r15,32
    8964:	41803fcc 	andi	r6,r8,255
    8968:	3180201c 	xori	r6,r6,128
    896c:	31bfe004 	addi	r6,r6,-128
    8970:	33c0021e 	bne	r6,r15,897c <rsscanf+0xb8>
			str++;
    8974:	21000044 	addi	r4,r4,1
    8978:	003ff806 	br	895c <_gp+0xffff5700>
		if (*str == 0)
    897c:	30007926 	beq	r6,zero,8b64 <rsscanf+0x2a0>
			break;

		if (*format == '%') {
    8980:	3fc0711e 	bne	r7,ra,8b48 <rsscanf+0x284>
			format++;
    8984:	2bc00044 	addi	r15,r5,1
			if (*format == 'n') {
    8988:	29400047 	ldb	r5,1(r5)
    898c:	2c000c1e 	bne	r5,r16,89c0 <rsscanf+0xfc>
				if (str[0] == '0' && (str[1] == 'x' || str[1] == 'X')) {
    8990:	3540081e 	bne	r6,r21,89b4 <rsscanf+0xf0>
    8994:	21400043 	ldbu	r5,1(r4)
    8998:	2d8a703a 	and	r5,r5,r22
    899c:	29403fcc 	andi	r5,r5,255
    89a0:	2940201c 	xori	r5,r5,128
    89a4:	297fe004 	addi	r5,r5,-128
    89a8:	2b40461e 	bne	r5,r13,8ac4 <rsscanf+0x200>
					fmt_code = 'x';
					str += 2;
    89ac:	21000084 	addi	r4,r4,2
    89b0:	00000e06 	br	89ec <rsscanf+0x128>
				} else if (str[0] == 'b') {
    89b4:	33803f1e 	bne	r6,r14,8ab4 <rsscanf+0x1f0>
					fmt_code = 'b';
					str++;
    89b8:	21000044 	addi	r4,r4,1
    89bc:	00000806 	br	89e0 <rsscanf+0x11c>
				} else
					fmt_code = 'd';
			} else
				fmt_code = *format;

			switch (fmt_code) {
    89c0:	2b005c26 	beq	r5,r12,8b34 <rsscanf+0x270>
    89c4:	61400316 	blt	r12,r5,89d4 <rsscanf+0x110>
    89c8:	2b400826 	beq	r5,r13,89ec <rsscanf+0x128>
    89cc:	2b800426 	beq	r5,r14,89e0 <rsscanf+0x11c>
    89d0:	00006406 	br	8b64 <rsscanf+0x2a0>
    89d4:	2cc03726 	beq	r5,r19,8ab4 <rsscanf+0x1f0>
    89d8:	2d00621e 	bne	r5,r20,8b64 <rsscanf+0x2a0>
    89dc:	00000306 	br	89ec <rsscanf+0x128>
// %x hex integer (E.g.: 0xa0)
// %b bin integer (E.g.: b1010100010)
// %n hex, de or bin integer (e.g: 12, 0xa0, b1010100010)
// %c any character
//
int rsscanf(const char* str, const char* format, ...) {
    89e0:	200f883a 	mov	r7,r4
    89e4:	000b883a 	mov	r5,zero
    89e8:	00001e06 	br	8a64 <rsscanf+0x1a0>
    89ec:	200f883a 	mov	r7,r4
    89f0:	0011883a 	mov	r8,zero
				fmt_code = *format;

			switch (fmt_code) {
			case 'x':
			case 'X':
				for (value = 0, pos = 0; *str != 0; str++, pos++) {
    89f4:	39800003 	ldbu	r6,0(r7)
    89f8:	3939c83a 	sub	fp,r7,r4
    89fc:	31403fcc 	andi	r5,r6,255
    8a00:	2940201c 	xori	r5,r5,128
    8a04:	297fe004 	addi	r5,r5,-128
    8a08:	28000d26 	beq	r5,zero,8a40 <rsscanf+0x17c>
					if ('0' <= *str && *str <= '9')
    8a0c:	35fff404 	addi	r23,r6,-48
    8a10:	bdc03fcc 	andi	r23,r23,255
    8a14:	55c00236 	bltu	r10,r23,8a20 <rsscanf+0x15c>
						tmp = *str - '0';
    8a18:	297ff404 	addi	r5,r5,-48
    8a1c:	00000d06 	br	8a54 <rsscanf+0x190>
					else if ('a' <= *str && *str <= 'f')
    8a20:	35ffe7c4 	addi	r23,r6,-97
    8a24:	bdc03fcc 	andi	r23,r23,255
    8a28:	5dc00236 	bltu	r11,r23,8a34 <rsscanf+0x170>
						tmp = *str - 'a' + 10;
    8a2c:	297fea44 	addi	r5,r5,-87
    8a30:	00000806 	br	8a54 <rsscanf+0x190>
					else if ('A' <= *str && *str <= 'F')
    8a34:	31bfefc4 	addi	r6,r6,-65
    8a38:	31803fcc 	andi	r6,r6,255
    8a3c:	5980042e 	bgeu	r11,r6,8a50 <rsscanf+0x18c>

					value *= 16;
					value += tmp;
				}

				if (pos == 0) {
    8a40:	e0004826 	beq	fp,zero,8b64 <rsscanf+0x2a0>
					va_end(ap);
					return count;
				}

				*(va_arg(ap, int*)) = value;
    8a44:	19000017 	ldw	r4,0(r3)
    8a48:	22000015 	stw	r8,0(r4)
    8a4c:	00001506 	br	8aa4 <rsscanf+0x1e0>
					if ('0' <= *str && *str <= '9')
						tmp = *str - '0';
					else if ('a' <= *str && *str <= 'f')
						tmp = *str - 'a' + 10;
					else if ('A' <= *str && *str <= 'F')
						tmp = *str - 'A' + 10;
    8a50:	297ff244 	addi	r5,r5,-55
					else
						break;

					value *= 16;
    8a54:	4010913a 	slli	r8,r8,4
				fmt_code = *format;

			switch (fmt_code) {
			case 'x':
			case 'X':
				for (value = 0, pos = 0; *str != 0; str++, pos++) {
    8a58:	39c00044 	addi	r7,r7,1
						tmp = *str - 'A' + 10;
					else
						break;

					value *= 16;
					value += tmp;
    8a5c:	2a11883a 	add	r8,r5,r8
    8a60:	003fe406 	br	89f4 <_gp+0xffff5798>
				*(va_arg(ap, int*)) = value;
				count++;
				break;

			case 'b':
				for (value = 0, pos = 0; *str != 0; str++, pos++) {
    8a64:	39800003 	ldbu	r6,0(r7)
    8a68:	392fc83a 	sub	r23,r7,r4
    8a6c:	323ff404 	addi	r8,r6,-48
    8a70:	42003fcc 	andi	r8,r8,255
    8a74:	92000836 	bltu	r18,r8,8a98 <rsscanf+0x1d4>
					if (*str != '0' && *str != '1')
						break;
					value *= 2;
					value += *str - '0';
    8a78:	31803fcc 	andi	r6,r6,255
    8a7c:	3180201c 	xori	r6,r6,128
    8a80:	31bfe004 	addi	r6,r6,-128

			case 'b':
				for (value = 0, pos = 0; *str != 0; str++, pos++) {
					if (*str != '0' && *str != '1')
						break;
					value *= 2;
    8a84:	294b883a 	add	r5,r5,r5
					value += *str - '0';
    8a88:	31bff404 	addi	r6,r6,-48
    8a8c:	314b883a 	add	r5,r6,r5
				*(va_arg(ap, int*)) = value;
				count++;
				break;

			case 'b':
				for (value = 0, pos = 0; *str != 0; str++, pos++) {
    8a90:	39c00044 	addi	r7,r7,1
    8a94:	003ff306 	br	8a64 <_gp+0xffff5808>
						break;
					value *= 2;
					value += *str - '0';
				}

				if (pos == 0) {
    8a98:	b8003226 	beq	r23,zero,8b64 <rsscanf+0x2a0>
					va_end(ap);
					return count;
				}
				*(va_arg(ap, int*)) = value;
    8a9c:	19000017 	ldw	r4,0(r3)
    8aa0:	21400015 	stw	r5,0(r4)
				count++;
    8aa4:	10800044 	addi	r2,r2,1

				if (pos == 0) {
					va_end(ap);
					return count;
				}
				*(va_arg(ap, int*)) = value;
    8aa8:	18c00104 	addi	r3,r3,4
				count++;
				break;
    8aac:	3809883a 	mov	r4,r7
    8ab0:	00002706 	br	8b50 <rsscanf+0x28c>

			case 'd':
				if (*str == '-') {
    8ab4:	3440031e 	bne	r6,r17,8ac4 <rsscanf+0x200>
					neg = 1;
					str++;
    8ab8:	21000044 	addi	r4,r4,1
				count++;
				break;

			case 'd':
				if (*str == '-') {
					neg = 1;
    8abc:	02000044 	movi	r8,1
    8ac0:	00000106 	br	8ac8 <rsscanf+0x204>
					str++;
				} else
					neg = 0;
    8ac4:	0011883a 	mov	r8,zero
				for (value = 0, pos = 0; *str != 0; str++, pos++) {
    8ac8:	200f883a 	mov	r7,r4
    8acc:	000b883a 	mov	r5,zero
    8ad0:	39800003 	ldbu	r6,0(r7)
    8ad4:	3939c83a 	sub	fp,r7,r4
    8ad8:	35fff404 	addi	r23,r6,-48
    8adc:	bdc03fcc 	andi	r23,r23,255
    8ae0:	55c00836 	bltu	r10,r23,8b04 <rsscanf+0x240>
					if ('0' <= *str && *str <= '9')
						value = value * 10 + (int) (*str - '0');
    8ae4:	31803fcc 	andi	r6,r6,255
    8ae8:	294002a4 	muli	r5,r5,10
    8aec:	3180201c 	xori	r6,r6,128
    8af0:	31bfe004 	addi	r6,r6,-128
    8af4:	31bff404 	addi	r6,r6,-48
    8af8:	314b883a 	add	r5,r6,r5
				if (*str == '-') {
					neg = 1;
					str++;
				} else
					neg = 0;
				for (value = 0, pos = 0; *str != 0; str++, pos++) {
    8afc:	39c00044 	addi	r7,r7,1
    8b00:	003ff306 	br	8ad0 <_gp+0xffff5874>
					if ('0' <= *str && *str <= '9')
						value = value * 10 + (int) (*str - '0');
					else
						break;
				}
				if (pos == 0) {
    8b04:	e0001726 	beq	fp,zero,8b64 <rsscanf+0x2a0>
					va_end(ap);
					return count;
				}
				*(va_arg(ap, int*)) = neg ? -value : value;
    8b08:	42003fcc 	andi	r8,r8,255
    8b0c:	4200201c 	xori	r8,r8,128
    8b10:	423fe004 	addi	r8,r8,-128
    8b14:	19000104 	addi	r4,r3,4
    8b18:	18c00017 	ldw	r3,0(r3)
    8b1c:	40000126 	beq	r8,zero,8b24 <rsscanf+0x260>
    8b20:	014bc83a 	sub	r5,zero,r5
    8b24:	19400015 	stw	r5,0(r3)
				count++;
    8b28:	10800044 	addi	r2,r2,1
				}
				if (pos == 0) {
					va_end(ap);
					return count;
				}
				*(va_arg(ap, int*)) = neg ? -value : value;
    8b2c:	2007883a 	mov	r3,r4
    8b30:	003fde06 	br	8aac <_gp+0xffff5850>
				count++;
				break;

			case 'c':
				*(va_arg(ap, char*)) = *str;
    8b34:	19400017 	ldw	r5,0(r3)
				count++;
    8b38:	10800044 	addi	r2,r2,1
				*(va_arg(ap, int*)) = neg ? -value : value;
				count++;
				break;

			case 'c':
				*(va_arg(ap, char*)) = *str;
    8b3c:	18c00104 	addi	r3,r3,4
    8b40:	2a000005 	stb	r8,0(r5)
				count++;
				break;
    8b44:	00000206 	br	8b50 <rsscanf+0x28c>
			default:
				va_end(ap);
				return count;
			}
		} else {
			if (*format != *str)
    8b48:	3980061e 	bne	r7,r6,8b64 <rsscanf+0x2a0>
    8b4c:	281f883a 	mov	r15,r5
	const char* pf;

	va_start(ap, format);

	for (pf = format, count = 0; *format != 0 && *str != 0;
			format++, str = (*str != 0) ? (str + 1) : str) {
    8b50:	21800007 	ldb	r6,0(r4)
    8b54:	79400044 	addi	r5,r15,1
    8b58:	303f7726 	beq	r6,zero,8938 <_gp+0xffff56dc>
    8b5c:	21000044 	addi	r4,r4,1
    8b60:	003f7506 	br	8938 <_gp+0xffff56dc>
	}

	va_end(ap);

	return count;
}
    8b64:	dfc00917 	ldw	ra,36(sp)
    8b68:	df000817 	ldw	fp,32(sp)
    8b6c:	ddc00717 	ldw	r23,28(sp)
    8b70:	dd800617 	ldw	r22,24(sp)
    8b74:	dd400517 	ldw	r21,20(sp)
    8b78:	dd000417 	ldw	r20,16(sp)
    8b7c:	dcc00317 	ldw	r19,12(sp)
    8b80:	dc800217 	ldw	r18,8(sp)
    8b84:	dc400117 	ldw	r17,4(sp)
    8b88:	dc000017 	ldw	r16,0(sp)
    8b8c:	dec00c04 	addi	sp,sp,48
    8b90:	f800283a 	ret

00008b94 <xputc>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

int xputc(char c, void (*local_xfunc_out)(unsigned char)) {
    8b94:	defffb04 	addi	sp,sp,-20
    8b98:	dc800215 	stw	r18,8(sp)
	if (_CR_CRLF && (c == '\n'))
    8b9c:	24803fcc 	andi	r18,r4,255
    8ba0:	9480201c 	xori	r18,r18,128

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

int xputc(char c, void (*local_xfunc_out)(unsigned char)) {
    8ba4:	dcc00315 	stw	r19,12(sp)
    8ba8:	dc400115 	stw	r17,4(sp)
    8bac:	dc000015 	stw	r16,0(sp)
    8bb0:	dfc00415 	stw	ra,16(sp)
	if (_CR_CRLF && (c == '\n'))
    8bb4:	94bfe004 	addi	r18,r18,-128
    8bb8:	04c00284 	movi	r19,10

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

int xputc(char c, void (*local_xfunc_out)(unsigned char)) {
    8bbc:	2023883a 	mov	r17,r4
    8bc0:	2821883a 	mov	r16,r5
	if (_CR_CRLF && (c == '\n'))
    8bc4:	94c0051e 	bne	r18,r19,8bdc <xputc+0x48>
		xputc('\r', local_xfunc_out); /* CR -> CRLF */
    8bc8:	01000344 	movi	r4,13
    8bcc:	0008b940 	call	8b94 <xputc>

	if (local_xfunc_out)
    8bd0:	8000031e 	bne	r16,zero,8be0 <xputc+0x4c>
		local_xfunc_out((unsigned char) c);

	if (_CR_CRLF && (c == '\n')) {
		return 2;
    8bd4:	00800084 	movi	r2,2
    8bd8:	00000506 	br	8bf0 <xputc+0x5c>

int xputc(char c, void (*local_xfunc_out)(unsigned char)) {
	if (_CR_CRLF && (c == '\n'))
		xputc('\r', local_xfunc_out); /* CR -> CRLF */

	if (local_xfunc_out)
    8bdc:	28000326 	beq	r5,zero,8bec <xputc+0x58>
		local_xfunc_out((unsigned char) c);
    8be0:	89003fcc 	andi	r4,r17,255
    8be4:	803ee83a 	callr	r16

	if (_CR_CRLF && (c == '\n')) {
    8be8:	94fffa26 	beq	r18,r19,8bd4 <_gp+0xffff5978>
		return 2;
	}

	return 1;
    8bec:	00800044 	movi	r2,1
}
    8bf0:	dfc00417 	ldw	ra,16(sp)
    8bf4:	dcc00317 	ldw	r19,12(sp)
    8bf8:	dc800217 	ldw	r18,8(sp)
    8bfc:	dc400117 	ldw	r17,4(sp)
    8c00:	dc000017 	ldw	r16,0(sp)
    8c04:	dec00504 	addi	sp,sp,20
    8c08:	f800283a 	ret

00008c0c <xputc_for_xsprintf>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

int xputc_for_xsprintf(char c, char** outstr, int num_prev_chars,
		void (*local_xfunc_out)(unsigned char)) {
    8c0c:	defffc04 	addi	sp,sp,-16
    8c10:	dc800215 	stw	r18,8(sp)
    8c14:	dc000015 	stw	r16,0(sp)
    8c18:	dfc00315 	stw	ra,12(sp)
    8c1c:	dc400115 	stw	r17,4(sp)
    8c20:	2025883a 	mov	r18,r4
    8c24:	3021883a 	mov	r16,r6

	if (outstr) {
    8c28:	28001326 	beq	r5,zero,8c78 <xputc_for_xsprintf+0x6c>
		/* for xsprintf */
		if (*outstr) {
    8c2c:	28800017 	ldw	r2,0(r5)
    8c30:	2823883a 	mov	r17,r5
    8c34:	10001726 	beq	r2,zero,8c94 <xputc_for_xsprintf+0x88>
			if (_CR_CRLF && (c == '\n')) {
    8c38:	20803fcc 	andi	r2,r4,255
    8c3c:	1080201c 	xori	r2,r2,128
    8c40:	10bfe004 	addi	r2,r2,-128
    8c44:	00c00284 	movi	r3,10
    8c48:	10c0041e 	bne	r2,r3,8c5c <xputc_for_xsprintf+0x50>
				xputc_for_xsprintf('\r', outstr, num_prev_chars + 1,
    8c4c:	34000044 	addi	r16,r6,1
    8c50:	800d883a 	mov	r6,r16
    8c54:	01000344 	movi	r4,13
    8c58:	0008c0c0 	call	8c0c <xputc_for_xsprintf>
						local_xfunc_out);
				num_prev_chars = num_prev_chars + 1;
			}
			*(*outstr) = (unsigned char) c;
    8c5c:	88800017 	ldw	r2,0(r17)
    8c60:	14800005 	stb	r18,0(r2)
			(*outstr) = (*outstr) + 1;
    8c64:	88800017 	ldw	r2,0(r17)
    8c68:	10800044 	addi	r2,r2,1
    8c6c:	88800015 	stw	r2,0(r17)
			return (num_prev_chars + 1);
    8c70:	80800044 	addi	r2,r16,1
    8c74:	00000806 	br	8c98 <xputc_for_xsprintf+0x8c>
		}
	} else {
		/* for xprintf */
		return (num_prev_chars + xputc(c, local_xfunc_out));
    8c78:	21003fcc 	andi	r4,r4,255
    8c7c:	2100201c 	xori	r4,r4,128
    8c80:	380b883a 	mov	r5,r7
    8c84:	213fe004 	addi	r4,r4,-128
    8c88:	0008b940 	call	8b94 <xputc>
    8c8c:	8085883a 	add	r2,r16,r2
    8c90:	00000106 	br	8c98 <xputc_for_xsprintf+0x8c>
	}
	return num_prev_chars;
    8c94:	3005883a 	mov	r2,r6
}
    8c98:	dfc00317 	ldw	ra,12(sp)
    8c9c:	dc800217 	ldw	r18,8(sp)
    8ca0:	dc400117 	ldw	r17,4(sp)
    8ca4:	dc000017 	ldw	r16,0(sp)
    8ca8:	dec00404 	addi	sp,sp,16
    8cac:	f800283a 	ret

00008cb0 <xfputs_or_to_string>:
/*----------------------------------------------*/

int xfputs_or_to_string( /* Put a string to the specified device */
void (*func)(unsigned char), /* Pointer to the output function */
const char* str, /* Pointer to the string */
char** outstr) {
    8cb0:	defffb04 	addi	sp,sp,-20
    8cb4:	dcc00315 	stw	r19,12(sp)
    8cb8:	dc800215 	stw	r18,8(sp)
    8cbc:	dc400115 	stw	r17,4(sp)
    8cc0:	dc000015 	stw	r16,0(sp)
    8cc4:	dfc00415 	stw	ra,16(sp)
    8cc8:	2025883a 	mov	r18,r4
    8ccc:	2823883a 	mov	r17,r5
    8cd0:	3027883a 	mov	r19,r6
	int char_count = 0;
    8cd4:	0021883a 	mov	r16,zero
	while (*str) {
    8cd8:	89000007 	ldb	r4,0(r17)
    8cdc:	20000726 	beq	r4,zero,8cfc <xfputs_or_to_string+0x4c>
		char_count += xputc_for_xsprintf(*str, outstr, 0, func);
    8ce0:	900f883a 	mov	r7,r18
    8ce4:	000d883a 	mov	r6,zero
    8ce8:	980b883a 	mov	r5,r19
    8cec:	0008c0c0 	call	8c0c <xputc_for_xsprintf>
    8cf0:	80a1883a 	add	r16,r16,r2
		str++;
    8cf4:	8c400044 	addi	r17,r17,1
    8cf8:	003ff706 	br	8cd8 <_gp+0xffff5a7c>
	}
	return char_count;
}
    8cfc:	8005883a 	mov	r2,r16
    8d00:	dfc00417 	ldw	ra,16(sp)
    8d04:	dcc00317 	ldw	r19,12(sp)
    8d08:	dc800217 	ldw	r18,8(sp)
    8d0c:	dc400117 	ldw	r17,4(sp)
    8d10:	dc000017 	ldw	r16,0(sp)
    8d14:	dec00504 	addi	sp,sp,20
    8d18:	f800283a 	ret

00008d1c <xputs>:
int xputs( /* Put a string to the default device */
const char* str, /* Pointer to the string */
char** outstr) {
	return xfputs_or_to_string(xfunc_out, str, outstr);
    8d1c:	280d883a 	mov	r6,r5
    8d20:	200b883a 	mov	r5,r4
    8d24:	d120c017 	ldw	r4,-32000(gp)
    8d28:	0008cb01 	jmpi	8cb0 <xfputs_or_to_string>

00008d2c <xfputs>:

int xfputs( /* Put a string to the specified device */
void (*func)(unsigned char), /* Pointer to the output function */
const char* str /* Pointer to the string */
) {
	return xfputs_or_to_string(func, str, 0);
    8d2c:	000d883a 	mov	r6,zero
    8d30:	0008cb01 	jmpi	8cb0 <xfputs_or_to_string>

00008d34 <xvprintf>:

static
int xvprintf(void (*local_xfunc_out)(unsigned char), char** outstr,
		const char* fmt, /* Pointer to the format string */
		va_list arp /* Pointer to arguments */
		) {
    8d34:	deffed04 	addi	sp,sp,-76
    8d38:	df001115 	stw	fp,68(sp)
    8d3c:	dc800b15 	stw	r18,44(sp)
    8d40:	dc400a15 	stw	r17,40(sp)
    8d44:	dc000915 	stw	r16,36(sp)
    8d48:	dfc01215 	stw	ra,72(sp)
    8d4c:	ddc01015 	stw	r23,64(sp)
    8d50:	dd800f15 	stw	r22,60(sp)
    8d54:	dd400e15 	stw	r21,56(sp)
    8d58:	dd000d15 	stw	r20,52(sp)
    8d5c:	dcc00c15 	stw	r19,48(sp)
    8d60:	2021883a 	mov	r16,r4
    8d64:	2823883a 	mov	r17,r5
    8d68:	3825883a 	mov	r18,r7
	unsigned int r, i, j, w, f;
	unsigned long v;
	int charcnt = 0;
    8d6c:	0039883a 	mov	fp,zero
	char s[16], c, d, *p;

	for (;;) {
		c = *fmt++; /* Get a char */
		if (!c)
    8d70:	31000007 	ldb	r4,0(r6)
	unsigned long v;
	int charcnt = 0;
	char s[16], c, d, *p;

	for (;;) {
		c = *fmt++; /* Get a char */
    8d74:	35000044 	addi	r20,r6,1
		if (!c)
    8d78:	20010c26 	beq	r4,zero,91ac <xvprintf+0x478>
			break; /* End of format? */
		if (c != '%') { /* Pass through it if not a % sequense */
    8d7c:	00800944 	movi	r2,37
    8d80:	20808e1e 	bne	r4,r2,8fbc <xvprintf+0x288>
			xputc_and_count(c, outstr, charcnt, local_xfunc_out);
			continue;
		}
		f = 0;
		c = *fmt++; /* Get first char of the sequense */
    8d84:	30800043 	ldbu	r2,1(r6)
		if (c == '0') { /* Flag: '0' padded */
    8d88:	00c00c04 	movi	r3,48
    8d8c:	11003fcc 	andi	r4,r2,255
    8d90:	2100201c 	xori	r4,r4,128
    8d94:	213fe004 	addi	r4,r4,-128
    8d98:	20c0041e 	bne	r4,r3,8dac <xvprintf+0x78>
			f = 1;
			c = *fmt++;
    8d9c:	310000c4 	addi	r4,r6,3
    8da0:	30800083 	ldbu	r2,2(r6)
			continue;
		}
		f = 0;
		c = *fmt++; /* Get first char of the sequense */
		if (c == '0') { /* Flag: '0' padded */
			f = 1;
    8da4:	05c00044 	movi	r23,1
    8da8:	00000806 	br	8dcc <xvprintf+0x98>
			c = *fmt++;
		} else {
			if (c == '-') { /* Flag: left justified */
    8dac:	01400b44 	movi	r5,45
    8db0:	21400326 	beq	r4,r5,8dc0 <xvprintf+0x8c>
		if (c != '%') { /* Pass through it if not a % sequense */
			xputc_and_count(c, outstr, charcnt, local_xfunc_out);
			continue;
		}
		f = 0;
		c = *fmt++; /* Get first char of the sequense */
    8db4:	31000084 	addi	r4,r6,2
			break; /* End of format? */
		if (c != '%') { /* Pass through it if not a % sequense */
			xputc_and_count(c, outstr, charcnt, local_xfunc_out);
			continue;
		}
		f = 0;
    8db8:	002f883a 	mov	r23,zero
    8dbc:	00000306 	br	8dcc <xvprintf+0x98>
			f = 1;
			c = *fmt++;
		} else {
			if (c == '-') { /* Flag: left justified */
				f = 2;
				c = *fmt++;
    8dc0:	30800083 	ldbu	r2,2(r6)
    8dc4:	310000c4 	addi	r4,r6,3
		if (c == '0') { /* Flag: '0' padded */
			f = 1;
			c = *fmt++;
		} else {
			if (c == '-') { /* Flag: left justified */
				f = 2;
    8dc8:	05c00084 	movi	r23,2
				c = *fmt++;
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++) /* Minimum width */
    8dcc:	0027883a 	mov	r19,zero
    8dd0:	117ff404 	addi	r5,r2,-48
    8dd4:	29403fcc 	andi	r5,r5,255
    8dd8:	00c00244 	movi	r3,9
    8ddc:	2029883a 	mov	r20,r4
    8de0:	19400936 	bltu	r3,r5,8e08 <xvprintf+0xd4>
			w = w * 10 + c - '0';
    8de4:	9cc002a4 	muli	r19,r19,10
    8de8:	10803fcc 	andi	r2,r2,255
    8dec:	1080201c 	xori	r2,r2,128
    8df0:	10bfe004 	addi	r2,r2,-128
    8df4:	98a7883a 	add	r19,r19,r2
    8df8:	9cfff404 	addi	r19,r19,-48
			if (c == '-') { /* Flag: left justified */
				f = 2;
				c = *fmt++;
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++) /* Minimum width */
    8dfc:	20800003 	ldbu	r2,0(r4)
    8e00:	21000044 	addi	r4,r4,1
    8e04:	003ff206 	br	8dd0 <_gp+0xffff5b74>
			w = w * 10 + c - '0';
		if (c == 'l' || c == 'L') { /* Prefix: Size is long int */
    8e08:	00fff7c4 	movi	r3,-33
    8e0c:	10c8703a 	and	r4,r2,r3
    8e10:	21003fcc 	andi	r4,r4,255
    8e14:	2100201c 	xori	r4,r4,128
    8e18:	213fe004 	addi	r4,r4,-128
    8e1c:	01401304 	movi	r5,76
    8e20:	2140031e 	bne	r4,r5,8e30 <xvprintf+0xfc>
			f |= 4;
			c = *fmt++;
    8e24:	a0800003 	ldbu	r2,0(r20)
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++) /* Minimum width */
			w = w * 10 + c - '0';
		if (c == 'l' || c == 'L') { /* Prefix: Size is long int */
			f |= 4;
    8e28:	bdc00114 	ori	r23,r23,4
			c = *fmt++;
    8e2c:	a5000044 	addi	r20,r20,1
		}
		if (!c)
    8e30:	11003fcc 	andi	r4,r2,255
    8e34:	2100201c 	xori	r4,r4,128
    8e38:	213fe004 	addi	r4,r4,-128
    8e3c:	2000db26 	beq	r4,zero,91ac <xvprintf+0x478>
			break; /* End of format? */
		d = c;
		if (d >= 'a')
    8e40:	01401804 	movi	r5,96
    8e44:	2900010e 	bge	r5,r4,8e4c <xvprintf+0x118>
			d -= 0x20;
    8e48:	10bff804 	addi	r2,r2,-32
		switch (d) { /* Type is... */
    8e4c:	10803fcc 	andi	r2,r2,255
    8e50:	1080201c 	xori	r2,r2,128
    8e54:	10bfe004 	addi	r2,r2,-128
    8e58:	014013c4 	movi	r5,79
    8e5c:	11401326 	beq	r2,r5,8eac <xvprintf+0x178>
    8e60:	28800716 	blt	r5,r2,8e80 <xvprintf+0x14c>
    8e64:	014010c4 	movi	r5,67
    8e68:	11403f26 	beq	r2,r5,8f68 <xvprintf+0x234>
    8e6c:	01401104 	movi	r5,68
    8e70:	11405e26 	beq	r2,r5,8fec <xvprintf+0x2b8>
    8e74:	01401084 	movi	r5,66
    8e78:	11405a26 	beq	r2,r5,8fe4 <xvprintf+0x2b0>
    8e7c:	00004f06 	br	8fbc <xvprintf+0x288>
    8e80:	01401544 	movi	r5,85
    8e84:	11405926 	beq	r2,r5,8fec <xvprintf+0x2b8>
    8e88:	01401604 	movi	r5,88
    8e8c:	11404926 	beq	r2,r5,8fb4 <xvprintf+0x280>
    8e90:	014014c4 	movi	r5,83
    8e94:	1140491e 	bne	r2,r5,8fbc <xvprintf+0x288>
		case 'S': /* String */
			p = va_arg(arp, char*);
    8e98:	95400017 	ldw	r21,0(r18)
    8e9c:	90c00104 	addi	r3,r18,4
    8ea0:	d8c00415 	stw	r3,16(sp)
			for (j = 0; p[j]; j++)
    8ea4:	a805883a 	mov	r2,r21
    8ea8:	00000206 	br	8eb4 <xvprintf+0x180>
			continue;
		case 'B': /* Binary */
			r = 2;
			break;
		case 'O': /* Octal */
			r = 8;
    8eac:	02400204 	movi	r9,8
    8eb0:	00004f06 	br	8ff0 <xvprintf+0x2bc>
    8eb4:	156dc83a 	sub	r22,r2,r21
    8eb8:	10800044 	addi	r2,r2,1
		if (d >= 'a')
			d -= 0x20;
		switch (d) { /* Type is... */
		case 'S': /* String */
			p = va_arg(arp, char*);
			for (j = 0; p[j]; j++)
    8ebc:	113fffc7 	ldb	r4,-1(r2)
    8ec0:	203ffc1e 	bne	r4,zero,8eb4 <_gp+0xffff5c58>
				;
			while (!(f & 2) && j++ < w)
    8ec4:	bdc0008c 	andi	r23,r23,2
    8ec8:	b800101e 	bne	r23,zero,8f0c <xvprintf+0x1d8>
    8ecc:	b4800044 	addi	r18,r22,1
    8ed0:	b4c00d2e 	bgeu	r22,r19,8f08 <xvprintf+0x1d4>
				xputc_and_count(' ', outstr, charcnt, local_xfunc_out);
    8ed4:	88000626 	beq	r17,zero,8ef0 <xvprintf+0x1bc>
    8ed8:	800f883a 	mov	r7,r16
    8edc:	000d883a 	mov	r6,zero
    8ee0:	880b883a 	mov	r5,r17
    8ee4:	01000804 	movi	r4,32
    8ee8:	0008c0c0 	call	8c0c <xputc_for_xsprintf>
    8eec:	00000306 	br	8efc <xvprintf+0x1c8>
    8ef0:	800b883a 	mov	r5,r16
    8ef4:	01000804 	movi	r4,32
    8ef8:	0008b940 	call	8b94 <xputc>
    8efc:	e0b9883a 	add	fp,fp,r2
		switch (d) { /* Type is... */
		case 'S': /* String */
			p = va_arg(arp, char*);
			for (j = 0; p[j]; j++)
				;
			while (!(f & 2) && j++ < w)
    8f00:	902d883a 	mov	r22,r18
    8f04:	003ff106 	br	8ecc <_gp+0xffff5c70>
    8f08:	902d883a 	mov	r22,r18
				xputc_and_count(' ', outstr, charcnt, local_xfunc_out);
			charcnt += xfputs_or_to_string(local_xfunc_out, p, outstr);
    8f0c:	880d883a 	mov	r6,r17
    8f10:	a80b883a 	mov	r5,r21
    8f14:	8009883a 	mov	r4,r16
    8f18:	0008cb00 	call	8cb0 <xfputs_or_to_string>
    8f1c:	e0b9883a 	add	fp,fp,r2
			while (j++ < w)
    8f20:	b025883a 	mov	r18,r22
    8f24:	94c00d2e 	bgeu	r18,r19,8f5c <xvprintf+0x228>
				xputc_and_count(' ', outstr, charcnt, local_xfunc_out);
    8f28:	88000626 	beq	r17,zero,8f44 <xvprintf+0x210>
    8f2c:	800f883a 	mov	r7,r16
    8f30:	000d883a 	mov	r6,zero
    8f34:	880b883a 	mov	r5,r17
    8f38:	01000804 	movi	r4,32
    8f3c:	0008c0c0 	call	8c0c <xputc_for_xsprintf>
    8f40:	00000306 	br	8f50 <xvprintf+0x21c>
    8f44:	800b883a 	mov	r5,r16
    8f48:	01000804 	movi	r4,32
    8f4c:	0008b940 	call	8b94 <xputc>
    8f50:	e0b9883a 	add	fp,fp,r2
    8f54:	94800044 	addi	r18,r18,1
    8f58:	003ff206 	br	8f24 <_gp+0xffff5cc8>
		d = c;
		if (d >= 'a')
			d -= 0x20;
		switch (d) { /* Type is... */
		case 'S': /* String */
			p = va_arg(arp, char*);
    8f5c:	dc800417 	ldw	r18,16(sp)
			charcnt += xfputs_or_to_string(local_xfunc_out, p, outstr);
			while (j++ < w)
				xputc_and_count(' ', outstr, charcnt, local_xfunc_out);
			continue;
		case 'C': /* Character */
			xputc_and_count((char)va_arg(arp, int), outstr, charcnt,
    8f60:	a00d883a 	mov	r6,r20
    8f64:	003f8206 	br	8d70 <_gp+0xffff5b14>
    8f68:	94c00104 	addi	r19,r18,4
    8f6c:	91000017 	ldw	r4,0(r18)
    8f70:	88000826 	beq	r17,zero,8f94 <xvprintf+0x260>
    8f74:	21003fcc 	andi	r4,r4,255
    8f78:	2100201c 	xori	r4,r4,128
    8f7c:	800f883a 	mov	r7,r16
    8f80:	000d883a 	mov	r6,zero
    8f84:	880b883a 	mov	r5,r17
    8f88:	213fe004 	addi	r4,r4,-128
    8f8c:	0008c0c0 	call	8c0c <xputc_for_xsprintf>
    8f90:	00000506 	br	8fa8 <xvprintf+0x274>
    8f94:	21003fcc 	andi	r4,r4,255
    8f98:	2100201c 	xori	r4,r4,128
    8f9c:	800b883a 	mov	r5,r16
    8fa0:	213fe004 	addi	r4,r4,-128
    8fa4:	0008b940 	call	8b94 <xputc>
    8fa8:	e0b9883a 	add	fp,fp,r2
    8fac:	9825883a 	mov	r18,r19
    8fb0:	003feb06 	br	8f60 <_gp+0xffff5d04>
		case 'D': /* Signed decimal */
		case 'U': /* Unsigned decimal */
			r = 10;
			break;
		case 'X': /* Hexdecimal */
			r = 16;
    8fb4:	02400404 	movi	r9,16
			break;
    8fb8:	00000d06 	br	8ff0 <xvprintf+0x2bc>
		default: /* Unknown type (passthrough) */
			xputc_and_count(c, outstr, charcnt, local_xfunc_out);
    8fbc:	88000526 	beq	r17,zero,8fd4 <xvprintf+0x2a0>
    8fc0:	800f883a 	mov	r7,r16
    8fc4:	000d883a 	mov	r6,zero
    8fc8:	880b883a 	mov	r5,r17
    8fcc:	0008c0c0 	call	8c0c <xputc_for_xsprintf>
    8fd0:	00000206 	br	8fdc <xvprintf+0x2a8>
    8fd4:	800b883a 	mov	r5,r16
    8fd8:	0008b940 	call	8b94 <xputc>
    8fdc:	e0b9883a 	add	fp,fp,r2
    8fe0:	003fdf06 	br	8f60 <_gp+0xffff5d04>
		case 'C': /* Character */
			xputc_and_count((char)va_arg(arp, int), outstr, charcnt,
					local_xfunc_out);
			continue;
		case 'B': /* Binary */
			r = 2;
    8fe4:	02400084 	movi	r9,2
    8fe8:	00000106 	br	8ff0 <xvprintf+0x2bc>
		case 'O': /* Octal */
			r = 8;
			break;
		case 'D': /* Signed decimal */
		case 'U': /* Unsigned decimal */
			r = 10;
    8fec:	02400284 	movi	r9,10
    8ff0:	91400104 	addi	r5,r18,4
    8ff4:	01c01104 	movi	r7,68
			xputc_and_count(c, outstr, charcnt, local_xfunc_out);
			continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ?
    8ff8:	95400017 	ldw	r21,0(r18)
				va_arg(arp, long) :
    8ffc:	2825883a 	mov	r18,r5
			xputc_and_count(c, outstr, charcnt, local_xfunc_out);
			continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ?
    9000:	11c0031e 	bne	r2,r7,9010 <xvprintf+0x2dc>
				va_arg(arp, long) :
				((d == 'D') ?
						(long) va_arg(arp, int) :
						(long) va_arg(arp, unsigned int));
		if (d == 'D' && (v & 0x80000000)) {
    9004:	a800020e 	bge	r21,zero,9010 <xvprintf+0x2dc>
			v = 0 - v;
    9008:	056bc83a 	sub	r21,zero,r21
			f |= 8;
    900c:	bdc00214 	ori	r23,r23,8
    9010:	00801e04 	movi	r2,120
    9014:	2080021e 	bne	r4,r2,9020 <xvprintf+0x2ec>
    9018:	028009c4 	movi	r10,39
    901c:	00000106 	br	9024 <xvprintf+0x2f0>
    9020:	028001c4 	movi	r10,7
			xputc_and_count(c, outstr, charcnt, local_xfunc_out);
			continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ?
    9024:	002d883a 	mov	r22,zero
			d = (char) (v % r);
			v /= r;
			if (d > 9)
				d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof(s));
    9028:	02c00404 	movi	r11,16
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (char) (v % r);
    902c:	480b883a 	mov	r5,r9
    9030:	a809883a 	mov	r4,r21
    9034:	da800715 	stw	r10,28(sp)
    9038:	dac00815 	stw	r11,32(sp)
    903c:	da400615 	stw	r9,24(sp)
    9040:	00097300 	call	9730 <__umodsi3>
			v /= r;
    9044:	da400617 	ldw	r9,24(sp)
    9048:	a809883a 	mov	r4,r21
    904c:	d8800515 	stw	r2,20(sp)
    9050:	480b883a 	mov	r5,r9
    9054:	00096cc0 	call	96cc <__udivsi3>
			if (d > 9)
    9058:	d9800517 	ldw	r6,20(sp)
			f |= 8;
		}
		i = 0;
		do {
			d = (char) (v % r);
			v /= r;
    905c:	102b883a 	mov	r21,r2
			if (d > 9)
    9060:	00800244 	movi	r2,9
    9064:	da400617 	ldw	r9,24(sp)
    9068:	da800717 	ldw	r10,28(sp)
    906c:	dac00817 	ldw	r11,32(sp)
    9070:	1180012e 	bgeu	r2,r6,9078 <xvprintf+0x344>
				d += (c == 'x') ? 0x27 : 0x07;
    9074:	328d883a 	add	r6,r6,r10
			s[i++] = d + '0';
    9078:	dd85883a 	add	r2,sp,r22
    907c:	31800c04 	addi	r6,r6,48
    9080:	11800005 	stb	r6,0(r2)
    9084:	b2000044 	addi	r8,r22,1
		} while (v && i < sizeof(s));
    9088:	a8000426 	beq	r21,zero,909c <xvprintf+0x368>
    908c:	42c00226 	beq	r8,r11,9098 <xvprintf+0x364>
    9090:	402d883a 	mov	r22,r8
    9094:	003fe506 	br	902c <_gp+0xffff5dd0>
    9098:	058003c4 	movi	r22,15
		if (f & 8)
    909c:	b880020c 	andi	r2,r23,8
    90a0:	10000426 	beq	r2,zero,90b4 <xvprintf+0x380>
			s[i++] = '-';
    90a4:	da11883a 	add	r8,sp,r8
    90a8:	00800b44 	movi	r2,45
    90ac:	40800005 	stb	r2,0(r8)
    90b0:	b2000084 	addi	r8,r22,2
		j = i;
		d = (f & 1) ? '0' : ' ';
    90b4:	b880004c 	andi	r2,r23,1
    90b8:	1000021e 	bne	r2,zero,90c4 <xvprintf+0x390>
    90bc:	05400804 	movi	r21,32
    90c0:	00000106 	br	90c8 <xvprintf+0x394>
    90c4:	05400c04 	movi	r21,48
    90c8:	ad403fcc 	andi	r21,r21,255
    90cc:	ad40201c 	xori	r21,r21,128
		while (!(f & 2) && j++ < w)
    90d0:	bdc0008c 	andi	r23,r23,2
				d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof(s));
		if (f & 8)
			s[i++] = '-';
		j = i;
    90d4:	402d883a 	mov	r22,r8
    90d8:	ad7fe004 	addi	r21,r21,-128
		d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w)
    90dc:	b800131e 	bne	r23,zero,912c <xvprintf+0x3f8>
    90e0:	b5c00044 	addi	r23,r22,1
    90e4:	b4c0102e 	bgeu	r22,r19,9128 <xvprintf+0x3f4>
			xputc_and_count(d, outstr, charcnt, local_xfunc_out);
    90e8:	88000726 	beq	r17,zero,9108 <xvprintf+0x3d4>
    90ec:	800f883a 	mov	r7,r16
    90f0:	000d883a 	mov	r6,zero
    90f4:	880b883a 	mov	r5,r17
    90f8:	a809883a 	mov	r4,r21
    90fc:	da000515 	stw	r8,20(sp)
    9100:	0008c0c0 	call	8c0c <xputc_for_xsprintf>
    9104:	00000406 	br	9118 <xvprintf+0x3e4>
    9108:	800b883a 	mov	r5,r16
    910c:	a809883a 	mov	r4,r21
    9110:	da000515 	stw	r8,20(sp)
    9114:	0008b940 	call	8b94 <xputc>
    9118:	e0b9883a 	add	fp,fp,r2
    911c:	da000517 	ldw	r8,20(sp)
		} while (v && i < sizeof(s));
		if (f & 8)
			s[i++] = '-';
		j = i;
		d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w)
    9120:	b82d883a 	mov	r22,r23
    9124:	003fee06 	br	90e0 <_gp+0xffff5e84>
    9128:	b82d883a 	mov	r22,r23
    912c:	457fffc4 	addi	r21,r8,-1
    9130:	dd45883a 	add	r2,sp,r21
			xputc_and_count(d, outstr, charcnt, local_xfunc_out);
		do
			xputc_and_count(s[--i], outstr, charcnt, local_xfunc_out); while (i);
    9134:	88000626 	beq	r17,zero,9150 <xvprintf+0x41c>
    9138:	11000007 	ldb	r4,0(r2)
    913c:	800f883a 	mov	r7,r16
    9140:	000d883a 	mov	r6,zero
    9144:	880b883a 	mov	r5,r17
    9148:	0008c0c0 	call	8c0c <xputc_for_xsprintf>
    914c:	00000306 	br	915c <xvprintf+0x428>
    9150:	11000007 	ldb	r4,0(r2)
    9154:	800b883a 	mov	r5,r16
    9158:	0008b940 	call	8b94 <xputc>
    915c:	e0b9883a 	add	fp,fp,r2
    9160:	a8bfffc4 	addi	r2,r21,-1
    9164:	a8000226 	beq	r21,zero,9170 <xvprintf+0x43c>
    9168:	102b883a 	mov	r21,r2
    916c:	003ff006 	br	9130 <_gp+0xffff5ed4>
    9170:	b02b883a 	mov	r21,r22
		while (j++ < w)
    9174:	acff7a2e 	bgeu	r21,r19,8f60 <_gp+0xffff5d04>
			xputc_and_count(' ', outstr, charcnt, local_xfunc_out);
    9178:	88000626 	beq	r17,zero,9194 <xvprintf+0x460>
    917c:	800f883a 	mov	r7,r16
    9180:	000d883a 	mov	r6,zero
    9184:	880b883a 	mov	r5,r17
    9188:	01000804 	movi	r4,32
    918c:	0008c0c0 	call	8c0c <xputc_for_xsprintf>
    9190:	00000306 	br	91a0 <xvprintf+0x46c>
    9194:	800b883a 	mov	r5,r16
    9198:	01000804 	movi	r4,32
    919c:	0008b940 	call	8b94 <xputc>
    91a0:	e0b9883a 	add	fp,fp,r2
    91a4:	ad400044 	addi	r21,r21,1
    91a8:	003ff206 	br	9174 <_gp+0xffff5f18>
	}
	return charcnt;
}
    91ac:	e005883a 	mov	r2,fp
    91b0:	dfc01217 	ldw	ra,72(sp)
    91b4:	df001117 	ldw	fp,68(sp)
    91b8:	ddc01017 	ldw	r23,64(sp)
    91bc:	dd800f17 	ldw	r22,60(sp)
    91c0:	dd400e17 	ldw	r21,56(sp)
    91c4:	dd000d17 	ldw	r20,52(sp)
    91c8:	dcc00c17 	ldw	r19,48(sp)
    91cc:	dc800b17 	ldw	r18,44(sp)
    91d0:	dc400a17 	ldw	r17,40(sp)
    91d4:	dc000917 	ldw	r16,36(sp)
    91d8:	dec01304 	addi	sp,sp,76
    91dc:	f800283a 	ret

000091e0 <xprintf>:

int xprintf( /* Put a formatted string to the default device */
const char* fmt, /* Pointer to the format string */
... /* Optional arguments */
) {
    91e0:	defffc04 	addi	sp,sp,-16
    91e4:	dfc00015 	stw	ra,0(sp)
    91e8:	d9400115 	stw	r5,4(sp)
    91ec:	d9800215 	stw	r6,8(sp)
    91f0:	d9c00315 	stw	r7,12(sp)
	int charcnt;
	va_list arp;

	va_start(arp, fmt);
	charcnt = xvprintf(xfunc_out, 0, fmt, arp);
    91f4:	200d883a 	mov	r6,r4
    91f8:	d120c017 	ldw	r4,-32000(gp)
    91fc:	d9c00104 	addi	r7,sp,4
    9200:	000b883a 	mov	r5,zero
    9204:	0008d340 	call	8d34 <xvprintf>
	va_end(arp);
	return charcnt;
}
    9208:	dfc00017 	ldw	ra,0(sp)
    920c:	dec00404 	addi	sp,sp,16
    9210:	f800283a 	ret

00009214 <xsprintf>:

int xsprintf( /* Put a formatted string to the memory */
char* buff, /* Pointer to the output buffer */
const char* fmt, /* Pointer to the format string */
... /* Optional arguments */
) {
    9214:	defffc04 	addi	sp,sp,-16
    9218:	dfc00115 	stw	ra,4(sp)
    921c:	d9800215 	stw	r6,8(sp)
    9220:	d9c00315 	stw	r7,12(sp)
	int charcnt;
	va_list arp;

	char *outstr;
	outstr = buff; /* Switch destination for memory */
    9224:	d9000015 	stw	r4,0(sp)

	va_start(arp, fmt);
	charcnt = xvprintf(xfunc_out, &outstr, fmt, arp);
    9228:	d120c017 	ldw	r4,-32000(gp)
    922c:	280d883a 	mov	r6,r5
    9230:	d9c00204 	addi	r7,sp,8
    9234:	d80b883a 	mov	r5,sp
    9238:	0008d340 	call	8d34 <xvprintf>
	va_end(arp);

	*outstr = 0; /* Terminate output string with a \0 */
    923c:	d8c00017 	ldw	r3,0(sp)
    9240:	18000005 	stb	zero,0(r3)
	return charcnt;

}
    9244:	dfc00117 	ldw	ra,4(sp)
    9248:	dec00404 	addi	sp,sp,16
    924c:	f800283a 	ret

00009250 <xfprintf>:

int xfprintf( /* Put a formatted string to the specified device */
void (*func)(unsigned char), /* Pointer to the output function */
const char* fmt, /* Pointer to the format string */
... /* Optional arguments */
) {
    9250:	defffd04 	addi	sp,sp,-12
    9254:	dfc00015 	stw	ra,0(sp)
    9258:	d9800115 	stw	r6,4(sp)
    925c:	d9c00215 	stw	r7,8(sp)
	int charcnt;
	va_list arp;

	va_start(arp, fmt);
	charcnt = xvprintf(func, 0, fmt, arp);
    9260:	280d883a 	mov	r6,r5
    9264:	d9c00104 	addi	r7,sp,4
    9268:	000b883a 	mov	r5,zero
    926c:	0008d340 	call	8d34 <xvprintf>
	va_end(arp);

	return charcnt;
}
    9270:	dfc00017 	ldw	ra,0(sp)
    9274:	dec00304 	addi	sp,sp,12
    9278:	f800283a 	ret

0000927c <put_dump>:

void put_dump(const void* buff, /* Pointer to the array to be dumped */
unsigned long addr, /* Heading address value */
int len, /* Number of items to be dumped */
int width /* Size of the items (DF_CHAR, DF_SHORT, DF_LONG) */
) {
    927c:	defffb04 	addi	sp,sp,-20
    9280:	dc000015 	stw	r16,0(sp)
    9284:	2021883a 	mov	r16,r4
	int i;
	const unsigned char *bp;
	const unsigned short *sp;
	const unsigned long *lp;

	xprintf("%08lX ", addr); /* address */
    9288:	01000074 	movhi	r4,1
    928c:	212b4904 	addi	r4,r4,-21212

void put_dump(const void* buff, /* Pointer to the array to be dumped */
unsigned long addr, /* Heading address value */
int len, /* Number of items to be dumped */
int width /* Size of the items (DF_CHAR, DF_SHORT, DF_LONG) */
) {
    9290:	dc800215 	stw	r18,8(sp)
    9294:	dc400115 	stw	r17,4(sp)
    9298:	dfc00415 	stw	ra,16(sp)
    929c:	dcc00315 	stw	r19,12(sp)
    92a0:	3025883a 	mov	r18,r6
    92a4:	3823883a 	mov	r17,r7
	int i;
	const unsigned char *bp;
	const unsigned short *sp;
	const unsigned long *lp;

	xprintf("%08lX ", addr); /* address */
    92a8:	00091e00 	call	91e0 <xprintf>

	switch (width) {
    92ac:	00800084 	movi	r2,2
    92b0:	88801f26 	beq	r17,r2,9330 <put_dump+0xb4>
    92b4:	00800104 	movi	r2,4
    92b8:	88802526 	beq	r17,r2,9350 <put_dump+0xd4>
    92bc:	00800044 	movi	r2,1
    92c0:	88802a1e 	bne	r17,r2,936c <put_dump+0xf0>
    92c4:	8023883a 	mov	r17,r16
	case DW_CHAR:
		bp = buff;
		for (i = 0; i < len; i++) /* Hexdecimal dump */
    92c8:	8c05c83a 	sub	r2,r17,r16
    92cc:	1480060e 	bge	r2,r18,92e8 <put_dump+0x6c>
			xprintf(" %02X", bp[i]);
    92d0:	89400003 	ldbu	r5,0(r17)
    92d4:	01000074 	movhi	r4,1
    92d8:	212b4b04 	addi	r4,r4,-21204
    92dc:	00091e00 	call	91e0 <xprintf>
    92e0:	8c400044 	addi	r17,r17,1
    92e4:	003ff806 	br	92c8 <_gp+0xffff606c>
		xputc(' ', xfunc_out);
    92e8:	d160c017 	ldw	r5,-32000(gp)
    92ec:	01000804 	movi	r4,32
		for (i = 0; i < len; i++) /* ASCII dump */
    92f0:	8023883a 	mov	r17,r16
	switch (width) {
	case DW_CHAR:
		bp = buff;
		for (i = 0; i < len; i++) /* Hexdecimal dump */
			xprintf(" %02X", bp[i]);
		xputc(' ', xfunc_out);
    92f4:	0008b940 	call	8b94 <xputc>
		for (i = 0; i < len; i++) /* ASCII dump */
			xputc((bp[i] >= ' ' && bp[i] <= '~') ? bp[i] : '.', xfunc_out);
    92f8:	04c01784 	movi	r19,94
	case DW_CHAR:
		bp = buff;
		for (i = 0; i < len; i++) /* Hexdecimal dump */
			xprintf(" %02X", bp[i]);
		xputc(' ', xfunc_out);
		for (i = 0; i < len; i++) /* ASCII dump */
    92fc:	8c05c83a 	sub	r2,r17,r16
    9300:	14801a0e 	bge	r2,r18,936c <put_dump+0xf0>
			xputc((bp[i] >= ' ' && bp[i] <= '~') ? bp[i] : '.', xfunc_out);
    9304:	89000003 	ldbu	r4,0(r17)
    9308:	20bff804 	addi	r2,r4,-32
    930c:	10803fcc 	andi	r2,r2,255
    9310:	98800236 	bltu	r19,r2,931c <put_dump+0xa0>
    9314:	21003fcc 	andi	r4,r4,255
    9318:	00000106 	br	9320 <put_dump+0xa4>
    931c:	01000b84 	movi	r4,46
    9320:	d160c017 	ldw	r5,-32000(gp)
    9324:	8c400044 	addi	r17,r17,1
    9328:	0008b940 	call	8b94 <xputc>
    932c:	003ff306 	br	92fc <_gp+0xffff60a0>
		break;
	case DW_SHORT:
		sp = buff;
		do /* Hexdecimal dump */
			xprintf(" %04X", *sp++);
    9330:	8140000b 	ldhu	r5,0(r16)
    9334:	01000074 	movhi	r4,1
    9338:	212b4d04 	addi	r4,r4,-21196
		while (--len);
    933c:	94bfffc4 	addi	r18,r18,-1
			xputc((bp[i] >= ' ' && bp[i] <= '~') ? bp[i] : '.', xfunc_out);
		break;
	case DW_SHORT:
		sp = buff;
		do /* Hexdecimal dump */
			xprintf(" %04X", *sp++);
    9340:	00091e00 	call	91e0 <xprintf>
    9344:	84000084 	addi	r16,r16,2
		while (--len);
    9348:	903ff91e 	bne	r18,zero,9330 <_gp+0xffff60d4>
    934c:	00000706 	br	936c <put_dump+0xf0>
		break;
	case DW_LONG:
		lp = buff;
		do /* Hexdecimal dump */
			xprintf(" %08LX", *lp++);
    9350:	81400017 	ldw	r5,0(r16)
    9354:	01000074 	movhi	r4,1
    9358:	212b4f04 	addi	r4,r4,-21188
		while (--len);
    935c:	94bfffc4 	addi	r18,r18,-1
		while (--len);
		break;
	case DW_LONG:
		lp = buff;
		do /* Hexdecimal dump */
			xprintf(" %08LX", *lp++);
    9360:	00091e00 	call	91e0 <xprintf>
    9364:	84000104 	addi	r16,r16,4
		while (--len);
    9368:	903ff91e 	bne	r18,zero,9350 <_gp+0xffff60f4>
		break;
	}

	xputc('\n', xfunc_out);
    936c:	d160c017 	ldw	r5,-32000(gp)
    9370:	01000284 	movi	r4,10
}
    9374:	dfc00417 	ldw	ra,16(sp)
    9378:	dcc00317 	ldw	r19,12(sp)
    937c:	dc800217 	ldw	r18,8(sp)
    9380:	dc400117 	ldw	r17,4(sp)
    9384:	dc000017 	ldw	r16,0(sp)
    9388:	dec00504 	addi	sp,sp,20
			xprintf(" %08LX", *lp++);
		while (--len);
		break;
	}

	xputc('\n', xfunc_out);
    938c:	0008b941 	jmpi	8b94 <xputc>

00009390 <xfgets>:
void (*local_xfunc_out)(unsigned char), char* buff, /* Pointer to the buffer */
int len /* Buffer length */
) {
	int c, i;

	if (!local_xfunc_in)
    9390:	20002f26 	beq	r4,zero,9450 <xfgets+0xc0>

int xfgets( /* 0:End of stream, 1:A line arrived */
unsigned char (*local_xfunc_in)(void), /* Pointer to the input stream function */
void (*local_xfunc_out)(unsigned char), char* buff, /* Pointer to the buffer */
int len /* Buffer length */
) {
    9394:	defff804 	addi	sp,sp,-32
    9398:	dd800615 	stw	r22,24(sp)
    939c:	dd400515 	stw	r21,20(sp)
    93a0:	dd000415 	stw	r20,16(sp)
    93a4:	dcc00315 	stw	r19,12(sp)
    93a8:	dc800215 	stw	r18,8(sp)
    93ac:	dc400115 	stw	r17,4(sp)
    93b0:	dc000015 	stw	r16,0(sp)
    93b4:	dfc00715 	stw	ra,28(sp)
    93b8:	3025883a 	mov	r18,r6
    93bc:	2027883a 	mov	r19,r4
    93c0:	0021883a 	mov	r16,zero
	i = 0;
	for (;;) {
		c = local_xfunc_in(); /* Get a char from the incoming stream */
		if (!c)
			return 0; /* End of stream? */
		if ((c == '\r') && !(IGNORE_CARRIAGE_RETURN_ON_INPUT))
    93c4:	05000344 	movi	r20,13
			break; /* End of line? */
		if (c == '\n')
    93c8:	05400284 	movi	r21,10
			break; /* End of line? */
		if (c == '\b' && i) { /* Back space? */
    93cc:	05800204 	movi	r22,8
			i--;
			if (_LINE_ECHO)
				xputc(c, local_xfunc_out);
			continue;
		}
		if (c >= ' ' && i < len - 1) { /* Visible chars */
    93d0:	3c7fffc4 	addi	r17,r7,-1
	if (!local_xfunc_in)
		return 0; /* No input function specified */

	i = 0;
	for (;;) {
		c = local_xfunc_in(); /* Get a char from the incoming stream */
    93d4:	983ee83a 	callr	r19
    93d8:	10c03fcc 	andi	r3,r2,255
		if (!c)
    93dc:	1800021e 	bne	r3,zero,93e8 <xfgets+0x58>
int len /* Buffer length */
) {
	int c, i;

	if (!local_xfunc_in)
		return 0; /* No input function specified */
    93e0:	0005883a 	mov	r2,zero
    93e4:	00001006 	br	9428 <xfgets+0x98>
	i = 0;
	for (;;) {
		c = local_xfunc_in(); /* Get a char from the incoming stream */
		if (!c)
			return 0; /* End of stream? */
		if ((c == '\r') && !(IGNORE_CARRIAGE_RETURN_ON_INPUT))
    93e8:	1d000c26 	beq	r3,r20,941c <xfgets+0x8c>
			break; /* End of line? */
		if (c == '\n')
    93ec:	1d400b26 	beq	r3,r21,941c <xfgets+0x8c>
			break; /* End of line? */
		if (c == '\b' && i) { /* Back space? */
    93f0:	1d80031e 	bne	r3,r22,9400 <xfgets+0x70>
    93f4:	803ff726 	beq	r16,zero,93d4 <_gp+0xffff6178>
			i--;
    93f8:	843fffc4 	addi	r16,r16,-1
			if (_LINE_ECHO)
				xputc(c, local_xfunc_out);
			continue;
    93fc:	003ff506 	br	93d4 <_gp+0xffff6178>
		}
		if (c >= ' ' && i < len - 1) { /* Visible chars */
    9400:	010007c4 	movi	r4,31
    9404:	20fff30e 	bge	r4,r3,93d4 <_gp+0xffff6178>
    9408:	847ff20e 	bge	r16,r17,93d4 <_gp+0xffff6178>
			buff[i++] = c;
    940c:	9407883a 	add	r3,r18,r16
    9410:	18800005 	stb	r2,0(r3)
    9414:	84000044 	addi	r16,r16,1
    9418:	003fee06 	br	93d4 <_gp+0xffff6178>
			if (_LINE_ECHO)
				xputc(c, local_xfunc_out);
		}
	}
	buff[i] = 0; /* Terminate with a \0 */
    941c:	9421883a 	add	r16,r18,r16
    9420:	80000005 	stb	zero,0(r16)
	if (_LINE_ECHO)
		xputc('\n', local_xfunc_out);
	return 1;
    9424:	00800044 	movi	r2,1
}
    9428:	dfc00717 	ldw	ra,28(sp)
    942c:	dd800617 	ldw	r22,24(sp)
    9430:	dd400517 	ldw	r21,20(sp)
    9434:	dd000417 	ldw	r20,16(sp)
    9438:	dcc00317 	ldw	r19,12(sp)
    943c:	dc800217 	ldw	r18,8(sp)
    9440:	dc400117 	ldw	r17,4(sp)
    9444:	dc000017 	ldw	r16,0(sp)
    9448:	dec00804 	addi	sp,sp,32
    944c:	f800283a 	ret
int len /* Buffer length */
) {
	int c, i;

	if (!local_xfunc_in)
		return 0; /* No input function specified */
    9450:	0005883a 	mov	r2,zero
	}
	buff[i] = 0; /* Terminate with a \0 */
	if (_LINE_ECHO)
		xputc('\n', local_xfunc_out);
	return 1;
}
    9454:	f800283a 	ret

00009458 <xgets>:

int xgets( /* 0:End of stream, 1:A line arrived */
char* buff, /* Pointer to the buffer */
int len /* Buffer length */
) {
	return xfgets(xfunc_in, xfunc_out, buff, len);
    9458:	280f883a 	mov	r7,r5
    945c:	200d883a 	mov	r6,r4
    9460:	d160c017 	ldw	r5,-32000(gp)
    9464:	d120bf17 	ldw	r4,-32004(gp)
    9468:	00093901 	jmpi	9390 <xfgets>

0000946c <xatoi>:
long *res /* Pointer to the valiable to store the value */
) {
	unsigned long val;
	unsigned char c, r, s = 0;

	*res = 0;
    946c:	28000015 	stw	zero,0(r5)

	while ((c = **str) == ' ')
    9470:	01c00804 	movi	r7,32
    9474:	20c00017 	ldw	r3,0(r4)
    9478:	18800003 	ldbu	r2,0(r3)
    947c:	11803fcc 	andi	r6,r2,255
    9480:	31c0031e 	bne	r6,r7,9490 <xatoi+0x24>
		(*str)++; /* Skip leading spaces */
    9484:	18c00044 	addi	r3,r3,1
    9488:	20c00015 	stw	r3,0(r4)
    948c:	003ff906 	br	9474 <_gp+0xffff6218>

	if (c == '-') { /* negative? */
    9490:	01c00b44 	movi	r7,45
    9494:	31c0051e 	bne	r6,r7,94ac <xatoi+0x40>
		s = 1;
		c = *(++(*str));
    9498:	18800044 	addi	r2,r3,1
    949c:	20800015 	stw	r2,0(r4)
    94a0:	18800043 	ldbu	r2,1(r3)

	while ((c = **str) == ' ')
		(*str)++; /* Skip leading spaces */

	if (c == '-') { /* negative? */
		s = 1;
    94a4:	02400044 	movi	r9,1
    94a8:	00000106 	br	94b0 <xatoi+0x44>
int xatoi( /* 0:Failed, 1:Successful */
char **str, /* Pointer to pointer to the string */
long *res /* Pointer to the valiable to store the value */
) {
	unsigned long val;
	unsigned char c, r, s = 0;
    94ac:	0013883a 	mov	r9,zero
	if (c == '-') { /* negative? */
		s = 1;
		c = *(++(*str));
	}

	if (c == '0') {
    94b0:	10c03fcc 	andi	r3,r2,255
    94b4:	01800c04 	movi	r6,48
    94b8:	19801e1e 	bne	r3,r6,9534 <xatoi+0xc8>
		c = *(++(*str));
    94bc:	20c00017 	ldw	r3,0(r4)
		switch (c) {
    94c0:	01c01884 	movi	r7,98
		s = 1;
		c = *(++(*str));
	}

	if (c == '0') {
		c = *(++(*str));
    94c4:	18800044 	addi	r2,r3,1
    94c8:	20800015 	stw	r2,0(r4)
    94cc:	18800043 	ldbu	r2,1(r3)
		switch (c) {
    94d0:	11803fcc 	andi	r6,r2,255
    94d4:	3180201c 	xori	r6,r6,128
    94d8:	31bfe004 	addi	r6,r6,-128
    94dc:	31c00726 	beq	r6,r7,94fc <xatoi+0x90>
    94e0:	01c01e04 	movi	r7,120
    94e4:	31c00a1e 	bne	r6,r7,9510 <xatoi+0xa4>
		case 'x': /* hexdecimal */
			r = 16;
			c = *(++(*str));
    94e8:	18800084 	addi	r2,r3,2
    94ec:	20800015 	stw	r2,0(r4)
    94f0:	18800083 	ldbu	r2,2(r3)

	if (c == '0') {
		c = *(++(*str));
		switch (c) {
		case 'x': /* hexdecimal */
			r = 16;
    94f4:	01800404 	movi	r6,16
			c = *(++(*str));
			break;
    94f8:	00001506 	br	9550 <xatoi+0xe4>
		case 'b': /* binary */
			r = 2;
			c = *(++(*str));
    94fc:	18800084 	addi	r2,r3,2
    9500:	20800015 	stw	r2,0(r4)
    9504:	18800083 	ldbu	r2,2(r3)
		case 'x': /* hexdecimal */
			r = 16;
			c = *(++(*str));
			break;
		case 'b': /* binary */
			r = 2;
    9508:	01800084 	movi	r6,2
			c = *(++(*str));
			break;
    950c:	00001006 	br	9550 <xatoi+0xe4>
		default:
			if (c <= ' ')
    9510:	10c03fcc 	andi	r3,r2,255
    9514:	01800804 	movi	r6,32
    9518:	30c02c2e 	bgeu	r6,r3,95cc <xatoi+0x160>
				return 1; /* single zero */
			if (c < '0' || c > '9')
    951c:	10fff404 	addi	r3,r2,-48
    9520:	18c03fcc 	andi	r3,r3,255
    9524:	01800244 	movi	r6,9
    9528:	30c0082e 	bgeu	r6,r3,954c <xatoi+0xe0>
				return 0; /* invalid char */
    952c:	0005883a 	mov	r2,zero
    9530:	f800283a 	ret
			r = 8; /* octal */
		}
	} else {
		if (c < '0' || c > '9')
    9534:	10fff404 	addi	r3,r2,-48
    9538:	18c03fcc 	andi	r3,r3,255
    953c:	01800244 	movi	r6,9
    9540:	30fffa36 	bltu	r6,r3,952c <_gp+0xffff62d0>
			return 0; /* EOL or invalid char */
		r = 10; /* decimal */
    9544:	01800284 	movi	r6,10
    9548:	00000106 	br	9550 <xatoi+0xe4>
		default:
			if (c <= ' ')
				return 1; /* single zero */
			if (c < '0' || c > '9')
				return 0; /* invalid char */
			r = 8; /* octal */
    954c:	01800204 	movi	r6,8
		if (c < '0' || c > '9')
			return 0; /* EOL or invalid char */
		r = 10; /* decimal */
	}

	val = 0;
    9550:	0007883a 	mov	r3,zero
	while (c > ' ') {
    9554:	02800804 	movi	r10,32
		if (c >= 'a')
    9558:	02c01804 	movi	r11,96
			c -= 0x20;
		c -= '0';
		if (c >= 17) {
    955c:	03000404 	movi	r12,16
			c -= 7;
			if (c <= 9)
    9560:	03400244 	movi	r13,9
				return 0; /* invalid char */
		}
		if (c >= r)
    9564:	31803fcc 	andi	r6,r6,255
			return 0; /* EOL or invalid char */
		r = 10; /* decimal */
	}

	val = 0;
	while (c > ' ') {
    9568:	11c03fcc 	andi	r7,r2,255
    956c:	51c0132e 	bgeu	r10,r7,95bc <xatoi+0x150>
		if (c >= 'a')
    9570:	59c0012e 	bgeu	r11,r7,9578 <xatoi+0x10c>
			c -= 0x20;
    9574:	10bff804 	addi	r2,r2,-32
		c -= '0';
    9578:	123ff404 	addi	r8,r2,-48
    957c:	400f883a 	mov	r7,r8
		if (c >= 17) {
    9580:	42003fcc 	andi	r8,r8,255
    9584:	6200042e 	bgeu	r12,r8,9598 <xatoi+0x12c>
			c -= 7;
    9588:	10bff244 	addi	r2,r2,-55
    958c:	100f883a 	mov	r7,r2
			if (c <= 9)
    9590:	10803fcc 	andi	r2,r2,255
    9594:	68bfe52e 	bgeu	r13,r2,952c <_gp+0xffff62d0>
				return 0; /* invalid char */
		}
		if (c >= r)
    9598:	38803fcc 	andi	r2,r7,255
    959c:	11bfe32e 	bgeu	r2,r6,952c <_gp+0xffff62d0>
			return 0; /* invalid char for current radix */
		val = val * r + c;
		c = *(++(*str));
    95a0:	21c00017 	ldw	r7,0(r4)
			if (c <= 9)
				return 0; /* invalid char */
		}
		if (c >= r)
			return 0; /* invalid char for current radix */
		val = val * r + c;
    95a4:	30c7383a 	mul	r3,r6,r3
    95a8:	10c7883a 	add	r3,r2,r3
		c = *(++(*str));
    95ac:	38800044 	addi	r2,r7,1
    95b0:	20800015 	stw	r2,0(r4)
    95b4:	38800043 	ldbu	r2,1(r7)
    95b8:	003feb06 	br	9568 <_gp+0xffff630c>
	}
	if (s)
    95bc:	48803fcc 	andi	r2,r9,255
    95c0:	10000126 	beq	r2,zero,95c8 <xatoi+0x15c>
		val = 0 - val; /* apply sign if needed */
    95c4:	00c7c83a 	sub	r3,zero,r3

	*res = val;
    95c8:	28c00015 	stw	r3,0(r5)
			r = 2;
			c = *(++(*str));
			break;
		default:
			if (c <= ' ')
				return 1; /* single zero */
    95cc:	00800044 	movi	r2,1
	if (s)
		val = 0 - val; /* apply sign if needed */

	*res = val;
	return 1;
}
    95d0:	f800283a 	ret

000095d4 <__divsi3>:
    95d4:	20001b16 	blt	r4,zero,9644 <__divsi3+0x70>
    95d8:	000f883a 	mov	r7,zero
    95dc:	28001616 	blt	r5,zero,9638 <__divsi3+0x64>
    95e0:	200d883a 	mov	r6,r4
    95e4:	29001a2e 	bgeu	r5,r4,9650 <__divsi3+0x7c>
    95e8:	00800804 	movi	r2,32
    95ec:	00c00044 	movi	r3,1
    95f0:	00000106 	br	95f8 <__divsi3+0x24>
    95f4:	10000d26 	beq	r2,zero,962c <__divsi3+0x58>
    95f8:	294b883a 	add	r5,r5,r5
    95fc:	10bfffc4 	addi	r2,r2,-1
    9600:	18c7883a 	add	r3,r3,r3
    9604:	293ffb36 	bltu	r5,r4,95f4 <_gp+0xffff6398>
    9608:	0005883a 	mov	r2,zero
    960c:	18000726 	beq	r3,zero,962c <__divsi3+0x58>
    9610:	0005883a 	mov	r2,zero
    9614:	31400236 	bltu	r6,r5,9620 <__divsi3+0x4c>
    9618:	314dc83a 	sub	r6,r6,r5
    961c:	10c4b03a 	or	r2,r2,r3
    9620:	1806d07a 	srli	r3,r3,1
    9624:	280ad07a 	srli	r5,r5,1
    9628:	183ffa1e 	bne	r3,zero,9614 <_gp+0xffff63b8>
    962c:	38000126 	beq	r7,zero,9634 <__divsi3+0x60>
    9630:	0085c83a 	sub	r2,zero,r2
    9634:	f800283a 	ret
    9638:	014bc83a 	sub	r5,zero,r5
    963c:	39c0005c 	xori	r7,r7,1
    9640:	003fe706 	br	95e0 <_gp+0xffff6384>
    9644:	0109c83a 	sub	r4,zero,r4
    9648:	01c00044 	movi	r7,1
    964c:	003fe306 	br	95dc <_gp+0xffff6380>
    9650:	00c00044 	movi	r3,1
    9654:	003fee06 	br	9610 <_gp+0xffff63b4>

00009658 <__modsi3>:
    9658:	20001716 	blt	r4,zero,96b8 <__modsi3+0x60>
    965c:	000f883a 	mov	r7,zero
    9660:	2005883a 	mov	r2,r4
    9664:	28001216 	blt	r5,zero,96b0 <__modsi3+0x58>
    9668:	2900162e 	bgeu	r5,r4,96c4 <__modsi3+0x6c>
    966c:	01800804 	movi	r6,32
    9670:	00c00044 	movi	r3,1
    9674:	00000106 	br	967c <__modsi3+0x24>
    9678:	30000a26 	beq	r6,zero,96a4 <__modsi3+0x4c>
    967c:	294b883a 	add	r5,r5,r5
    9680:	31bfffc4 	addi	r6,r6,-1
    9684:	18c7883a 	add	r3,r3,r3
    9688:	293ffb36 	bltu	r5,r4,9678 <_gp+0xffff641c>
    968c:	18000526 	beq	r3,zero,96a4 <__modsi3+0x4c>
    9690:	1806d07a 	srli	r3,r3,1
    9694:	11400136 	bltu	r2,r5,969c <__modsi3+0x44>
    9698:	1145c83a 	sub	r2,r2,r5
    969c:	280ad07a 	srli	r5,r5,1
    96a0:	183ffb1e 	bne	r3,zero,9690 <_gp+0xffff6434>
    96a4:	38000126 	beq	r7,zero,96ac <__modsi3+0x54>
    96a8:	0085c83a 	sub	r2,zero,r2
    96ac:	f800283a 	ret
    96b0:	014bc83a 	sub	r5,zero,r5
    96b4:	003fec06 	br	9668 <_gp+0xffff640c>
    96b8:	0109c83a 	sub	r4,zero,r4
    96bc:	01c00044 	movi	r7,1
    96c0:	003fe706 	br	9660 <_gp+0xffff6404>
    96c4:	00c00044 	movi	r3,1
    96c8:	003ff106 	br	9690 <_gp+0xffff6434>

000096cc <__udivsi3>:
    96cc:	200d883a 	mov	r6,r4
    96d0:	2900152e 	bgeu	r5,r4,9728 <__udivsi3+0x5c>
    96d4:	28001416 	blt	r5,zero,9728 <__udivsi3+0x5c>
    96d8:	00800804 	movi	r2,32
    96dc:	00c00044 	movi	r3,1
    96e0:	00000206 	br	96ec <__udivsi3+0x20>
    96e4:	10000e26 	beq	r2,zero,9720 <__udivsi3+0x54>
    96e8:	28000516 	blt	r5,zero,9700 <__udivsi3+0x34>
    96ec:	294b883a 	add	r5,r5,r5
    96f0:	10bfffc4 	addi	r2,r2,-1
    96f4:	18c7883a 	add	r3,r3,r3
    96f8:	293ffa36 	bltu	r5,r4,96e4 <_gp+0xffff6488>
    96fc:	18000826 	beq	r3,zero,9720 <__udivsi3+0x54>
    9700:	0005883a 	mov	r2,zero
    9704:	31400236 	bltu	r6,r5,9710 <__udivsi3+0x44>
    9708:	314dc83a 	sub	r6,r6,r5
    970c:	10c4b03a 	or	r2,r2,r3
    9710:	1806d07a 	srli	r3,r3,1
    9714:	280ad07a 	srli	r5,r5,1
    9718:	183ffa1e 	bne	r3,zero,9704 <_gp+0xffff64a8>
    971c:	f800283a 	ret
    9720:	0005883a 	mov	r2,zero
    9724:	f800283a 	ret
    9728:	00c00044 	movi	r3,1
    972c:	003ff406 	br	9700 <_gp+0xffff64a4>

00009730 <__umodsi3>:
    9730:	2005883a 	mov	r2,r4
    9734:	2900122e 	bgeu	r5,r4,9780 <__umodsi3+0x50>
    9738:	28001116 	blt	r5,zero,9780 <__umodsi3+0x50>
    973c:	01800804 	movi	r6,32
    9740:	00c00044 	movi	r3,1
    9744:	00000206 	br	9750 <__umodsi3+0x20>
    9748:	30000c26 	beq	r6,zero,977c <__umodsi3+0x4c>
    974c:	28000516 	blt	r5,zero,9764 <__umodsi3+0x34>
    9750:	294b883a 	add	r5,r5,r5
    9754:	31bfffc4 	addi	r6,r6,-1
    9758:	18c7883a 	add	r3,r3,r3
    975c:	293ffa36 	bltu	r5,r4,9748 <_gp+0xffff64ec>
    9760:	18000626 	beq	r3,zero,977c <__umodsi3+0x4c>
    9764:	1806d07a 	srli	r3,r3,1
    9768:	11400136 	bltu	r2,r5,9770 <__umodsi3+0x40>
    976c:	1145c83a 	sub	r2,r2,r5
    9770:	280ad07a 	srli	r5,r5,1
    9774:	183ffb1e 	bne	r3,zero,9764 <_gp+0xffff6508>
    9778:	f800283a 	ret
    977c:	f800283a 	ret
    9780:	00c00044 	movi	r3,1
    9784:	003ff706 	br	9764 <_gp+0xffff6508>

00009788 <atoi>:
    9788:	01800284 	movi	r6,10
    978c:	000b883a 	mov	r5,zero
    9790:	0009d841 	jmpi	9d84 <strtol>

00009794 <_atoi_r>:
    9794:	01c00284 	movi	r7,10
    9798:	000d883a 	mov	r6,zero
    979c:	0009b741 	jmpi	9b74 <_strtol_r>

000097a0 <malloc>:
    97a0:	00800074 	movhi	r2,1
    97a4:	10ac9904 	addi	r2,r2,-19868
    97a8:	200b883a 	mov	r5,r4
    97ac:	11000017 	ldw	r4,0(r2)
    97b0:	00098ac1 	jmpi	98ac <_malloc_r>

000097b4 <free>:
    97b4:	00800074 	movhi	r2,1
    97b8:	10ac9904 	addi	r2,r2,-19868
    97bc:	200b883a 	mov	r5,r4
    97c0:	11000017 	ldw	r4,0(r2)
    97c4:	00097c81 	jmpi	97c8 <_free_r>

000097c8 <_free_r>:
    97c8:	28003726 	beq	r5,zero,98a8 <_free_r+0xe0>
    97cc:	28ffff17 	ldw	r3,-4(r5)
    97d0:	28bfff04 	addi	r2,r5,-4
    97d4:	1800010e 	bge	r3,zero,97dc <_free_r+0x14>
    97d8:	10c5883a 	add	r2,r2,r3
    97dc:	01400074 	movhi	r5,1
    97e0:	296d5904 	addi	r5,r5,-19100
    97e4:	28c00017 	ldw	r3,0(r5)
    97e8:	280d883a 	mov	r6,r5
    97ec:	1800031e 	bne	r3,zero,97fc <_free_r+0x34>
    97f0:	10000115 	stw	zero,4(r2)
    97f4:	28800015 	stw	r2,0(r5)
    97f8:	f800283a 	ret
    97fc:	10c00c2e 	bgeu	r2,r3,9830 <_free_r+0x68>
    9800:	11000017 	ldw	r4,0(r2)
    9804:	110b883a 	add	r5,r2,r4
    9808:	1940041e 	bne	r3,r5,981c <_free_r+0x54>
    980c:	19400017 	ldw	r5,0(r3)
    9810:	18c00117 	ldw	r3,4(r3)
    9814:	2909883a 	add	r4,r5,r4
    9818:	11000015 	stw	r4,0(r2)
    981c:	10c00115 	stw	r3,4(r2)
    9820:	30800015 	stw	r2,0(r6)
    9824:	f800283a 	ret
    9828:	11400336 	bltu	r2,r5,9838 <_free_r+0x70>
    982c:	2807883a 	mov	r3,r5
    9830:	19400117 	ldw	r5,4(r3)
    9834:	283ffc1e 	bne	r5,zero,9828 <_gp+0xffff65cc>
    9838:	19c00017 	ldw	r7,0(r3)
    983c:	19cd883a 	add	r6,r3,r7
    9840:	30800a1e 	bne	r6,r2,986c <_free_r+0xa4>
    9844:	10800017 	ldw	r2,0(r2)
    9848:	3885883a 	add	r2,r7,r2
    984c:	18800015 	stw	r2,0(r3)
    9850:	1889883a 	add	r4,r3,r2
    9854:	2900141e 	bne	r5,r4,98a8 <_free_r+0xe0>
    9858:	29000017 	ldw	r4,0(r5)
    985c:	2085883a 	add	r2,r4,r2
    9860:	18800015 	stw	r2,0(r3)
    9864:	28800117 	ldw	r2,4(r5)
    9868:	00000e06 	br	98a4 <_free_r+0xdc>
    986c:	1180032e 	bgeu	r2,r6,987c <_free_r+0xb4>
    9870:	00800304 	movi	r2,12
    9874:	20800015 	stw	r2,0(r4)
    9878:	f800283a 	ret
    987c:	11000017 	ldw	r4,0(r2)
    9880:	110d883a 	add	r6,r2,r4
    9884:	2980061e 	bne	r5,r6,98a0 <_free_r+0xd8>
    9888:	29800017 	ldw	r6,0(r5)
    988c:	3109883a 	add	r4,r6,r4
    9890:	11000015 	stw	r4,0(r2)
    9894:	29000117 	ldw	r4,4(r5)
    9898:	11000115 	stw	r4,4(r2)
    989c:	00000106 	br	98a4 <_free_r+0xdc>
    98a0:	11400115 	stw	r5,4(r2)
    98a4:	18800115 	stw	r2,4(r3)
    98a8:	f800283a 	ret

000098ac <_malloc_r>:
    98ac:	defffb04 	addi	sp,sp,-20
    98b0:	00bfff04 	movi	r2,-4
    98b4:	dc400115 	stw	r17,4(sp)
    98b8:	2c4000c4 	addi	r17,r5,3
    98bc:	88a2703a 	and	r17,r17,r2
    98c0:	dc800215 	stw	r18,8(sp)
    98c4:	dfc00415 	stw	ra,16(sp)
    98c8:	dcc00315 	stw	r19,12(sp)
    98cc:	dc000015 	stw	r16,0(sp)
    98d0:	8c400204 	addi	r17,r17,8
    98d4:	00800304 	movi	r2,12
    98d8:	2025883a 	mov	r18,r4
    98dc:	8880022e 	bgeu	r17,r2,98e8 <_malloc_r+0x3c>
    98e0:	1023883a 	mov	r17,r2
    98e4:	00000506 	br	98fc <_malloc_r+0x50>
    98e8:	8800040e 	bge	r17,zero,98fc <_malloc_r+0x50>
    98ec:	00800304 	movi	r2,12
    98f0:	90800015 	stw	r2,0(r18)
    98f4:	0005883a 	mov	r2,zero
    98f8:	00003b06 	br	99e8 <_malloc_r+0x13c>
    98fc:	897ffb36 	bltu	r17,r5,98ec <_gp+0xffff6690>
    9900:	00800074 	movhi	r2,1
    9904:	10ad5904 	addi	r2,r2,-19100
    9908:	10c00017 	ldw	r3,0(r2)
    990c:	1009883a 	mov	r4,r2
    9910:	1821883a 	mov	r16,r3
    9914:	80000926 	beq	r16,zero,993c <_malloc_r+0x90>
    9918:	80800017 	ldw	r2,0(r16)
    991c:	1445c83a 	sub	r2,r2,r17
    9920:	10001516 	blt	r2,zero,9978 <_malloc_r+0xcc>
    9924:	014002c4 	movi	r5,11
    9928:	28800d2e 	bgeu	r5,r2,9960 <_malloc_r+0xb4>
    992c:	80800015 	stw	r2,0(r16)
    9930:	80a1883a 	add	r16,r16,r2
    9934:	84400015 	stw	r17,0(r16)
    9938:	8000221e 	bne	r16,zero,99c4 <_malloc_r+0x118>
    993c:	04000074 	movhi	r16,1
    9940:	842d5804 	addi	r16,r16,-19104
    9944:	80800017 	ldw	r2,0(r16)
    9948:	10000e1e 	bne	r2,zero,9984 <_malloc_r+0xd8>
    994c:	000b883a 	mov	r5,zero
    9950:	9009883a 	mov	r4,r18
    9954:	0009a040 	call	9a04 <_sbrk_r>
    9958:	80800015 	stw	r2,0(r16)
    995c:	00000906 	br	9984 <_malloc_r+0xd8>
    9960:	80800117 	ldw	r2,4(r16)
    9964:	1c00021e 	bne	r3,r16,9970 <_malloc_r+0xc4>
    9968:	20800015 	stw	r2,0(r4)
    996c:	00001506 	br	99c4 <_malloc_r+0x118>
    9970:	18800115 	stw	r2,4(r3)
    9974:	00001306 	br	99c4 <_malloc_r+0x118>
    9978:	8007883a 	mov	r3,r16
    997c:	84000117 	ldw	r16,4(r16)
    9980:	003fe406 	br	9914 <_gp+0xffff66b8>
    9984:	880b883a 	mov	r5,r17
    9988:	9009883a 	mov	r4,r18
    998c:	0009a040 	call	9a04 <_sbrk_r>
    9990:	04ffffc4 	movi	r19,-1
    9994:	14ffd526 	beq	r2,r19,98ec <_gp+0xffff6690>
    9998:	140000c4 	addi	r16,r2,3
    999c:	00ffff04 	movi	r3,-4
    99a0:	80e0703a 	and	r16,r16,r3
    99a4:	1400021e 	bne	r2,r16,99b0 <_malloc_r+0x104>
    99a8:	84400015 	stw	r17,0(r16)
    99ac:	00000506 	br	99c4 <_malloc_r+0x118>
    99b0:	808bc83a 	sub	r5,r16,r2
    99b4:	9009883a 	mov	r4,r18
    99b8:	0009a040 	call	9a04 <_sbrk_r>
    99bc:	14fffa1e 	bne	r2,r19,99a8 <_gp+0xffff674c>
    99c0:	003fca06 	br	98ec <_gp+0xffff6690>
    99c4:	810002c4 	addi	r4,r16,11
    99c8:	00bffe04 	movi	r2,-8
    99cc:	80c00104 	addi	r3,r16,4
    99d0:	2084703a 	and	r2,r4,r2
    99d4:	10c7c83a 	sub	r3,r2,r3
    99d8:	18000326 	beq	r3,zero,99e8 <_malloc_r+0x13c>
    99dc:	80e1883a 	add	r16,r16,r3
    99e0:	00c7c83a 	sub	r3,zero,r3
    99e4:	80c00015 	stw	r3,0(r16)
    99e8:	dfc00417 	ldw	ra,16(sp)
    99ec:	dcc00317 	ldw	r19,12(sp)
    99f0:	dc800217 	ldw	r18,8(sp)
    99f4:	dc400117 	ldw	r17,4(sp)
    99f8:	dc000017 	ldw	r16,0(sp)
    99fc:	dec00504 	addi	sp,sp,20
    9a00:	f800283a 	ret

00009a04 <_sbrk_r>:
    9a04:	defffd04 	addi	sp,sp,-12
    9a08:	dc000015 	stw	r16,0(sp)
    9a0c:	04000074 	movhi	r16,1
    9a10:	dc400115 	stw	r17,4(sp)
    9a14:	842d5a04 	addi	r16,r16,-19096
    9a18:	2023883a 	mov	r17,r4
    9a1c:	2809883a 	mov	r4,r5
    9a20:	dfc00215 	stw	ra,8(sp)
    9a24:	80000015 	stw	zero,0(r16)
    9a28:	000a23c0 	call	a23c <sbrk>
    9a2c:	00ffffc4 	movi	r3,-1
    9a30:	10c0031e 	bne	r2,r3,9a40 <_sbrk_r+0x3c>
    9a34:	80c00017 	ldw	r3,0(r16)
    9a38:	18000126 	beq	r3,zero,9a40 <_sbrk_r+0x3c>
    9a3c:	88c00015 	stw	r3,0(r17)
    9a40:	dfc00217 	ldw	ra,8(sp)
    9a44:	dc400117 	ldw	r17,4(sp)
    9a48:	dc000017 	ldw	r16,0(sp)
    9a4c:	dec00304 	addi	sp,sp,12
    9a50:	f800283a 	ret

00009a54 <strcat>:
    9a54:	2005883a 	mov	r2,r4
    9a58:	2007883a 	mov	r3,r4
    9a5c:	19000007 	ldb	r4,0(r3)
    9a60:	20000226 	beq	r4,zero,9a6c <strcat+0x18>
    9a64:	18c00044 	addi	r3,r3,1
    9a68:	003ffc06 	br	9a5c <_gp+0xffff6800>
    9a6c:	29800003 	ldbu	r6,0(r5)
    9a70:	18c00044 	addi	r3,r3,1
    9a74:	29400044 	addi	r5,r5,1
    9a78:	19bfffc5 	stb	r6,-1(r3)
    9a7c:	31803fcc 	andi	r6,r6,255
    9a80:	3180201c 	xori	r6,r6,128
    9a84:	31bfe004 	addi	r6,r6,-128
    9a88:	303ff81e 	bne	r6,zero,9a6c <_gp+0xffff6810>
    9a8c:	f800283a 	ret

00009a90 <strchr>:
    9a90:	28c03fcc 	andi	r3,r5,255
    9a94:	20800003 	ldbu	r2,0(r4)
    9a98:	10000326 	beq	r2,zero,9aa8 <strchr+0x18>
    9a9c:	18800426 	beq	r3,r2,9ab0 <strchr+0x20>
    9aa0:	21000044 	addi	r4,r4,1
    9aa4:	003ffb06 	br	9a94 <_gp+0xffff6838>
    9aa8:	29403fcc 	andi	r5,r5,255
    9aac:	2800021e 	bne	r5,zero,9ab8 <strchr+0x28>
    9ab0:	2005883a 	mov	r2,r4
    9ab4:	f800283a 	ret
    9ab8:	0005883a 	mov	r2,zero
    9abc:	f800283a 	ret

00009ac0 <strcmp>:
    9ac0:	20800003 	ldbu	r2,0(r4)
    9ac4:	10c03fcc 	andi	r3,r2,255
    9ac8:	18c0201c 	xori	r3,r3,128
    9acc:	18ffe004 	addi	r3,r3,-128
    9ad0:	18000526 	beq	r3,zero,9ae8 <strcmp+0x28>
    9ad4:	29800007 	ldb	r6,0(r5)
    9ad8:	1980031e 	bne	r3,r6,9ae8 <strcmp+0x28>
    9adc:	21000044 	addi	r4,r4,1
    9ae0:	29400044 	addi	r5,r5,1
    9ae4:	003ff606 	br	9ac0 <_gp+0xffff6864>
    9ae8:	28c00003 	ldbu	r3,0(r5)
    9aec:	10803fcc 	andi	r2,r2,255
    9af0:	10c5c83a 	sub	r2,r2,r3
    9af4:	f800283a 	ret

00009af8 <strlen>:
    9af8:	2005883a 	mov	r2,r4
    9afc:	10c00007 	ldb	r3,0(r2)
    9b00:	18000226 	beq	r3,zero,9b0c <strlen+0x14>
    9b04:	10800044 	addi	r2,r2,1
    9b08:	003ffc06 	br	9afc <_gp+0xffff68a0>
    9b0c:	1105c83a 	sub	r2,r2,r4
    9b10:	f800283a 	ret

00009b14 <strstr>:
    9b14:	20800007 	ldb	r2,0(r4)
    9b18:	10000e1e 	bne	r2,zero,9b54 <strstr+0x40>
    9b1c:	28800007 	ldb	r2,0(r5)
    9b20:	10001226 	beq	r2,zero,9b6c <strstr+0x58>
    9b24:	0005883a 	mov	r2,zero
    9b28:	f800283a 	ret
    9b2c:	31c00007 	ldb	r7,0(r6)
    9b30:	38000e26 	beq	r7,zero,9b6c <strstr+0x58>
    9b34:	18800003 	ldbu	r2,0(r3)
    9b38:	31800044 	addi	r6,r6,1
    9b3c:	18c00044 	addi	r3,r3,1
    9b40:	10803fcc 	andi	r2,r2,255
    9b44:	1080201c 	xori	r2,r2,128
    9b48:	10bfe004 	addi	r2,r2,-128
    9b4c:	38bff726 	beq	r7,r2,9b2c <_gp+0xffff68d0>
    9b50:	21000044 	addi	r4,r4,1
    9b54:	20800007 	ldb	r2,0(r4)
    9b58:	10000326 	beq	r2,zero,9b68 <strstr+0x54>
    9b5c:	280d883a 	mov	r6,r5
    9b60:	2007883a 	mov	r3,r4
    9b64:	003ff106 	br	9b2c <_gp+0xffff68d0>
    9b68:	f800283a 	ret
    9b6c:	2005883a 	mov	r2,r4
    9b70:	f800283a 	ret

00009b74 <_strtol_r>:
    9b74:	00800074 	movhi	r2,1
    9b78:	defff504 	addi	sp,sp,-44
    9b7c:	10ac9704 	addi	r2,r2,-19876
    9b80:	df000915 	stw	fp,36(sp)
    9b84:	17000017 	ldw	fp,0(r2)
    9b88:	ddc00815 	stw	r23,32(sp)
    9b8c:	dd800715 	stw	r22,28(sp)
    9b90:	dd400615 	stw	r21,24(sp)
    9b94:	dc800315 	stw	r18,12(sp)
    9b98:	202d883a 	mov	r22,r4
    9b9c:	dfc00a15 	stw	ra,40(sp)
    9ba0:	dd000515 	stw	r20,20(sp)
    9ba4:	dcc00415 	stw	r19,16(sp)
    9ba8:	dc400215 	stw	r17,8(sp)
    9bac:	dc000115 	stw	r16,4(sp)
    9bb0:	282f883a 	mov	r23,r5
    9bb4:	302b883a 	mov	r21,r6
    9bb8:	3825883a 	mov	r18,r7
    9bbc:	2809883a 	mov	r4,r5
    9bc0:	2005883a 	mov	r2,r4
    9bc4:	14400003 	ldbu	r17,0(r2)
    9bc8:	24000044 	addi	r16,r4,1
    9bcc:	8009883a 	mov	r4,r16
    9bd0:	e447883a 	add	r3,fp,r17
    9bd4:	18c00043 	ldbu	r3,1(r3)
    9bd8:	18c0020c 	andi	r3,r3,8
    9bdc:	183ff81e 	bne	r3,zero,9bc0 <_gp+0xffff6964>
    9be0:	00c00b44 	movi	r3,45
    9be4:	88c0041e 	bne	r17,r3,9bf8 <_strtol_r+0x84>
    9be8:	14000084 	addi	r16,r2,2
    9bec:	14400043 	ldbu	r17,1(r2)
    9bf0:	04c00044 	movi	r19,1
    9bf4:	00000506 	br	9c0c <_strtol_r+0x98>
    9bf8:	00c00ac4 	movi	r3,43
    9bfc:	88c0021e 	bne	r17,r3,9c08 <_strtol_r+0x94>
    9c00:	14400043 	ldbu	r17,1(r2)
    9c04:	14000084 	addi	r16,r2,2
    9c08:	0027883a 	mov	r19,zero
    9c0c:	90000326 	beq	r18,zero,9c1c <_strtol_r+0xa8>
    9c10:	00800404 	movi	r2,16
    9c14:	90800a1e 	bne	r18,r2,9c40 <_strtol_r+0xcc>
    9c18:	00004b06 	br	9d48 <_strtol_r+0x1d4>
    9c1c:	00800c04 	movi	r2,48
    9c20:	8880471e 	bne	r17,r2,9d40 <_strtol_r+0x1cc>
    9c24:	80800003 	ldbu	r2,0(r16)
    9c28:	00c01604 	movi	r3,88
    9c2c:	108037cc 	andi	r2,r2,223
    9c30:	10c03f1e 	bne	r2,r3,9d30 <_strtol_r+0x1bc>
    9c34:	84400043 	ldbu	r17,1(r16)
    9c38:	04800404 	movi	r18,16
    9c3c:	84000084 	addi	r16,r16,2
    9c40:	05200034 	movhi	r20,32768
    9c44:	a53fffc4 	addi	r20,r20,-1
    9c48:	9d29883a 	add	r20,r19,r20
    9c4c:	900b883a 	mov	r5,r18
    9c50:	a009883a 	mov	r4,r20
    9c54:	00097300 	call	9730 <__umodsi3>
    9c58:	900b883a 	mov	r5,r18
    9c5c:	a009883a 	mov	r4,r20
    9c60:	d8800015 	stw	r2,0(sp)
    9c64:	00096cc0 	call	96cc <__udivsi3>
    9c68:	d9800017 	ldw	r6,0(sp)
    9c6c:	100b883a 	mov	r5,r2
    9c70:	0009883a 	mov	r4,zero
    9c74:	0005883a 	mov	r2,zero
    9c78:	01c00044 	movi	r7,1
    9c7c:	023fffc4 	movi	r8,-1
    9c80:	e447883a 	add	r3,fp,r17
    9c84:	18c00043 	ldbu	r3,1(r3)
    9c88:	1a40010c 	andi	r9,r3,4
    9c8c:	48000226 	beq	r9,zero,9c98 <_strtol_r+0x124>
    9c90:	8c7ff404 	addi	r17,r17,-48
    9c94:	00000706 	br	9cb4 <_strtol_r+0x140>
    9c98:	18c000cc 	andi	r3,r3,3
    9c9c:	18001226 	beq	r3,zero,9ce8 <_strtol_r+0x174>
    9ca0:	19c00226 	beq	r3,r7,9cac <_strtol_r+0x138>
    9ca4:	00c015c4 	movi	r3,87
    9ca8:	00000106 	br	9cb0 <_strtol_r+0x13c>
    9cac:	00c00dc4 	movi	r3,55
    9cb0:	88e3c83a 	sub	r17,r17,r3
    9cb4:	8c800c0e 	bge	r17,r18,9ce8 <_strtol_r+0x174>
    9cb8:	22000826 	beq	r4,r8,9cdc <_strtol_r+0x168>
    9cbc:	28800636 	bltu	r5,r2,9cd8 <_strtol_r+0x164>
    9cc0:	1140011e 	bne	r2,r5,9cc8 <_strtol_r+0x154>
    9cc4:	34400416 	blt	r6,r17,9cd8 <_strtol_r+0x164>
    9cc8:	1487383a 	mul	r3,r2,r18
    9ccc:	01000044 	movi	r4,1
    9cd0:	88c5883a 	add	r2,r17,r3
    9cd4:	00000106 	br	9cdc <_strtol_r+0x168>
    9cd8:	013fffc4 	movi	r4,-1
    9cdc:	84400003 	ldbu	r17,0(r16)
    9ce0:	84000044 	addi	r16,r16,1
    9ce4:	003fe606 	br	9c80 <_gp+0xffff6a24>
    9ce8:	00ffffc4 	movi	r3,-1
    9cec:	20c0071e 	bne	r4,r3,9d0c <_strtol_r+0x198>
    9cf0:	00a00034 	movhi	r2,32768
    9cf4:	10c5883a 	add	r2,r2,r3
    9cf8:	00c00884 	movi	r3,34
    9cfc:	b0c00015 	stw	r3,0(r22)
    9d00:	9885883a 	add	r2,r19,r2
    9d04:	a800051e 	bne	r21,zero,9d1c <_strtol_r+0x1a8>
    9d08:	00001206 	br	9d54 <_strtol_r+0x1e0>
    9d0c:	98000126 	beq	r19,zero,9d14 <_strtol_r+0x1a0>
    9d10:	0085c83a 	sub	r2,zero,r2
    9d14:	a8000f26 	beq	r21,zero,9d54 <_strtol_r+0x1e0>
    9d18:	20000226 	beq	r4,zero,9d24 <_strtol_r+0x1b0>
    9d1c:	843fffc4 	addi	r16,r16,-1
    9d20:	00000106 	br	9d28 <_strtol_r+0x1b4>
    9d24:	b821883a 	mov	r16,r23
    9d28:	ac000015 	stw	r16,0(r21)
    9d2c:	00000906 	br	9d54 <_strtol_r+0x1e0>
    9d30:	04400c04 	movi	r17,48
    9d34:	903fc21e 	bne	r18,zero,9c40 <_gp+0xffff69e4>
    9d38:	04800204 	movi	r18,8
    9d3c:	003fc006 	br	9c40 <_gp+0xffff69e4>
    9d40:	04800284 	movi	r18,10
    9d44:	003fbe06 	br	9c40 <_gp+0xffff69e4>
    9d48:	00800c04 	movi	r2,48
    9d4c:	88bfb526 	beq	r17,r2,9c24 <_gp+0xffff69c8>
    9d50:	003fbb06 	br	9c40 <_gp+0xffff69e4>
    9d54:	dfc00a17 	ldw	ra,40(sp)
    9d58:	df000917 	ldw	fp,36(sp)
    9d5c:	ddc00817 	ldw	r23,32(sp)
    9d60:	dd800717 	ldw	r22,28(sp)
    9d64:	dd400617 	ldw	r21,24(sp)
    9d68:	dd000517 	ldw	r20,20(sp)
    9d6c:	dcc00417 	ldw	r19,16(sp)
    9d70:	dc800317 	ldw	r18,12(sp)
    9d74:	dc400217 	ldw	r17,8(sp)
    9d78:	dc000117 	ldw	r16,4(sp)
    9d7c:	dec00b04 	addi	sp,sp,44
    9d80:	f800283a 	ret

00009d84 <strtol>:
    9d84:	00800074 	movhi	r2,1
    9d88:	10ac9904 	addi	r2,r2,-19868
    9d8c:	300f883a 	mov	r7,r6
    9d90:	280d883a 	mov	r6,r5
    9d94:	200b883a 	mov	r5,r4
    9d98:	11000017 	ldw	r4,0(r2)
    9d9c:	0009b741 	jmpi	9b74 <_strtol_r>

00009da0 <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    9da0:	defffd04 	addi	sp,sp,-12
    9da4:	dfc00215 	stw	ra,8(sp)
    9da8:	df000115 	stw	fp,4(sp)
    9dac:	df000104 	addi	fp,sp,4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    9db0:	00800074 	movhi	r2,1
    9db4:	10ac3704 	addi	r2,r2,-20260
    9db8:	10800217 	ldw	r2,8(r2)
    9dbc:	100f883a 	mov	r7,r2
    9dc0:	01800044 	movi	r6,1
    9dc4:	e17fff04 	addi	r5,fp,-4
    9dc8:	01000074 	movhi	r4,1
    9dcc:	212c9c04 	addi	r4,r4,-19856
    9dd0:	000a3680 	call	a368 <altera_avalon_jtag_uart_read>
    9dd4:	00800216 	blt	zero,r2,9de0 <alt_getchar+0x40>
        return -1;
    9dd8:	00bfffc4 	movi	r2,-1
    9ddc:	00000406 	br	9df0 <alt_getchar+0x50>
    }
    return c;
    9de0:	e0bfff03 	ldbu	r2,-4(fp)
    9de4:	10803fcc 	andi	r2,r2,255
    9de8:	1080201c 	xori	r2,r2,128
    9dec:	10bfe004 	addi	r2,r2,-128
#else
    return getchar();
#endif
#endif
}
    9df0:	e037883a 	mov	sp,fp
    9df4:	dfc00117 	ldw	ra,4(sp)
    9df8:	df000017 	ldw	fp,0(sp)
    9dfc:	dec00204 	addi	sp,sp,8
    9e00:	f800283a 	ret

00009e04 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9e04:	defff904 	addi	sp,sp,-28
    9e08:	dfc00615 	stw	ra,24(sp)
    9e0c:	df000515 	stw	fp,20(sp)
    9e10:	df000504 	addi	fp,sp,20
    9e14:	e13ffc15 	stw	r4,-16(fp)
    9e18:	e17ffd15 	stw	r5,-12(fp)
    9e1c:	e1bffe15 	stw	r6,-8(fp)
    9e20:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9e24:	e0800217 	ldw	r2,8(fp)
    9e28:	d8800015 	stw	r2,0(sp)
    9e2c:	e1ffff17 	ldw	r7,-4(fp)
    9e30:	e1bffe17 	ldw	r6,-8(fp)
    9e34:	e17ffd17 	ldw	r5,-12(fp)
    9e38:	e13ffc17 	ldw	r4,-16(fp)
    9e3c:	0009fb40 	call	9fb4 <alt_iic_isr_register>
}  
    9e40:	e037883a 	mov	sp,fp
    9e44:	dfc00117 	ldw	ra,4(sp)
    9e48:	df000017 	ldw	fp,0(sp)
    9e4c:	dec00204 	addi	sp,sp,8
    9e50:	f800283a 	ret

00009e54 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9e54:	defff904 	addi	sp,sp,-28
    9e58:	df000615 	stw	fp,24(sp)
    9e5c:	df000604 	addi	fp,sp,24
    9e60:	e13ffe15 	stw	r4,-8(fp)
    9e64:	e17fff15 	stw	r5,-4(fp)
    9e68:	e0bfff17 	ldw	r2,-4(fp)
    9e6c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9e70:	0005303a 	rdctl	r2,status
    9e74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9e78:	e0fffb17 	ldw	r3,-20(fp)
    9e7c:	00bfff84 	movi	r2,-2
    9e80:	1884703a 	and	r2,r3,r2
    9e84:	1001703a 	wrctl	status,r2
  
  return context;
    9e88:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9e8c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    9e90:	00c00044 	movi	r3,1
    9e94:	e0bffa17 	ldw	r2,-24(fp)
    9e98:	1884983a 	sll	r2,r3,r2
    9e9c:	1007883a 	mov	r3,r2
    9ea0:	d0a0c417 	ldw	r2,-31984(gp)
    9ea4:	1884b03a 	or	r2,r3,r2
    9ea8:	d0a0c415 	stw	r2,-31984(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9eac:	d0a0c417 	ldw	r2,-31984(gp)
    9eb0:	100170fa 	wrctl	ienable,r2
    9eb4:	e0bffc17 	ldw	r2,-16(fp)
    9eb8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9ebc:	e0bffd17 	ldw	r2,-12(fp)
    9ec0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9ec4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    9ec8:	0001883a 	nop
}
    9ecc:	e037883a 	mov	sp,fp
    9ed0:	df000017 	ldw	fp,0(sp)
    9ed4:	dec00104 	addi	sp,sp,4
    9ed8:	f800283a 	ret

00009edc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9edc:	defff904 	addi	sp,sp,-28
    9ee0:	df000615 	stw	fp,24(sp)
    9ee4:	df000604 	addi	fp,sp,24
    9ee8:	e13ffe15 	stw	r4,-8(fp)
    9eec:	e17fff15 	stw	r5,-4(fp)
    9ef0:	e0bfff17 	ldw	r2,-4(fp)
    9ef4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9ef8:	0005303a 	rdctl	r2,status
    9efc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f00:	e0fffb17 	ldw	r3,-20(fp)
    9f04:	00bfff84 	movi	r2,-2
    9f08:	1884703a 	and	r2,r3,r2
    9f0c:	1001703a 	wrctl	status,r2
  
  return context;
    9f10:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9f14:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    9f18:	00c00044 	movi	r3,1
    9f1c:	e0bffa17 	ldw	r2,-24(fp)
    9f20:	1884983a 	sll	r2,r3,r2
    9f24:	0084303a 	nor	r2,zero,r2
    9f28:	1007883a 	mov	r3,r2
    9f2c:	d0a0c417 	ldw	r2,-31984(gp)
    9f30:	1884703a 	and	r2,r3,r2
    9f34:	d0a0c415 	stw	r2,-31984(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9f38:	d0a0c417 	ldw	r2,-31984(gp)
    9f3c:	100170fa 	wrctl	ienable,r2
    9f40:	e0bffc17 	ldw	r2,-16(fp)
    9f44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f48:	e0bffd17 	ldw	r2,-12(fp)
    9f4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9f50:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    9f54:	0001883a 	nop
}
    9f58:	e037883a 	mov	sp,fp
    9f5c:	df000017 	ldw	fp,0(sp)
    9f60:	dec00104 	addi	sp,sp,4
    9f64:	f800283a 	ret

00009f68 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9f68:	defffc04 	addi	sp,sp,-16
    9f6c:	df000315 	stw	fp,12(sp)
    9f70:	df000304 	addi	fp,sp,12
    9f74:	e13ffe15 	stw	r4,-8(fp)
    9f78:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9f7c:	000530fa 	rdctl	r2,ienable
    9f80:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9f84:	00c00044 	movi	r3,1
    9f88:	e0bfff17 	ldw	r2,-4(fp)
    9f8c:	1884983a 	sll	r2,r3,r2
    9f90:	1007883a 	mov	r3,r2
    9f94:	e0bffd17 	ldw	r2,-12(fp)
    9f98:	1884703a 	and	r2,r3,r2
    9f9c:	1004c03a 	cmpne	r2,r2,zero
    9fa0:	10803fcc 	andi	r2,r2,255
}
    9fa4:	e037883a 	mov	sp,fp
    9fa8:	df000017 	ldw	fp,0(sp)
    9fac:	dec00104 	addi	sp,sp,4
    9fb0:	f800283a 	ret

00009fb4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9fb4:	defff504 	addi	sp,sp,-44
    9fb8:	dfc00a15 	stw	ra,40(sp)
    9fbc:	df000915 	stw	fp,36(sp)
    9fc0:	df000904 	addi	fp,sp,36
    9fc4:	e13ffc15 	stw	r4,-16(fp)
    9fc8:	e17ffd15 	stw	r5,-12(fp)
    9fcc:	e1bffe15 	stw	r6,-8(fp)
    9fd0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    9fd4:	00bffa84 	movi	r2,-22
    9fd8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    9fdc:	e0bffd17 	ldw	r2,-12(fp)
    9fe0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9fe4:	e0bff817 	ldw	r2,-32(fp)
    9fe8:	10800808 	cmpgei	r2,r2,32
    9fec:	1000271e 	bne	r2,zero,a08c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9ff0:	0005303a 	rdctl	r2,status
    9ff4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9ff8:	e0fffb17 	ldw	r3,-20(fp)
    9ffc:	00bfff84 	movi	r2,-2
    a000:	1884703a 	and	r2,r3,r2
    a004:	1001703a 	wrctl	status,r2
  
  return context;
    a008:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    a00c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    a010:	00800074 	movhi	r2,1
    a014:	10ada304 	addi	r2,r2,-18804
    a018:	e0fff817 	ldw	r3,-32(fp)
    a01c:	180690fa 	slli	r3,r3,3
    a020:	10c5883a 	add	r2,r2,r3
    a024:	e0fffe17 	ldw	r3,-8(fp)
    a028:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    a02c:	00800074 	movhi	r2,1
    a030:	10ada304 	addi	r2,r2,-18804
    a034:	e0fff817 	ldw	r3,-32(fp)
    a038:	180690fa 	slli	r3,r3,3
    a03c:	10c5883a 	add	r2,r2,r3
    a040:	10800104 	addi	r2,r2,4
    a044:	e0ffff17 	ldw	r3,-4(fp)
    a048:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    a04c:	e0bffe17 	ldw	r2,-8(fp)
    a050:	10000526 	beq	r2,zero,a068 <alt_iic_isr_register+0xb4>
    a054:	e0bff817 	ldw	r2,-32(fp)
    a058:	100b883a 	mov	r5,r2
    a05c:	e13ffc17 	ldw	r4,-16(fp)
    a060:	0009e540 	call	9e54 <alt_ic_irq_enable>
    a064:	00000406 	br	a078 <alt_iic_isr_register+0xc4>
    a068:	e0bff817 	ldw	r2,-32(fp)
    a06c:	100b883a 	mov	r5,r2
    a070:	e13ffc17 	ldw	r4,-16(fp)
    a074:	0009edc0 	call	9edc <alt_ic_irq_disable>
    a078:	e0bff715 	stw	r2,-36(fp)
    a07c:	e0bffa17 	ldw	r2,-24(fp)
    a080:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a084:	e0bff917 	ldw	r2,-28(fp)
    a088:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    a08c:	e0bff717 	ldw	r2,-36(fp)
}
    a090:	e037883a 	mov	sp,fp
    a094:	dfc00117 	ldw	ra,4(sp)
    a098:	df000017 	ldw	fp,0(sp)
    a09c:	dec00204 	addi	sp,sp,8
    a0a0:	f800283a 	ret

0000a0a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a0a4:	defffc04 	addi	sp,sp,-16
    a0a8:	df000315 	stw	fp,12(sp)
    a0ac:	df000304 	addi	fp,sp,12
    a0b0:	e13ffd15 	stw	r4,-12(fp)
    a0b4:	e17ffe15 	stw	r5,-8(fp)
    a0b8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a0bc:	e0fffe17 	ldw	r3,-8(fp)
    a0c0:	e0bffd17 	ldw	r2,-12(fp)
    a0c4:	18800c26 	beq	r3,r2,a0f8 <alt_load_section+0x54>
  {
    while( to != end )
    a0c8:	00000806 	br	a0ec <alt_load_section+0x48>
    {
      *to++ = *from++;
    a0cc:	e0bffe17 	ldw	r2,-8(fp)
    a0d0:	10c00104 	addi	r3,r2,4
    a0d4:	e0fffe15 	stw	r3,-8(fp)
    a0d8:	e0fffd17 	ldw	r3,-12(fp)
    a0dc:	19000104 	addi	r4,r3,4
    a0e0:	e13ffd15 	stw	r4,-12(fp)
    a0e4:	18c00017 	ldw	r3,0(r3)
    a0e8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a0ec:	e0fffe17 	ldw	r3,-8(fp)
    a0f0:	e0bfff17 	ldw	r2,-4(fp)
    a0f4:	18bff51e 	bne	r3,r2,a0cc <_gp+0xffff6e70>
    {
      *to++ = *from++;
    }
  }
}
    a0f8:	0001883a 	nop
    a0fc:	e037883a 	mov	sp,fp
    a100:	df000017 	ldw	fp,0(sp)
    a104:	dec00104 	addi	sp,sp,4
    a108:	f800283a 	ret

0000a10c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a10c:	defffe04 	addi	sp,sp,-8
    a110:	dfc00115 	stw	ra,4(sp)
    a114:	df000015 	stw	fp,0(sp)
    a118:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a11c:	01800074 	movhi	r6,1
    a120:	31aca504 	addi	r6,r6,-19820
    a124:	01400074 	movhi	r5,1
    a128:	296bf504 	addi	r5,r5,-20524
    a12c:	01000074 	movhi	r4,1
    a130:	212ca504 	addi	r4,r4,-19820
    a134:	000a0a40 	call	a0a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a138:	01800074 	movhi	r6,1
    a13c:	31a09104 	addi	r6,r6,-32188
    a140:	01400074 	movhi	r5,1
    a144:	29600804 	addi	r5,r5,-32736
    a148:	01000074 	movhi	r4,1
    a14c:	21200804 	addi	r4,r4,-32736
    a150:	000a0a40 	call	a0a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    a154:	01800074 	movhi	r6,1
    a158:	31abf504 	addi	r6,r6,-20524
    a15c:	01400074 	movhi	r5,1
    a160:	296af504 	addi	r5,r5,-21548
    a164:	01000074 	movhi	r4,1
    a168:	212af504 	addi	r4,r4,-21548
    a16c:	000a0a40 	call	a0a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    a170:	000a6540 	call	a654 <alt_dcache_flush_all>
  alt_icache_flush_all();
    a174:	000a6c80 	call	a6c8 <alt_icache_flush_all>
}
    a178:	0001883a 	nop
    a17c:	e037883a 	mov	sp,fp
    a180:	dfc00117 	ldw	ra,4(sp)
    a184:	df000017 	ldw	fp,0(sp)
    a188:	dec00204 	addi	sp,sp,8
    a18c:	f800283a 	ret

0000a190 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a190:	defffd04 	addi	sp,sp,-12
    a194:	dfc00215 	stw	ra,8(sp)
    a198:	df000115 	stw	fp,4(sp)
    a19c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a1a0:	0009883a 	mov	r4,zero
    a1a4:	000a2ec0 	call	a2ec <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    a1a8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a1ac:	000a3240 	call	a324 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a1b0:	d0a0c517 	ldw	r2,-31980(gp)
    a1b4:	d0e0c617 	ldw	r3,-31976(gp)
    a1b8:	d120c717 	ldw	r4,-31972(gp)
    a1bc:	200d883a 	mov	r6,r4
    a1c0:	180b883a 	mov	r5,r3
    a1c4:	1009883a 	mov	r4,r2
    a1c8:	00085840 	call	8584 <main>
    a1cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a1d0:	01000044 	movi	r4,1
    a1d4:	000a6180 	call	a618 <close>
  exit (result);
    a1d8:	e13fff17 	ldw	r4,-4(fp)
    a1dc:	000a9f00 	call	a9f0 <exit>

0000a1e0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    a1e0:	defffc04 	addi	sp,sp,-16
    a1e4:	dfc00315 	stw	ra,12(sp)
    a1e8:	df000215 	stw	fp,8(sp)
    a1ec:	df000204 	addi	fp,sp,8
    a1f0:	e13fff15 	stw	r4,-4(fp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    a1f4:	e0bfff17 	ldw	r2,-4(fp)
    a1f8:	e0bffe05 	stb	r2,-8(fp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    a1fc:	000f883a 	mov	r7,zero
    a200:	01800044 	movi	r6,1
    a204:	e17ffe04 	addi	r5,fp,-8
    a208:	01000074 	movhi	r4,1
    a20c:	212c9c04 	addi	r4,r4,-19856
    a210:	000a4540 	call	a454 <altera_avalon_jtag_uart_write>
    a214:	10bfffd8 	cmpnei	r2,r2,-1
    a218:	1000021e 	bne	r2,zero,a224 <alt_putchar+0x44>
        return -1;
    a21c:	00bfffc4 	movi	r2,-1
    a220:	00000106 	br	a228 <alt_putchar+0x48>
    }
    return c;
    a224:	e0bfff17 	ldw	r2,-4(fp)
#else
    return putchar(c);
#endif
#endif
}
    a228:	e037883a 	mov	sp,fp
    a22c:	dfc00117 	ldw	ra,4(sp)
    a230:	df000017 	ldw	fp,0(sp)
    a234:	dec00204 	addi	sp,sp,8
    a238:	f800283a 	ret

0000a23c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a23c:	defff904 	addi	sp,sp,-28
    a240:	df000615 	stw	fp,24(sp)
    a244:	df000604 	addi	fp,sp,24
    a248:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a24c:	0005303a 	rdctl	r2,status
    a250:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a254:	e0fffe17 	ldw	r3,-8(fp)
    a258:	00bfff84 	movi	r2,-2
    a25c:	1884703a 	and	r2,r3,r2
    a260:	1001703a 	wrctl	status,r2
  
  return context;
    a264:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a268:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a26c:	d0a00417 	ldw	r2,-32752(gp)
    a270:	10c000c4 	addi	r3,r2,3
    a274:	00bfff04 	movi	r2,-4
    a278:	1884703a 	and	r2,r3,r2
    a27c:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a280:	d0e00417 	ldw	r3,-32752(gp)
    a284:	e0bfff17 	ldw	r2,-4(fp)
    a288:	1887883a 	add	r3,r3,r2
    a28c:	00800074 	movhi	r2,1
    a290:	10b40004 	addi	r2,r2,-12288
    a294:	10c0062e 	bgeu	r2,r3,a2b0 <sbrk+0x74>
    a298:	e0bffb17 	ldw	r2,-20(fp)
    a29c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a2a0:	e0bffa17 	ldw	r2,-24(fp)
    a2a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a2a8:	00bfffc4 	movi	r2,-1
    a2ac:	00000b06 	br	a2dc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    a2b0:	d0a00417 	ldw	r2,-32752(gp)
    a2b4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    a2b8:	d0e00417 	ldw	r3,-32752(gp)
    a2bc:	e0bfff17 	ldw	r2,-4(fp)
    a2c0:	1885883a 	add	r2,r3,r2
    a2c4:	d0a00415 	stw	r2,-32752(gp)
    a2c8:	e0bffb17 	ldw	r2,-20(fp)
    a2cc:	e0bffc15 	stw	r2,-16(fp)
    a2d0:	e0bffc17 	ldw	r2,-16(fp)
    a2d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a2d8:	e0bffd17 	ldw	r2,-12(fp)
} 
    a2dc:	e037883a 	mov	sp,fp
    a2e0:	df000017 	ldw	fp,0(sp)
    a2e4:	dec00104 	addi	sp,sp,4
    a2e8:	f800283a 	ret

0000a2ec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a2ec:	defffd04 	addi	sp,sp,-12
    a2f0:	dfc00215 	stw	ra,8(sp)
    a2f4:	df000115 	stw	fp,4(sp)
    a2f8:	df000104 	addi	fp,sp,4
    a2fc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    a300:	000a93c0 	call	a93c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a304:	00800044 	movi	r2,1
    a308:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a30c:	0001883a 	nop
    a310:	e037883a 	mov	sp,fp
    a314:	dfc00117 	ldw	ra,4(sp)
    a318:	df000017 	ldw	fp,0(sp)
    a31c:	dec00204 	addi	sp,sp,8
    a320:	f800283a 	ret

0000a324 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a324:	defffe04 	addi	sp,sp,-8
    a328:	dfc00115 	stw	ra,4(sp)
    a32c:	df000015 	stw	fp,0(sp)
    a330:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    a334:	01c0fa04 	movi	r7,1000
    a338:	01800044 	movi	r6,1
    a33c:	000b883a 	mov	r5,zero
    a340:	01000074 	movhi	r4,1
    a344:	21040004 	addi	r4,r4,4096
    a348:	000a5600 	call	a560 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    a34c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
}
    a350:	0001883a 	nop
    a354:	e037883a 	mov	sp,fp
    a358:	dfc00117 	ldw	ra,4(sp)
    a35c:	df000017 	ldw	fp,0(sp)
    a360:	dec00204 	addi	sp,sp,8
    a364:	f800283a 	ret

0000a368 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    a368:	defff704 	addi	sp,sp,-36
    a36c:	df000815 	stw	fp,32(sp)
    a370:	df000804 	addi	fp,sp,32
    a374:	e13ffc15 	stw	r4,-16(fp)
    a378:	e17ffd15 	stw	r5,-12(fp)
    a37c:	e1bffe15 	stw	r6,-8(fp)
    a380:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    a384:	e0bffc17 	ldw	r2,-16(fp)
    a388:	10800017 	ldw	r2,0(r2)
    a38c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    a390:	e0bffd17 	ldw	r2,-12(fp)
    a394:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    a398:	e0bffe17 	ldw	r2,-8(fp)
    a39c:	e0fffd17 	ldw	r3,-12(fp)
    a3a0:	1885883a 	add	r2,r3,r2
    a3a4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    a3a8:	00001206 	br	a3f4 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    a3ac:	e0bff917 	ldw	r2,-28(fp)
    a3b0:	10800037 	ldwio	r2,0(r2)
    a3b4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    a3b8:	e0bffb17 	ldw	r2,-20(fp)
    a3bc:	10a0000c 	andi	r2,r2,32768
    a3c0:	10000626 	beq	r2,zero,a3dc <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    a3c4:	e0bff817 	ldw	r2,-32(fp)
    a3c8:	10c00044 	addi	r3,r2,1
    a3cc:	e0fff815 	stw	r3,-32(fp)
    a3d0:	e0fffb17 	ldw	r3,-20(fp)
    a3d4:	10c00005 	stb	r3,0(r2)
    a3d8:	00000606 	br	a3f4 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    a3dc:	e0fff817 	ldw	r3,-32(fp)
    a3e0:	e0bffd17 	ldw	r2,-12(fp)
    a3e4:	1880071e 	bne	r3,r2,a404 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    a3e8:	e0bfff17 	ldw	r2,-4(fp)
    a3ec:	1090000c 	andi	r2,r2,16384
    a3f0:	1000061e 	bne	r2,zero,a40c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    a3f4:	e0fff817 	ldw	r3,-32(fp)
    a3f8:	e0bffa17 	ldw	r2,-24(fp)
    a3fc:	18bfeb36 	bltu	r3,r2,a3ac <_gp+0xffff7150>
    a400:	00000306 	br	a410 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    a404:	0001883a 	nop
    a408:	00000106 	br	a410 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    a40c:	0001883a 	nop
    
  }

  if (ptr != buffer)
    a410:	e0fff817 	ldw	r3,-32(fp)
    a414:	e0bffd17 	ldw	r2,-12(fp)
    a418:	18800426 	beq	r3,r2,a42c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    a41c:	e0fff817 	ldw	r3,-32(fp)
    a420:	e0bffd17 	ldw	r2,-12(fp)
    a424:	1885c83a 	sub	r2,r3,r2
    a428:	00000606 	br	a444 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    a42c:	e0bfff17 	ldw	r2,-4(fp)
    a430:	1090000c 	andi	r2,r2,16384
    a434:	10000226 	beq	r2,zero,a440 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    a438:	00bffd44 	movi	r2,-11
    a43c:	00000106 	br	a444 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    a440:	00bffec4 	movi	r2,-5
}
    a444:	e037883a 	mov	sp,fp
    a448:	df000017 	ldw	fp,0(sp)
    a44c:	dec00104 	addi	sp,sp,4
    a450:	f800283a 	ret

0000a454 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    a454:	defff904 	addi	sp,sp,-28
    a458:	df000615 	stw	fp,24(sp)
    a45c:	df000604 	addi	fp,sp,24
    a460:	e13ffc15 	stw	r4,-16(fp)
    a464:	e17ffd15 	stw	r5,-12(fp)
    a468:	e1bffe15 	stw	r6,-8(fp)
    a46c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    a470:	e0bffc17 	ldw	r2,-16(fp)
    a474:	10800017 	ldw	r2,0(r2)
    a478:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    a47c:	e0bffe17 	ldw	r2,-8(fp)
    a480:	e0fffd17 	ldw	r3,-12(fp)
    a484:	1885883a 	add	r2,r3,r2
    a488:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    a48c:	00000e06 	br	a4c8 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    a490:	e0bffa17 	ldw	r2,-24(fp)
    a494:	10800104 	addi	r2,r2,4
    a498:	10800037 	ldwio	r2,0(r2)
    a49c:	10bfffec 	andhi	r2,r2,65535
    a4a0:	10000926 	beq	r2,zero,a4c8 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    a4a4:	e0fffa17 	ldw	r3,-24(fp)
    a4a8:	e0bffd17 	ldw	r2,-12(fp)
    a4ac:	11000044 	addi	r4,r2,1
    a4b0:	e13ffd15 	stw	r4,-12(fp)
    a4b4:	10800003 	ldbu	r2,0(r2)
    a4b8:	10803fcc 	andi	r2,r2,255
    a4bc:	1080201c 	xori	r2,r2,128
    a4c0:	10bfe004 	addi	r2,r2,-128
    a4c4:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    a4c8:	e0fffd17 	ldw	r3,-12(fp)
    a4cc:	e0bffb17 	ldw	r2,-20(fp)
    a4d0:	18bfef36 	bltu	r3,r2,a490 <_gp+0xffff7234>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    a4d4:	e0bffe17 	ldw	r2,-8(fp)
}
    a4d8:	e037883a 	mov	sp,fp
    a4dc:	df000017 	ldw	fp,0(sp)
    a4e0:	dec00104 	addi	sp,sp,4
    a4e4:	f800283a 	ret

0000a4e8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    a4e8:	defffa04 	addi	sp,sp,-24
    a4ec:	dfc00515 	stw	ra,20(sp)
    a4f0:	df000415 	stw	fp,16(sp)
    a4f4:	df000404 	addi	fp,sp,16
    a4f8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    a4fc:	0007883a 	mov	r3,zero
    a500:	e0bfff17 	ldw	r2,-4(fp)
    a504:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    a508:	e0bfff17 	ldw	r2,-4(fp)
    a50c:	10800104 	addi	r2,r2,4
    a510:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a514:	0005303a 	rdctl	r2,status
    a518:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a51c:	e0fffd17 	ldw	r3,-12(fp)
    a520:	00bfff84 	movi	r2,-2
    a524:	1884703a 	and	r2,r3,r2
    a528:	1001703a 	wrctl	status,r2
  
  return context;
    a52c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    a530:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    a534:	000a8340 	call	a834 <alt_tick>
    a538:	e0bffc17 	ldw	r2,-16(fp)
    a53c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a540:	e0bffe17 	ldw	r2,-8(fp)
    a544:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    a548:	0001883a 	nop
    a54c:	e037883a 	mov	sp,fp
    a550:	dfc00117 	ldw	ra,4(sp)
    a554:	df000017 	ldw	fp,0(sp)
    a558:	dec00204 	addi	sp,sp,8
    a55c:	f800283a 	ret

0000a560 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    a560:	defff804 	addi	sp,sp,-32
    a564:	dfc00715 	stw	ra,28(sp)
    a568:	df000615 	stw	fp,24(sp)
    a56c:	df000604 	addi	fp,sp,24
    a570:	e13ffc15 	stw	r4,-16(fp)
    a574:	e17ffd15 	stw	r5,-12(fp)
    a578:	e1bffe15 	stw	r6,-8(fp)
    a57c:	e1ffff15 	stw	r7,-4(fp)
    a580:	e0bfff17 	ldw	r2,-4(fp)
    a584:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    a588:	d0a0ca17 	ldw	r2,-31960(gp)
    a58c:	1000021e 	bne	r2,zero,a598 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    a590:	e0bffb17 	ldw	r2,-20(fp)
    a594:	d0a0ca15 	stw	r2,-31960(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    a598:	e0bffc17 	ldw	r2,-16(fp)
    a59c:	10800104 	addi	r2,r2,4
    a5a0:	00c001c4 	movi	r3,7
    a5a4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    a5a8:	d8000015 	stw	zero,0(sp)
    a5ac:	e1fffc17 	ldw	r7,-16(fp)
    a5b0:	01800074 	movhi	r6,1
    a5b4:	31a93a04 	addi	r6,r6,-23320
    a5b8:	e17ffe17 	ldw	r5,-8(fp)
    a5bc:	e13ffd17 	ldw	r4,-12(fp)
    a5c0:	0009e040 	call	9e04 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    a5c4:	0001883a 	nop
    a5c8:	e037883a 	mov	sp,fp
    a5cc:	dfc00117 	ldw	ra,4(sp)
    a5d0:	df000017 	ldw	fp,0(sp)
    a5d4:	dec00204 	addi	sp,sp,8
    a5d8:	f800283a 	ret

0000a5dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a5dc:	defffe04 	addi	sp,sp,-8
    a5e0:	dfc00115 	stw	ra,4(sp)
    a5e4:	df000015 	stw	fp,0(sp)
    a5e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a5ec:	d0a00b17 	ldw	r2,-32724(gp)
    a5f0:	10000326 	beq	r2,zero,a600 <alt_get_errno+0x24>
    a5f4:	d0a00b17 	ldw	r2,-32724(gp)
    a5f8:	103ee83a 	callr	r2
    a5fc:	00000106 	br	a604 <alt_get_errno+0x28>
    a600:	d0a0c304 	addi	r2,gp,-31988
}
    a604:	e037883a 	mov	sp,fp
    a608:	dfc00117 	ldw	ra,4(sp)
    a60c:	df000017 	ldw	fp,0(sp)
    a610:	dec00204 	addi	sp,sp,8
    a614:	f800283a 	ret

0000a618 <close>:
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_CLOSE (int fildes)
{
    a618:	defffd04 	addi	sp,sp,-12
    a61c:	dfc00215 	stw	ra,8(sp)
    a620:	df000115 	stw	fp,4(sp)
    a624:	df000104 	addi	fp,sp,4
    a628:	e13fff15 	stw	r4,-4(fp)
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
    a62c:	000a5dc0 	call	a5dc <alt_get_errno>
    a630:	1007883a 	mov	r3,r2
    a634:	00801604 	movi	r2,88
    a638:	18800015 	stw	r2,0(r3)
  return -1;
    a63c:	00bfffc4 	movi	r2,-1
}
    a640:	e037883a 	mov	sp,fp
    a644:	dfc00117 	ldw	ra,4(sp)
    a648:	df000017 	ldw	fp,0(sp)
    a64c:	dec00204 	addi	sp,sp,8
    a650:	f800283a 	ret

0000a654 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    a654:	defffe04 	addi	sp,sp,-8
    a658:	df000115 	stw	fp,4(sp)
    a65c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    a660:	e03fff15 	stw	zero,-4(fp)
    a664:	00000506 	br	a67c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    a668:	e0bfff17 	ldw	r2,-4(fp)
    a66c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    a670:	e0bfff17 	ldw	r2,-4(fp)
    a674:	10800804 	addi	r2,r2,32
    a678:	e0bfff15 	stw	r2,-4(fp)
    a67c:	e0bfff17 	ldw	r2,-4(fp)
    a680:	10820030 	cmpltui	r2,r2,2048
    a684:	103ff81e 	bne	r2,zero,a668 <_gp+0xffff740c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    a688:	0001883a 	nop
    a68c:	e037883a 	mov	sp,fp
    a690:	df000017 	ldw	fp,0(sp)
    a694:	dec00104 	addi	sp,sp,4
    a698:	f800283a 	ret

0000a69c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    a69c:	defffc04 	addi	sp,sp,-16
    a6a0:	df000315 	stw	fp,12(sp)
    a6a4:	df000304 	addi	fp,sp,12
    a6a8:	e13ffd15 	stw	r4,-12(fp)
    a6ac:	e17ffe15 	stw	r5,-8(fp)
    a6b0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    a6b4:	e0bfff17 	ldw	r2,-4(fp)
}
    a6b8:	e037883a 	mov	sp,fp
    a6bc:	df000017 	ldw	fp,0(sp)
    a6c0:	dec00104 	addi	sp,sp,4
    a6c4:	f800283a 	ret

0000a6c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    a6c8:	defffe04 	addi	sp,sp,-8
    a6cc:	dfc00115 	stw	ra,4(sp)
    a6d0:	df000015 	stw	fp,0(sp)
    a6d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    a6d8:	01420004 	movi	r5,2048
    a6dc:	0009883a 	mov	r4,zero
    a6e0:	000a9600 	call	a960 <alt_icache_flush>
#endif
}
    a6e4:	0001883a 	nop
    a6e8:	e037883a 	mov	sp,fp
    a6ec:	dfc00117 	ldw	ra,4(sp)
    a6f0:	df000017 	ldw	fp,0(sp)
    a6f4:	dec00204 	addi	sp,sp,8
    a6f8:	f800283a 	ret

0000a6fc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    a6fc:	defffe04 	addi	sp,sp,-8
    a700:	df000115 	stw	fp,4(sp)
    a704:	df000104 	addi	fp,sp,4
    a708:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    a70c:	e0bfff17 	ldw	r2,-4(fp)
    a710:	10bffe84 	addi	r2,r2,-6
    a714:	10c00428 	cmpgeui	r3,r2,16
    a718:	18001a1e 	bne	r3,zero,a784 <alt_exception_cause_generated_bad_addr+0x88>
    a71c:	100690ba 	slli	r3,r2,2
    a720:	00800074 	movhi	r2,1
    a724:	10a9cd04 	addi	r2,r2,-22732
    a728:	1885883a 	add	r2,r3,r2
    a72c:	10800017 	ldw	r2,0(r2)
    a730:	1000683a 	jmp	r2
    a734:	0000a774 	movhi	zero,669
    a738:	0000a774 	movhi	zero,669
    a73c:	0000a784 	movi	zero,670
    a740:	0000a784 	movi	zero,670
    a744:	0000a784 	movi	zero,670
    a748:	0000a774 	movhi	zero,669
    a74c:	0000a77c 	xorhi	zero,zero,669
    a750:	0000a784 	movi	zero,670
    a754:	0000a774 	movhi	zero,669
    a758:	0000a774 	movhi	zero,669
    a75c:	0000a784 	movi	zero,670
    a760:	0000a774 	movhi	zero,669
    a764:	0000a77c 	xorhi	zero,zero,669
    a768:	0000a784 	movi	zero,670
    a76c:	0000a784 	movi	zero,670
    a770:	0000a774 	movhi	zero,669
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    a774:	00800044 	movi	r2,1
    a778:	00000306 	br	a788 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    a77c:	0005883a 	mov	r2,zero
    a780:	00000106 	br	a788 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    a784:	0005883a 	mov	r2,zero
  }
}
    a788:	e037883a 	mov	sp,fp
    a78c:	df000017 	ldw	fp,0(sp)
    a790:	dec00104 	addi	sp,sp,4
    a794:	f800283a 	ret

0000a798 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a798:	defffa04 	addi	sp,sp,-24
    a79c:	df000515 	stw	fp,20(sp)
    a7a0:	df000504 	addi	fp,sp,20
    a7a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a7a8:	0005303a 	rdctl	r2,status
    a7ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a7b0:	e0fffc17 	ldw	r3,-16(fp)
    a7b4:	00bfff84 	movi	r2,-2
    a7b8:	1884703a 	and	r2,r3,r2
    a7bc:	1001703a 	wrctl	status,r2
  
  return context;
    a7c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a7c4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a7c8:	e0bfff17 	ldw	r2,-4(fp)
    a7cc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a7d0:	e0bffd17 	ldw	r2,-12(fp)
    a7d4:	10800017 	ldw	r2,0(r2)
    a7d8:	e0fffd17 	ldw	r3,-12(fp)
    a7dc:	18c00117 	ldw	r3,4(r3)
    a7e0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a7e4:	e0bffd17 	ldw	r2,-12(fp)
    a7e8:	10800117 	ldw	r2,4(r2)
    a7ec:	e0fffd17 	ldw	r3,-12(fp)
    a7f0:	18c00017 	ldw	r3,0(r3)
    a7f4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a7f8:	e0bffd17 	ldw	r2,-12(fp)
    a7fc:	e0fffd17 	ldw	r3,-12(fp)
    a800:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a804:	e0bffd17 	ldw	r2,-12(fp)
    a808:	e0fffd17 	ldw	r3,-12(fp)
    a80c:	10c00015 	stw	r3,0(r2)
    a810:	e0bffb17 	ldw	r2,-20(fp)
    a814:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a818:	e0bffe17 	ldw	r2,-8(fp)
    a81c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a820:	0001883a 	nop
    a824:	e037883a 	mov	sp,fp
    a828:	df000017 	ldw	fp,0(sp)
    a82c:	dec00104 	addi	sp,sp,4
    a830:	f800283a 	ret

0000a834 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a834:	defffb04 	addi	sp,sp,-20
    a838:	dfc00415 	stw	ra,16(sp)
    a83c:	df000315 	stw	fp,12(sp)
    a840:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a844:	d0a00c17 	ldw	r2,-32720(gp)
    a848:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a84c:	d0a0cb17 	ldw	r2,-31956(gp)
    a850:	10800044 	addi	r2,r2,1
    a854:	d0a0cb15 	stw	r2,-31956(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a858:	00002e06 	br	a914 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a85c:	e0bffd17 	ldw	r2,-12(fp)
    a860:	10800017 	ldw	r2,0(r2)
    a864:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a868:	e0bffd17 	ldw	r2,-12(fp)
    a86c:	10800403 	ldbu	r2,16(r2)
    a870:	10803fcc 	andi	r2,r2,255
    a874:	10000426 	beq	r2,zero,a888 <alt_tick+0x54>
    a878:	d0a0cb17 	ldw	r2,-31956(gp)
    a87c:	1000021e 	bne	r2,zero,a888 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a880:	e0bffd17 	ldw	r2,-12(fp)
    a884:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a888:	e0bffd17 	ldw	r2,-12(fp)
    a88c:	10800217 	ldw	r2,8(r2)
    a890:	d0e0cb17 	ldw	r3,-31956(gp)
    a894:	18801d36 	bltu	r3,r2,a90c <alt_tick+0xd8>
    a898:	e0bffd17 	ldw	r2,-12(fp)
    a89c:	10800403 	ldbu	r2,16(r2)
    a8a0:	10803fcc 	andi	r2,r2,255
    a8a4:	1000191e 	bne	r2,zero,a90c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a8a8:	e0bffd17 	ldw	r2,-12(fp)
    a8ac:	10800317 	ldw	r2,12(r2)
    a8b0:	e0fffd17 	ldw	r3,-12(fp)
    a8b4:	18c00517 	ldw	r3,20(r3)
    a8b8:	1809883a 	mov	r4,r3
    a8bc:	103ee83a 	callr	r2
    a8c0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a8c4:	e0bfff17 	ldw	r2,-4(fp)
    a8c8:	1000031e 	bne	r2,zero,a8d8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a8cc:	e13ffd17 	ldw	r4,-12(fp)
    a8d0:	000a7980 	call	a798 <alt_alarm_stop>
    a8d4:	00000d06 	br	a90c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a8d8:	e0bffd17 	ldw	r2,-12(fp)
    a8dc:	10c00217 	ldw	r3,8(r2)
    a8e0:	e0bfff17 	ldw	r2,-4(fp)
    a8e4:	1887883a 	add	r3,r3,r2
    a8e8:	e0bffd17 	ldw	r2,-12(fp)
    a8ec:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a8f0:	e0bffd17 	ldw	r2,-12(fp)
    a8f4:	10c00217 	ldw	r3,8(r2)
    a8f8:	d0a0cb17 	ldw	r2,-31956(gp)
    a8fc:	1880032e 	bgeu	r3,r2,a90c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a900:	e0bffd17 	ldw	r2,-12(fp)
    a904:	00c00044 	movi	r3,1
    a908:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a90c:	e0bffe17 	ldw	r2,-8(fp)
    a910:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a914:	e0fffd17 	ldw	r3,-12(fp)
    a918:	d0a00c04 	addi	r2,gp,-32720
    a91c:	18bfcf1e 	bne	r3,r2,a85c <_gp+0xffff7600>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a920:	0001883a 	nop
}
    a924:	0001883a 	nop
    a928:	e037883a 	mov	sp,fp
    a92c:	dfc00117 	ldw	ra,4(sp)
    a930:	df000017 	ldw	fp,0(sp)
    a934:	dec00204 	addi	sp,sp,8
    a938:	f800283a 	ret

0000a93c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    a93c:	deffff04 	addi	sp,sp,-4
    a940:	df000015 	stw	fp,0(sp)
    a944:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a948:	000170fa 	wrctl	ienable,zero
}
    a94c:	0001883a 	nop
    a950:	e037883a 	mov	sp,fp
    a954:	df000017 	ldw	fp,0(sp)
    a958:	dec00104 	addi	sp,sp,4
    a95c:	f800283a 	ret

0000a960 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    a960:	defffb04 	addi	sp,sp,-20
    a964:	df000415 	stw	fp,16(sp)
    a968:	df000404 	addi	fp,sp,16
    a96c:	e13ffe15 	stw	r4,-8(fp)
    a970:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    a974:	e0bfff17 	ldw	r2,-4(fp)
    a978:	10820070 	cmpltui	r2,r2,2049
    a97c:	1000021e 	bne	r2,zero,a988 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    a980:	00820004 	movi	r2,2048
    a984:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    a988:	e0fffe17 	ldw	r3,-8(fp)
    a98c:	e0bfff17 	ldw	r2,-4(fp)
    a990:	1885883a 	add	r2,r3,r2
    a994:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a998:	e0bffe17 	ldw	r2,-8(fp)
    a99c:	e0bffc15 	stw	r2,-16(fp)
    a9a0:	00000506 	br	a9b8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    a9a4:	e0bffc17 	ldw	r2,-16(fp)
    a9a8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a9ac:	e0bffc17 	ldw	r2,-16(fp)
    a9b0:	10800804 	addi	r2,r2,32
    a9b4:	e0bffc15 	stw	r2,-16(fp)
    a9b8:	e0fffc17 	ldw	r3,-16(fp)
    a9bc:	e0bffd17 	ldw	r2,-12(fp)
    a9c0:	18bff836 	bltu	r3,r2,a9a4 <_gp+0xffff7748>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    a9c4:	e0bffe17 	ldw	r2,-8(fp)
    a9c8:	108007cc 	andi	r2,r2,31
    a9cc:	10000226 	beq	r2,zero,a9d8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    a9d0:	e0bffc17 	ldw	r2,-16(fp)
    a9d4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    a9d8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    a9dc:	0001883a 	nop
    a9e0:	e037883a 	mov	sp,fp
    a9e4:	df000017 	ldw	fp,0(sp)
    a9e8:	dec00104 	addi	sp,sp,4
    a9ec:	f800283a 	ret

0000a9f0 <exit>:
    a9f0:	defffe04 	addi	sp,sp,-8
    a9f4:	000b883a 	mov	r5,zero
    a9f8:	dc000015 	stw	r16,0(sp)
    a9fc:	dfc00115 	stw	ra,4(sp)
    aa00:	2021883a 	mov	r16,r4
    aa04:	000aa100 	call	aa10 <__call_exitprocs>
    aa08:	8009883a 	mov	r4,r16
    aa0c:	000aba00 	call	aba0 <_exit>

0000aa10 <__call_exitprocs>:
    aa10:	defff504 	addi	sp,sp,-44
    aa14:	dd000515 	stw	r20,20(sp)
    aa18:	05000074 	movhi	r20,1
    aa1c:	dc800315 	stw	r18,12(sp)
    aa20:	dfc00a15 	stw	ra,40(sp)
    aa24:	df000915 	stw	fp,36(sp)
    aa28:	ddc00815 	stw	r23,32(sp)
    aa2c:	dd800715 	stw	r22,28(sp)
    aa30:	dd400615 	stw	r21,24(sp)
    aa34:	dcc00415 	stw	r19,16(sp)
    aa38:	dc400215 	stw	r17,8(sp)
    aa3c:	dc000115 	stw	r16,4(sp)
    aa40:	d9000015 	stw	r4,0(sp)
    aa44:	2825883a 	mov	r18,r5
    aa48:	a52c9804 	addi	r20,r20,-19872
    aa4c:	a4400017 	ldw	r17,0(r20)
    aa50:	8cc00c17 	ldw	r19,48(r17)
    aa54:	8c400c04 	addi	r17,r17,48
    aa58:	98004526 	beq	r19,zero,ab70 <__call_exitprocs+0x160>
    aa5c:	9c000117 	ldw	r16,4(r19)
    aa60:	00900034 	movhi	r2,16384
    aa64:	10bfffc4 	addi	r2,r2,-1
    aa68:	9d402217 	ldw	r21,136(r19)
    aa6c:	85bfffc4 	addi	r22,r16,-1
    aa70:	80a1883a 	add	r16,r16,r2
    aa74:	8421883a 	add	r16,r16,r16
    aa78:	8421883a 	add	r16,r16,r16
    aa7c:	ac2f883a 	add	r23,r21,r16
    aa80:	84000204 	addi	r16,r16,8
    aa84:	9c21883a 	add	r16,r19,r16
    aa88:	b0002716 	blt	r22,zero,ab28 <__call_exitprocs+0x118>
    aa8c:	90000726 	beq	r18,zero,aaac <__call_exitprocs+0x9c>
    aa90:	a800041e 	bne	r21,zero,aaa4 <__call_exitprocs+0x94>
    aa94:	b5bfffc4 	addi	r22,r22,-1
    aa98:	bdffff04 	addi	r23,r23,-4
    aa9c:	843fff04 	addi	r16,r16,-4
    aaa0:	003ff906 	br	aa88 <_gp+0xffff782c>
    aaa4:	b9002017 	ldw	r4,128(r23)
    aaa8:	913ffa1e 	bne	r18,r4,aa94 <_gp+0xffff7838>
    aaac:	99000117 	ldw	r4,4(r19)
    aab0:	82000017 	ldw	r8,0(r16)
    aab4:	213fffc4 	addi	r4,r4,-1
    aab8:	b100021e 	bne	r22,r4,aac4 <__call_exitprocs+0xb4>
    aabc:	9d800115 	stw	r22,4(r19)
    aac0:	00000106 	br	aac8 <__call_exitprocs+0xb8>
    aac4:	80000015 	stw	zero,0(r16)
    aac8:	403ff226 	beq	r8,zero,aa94 <_gp+0xffff7838>
    aacc:	9f000117 	ldw	fp,4(r19)
    aad0:	a8000526 	beq	r21,zero,aae8 <__call_exitprocs+0xd8>
    aad4:	00800044 	movi	r2,1
    aad8:	1592983a 	sll	r9,r2,r22
    aadc:	a9404017 	ldw	r5,256(r21)
    aae0:	494a703a 	and	r5,r9,r5
    aae4:	2800021e 	bne	r5,zero,aaf0 <__call_exitprocs+0xe0>
    aae8:	403ee83a 	callr	r8
    aaec:	00000906 	br	ab14 <__call_exitprocs+0x104>
    aaf0:	a9004117 	ldw	r4,260(r21)
    aaf4:	4908703a 	and	r4,r9,r4
    aaf8:	2000041e 	bne	r4,zero,ab0c <__call_exitprocs+0xfc>
    aafc:	b9400017 	ldw	r5,0(r23)
    ab00:	d9000017 	ldw	r4,0(sp)
    ab04:	403ee83a 	callr	r8
    ab08:	00000206 	br	ab14 <__call_exitprocs+0x104>
    ab0c:	b9000017 	ldw	r4,0(r23)
    ab10:	403ee83a 	callr	r8
    ab14:	99000117 	ldw	r4,4(r19)
    ab18:	e13fcc1e 	bne	fp,r4,aa4c <_gp+0xffff77f0>
    ab1c:	89000017 	ldw	r4,0(r17)
    ab20:	993fdc26 	beq	r19,r4,aa94 <_gp+0xffff7838>
    ab24:	003fc906 	br	aa4c <_gp+0xffff77f0>
    ab28:	00800074 	movhi	r2,1
    ab2c:	10a5ed04 	addi	r2,r2,-26700
    ab30:	10000f26 	beq	r2,zero,ab70 <__call_exitprocs+0x160>
    ab34:	99400117 	ldw	r5,4(r19)
    ab38:	99000017 	ldw	r4,0(r19)
    ab3c:	2800091e 	bne	r5,zero,ab64 <__call_exitprocs+0x154>
    ab40:	20000826 	beq	r4,zero,ab64 <__call_exitprocs+0x154>
    ab44:	89000015 	stw	r4,0(r17)
    ab48:	a8000226 	beq	r21,zero,ab54 <__call_exitprocs+0x144>
    ab4c:	a809883a 	mov	r4,r21
    ab50:	00097b40 	call	97b4 <free>
    ab54:	9809883a 	mov	r4,r19
    ab58:	00097b40 	call	97b4 <free>
    ab5c:	8cc00017 	ldw	r19,0(r17)
    ab60:	003fbd06 	br	aa58 <_gp+0xffff77fc>
    ab64:	9823883a 	mov	r17,r19
    ab68:	2027883a 	mov	r19,r4
    ab6c:	003fba06 	br	aa58 <_gp+0xffff77fc>
    ab70:	dfc00a17 	ldw	ra,40(sp)
    ab74:	df000917 	ldw	fp,36(sp)
    ab78:	ddc00817 	ldw	r23,32(sp)
    ab7c:	dd800717 	ldw	r22,28(sp)
    ab80:	dd400617 	ldw	r21,24(sp)
    ab84:	dd000517 	ldw	r20,20(sp)
    ab88:	dcc00417 	ldw	r19,16(sp)
    ab8c:	dc800317 	ldw	r18,12(sp)
    ab90:	dc400217 	ldw	r17,8(sp)
    ab94:	dc000117 	ldw	r16,4(sp)
    ab98:	dec00b04 	addi	sp,sp,44
    ab9c:	f800283a 	ret

0000aba0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    aba0:	defffd04 	addi	sp,sp,-12
    aba4:	df000215 	stw	fp,8(sp)
    aba8:	df000204 	addi	fp,sp,8
    abac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    abb0:	0001883a 	nop
    abb4:	e0bfff17 	ldw	r2,-4(fp)
    abb8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    abbc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    abc0:	10000226 	beq	r2,zero,abcc <_exit+0x2c>
    ALT_SIM_FAIL();
    abc4:	002af070 	cmpltui	zero,zero,43969
    abc8:	00000106 	br	abd0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    abcc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    abd0:	003fff06 	br	abd0 <_gp+0xffff7974>
