/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

/* Portions of this design are protected by US Patent no. 8,321,823
 * (assignee: Carnegie Mellon University).
 */

//   Input/output stream: 4 complex words per cycle
//   Throughput: one transform every 2048 cycles
//   Latency: 5690 cycles

//   Resources required:
//     68 multipliers (16 x 16 bit)
//     138 adders (16 x 16 bit)
//     4 RAMs (2048 words, 32 bits per word)
//     4 RAMs (512 words, 32 bits per word)
//     12 RAMs (4096 words, 32 bits per word)
//     4 RAMs (128 words, 32 bits per word)
//     4 RAMs (8 words, 32 bits per word)
//     4 RAMs (32 words, 32 bits per word)
//     6 ROMs (16 words, 16 bits per word)
//     6 ROMs (1024 words, 16 bits per word)
//     4 ROMs (2048 words, 16 bits per word)
//     6 ROMs (256 words, 16 bits per word)
//     6 ROMs (64 words, 16 bits per word)

// Generated on Sat Oct 12 14:23:11 EDT 2019

// Latency: 5690 clock cycles
// Throughput: 1 transform every 2048 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 2048 cycles.  This means that
// 2048 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 5690 cycles.  This means that
// the 'next_out' will be asserted 5690 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


/*

DFT Size = 8192
direction = forward
data type = 16 bit fixed point, scaled
architecture = fully streaming
radix = 4
streaming width = 4
data ordering = natural input / natural output
BRAM budget = -1

*/





module dft_testbench();
   reg clk, reset, next;
   wire next_out;
   integer i, j, k, l, m;
   reg [15:0] counter;
   reg [15:0] in [7:0];
   wire [15:0] X0;
   wire [15:0] Y0;
   wire [15:0] X1;
   wire [15:0] Y1;
   wire [15:0] X2;
   wire [15:0] Y2;
   wire [15:0] X3;
   wire [15:0] Y3;
   wire [15:0] X4;
   wire [15:0] Y4;
   wire [15:0] X5;
   wire [15:0] Y5;
   wire [15:0] X6;
   wire [15:0] Y6;
   wire [15:0] X7;
   wire [15:0] Y7;
   reg clrCnt;
   assign X0 = in[0];
   assign X1 = in[1];
   assign X2 = in[2];
   assign X3 = in[3];
   assign X4 = in[4];
   assign X5 = in[5];
   assign X6 = in[6];
   assign X7 = in[7];

   initial clk = 0;

   always #10000 clk = ~clk;


   // Instantiate top-level module of core 'X' signals are system inputs
   // and 'Y' signals are system outputs
   dft_top dft_top_instance (.clk(clk), .reset(reset), .next(next), .next_out(next_out),
    .X0(X0), .Y0(Y0),
    .X1(X1), .Y1(Y1),
    .X2(X2), .Y2(Y2),
    .X3(X3), .Y3(Y3),
    .X4(X4), .Y4(Y4),
    .X5(X5), .Y5(Y5),
    .X6(X6), .Y6(Y6),
    .X7(X7), .Y7(Y7));

   // You can use this counter to verify that the gap and latency are as expected.
   always @(posedge clk) begin
      if (clrCnt) counter <= 0;
      else counter <= counter+1;
   end


   initial begin
      @(posedge clk);
      @(posedge clk);

      // On the next cycle, begin loading input vector.
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // The 8192 complex data points enter the system over 2048 cycles
      for (j=0; j < 2047; j = j+1) begin
          // Input: 4 complex words per cycle
         for (k=0; k < 8; k = k+1) begin
            in[k] <= j*8 + k;
         end
         @(posedge clk);
      end
      j = 2047;
      for (k=0; k < 8; k = k+1) begin
         in[k] <= j*8 + k;
      end


      @(posedge clk);
      // Wait until the next data vector can be entered
      while (counter < 2046)
        @(posedge clk);

      // On the next cycle, we will start the next data vector
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // Start entering next input vector
      for (j=0; j < 2047; j = j+1) begin
         // Input 8 words per cycle
         for (k=0; k < 8; k = k+1) begin
            in[k] <= 16384 + j*8 + k;
          end
          @(posedge clk);
       end
       j = 2047;
       for (k=0; k < 8; k = k+1) begin
          in[k] <= 16384 + j*8 + k;
       end
   end


   initial begin
      // set initial values
      in[0] <= 0;
      in[1] <= 0;
      in[2] <= 0;
      in[3] <= 0;
      in[4] <= 0;
      in[5] <= 0;
      in[6] <= 0;
      in[7] <= 0;
      next <= 0;
      reset <= 0;

      @(posedge clk);
      reset <= 1;
      @(posedge clk);
      reset <= 0;
      @(posedge clk);
      @(posedge clk);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 1---");

      for (m=0; m < 2047; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 2---");

      for (m=0; m < 2047; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $finish;
   end
endmodule

// Latency: 5690
// Gap: 2048
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [15:0] t0_0;
   wire [15:0] t0_1;
   wire [15:0] t0_2;
   wire [15:0] t0_3;
   wire [15:0] t0_4;
   wire [15:0] t0_5;
   wire [15:0] t0_6;
   wire [15:0] t0_7;
   wire next_0;
   wire [15:0] t1_0;
   wire [15:0] t1_1;
   wire [15:0] t1_2;
   wire [15:0] t1_3;
   wire [15:0] t1_4;
   wire [15:0] t1_5;
   wire [15:0] t1_6;
   wire [15:0] t1_7;
   wire next_1;
   wire [15:0] t2_0;
   wire [15:0] t2_1;
   wire [15:0] t2_2;
   wire [15:0] t2_3;
   wire [15:0] t2_4;
   wire [15:0] t2_5;
   wire [15:0] t2_6;
   wire [15:0] t2_7;
   wire next_2;
   wire [15:0] t3_0;
   wire [15:0] t3_1;
   wire [15:0] t3_2;
   wire [15:0] t3_3;
   wire [15:0] t3_4;
   wire [15:0] t3_5;
   wire [15:0] t3_6;
   wire [15:0] t3_7;
   wire next_3;
   wire [15:0] t4_0;
   wire [15:0] t4_1;
   wire [15:0] t4_2;
   wire [15:0] t4_3;
   wire [15:0] t4_4;
   wire [15:0] t4_5;
   wire [15:0] t4_6;
   wire [15:0] t4_7;
   wire next_4;
   wire [15:0] t5_0;
   wire [15:0] t5_1;
   wire [15:0] t5_2;
   wire [15:0] t5_3;
   wire [15:0] t5_4;
   wire [15:0] t5_5;
   wire [15:0] t5_6;
   wire [15:0] t5_7;
   wire next_5;
   wire [15:0] t6_0;
   wire [15:0] t6_1;
   wire [15:0] t6_2;
   wire [15:0] t6_3;
   wire [15:0] t6_4;
   wire [15:0] t6_5;
   wire [15:0] t6_6;
   wire [15:0] t6_7;
   wire next_6;
   wire [15:0] t7_0;
   wire [15:0] t7_1;
   wire [15:0] t7_2;
   wire [15:0] t7_3;
   wire [15:0] t7_4;
   wire [15:0] t7_5;
   wire [15:0] t7_6;
   wire [15:0] t7_7;
   wire next_7;
   wire [15:0] t8_0;
   wire [15:0] t8_1;
   wire [15:0] t8_2;
   wire [15:0] t8_3;
   wire [15:0] t8_4;
   wire [15:0] t8_5;
   wire [15:0] t8_6;
   wire [15:0] t8_7;
   wire next_8;
   wire [15:0] t9_0;
   wire [15:0] t9_1;
   wire [15:0] t9_2;
   wire [15:0] t9_3;
   wire [15:0] t9_4;
   wire [15:0] t9_5;
   wire [15:0] t9_6;
   wire [15:0] t9_7;
   wire next_9;
   wire [15:0] t10_0;
   wire [15:0] t10_1;
   wire [15:0] t10_2;
   wire [15:0] t10_3;
   wire [15:0] t10_4;
   wire [15:0] t10_5;
   wire [15:0] t10_6;
   wire [15:0] t10_7;
   wire next_10;
   wire [15:0] t11_0;
   wire [15:0] t11_1;
   wire [15:0] t11_2;
   wire [15:0] t11_3;
   wire [15:0] t11_4;
   wire [15:0] t11_5;
   wire [15:0] t11_6;
   wire [15:0] t11_7;
   wire next_11;
   wire [15:0] t12_0;
   wire [15:0] t12_1;
   wire [15:0] t12_2;
   wire [15:0] t12_3;
   wire [15:0] t12_4;
   wire [15:0] t12_5;
   wire [15:0] t12_6;
   wire [15:0] t12_7;
   wire next_12;
   wire [15:0] t13_0;
   wire [15:0] t13_1;
   wire [15:0] t13_2;
   wire [15:0] t13_3;
   wire [15:0] t13_4;
   wire [15:0] t13_5;
   wire [15:0] t13_6;
   wire [15:0] t13_7;
   wire next_13;
   wire [15:0] t14_0;
   wire [15:0] t14_1;
   wire [15:0] t14_2;
   wire [15:0] t14_3;
   wire [15:0] t14_4;
   wire [15:0] t14_5;
   wire [15:0] t14_6;
   wire [15:0] t14_7;
   wire next_14;
   wire [15:0] t15_0;
   wire [15:0] t15_1;
   wire [15:0] t15_2;
   wire [15:0] t15_3;
   wire [15:0] t15_4;
   wire [15:0] t15_5;
   wire [15:0] t15_6;
   wire [15:0] t15_7;
   wire next_15;
   wire [15:0] t16_0;
   wire [15:0] t16_1;
   wire [15:0] t16_2;
   wire [15:0] t16_3;
   wire [15:0] t16_4;
   wire [15:0] t16_5;
   wire [15:0] t16_6;
   wire [15:0] t16_7;
   wire next_16;
   wire [15:0] t17_0;
   wire [15:0] t17_1;
   wire [15:0] t17_2;
   wire [15:0] t17_3;
   wire [15:0] t17_4;
   wire [15:0] t17_5;
   wire [15:0] t17_6;
   wire [15:0] t17_7;
   wire next_17;
   wire [15:0] t18_0;
   wire [15:0] t18_1;
   wire [15:0] t18_2;
   wire [15:0] t18_3;
   wire [15:0] t18_4;
   wire [15:0] t18_5;
   wire [15:0] t18_6;
   wire [15:0] t18_7;
   wire next_18;
   wire [15:0] t19_0;
   wire [15:0] t19_1;
   wire [15:0] t19_2;
   wire [15:0] t19_3;
   wire [15:0] t19_4;
   wire [15:0] t19_5;
   wire [15:0] t19_6;
   wire [15:0] t19_7;
   wire next_19;
   wire [15:0] t20_0;
   wire [15:0] t20_1;
   wire [15:0] t20_2;
   wire [15:0] t20_3;
   wire [15:0] t20_4;
   wire [15:0] t20_5;
   wire [15:0] t20_6;
   wire [15:0] t20_7;
   wire next_20;
   wire [15:0] t21_0;
   wire [15:0] t21_1;
   wire [15:0] t21_2;
   wire [15:0] t21_3;
   wire [15:0] t21_4;
   wire [15:0] t21_5;
   wire [15:0] t21_6;
   wire [15:0] t21_7;
   wire next_21;
   assign t0_0 = X0;
   assign Y0 = t21_0;
   assign t0_1 = X1;
   assign Y1 = t21_1;
   assign t0_2 = X2;
   assign Y2 = t21_2;
   assign t0_3 = X3;
   assign Y3 = t21_3;
   assign t0_4 = X4;
   assign Y4 = t21_4;
   assign t0_5 = X5;
   assign Y5 = t21_5;
   assign t0_6 = X6;
   assign Y6 = t21_6;
   assign t0_7 = X7;
   assign Y7 = t21_7;
   assign next_0 = next;
   assign next_out = next_21;

// latency=2006, gap=2048
   rc90108 stage0(.clk(clk), .reset(reset), .next(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3),
    .X4(t0_4), .Y4(t1_4),
    .X5(t0_5), .Y5(t1_5),
    .X6(t0_6), .Y6(t1_6),
    .X7(t0_7), .Y7(t1_7));


// latency=3, gap=2048
   codeBlock90110 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7));


// latency=8, gap=2048
   rc90323 stage2(.clk(clk), .reset(reset), .next(next_2), .next_out(next_3),
    .X0(t2_0), .Y0(t3_0),
    .X1(t2_1), .Y1(t3_1),
    .X2(t2_2), .Y2(t3_2),
    .X3(t2_3), .Y3(t3_3),
    .X4(t2_4), .Y4(t3_4),
    .X5(t2_5), .Y5(t3_5),
    .X6(t2_6), .Y6(t3_6),
    .X7(t2_7), .Y7(t3_7));


// latency=8, gap=2048
   DirSum_90696 stage3(.next(next_3), .clk(clk), .reset(reset), .next_out(next_4),
       .X0(t3_0), .Y0(t4_0),
       .X1(t3_1), .Y1(t4_1),
       .X2(t3_2), .Y2(t4_2),
       .X3(t3_3), .Y3(t4_3),
       .X4(t3_4), .Y4(t4_4),
       .X5(t3_5), .Y5(t4_5),
       .X6(t3_6), .Y6(t4_6),
       .X7(t3_7), .Y7(t4_7));


// latency=3, gap=2048
   codeBlock90699 stage4(.clk(clk), .reset(reset), .next_in(next_4), .next_out(next_5),
       .X0_in(t4_0), .Y0(t5_0),
       .X1_in(t4_1), .Y1(t5_1),
       .X2_in(t4_2), .Y2(t5_2),
       .X3_in(t4_3), .Y3(t5_3),
       .X4_in(t4_4), .Y4(t5_4),
       .X5_in(t4_5), .Y5(t5_5),
       .X6_in(t4_6), .Y6(t5_6),
       .X7_in(t4_7), .Y7(t5_7));


// latency=17, gap=2048
   rc90912 stage5(.clk(clk), .reset(reset), .next(next_5), .next_out(next_6),
    .X0(t5_0), .Y0(t6_0),
    .X1(t5_1), .Y1(t6_1),
    .X2(t5_2), .Y2(t6_2),
    .X3(t5_3), .Y3(t6_3),
    .X4(t5_4), .Y4(t6_4),
    .X5(t5_5), .Y5(t6_5),
    .X6(t5_6), .Y6(t6_6),
    .X7(t5_7), .Y7(t6_7));


// latency=8, gap=2048
   DirSum_91381 stage6(.next(next_6), .clk(clk), .reset(reset), .next_out(next_7),
       .X0(t6_0), .Y0(t7_0),
       .X1(t6_1), .Y1(t7_1),
       .X2(t6_2), .Y2(t7_2),
       .X3(t6_3), .Y3(t7_3),
       .X4(t6_4), .Y4(t7_4),
       .X5(t6_5), .Y5(t7_5),
       .X6(t6_6), .Y6(t7_6),
       .X7(t6_7), .Y7(t7_7));


// latency=3, gap=2048
   codeBlock91384 stage7(.clk(clk), .reset(reset), .next_in(next_7), .next_out(next_8),
       .X0_in(t7_0), .Y0(t8_0),
       .X1_in(t7_1), .Y1(t8_1),
       .X2_in(t7_2), .Y2(t8_2),
       .X3_in(t7_3), .Y3(t8_3),
       .X4_in(t7_4), .Y4(t8_4),
       .X5_in(t7_5), .Y5(t8_5),
       .X6_in(t7_6), .Y6(t8_6),
       .X7_in(t7_7), .Y7(t8_7));


// latency=53, gap=2048
   rc91597 stage8(.clk(clk), .reset(reset), .next(next_8), .next_out(next_9),
    .X0(t8_0), .Y0(t9_0),
    .X1(t8_1), .Y1(t9_1),
    .X2(t8_2), .Y2(t9_2),
    .X3(t8_3), .Y3(t9_3),
    .X4(t8_4), .Y4(t9_4),
    .X5(t8_5), .Y5(t9_5),
    .X6(t8_6), .Y6(t9_6),
    .X7(t8_7), .Y7(t9_7));


// latency=8, gap=2048
   DirSum_92450 stage9(.next(next_9), .clk(clk), .reset(reset), .next_out(next_10),
       .X0(t9_0), .Y0(t10_0),
       .X1(t9_1), .Y1(t10_1),
       .X2(t9_2), .Y2(t10_2),
       .X3(t9_3), .Y3(t10_3),
       .X4(t9_4), .Y4(t10_4),
       .X5(t9_5), .Y5(t10_5),
       .X6(t9_6), .Y6(t10_6),
       .X7(t9_7), .Y7(t10_7));


// latency=3, gap=2048
   codeBlock92453 stage10(.clk(clk), .reset(reset), .next_in(next_10), .next_out(next_11),
       .X0_in(t10_0), .Y0(t11_0),
       .X1_in(t10_1), .Y1(t11_1),
       .X2_in(t10_2), .Y2(t11_2),
       .X3_in(t10_3), .Y3(t11_3),
       .X4_in(t10_4), .Y4(t11_4),
       .X5_in(t10_5), .Y5(t11_5),
       .X6_in(t10_6), .Y6(t11_6),
       .X7_in(t10_7), .Y7(t11_7));


// latency=197, gap=2048
   rc92666 stage11(.clk(clk), .reset(reset), .next(next_11), .next_out(next_12),
    .X0(t11_0), .Y0(t12_0),
    .X1(t11_1), .Y1(t12_1),
    .X2(t11_2), .Y2(t12_2),
    .X3(t11_3), .Y3(t12_3),
    .X4(t11_4), .Y4(t12_4),
    .X5(t11_5), .Y5(t12_5),
    .X6(t11_6), .Y6(t12_6),
    .X7(t11_7), .Y7(t12_7));


// latency=8, gap=2048
   DirSum_95055 stage12(.next(next_12), .clk(clk), .reset(reset), .next_out(next_13),
       .X0(t12_0), .Y0(t13_0),
       .X1(t12_1), .Y1(t13_1),
       .X2(t12_2), .Y2(t13_2),
       .X3(t12_3), .Y3(t13_3),
       .X4(t12_4), .Y4(t13_4),
       .X5(t12_5), .Y5(t13_5),
       .X6(t12_6), .Y6(t13_6),
       .X7(t12_7), .Y7(t13_7));


// latency=3, gap=2048
   codeBlock95058 stage13(.clk(clk), .reset(reset), .next_in(next_13), .next_out(next_14),
       .X0_in(t13_0), .Y0(t14_0),
       .X1_in(t13_1), .Y1(t14_1),
       .X2_in(t13_2), .Y2(t14_2),
       .X3_in(t13_3), .Y3(t14_3),
       .X4_in(t13_4), .Y4(t14_4),
       .X5_in(t13_5), .Y5(t14_5),
       .X6_in(t13_6), .Y6(t14_6),
       .X7_in(t13_7), .Y7(t14_7));


// latency=773, gap=2048
   rc95271 stage14(.clk(clk), .reset(reset), .next(next_14), .next_out(next_15),
    .X0(t14_0), .Y0(t15_0),
    .X1(t14_1), .Y1(t15_1),
    .X2(t14_2), .Y2(t15_2),
    .X3(t14_3), .Y3(t15_3),
    .X4(t14_4), .Y4(t15_4),
    .X5(t14_5), .Y5(t15_5),
    .X6(t14_6), .Y6(t15_6),
    .X7(t14_7), .Y7(t15_7));


// latency=8, gap=2048
   DirSum_103804 stage15(.next(next_15), .clk(clk), .reset(reset), .next_out(next_16),
       .X0(t15_0), .Y0(t16_0),
       .X1(t15_1), .Y1(t16_1),
       .X2(t15_2), .Y2(t16_2),
       .X3(t15_3), .Y3(t16_3),
       .X4(t15_4), .Y4(t16_4),
       .X5(t15_5), .Y5(t16_5),
       .X6(t15_6), .Y6(t16_6),
       .X7(t15_7), .Y7(t16_7));


// latency=3, gap=2048
   codeBlock103807 stage16(.clk(clk), .reset(reset), .next_in(next_16), .next_out(next_17),
       .X0_in(t16_0), .Y0(t17_0),
       .X1_in(t16_1), .Y1(t17_1),
       .X2_in(t16_2), .Y2(t17_2),
       .X3_in(t16_3), .Y3(t17_3),
       .X4_in(t16_4), .Y4(t17_4),
       .X5_in(t16_5), .Y5(t17_5),
       .X6_in(t16_6), .Y6(t17_6),
       .X7_in(t16_7), .Y7(t17_7));


// latency=1541, gap=2048
   rc104020 stage17(.clk(clk), .reset(reset), .next(next_17), .next_out(next_18),
    .X0(t17_0), .Y0(t18_0),
    .X1(t17_1), .Y1(t18_1),
    .X2(t17_2), .Y2(t18_2),
    .X3(t17_3), .Y3(t18_3),
    .X4(t17_4), .Y4(t18_4),
    .X5(t17_5), .Y5(t18_5),
    .X6(t17_6), .Y6(t18_6),
    .X7(t17_7), .Y7(t18_7));


// latency=8, gap=2048
   DirSum_120744 stage18(.next(next_18), .clk(clk), .reset(reset), .next_out(next_19),
       .X0(t18_0), .Y0(t19_0),
       .X1(t18_1), .Y1(t19_1),
       .X2(t18_2), .Y2(t19_2),
       .X3(t18_3), .Y3(t19_3),
       .X4(t18_4), .Y4(t19_4),
       .X5(t18_5), .Y5(t19_5),
       .X6(t18_6), .Y6(t19_6),
       .X7(t18_7), .Y7(t19_7));


// latency=2, gap=2048
   codeBlock120746 stage19(.clk(clk), .reset(reset), .next_in(next_19), .next_out(next_20),
       .X0_in(t19_0), .Y0(t20_0),
       .X1_in(t19_1), .Y1(t20_1),
       .X2_in(t19_2), .Y2(t20_2),
       .X3_in(t19_3), .Y3(t20_3),
       .X4_in(t19_4), .Y4(t20_4),
       .X5_in(t19_5), .Y5(t20_5),
       .X6_in(t19_6), .Y6(t20_6),
       .X7_in(t19_7), .Y7(t20_7));


// latency=1027, gap=2048
   rc120903 stage20(.clk(clk), .reset(reset), .next(next_20), .next_out(next_21),
    .X0(t20_0), .Y0(t21_0),
    .X1(t20_1), .Y1(t21_1),
    .X2(t20_2), .Y2(t21_2),
    .X3(t20_3), .Y3(t21_3),
    .X4(t20_4), .Y4(t21_4),
    .X5(t20_5), .Y5(t21_5),
    .X6(t20_6), .Y6(t21_6),
    .X7(t20_7), .Y7(t21_7));


endmodule

// Latency: 2006
// Gap: 2048
module rc90108(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];

   perm90106 instPerm123244(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 2006
// Gap: 2048
module perm90106(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 2048;
   parameter logDepth = 11;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 2'd0};
   assign    addr0b = {outCount, 2'd0};
   assign    addr0c = {outCount_for_rd_addr, 2'd0};
   assign    addr1 = {inCount, 2'd1};
   assign    addr1b = {outCount, 2'd1};
   assign    addr1c = {outCount_for_rd_addr, 2'd1};
   assign    addr2 = {inCount, 2'd2};
   assign    addr2b = {outCount, 2'd2};
   assign    addr2c = {outCount_for_rd_addr, 2'd2};
   assign    addr3 = {inCount, 2'd3};
   assign    addr3b = {outCount, 2'd3};
   assign    addr3c = {outCount_for_rd_addr, 2'd3};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_1_0, w_1_1, w_1_2, w_1_3, w_2_0, w_2_1, w_2_2, w_2_3;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_2_0, z_2_1, z_2_2, z_2_3;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_1_0, u_1_1, u_1_2, u_1_3, u_2_0, u_2_1, u_2_2, u_2_3;

    reg inFlip1, outFlip1;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
    end

   assign inBank0[0] = addr0[11] ^ addr0[1];
   assign inBank0[1] = addr0[12] ^ addr0[0];
   assign inAddr0[0] = addr0[9];
   assign inAddr0[1] = addr0[10];
   assign inAddr0[2] = addr0[7];
   assign inAddr0[3] = addr0[8];
   assign inAddr0[4] = addr0[5];
   assign inAddr0[5] = addr0[6];
   assign inAddr0[6] = addr0[3];
   assign inAddr0[7] = addr0[4];
   assign inAddr0[8] = addr0[1];
   assign inAddr0[9] = addr0[2];
   assign inAddr0[10] = addr0[0];
   assign outBank0[0] = addr0b[10] ^ addr0b[0];
   assign outBank0[1] = addr0b[12] ^ addr0b[1];
   assign outAddr0[0] = addr0b[2];
   assign outAddr0[1] = addr0b[3];
   assign outAddr0[2] = addr0b[4];
   assign outAddr0[3] = addr0b[5];
   assign outAddr0[4] = addr0b[6];
   assign outAddr0[5] = addr0b[7];
   assign outAddr0[6] = addr0b[8];
   assign outAddr0[7] = addr0b[9];
   assign outAddr0[8] = addr0b[10];
   assign outAddr0[9] = addr0b[11];
   assign outAddr0[10] = addr0b[12];
   assign outBank_a0[0] = addr0c[10] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[12] ^ addr0c[1];
   assign outAddr_a0[0] = addr0c[2];
   assign outAddr_a0[1] = addr0c[3];
   assign outAddr_a0[2] = addr0c[4];
   assign outAddr_a0[3] = addr0c[5];
   assign outAddr_a0[4] = addr0c[6];
   assign outAddr_a0[5] = addr0c[7];
   assign outAddr_a0[6] = addr0c[8];
   assign outAddr_a0[7] = addr0c[9];
   assign outAddr_a0[8] = addr0c[10];
   assign outAddr_a0[9] = addr0c[11];
   assign outAddr_a0[10] = addr0c[12];

   assign inBank1[0] = addr1[11] ^ addr1[1];
   assign inBank1[1] = addr1[12] ^ addr1[0];
   assign inAddr1[0] = addr1[9];
   assign inAddr1[1] = addr1[10];
   assign inAddr1[2] = addr1[7];
   assign inAddr1[3] = addr1[8];
   assign inAddr1[4] = addr1[5];
   assign inAddr1[5] = addr1[6];
   assign inAddr1[6] = addr1[3];
   assign inAddr1[7] = addr1[4];
   assign inAddr1[8] = addr1[1];
   assign inAddr1[9] = addr1[2];
   assign inAddr1[10] = addr1[0];
   assign outBank1[0] = addr1b[10] ^ addr1b[0];
   assign outBank1[1] = addr1b[12] ^ addr1b[1];
   assign outAddr1[0] = addr1b[2];
   assign outAddr1[1] = addr1b[3];
   assign outAddr1[2] = addr1b[4];
   assign outAddr1[3] = addr1b[5];
   assign outAddr1[4] = addr1b[6];
   assign outAddr1[5] = addr1b[7];
   assign outAddr1[6] = addr1b[8];
   assign outAddr1[7] = addr1b[9];
   assign outAddr1[8] = addr1b[10];
   assign outAddr1[9] = addr1b[11];
   assign outAddr1[10] = addr1b[12];
   assign outBank_a1[0] = addr1c[10] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[12] ^ addr1c[1];
   assign outAddr_a1[0] = addr1c[2];
   assign outAddr_a1[1] = addr1c[3];
   assign outAddr_a1[2] = addr1c[4];
   assign outAddr_a1[3] = addr1c[5];
   assign outAddr_a1[4] = addr1c[6];
   assign outAddr_a1[5] = addr1c[7];
   assign outAddr_a1[6] = addr1c[8];
   assign outAddr_a1[7] = addr1c[9];
   assign outAddr_a1[8] = addr1c[10];
   assign outAddr_a1[9] = addr1c[11];
   assign outAddr_a1[10] = addr1c[12];

   assign inBank2[0] = addr2[11] ^ addr2[1];
   assign inBank2[1] = addr2[12] ^ addr2[0];
   assign inAddr2[0] = addr2[9];
   assign inAddr2[1] = addr2[10];
   assign inAddr2[2] = addr2[7];
   assign inAddr2[3] = addr2[8];
   assign inAddr2[4] = addr2[5];
   assign inAddr2[5] = addr2[6];
   assign inAddr2[6] = addr2[3];
   assign inAddr2[7] = addr2[4];
   assign inAddr2[8] = addr2[1];
   assign inAddr2[9] = addr2[2];
   assign inAddr2[10] = addr2[0];
   assign outBank2[0] = addr2b[10] ^ addr2b[0];
   assign outBank2[1] = addr2b[12] ^ addr2b[1];
   assign outAddr2[0] = addr2b[2];
   assign outAddr2[1] = addr2b[3];
   assign outAddr2[2] = addr2b[4];
   assign outAddr2[3] = addr2b[5];
   assign outAddr2[4] = addr2b[6];
   assign outAddr2[5] = addr2b[7];
   assign outAddr2[6] = addr2b[8];
   assign outAddr2[7] = addr2b[9];
   assign outAddr2[8] = addr2b[10];
   assign outAddr2[9] = addr2b[11];
   assign outAddr2[10] = addr2b[12];
   assign outBank_a2[0] = addr2c[10] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[12] ^ addr2c[1];
   assign outAddr_a2[0] = addr2c[2];
   assign outAddr_a2[1] = addr2c[3];
   assign outAddr_a2[2] = addr2c[4];
   assign outAddr_a2[3] = addr2c[5];
   assign outAddr_a2[4] = addr2c[6];
   assign outAddr_a2[5] = addr2c[7];
   assign outAddr_a2[6] = addr2c[8];
   assign outAddr_a2[7] = addr2c[9];
   assign outAddr_a2[8] = addr2c[10];
   assign outAddr_a2[9] = addr2c[11];
   assign outAddr_a2[10] = addr2c[12];

   assign inBank3[0] = addr3[11] ^ addr3[1];
   assign inBank3[1] = addr3[12] ^ addr3[0];
   assign inAddr3[0] = addr3[9];
   assign inAddr3[1] = addr3[10];
   assign inAddr3[2] = addr3[7];
   assign inAddr3[3] = addr3[8];
   assign inAddr3[4] = addr3[5];
   assign inAddr3[5] = addr3[6];
   assign inAddr3[6] = addr3[3];
   assign inAddr3[7] = addr3[4];
   assign inAddr3[8] = addr3[1];
   assign inAddr3[9] = addr3[2];
   assign inAddr3[10] = addr3[0];
   assign outBank3[0] = addr3b[10] ^ addr3b[0];
   assign outBank3[1] = addr3b[12] ^ addr3b[1];
   assign outAddr3[0] = addr3b[2];
   assign outAddr3[1] = addr3b[3];
   assign outAddr3[2] = addr3b[4];
   assign outAddr3[3] = addr3b[5];
   assign outAddr3[4] = addr3b[6];
   assign outAddr3[5] = addr3b[7];
   assign outAddr3[6] = addr3b[8];
   assign outAddr3[7] = addr3b[9];
   assign outAddr3[8] = addr3b[10];
   assign outAddr3[9] = addr3b[11];
   assign outAddr3[10] = addr3b[12];
   assign outBank_a3[0] = addr3c[10] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[12] ^ addr3c[1];
   assign outAddr_a3[0] = addr3c[2];
   assign outAddr_a3[1] = addr3c[3];
   assign outAddr_a3[2] = addr3c[4];
   assign outAddr_a3[3] = addr3c[5];
   assign outAddr_a3[4] = addr3c[6];
   assign outAddr_a3[5] = addr3c[7];
   assign outAddr_a3[6] = addr3c[8];
   assign outAddr_a3[7] = addr3c[9];
   assign outAddr_a3[8] = addr3c[10];
   assign outAddr_a3[9] = addr3c[11];
   assign outAddr_a3[10] = addr3c[12];

   nextReg #(2002, 11) nextReg_123249(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(4, 1) shiftFIFO_123252(.X(next0), .Y(next_out), .clk(clk));


   memArray8192_90106 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip1), .outFlip(outFlip1), .next(next), .reset(reset),
        .x0(w_2_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_2_0[logDepth-1:0]),
        .outAddr0(u_2_0), 
        .x1(w_2_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_2_1[logDepth-1:0]),
        .outAddr1(u_2_1), 
        .x2(w_2_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_2_2[logDepth-1:0]),
        .outAddr2(u_2_2), 
        .x3(w_2_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_2_3[logDepth-1:0]),
        .outAddr3(u_2_3), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 2001)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 2004)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
         if (inCount == 2001) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 2047) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 2001)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_2 = {x1, inAddr1};
    assign w_0_1 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign y0 = z_2_0;
    assign y1 = z_2_1;
    assign y2 = z_2_2;
    assign y3 = z_2_3;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[10];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[9];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_1_pipe), .y0(w_2_0), .y1(w_2_1), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_2_pipe), .x1(w_1_3_pipe), .y0(w_2_2), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[10];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[8];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_1_pipe), .y0(z_2_0), .y1(z_2_1), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_2_pipe), .x1(z_1_3_pipe), .y0(z_2_2), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[10];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[8];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_1_pipe), .y0(u_2_0), .y1(u_2_1), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_2_pipe), .x1(u_1_3_pipe), .y0(u_2_2), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
endmodule

module memArray8192_90106(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                clk, inFlip, outFlip);

   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 2048;
   parameter logDepth = 11;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   nextReg #(2048, 11) nextReg_123257(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
endmodule

module nextReg(X, Y, reset, clk);
   parameter depth=2, logDepth=1;

   output Y;
   input X;
   input              clk, reset;
   reg [logDepth:0] count;
   reg                active;

   assign Y = (count == depth) ? 1 : 0;

   always @ (posedge clk) begin
      if (reset == 1) begin
         count <= 0;
         active <= 0;
      end
      else if (X == 1) begin
         active <= 1;
         count <= 1;
      end
      else if (count == depth) begin
         count <= 0;
         active <= 0;
      end
      else if (active)
         count <= count+1;
   end
endmodule


module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module switch(ctrl, x0, x1, y0, y1);
    parameter width = 16;
    input [width-1:0] x0, x1;
    output [width-1:0] y0, y1;
    input ctrl;
    assign y0 = (ctrl == 0) ? x0 : x1;
    assign y1 = (ctrl == 0) ? x1 : x0;
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock90110(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(2, 1) shiftFIFO_123264(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a738;
   wire signed [15:0] a739;
   wire signed [15:0] a740;
   wire signed [15:0] a741;
   wire signed [15:0] a746;
   wire signed [15:0] a747;
   wire signed [15:0] a748;
   wire signed [15:0] a749;
   wire signed [16:0] tm242;
   wire signed [16:0] tm243;
   wire signed [16:0] tm244;
   wire signed [16:0] tm245;
   wire signed [16:0] tm246;
   wire signed [16:0] tm247;
   wire signed [16:0] tm248;
   wire signed [16:0] tm249;
   wire signed [15:0] t810;
   wire signed [15:0] t811;
   wire signed [15:0] t812;
   wire signed [15:0] t813;
   wire signed [15:0] t814;
   wire signed [15:0] t815;
   wire signed [15:0] t816;
   wire signed [15:0] t817;
   wire signed [16:0] tm250;
   wire signed [16:0] tm251;
   wire signed [16:0] tm252;
   wire signed [16:0] tm253;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm254;
   wire signed [16:0] tm255;
   wire signed [16:0] tm256;
   wire signed [16:0] tm257;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t818;
   wire signed [15:0] t819;
   wire signed [15:0] t820;
   wire signed [15:0] t821;
   wire signed [15:0] t822;
   wire signed [15:0] t823;
   wire signed [15:0] t824;
   wire signed [15:0] t825;


   assign a738 = X0;
   assign a739 = X4;
   assign a740 = X1;
   assign a741 = X5;
   assign a746 = X2;
   assign a747 = X6;
   assign a748 = X3;
   assign a749 = X7;
   assign t810 = tm242[16:1];
   assign t811 = tm243[16:1];
   assign t812 = tm244[16:1];
   assign t813 = tm245[16:1];
   assign t814 = tm246[16:1];
   assign t815 = tm247[16:1];
   assign t816 = tm248[16:1];
   assign t817 = tm249[16:1];
   assign Y0 = t818;
   assign Y1 = t819;
   assign Y4 = t820;
   assign Y5 = t821;
   assign Y2 = t822;
   assign Y3 = t823;
   assign Y6 = t824;
   assign Y7 = t825;
   assign t818 = tm250[16:1];
   assign t819 = tm251[16:1];
   assign t820 = tm252[16:1];
   assign t821 = tm253[16:1];
   assign t822 = tm254[16:1];
   assign t823 = tm255[16:1];
   assign t824 = tm256[16:1];
   assign t825 = tm257[16:1];

    addfxp #(17, 1) add90122(.a({{1{a738[15]}}, a738}), .b({{1{a739[15]}}, a739}), .clk(clk), .q(tm242));    // 0
    addfxp #(17, 1) add90137(.a({{1{a740[15]}}, a740}), .b({{1{a741[15]}}, a741}), .clk(clk), .q(tm243));    // 0
    subfxp #(17, 1) sub90152(.a({{1{a738[15]}}, a738}), .b({{1{a739[15]}}, a739}), .clk(clk), .q(tm244));    // 0
    subfxp #(17, 1) sub90167(.a({{1{a740[15]}}, a740}), .b({{1{a741[15]}}, a741}), .clk(clk), .q(tm245));    // 0
    addfxp #(17, 1) add90182(.a({{1{a746[15]}}, a746}), .b({{1{a747[15]}}, a747}), .clk(clk), .q(tm246));    // 0
    addfxp #(17, 1) add90197(.a({{1{a748[15]}}, a748}), .b({{1{a749[15]}}, a749}), .clk(clk), .q(tm247));    // 0
    subfxp #(17, 1) sub90212(.a({{1{a746[15]}}, a746}), .b({{1{a747[15]}}, a747}), .clk(clk), .q(tm248));    // 0
    subfxp #(17, 1) sub90227(.a({{1{a748[15]}}, a748}), .b({{1{a749[15]}}, a749}), .clk(clk), .q(tm249));    // 0
    addfxp #(17, 1) add90234(.a({{1{t810[15]}}, t810}), .b({{1{t814[15]}}, t814}), .clk(clk), .q(tm250));    // 1
    addfxp #(17, 1) add90241(.a({{1{t811[15]}}, t811}), .b({{1{t815[15]}}, t815}), .clk(clk), .q(tm251));    // 1
    subfxp #(17, 1) sub90248(.a({{1{t810[15]}}, t810}), .b({{1{t814[15]}}, t814}), .clk(clk), .q(tm252));    // 1
    subfxp #(17, 1) sub90255(.a({{1{t811[15]}}, t811}), .b({{1{t815[15]}}, t815}), .clk(clk), .q(tm253));    // 1
    addfxp #(17, 1) add90278(.a({{1{t812[15]}}, t812}), .b({{1{t817[15]}}, t817}), .clk(clk), .q(tm254));    // 1
    subfxp #(17, 1) sub90285(.a({{1{t813[15]}}, t813}), .b({{1{t816[15]}}, t816}), .clk(clk), .q(tm255));    // 1
    subfxp #(17, 1) sub90292(.a({{1{t812[15]}}, t812}), .b({{1{t817[15]}}, t817}), .clk(clk), .q(tm256));    // 1
    addfxp #(17, 1) add90299(.a({{1{t813[15]}}, t813}), .b({{1{t816[15]}}, t816}), .clk(clk), .q(tm257));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 8
// Gap: 4
module rc90323(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];

   perm90321 instPerm123265(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 8
// Gap: 4
module perm90321(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 4;
   parameter logDepth = 2;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 2'd0};
   assign    addr0b = {outCount, 2'd0};
   assign    addr0c = {outCount_for_rd_addr, 2'd0};
   assign    addr1 = {inCount, 2'd1};
   assign    addr1b = {outCount, 2'd1};
   assign    addr1c = {outCount_for_rd_addr, 2'd1};
   assign    addr2 = {inCount, 2'd2};
   assign    addr2b = {outCount, 2'd2};
   assign    addr2c = {outCount_for_rd_addr, 2'd2};
   assign    addr3 = {inCount, 2'd3};
   assign    addr3b = {outCount, 2'd3};
   assign    addr3c = {outCount_for_rd_addr, 2'd3};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_1_0, w_1_1, w_1_2, w_1_3, w_2_0, w_2_1, w_2_2, w_2_3;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_2_0, z_2_1, z_2_2, z_2_3;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_1_0, u_1_1, u_1_2, u_1_3, u_2_0, u_2_1, u_2_2, u_2_3;

    reg inFlip1, outFlip1;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
    end

   assign inBank0[0] = addr0[2] ^ addr0[0];
   assign inBank0[1] = addr0[3] ^ addr0[1];
   assign inAddr0[0] = addr0[0];
   assign inAddr0[1] = addr0[1];
   assign outBank0[0] = addr0b[2] ^ addr0b[0];
   assign outBank0[1] = addr0b[3] ^ addr0b[1];
   assign outAddr0[0] = addr0b[2];
   assign outAddr0[1] = addr0b[3];
   assign outBank_a0[0] = addr0c[2] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[3] ^ addr0c[1];
   assign outAddr_a0[0] = addr0c[2];
   assign outAddr_a0[1] = addr0c[3];

   assign inBank1[0] = addr1[2] ^ addr1[0];
   assign inBank1[1] = addr1[3] ^ addr1[1];
   assign inAddr1[0] = addr1[0];
   assign inAddr1[1] = addr1[1];
   assign outBank1[0] = addr1b[2] ^ addr1b[0];
   assign outBank1[1] = addr1b[3] ^ addr1b[1];
   assign outAddr1[0] = addr1b[2];
   assign outAddr1[1] = addr1b[3];
   assign outBank_a1[0] = addr1c[2] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[3] ^ addr1c[1];
   assign outAddr_a1[0] = addr1c[2];
   assign outAddr_a1[1] = addr1c[3];

   assign inBank2[0] = addr2[2] ^ addr2[0];
   assign inBank2[1] = addr2[3] ^ addr2[1];
   assign inAddr2[0] = addr2[0];
   assign inAddr2[1] = addr2[1];
   assign outBank2[0] = addr2b[2] ^ addr2b[0];
   assign outBank2[1] = addr2b[3] ^ addr2b[1];
   assign outAddr2[0] = addr2b[2];
   assign outAddr2[1] = addr2b[3];
   assign outBank_a2[0] = addr2c[2] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[3] ^ addr2c[1];
   assign outAddr_a2[0] = addr2c[2];
   assign outAddr_a2[1] = addr2c[3];

   assign inBank3[0] = addr3[2] ^ addr3[0];
   assign inBank3[1] = addr3[3] ^ addr3[1];
   assign inAddr3[0] = addr3[0];
   assign inAddr3[1] = addr3[1];
   assign outBank3[0] = addr3b[2] ^ addr3b[0];
   assign outBank3[1] = addr3b[3] ^ addr3b[1];
   assign outAddr3[0] = addr3b[2];
   assign outAddr3[1] = addr3b[3];
   assign outBank_a3[0] = addr3c[2] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[3] ^ addr3c[1];
   assign outAddr_a3[0] = addr3c[2];
   assign outAddr_a3[1] = addr3c[3];

   shiftRegFIFO #(4, 1) shiftFIFO_123268(.X(next), .Y(next0), .clk(clk));


   shiftRegFIFO #(4, 1) shiftFIFO_123271(.X(next0), .Y(next_out), .clk(clk));


   memArray16_90321 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip1), .outFlip(outFlip1), .next(next), .reset(reset),
        .x0(w_2_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_2_0[logDepth-1:0]),
        .outAddr0(u_2_0), 
        .x1(w_2_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_2_1[logDepth-1:0]),
        .outAddr1(u_2_1), 
        .x2(w_2_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_2_2[logDepth-1:0]),
        .outAddr2(u_2_2), 
        .x3(w_2_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_2_3[logDepth-1:0]),
        .outAddr3(u_2_3), 
        .clk(clk));

    reg resetOutCountRd2_4;
    reg resetOutCountRd2_5;
    reg resetOutCountRd2_6;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_4 <= 0;
            resetOutCountRd2_5 <= 0;
            resetOutCountRd2_6 <= 0;
        end
        else begin
            resetOutCountRd2_4 <= (inCount == 3) ? 1'b1 : 1'b0;
            resetOutCountRd2_5 <= resetOutCountRd2_4;
            resetOutCountRd2_6 <= resetOutCountRd2_5;
            if (resetOutCountRd2_6 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 3)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
         if (inCount == 3) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 3) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 3)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign y0 = z_2_0;
    assign y1 = z_2_1;
    assign y2 = z_2_2;
    assign y3 = z_2_3;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[1];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[0];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_1_pipe), .y0(w_2_0), .y1(w_2_1), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_2_pipe), .x1(w_1_3_pipe), .y0(w_2_2), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[1];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[0];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_1_pipe), .y0(z_2_0), .y1(z_2_1), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_2_pipe), .x1(z_1_3_pipe), .y0(z_2_2), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[1];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[0];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_1_pipe), .y0(u_2_0), .y1(u_2_1), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_2_pipe), .x1(u_1_3_pipe), .y0(u_2_2), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
endmodule

module memArray16_90321(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                clk, inFlip, outFlip);

   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 4;
   parameter logDepth = 2;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   shiftRegFIFO #(4, 1) shiftFIFO_123274(.X(next), .Y(next0), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 4
module DirSum_90696(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7);

   output next_out;
   input clk, reset, next;

   reg [1:0] i6;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   always @(posedge clk) begin
      if (reset == 1) begin
         i6 <= 0;
      end
      else begin
         if (next == 1)
            i6 <= 0;
         else if (i6 == 3)
            i6 <= 0;
         else
            i6 <= i6 + 1;
      end
   end

   codeBlock90326 codeBlockIsnt123275(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i6_in(i6),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7));

endmodule

module D58_90652(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hc4df;
      2: out3 <= 16'hd2bf;
      3: out3 <= 16'h187e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D57_90658(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hd2bf;
      2: out3 <= 16'hc000;
      3: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D56_90664(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'he782;
      2: out3 <= 16'hd2bf;
      3: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D54_90676(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h187e;
      2: out3 <= 16'hd2bf;
      3: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D53_90682(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h2d41;
      2: out3 <= 16'h0;
      3: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D52_90688(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3b21;
      2: out3 <= 16'h2d41;
      3: out3 <= 16'h187e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 8
// Gap: 1
module codeBlock90326(clk, reset, next_in, next_out,
   i6_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [1:0] i6_in;
   reg [1:0] i6;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(7, 1) shiftFIFO_123278(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a706;
   wire signed [15:0] a683;
   wire signed [15:0] a709;
   wire signed [15:0] a687;
   wire signed [15:0] a710;
   wire signed [15:0] a711;
   wire signed [15:0] a714;
   wire signed [15:0] a715;
   wire signed [15:0] a718;
   wire signed [15:0] a719;
   reg signed [15:0] tm346;
   reg signed [15:0] tm350;
   reg signed [15:0] tm362;
   reg signed [15:0] tm366;
   reg signed [15:0] tm378;
   reg signed [15:0] tm382;
   reg signed [15:0] tm394;
   reg signed [15:0] tm401;
   reg signed [15:0] tm347;
   reg signed [15:0] tm351;
   reg signed [15:0] tm363;
   reg signed [15:0] tm367;
   reg signed [15:0] tm379;
   reg signed [15:0] tm383;
   reg signed [15:0] tm395;
   reg signed [15:0] tm402;
   wire signed [15:0] tm2;
   wire signed [15:0] a688;
   wire signed [15:0] tm3;
   wire signed [15:0] a690;
   wire signed [15:0] tm4;
   wire signed [15:0] a694;
   wire signed [15:0] tm5;
   wire signed [15:0] a696;
   wire signed [15:0] tm6;
   wire signed [15:0] a700;
   wire signed [15:0] tm7;
   wire signed [15:0] a702;
   reg signed [15:0] tm348;
   reg signed [15:0] tm352;
   reg signed [15:0] tm364;
   reg signed [15:0] tm368;
   reg signed [15:0] tm380;
   reg signed [15:0] tm384;
   reg signed [15:0] tm396;
   reg signed [15:0] tm403;
   reg signed [15:0] tm52;
   reg signed [15:0] tm53;
   reg signed [15:0] tm56;
   reg signed [15:0] tm57;
   reg signed [15:0] tm60;
   reg signed [15:0] tm61;
   reg signed [15:0] tm349;
   reg signed [15:0] tm353;
   reg signed [15:0] tm365;
   reg signed [15:0] tm369;
   reg signed [15:0] tm381;
   reg signed [15:0] tm385;
   reg signed [15:0] tm397;
   reg signed [15:0] tm404;
   reg signed [15:0] tm398;
   reg signed [15:0] tm405;
   wire signed [15:0] a689;
   wire signed [15:0] a691;
   wire signed [15:0] a692;
   wire signed [15:0] a693;
   wire signed [15:0] a695;
   wire signed [15:0] a697;
   wire signed [15:0] a698;
   wire signed [15:0] a699;
   wire signed [15:0] a701;
   wire signed [15:0] a703;
   wire signed [15:0] a704;
   wire signed [15:0] a705;
   reg signed [15:0] tm399;
   reg signed [15:0] tm406;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   reg signed [15:0] tm400;
   reg signed [15:0] tm407;


   assign a706 = X0;
   assign a683 = a706;
   assign a709 = X1;
   assign a687 = a709;
   assign a710 = X2;
   assign a711 = X3;
   assign a714 = X4;
   assign a715 = X5;
   assign a718 = X6;
   assign a719 = X7;
   assign a688 = tm2;
   assign a690 = tm3;
   assign a694 = tm4;
   assign a696 = tm5;
   assign a700 = tm6;
   assign a702 = tm7;
   assign Y0 = tm400;
   assign Y1 = tm407;

   D58_90652 instD58inst0_90652(.addr(i6[1:0]), .out(tm7), .clk(clk));

   D57_90658 instD57inst0_90658(.addr(i6[1:0]), .out(tm5), .clk(clk));

   D56_90664 instD56inst0_90664(.addr(i6[1:0]), .out(tm3), .clk(clk));

   D54_90676 instD54inst0_90676(.addr(i6[1:0]), .out(tm6), .clk(clk));

   D53_90682 instD53inst0_90682(.addr(i6[1:0]), .out(tm4), .clk(clk));

   D52_90688 instD52inst0_90688(.addr(i6[1:0]), .out(tm2), .clk(clk));

    multfix #(16, 2) m90425(.a(tm52), .b(tm349), .clk(clk), .q_sc(a689), .q_unsc(), .rst(reset));
    multfix #(16, 2) m90447(.a(tm53), .b(tm353), .clk(clk), .q_sc(a691), .q_unsc(), .rst(reset));
    multfix #(16, 2) m90465(.a(tm53), .b(tm349), .clk(clk), .q_sc(a692), .q_unsc(), .rst(reset));
    multfix #(16, 2) m90476(.a(tm52), .b(tm353), .clk(clk), .q_sc(a693), .q_unsc(), .rst(reset));
    multfix #(16, 2) m90505(.a(tm56), .b(tm365), .clk(clk), .q_sc(a695), .q_unsc(), .rst(reset));
    multfix #(16, 2) m90527(.a(tm57), .b(tm369), .clk(clk), .q_sc(a697), .q_unsc(), .rst(reset));
    multfix #(16, 2) m90545(.a(tm57), .b(tm365), .clk(clk), .q_sc(a698), .q_unsc(), .rst(reset));
    multfix #(16, 2) m90556(.a(tm56), .b(tm369), .clk(clk), .q_sc(a699), .q_unsc(), .rst(reset));
    multfix #(16, 2) m90585(.a(tm60), .b(tm381), .clk(clk), .q_sc(a701), .q_unsc(), .rst(reset));
    multfix #(16, 2) m90607(.a(tm61), .b(tm385), .clk(clk), .q_sc(a703), .q_unsc(), .rst(reset));
    multfix #(16, 2) m90625(.a(tm61), .b(tm381), .clk(clk), .q_sc(a704), .q_unsc(), .rst(reset));
    multfix #(16, 2) m90636(.a(tm60), .b(tm385), .clk(clk), .q_sc(a705), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub90454(.a(a689), .b(a691), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add90483(.a(a692), .b(a693), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub90534(.a(a695), .b(a697), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add90563(.a(a698), .b(a699), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub90614(.a(a701), .b(a703), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add90643(.a(a704), .b(a705), .clk(clk), .q(Y7));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm52 <= 0;
         tm349 <= 0;
         tm53 <= 0;
         tm353 <= 0;
         tm53 <= 0;
         tm349 <= 0;
         tm52 <= 0;
         tm353 <= 0;
         tm56 <= 0;
         tm365 <= 0;
         tm57 <= 0;
         tm369 <= 0;
         tm57 <= 0;
         tm365 <= 0;
         tm56 <= 0;
         tm369 <= 0;
         tm60 <= 0;
         tm381 <= 0;
         tm61 <= 0;
         tm385 <= 0;
         tm61 <= 0;
         tm381 <= 0;
         tm60 <= 0;
         tm385 <= 0;
      end
      else begin
         i6 <= i6_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
         tm346 <= a710;
         tm350 <= a711;
         tm362 <= a714;
         tm366 <= a715;
         tm378 <= a718;
         tm382 <= a719;
         tm394 <= a683;
         tm401 <= a687;
         tm347 <= tm346;
         tm351 <= tm350;
         tm363 <= tm362;
         tm367 <= tm366;
         tm379 <= tm378;
         tm383 <= tm382;
         tm395 <= tm394;
         tm402 <= tm401;
         tm348 <= tm347;
         tm352 <= tm351;
         tm364 <= tm363;
         tm368 <= tm367;
         tm380 <= tm379;
         tm384 <= tm383;
         tm396 <= tm395;
         tm403 <= tm402;
         tm52 <= a688;
         tm53 <= a690;
         tm56 <= a694;
         tm57 <= a696;
         tm60 <= a700;
         tm61 <= a702;
         tm349 <= tm348;
         tm353 <= tm352;
         tm365 <= tm364;
         tm369 <= tm368;
         tm381 <= tm380;
         tm385 <= tm384;
         tm397 <= tm396;
         tm404 <= tm403;
         tm398 <= tm397;
         tm405 <= tm404;
         tm399 <= tm398;
         tm406 <= tm405;
         tm400 <= tm399;
         tm407 <= tm406;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock90699(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(2, 1) shiftFIFO_123281(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a618;
   wire signed [15:0] a619;
   wire signed [15:0] a620;
   wire signed [15:0] a621;
   wire signed [15:0] a626;
   wire signed [15:0] a627;
   wire signed [15:0] a628;
   wire signed [15:0] a629;
   wire signed [16:0] tm258;
   wire signed [16:0] tm259;
   wire signed [16:0] tm260;
   wire signed [16:0] tm261;
   wire signed [16:0] tm262;
   wire signed [16:0] tm263;
   wire signed [16:0] tm264;
   wire signed [16:0] tm265;
   wire signed [15:0] t682;
   wire signed [15:0] t683;
   wire signed [15:0] t684;
   wire signed [15:0] t685;
   wire signed [15:0] t686;
   wire signed [15:0] t687;
   wire signed [15:0] t688;
   wire signed [15:0] t689;
   wire signed [16:0] tm266;
   wire signed [16:0] tm267;
   wire signed [16:0] tm268;
   wire signed [16:0] tm269;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm270;
   wire signed [16:0] tm271;
   wire signed [16:0] tm272;
   wire signed [16:0] tm273;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t690;
   wire signed [15:0] t691;
   wire signed [15:0] t692;
   wire signed [15:0] t693;
   wire signed [15:0] t694;
   wire signed [15:0] t695;
   wire signed [15:0] t696;
   wire signed [15:0] t697;


   assign a618 = X0;
   assign a619 = X4;
   assign a620 = X1;
   assign a621 = X5;
   assign a626 = X2;
   assign a627 = X6;
   assign a628 = X3;
   assign a629 = X7;
   assign t682 = tm258[16:1];
   assign t683 = tm259[16:1];
   assign t684 = tm260[16:1];
   assign t685 = tm261[16:1];
   assign t686 = tm262[16:1];
   assign t687 = tm263[16:1];
   assign t688 = tm264[16:1];
   assign t689 = tm265[16:1];
   assign Y0 = t690;
   assign Y1 = t691;
   assign Y4 = t692;
   assign Y5 = t693;
   assign Y2 = t694;
   assign Y3 = t695;
   assign Y6 = t696;
   assign Y7 = t697;
   assign t690 = tm266[16:1];
   assign t691 = tm267[16:1];
   assign t692 = tm268[16:1];
   assign t693 = tm269[16:1];
   assign t694 = tm270[16:1];
   assign t695 = tm271[16:1];
   assign t696 = tm272[16:1];
   assign t697 = tm273[16:1];

    addfxp #(17, 1) add90711(.a({{1{a618[15]}}, a618}), .b({{1{a619[15]}}, a619}), .clk(clk), .q(tm258));    // 0
    addfxp #(17, 1) add90726(.a({{1{a620[15]}}, a620}), .b({{1{a621[15]}}, a621}), .clk(clk), .q(tm259));    // 0
    subfxp #(17, 1) sub90741(.a({{1{a618[15]}}, a618}), .b({{1{a619[15]}}, a619}), .clk(clk), .q(tm260));    // 0
    subfxp #(17, 1) sub90756(.a({{1{a620[15]}}, a620}), .b({{1{a621[15]}}, a621}), .clk(clk), .q(tm261));    // 0
    addfxp #(17, 1) add90771(.a({{1{a626[15]}}, a626}), .b({{1{a627[15]}}, a627}), .clk(clk), .q(tm262));    // 0
    addfxp #(17, 1) add90786(.a({{1{a628[15]}}, a628}), .b({{1{a629[15]}}, a629}), .clk(clk), .q(tm263));    // 0
    subfxp #(17, 1) sub90801(.a({{1{a626[15]}}, a626}), .b({{1{a627[15]}}, a627}), .clk(clk), .q(tm264));    // 0
    subfxp #(17, 1) sub90816(.a({{1{a628[15]}}, a628}), .b({{1{a629[15]}}, a629}), .clk(clk), .q(tm265));    // 0
    addfxp #(17, 1) add90823(.a({{1{t682[15]}}, t682}), .b({{1{t686[15]}}, t686}), .clk(clk), .q(tm266));    // 1
    addfxp #(17, 1) add90830(.a({{1{t683[15]}}, t683}), .b({{1{t687[15]}}, t687}), .clk(clk), .q(tm267));    // 1
    subfxp #(17, 1) sub90837(.a({{1{t682[15]}}, t682}), .b({{1{t686[15]}}, t686}), .clk(clk), .q(tm268));    // 1
    subfxp #(17, 1) sub90844(.a({{1{t683[15]}}, t683}), .b({{1{t687[15]}}, t687}), .clk(clk), .q(tm269));    // 1
    addfxp #(17, 1) add90867(.a({{1{t684[15]}}, t684}), .b({{1{t689[15]}}, t689}), .clk(clk), .q(tm270));    // 1
    subfxp #(17, 1) sub90874(.a({{1{t685[15]}}, t685}), .b({{1{t688[15]}}, t688}), .clk(clk), .q(tm271));    // 1
    subfxp #(17, 1) sub90881(.a({{1{t684[15]}}, t684}), .b({{1{t689[15]}}, t689}), .clk(clk), .q(tm272));    // 1
    addfxp #(17, 1) add90888(.a({{1{t685[15]}}, t685}), .b({{1{t688[15]}}, t688}), .clk(clk), .q(tm273));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 17
// Gap: 16
module rc90912(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];

   perm90910 instPerm123282(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 17
// Gap: 16
module perm90910(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 16;
   parameter logDepth = 4;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 2'd0};
   assign    addr0b = {outCount, 2'd0};
   assign    addr0c = {outCount_for_rd_addr, 2'd0};
   assign    addr1 = {inCount, 2'd1};
   assign    addr1b = {outCount, 2'd1};
   assign    addr1c = {outCount_for_rd_addr, 2'd1};
   assign    addr2 = {inCount, 2'd2};
   assign    addr2b = {outCount, 2'd2};
   assign    addr2c = {outCount_for_rd_addr, 2'd2};
   assign    addr3 = {inCount, 2'd3};
   assign    addr3b = {outCount, 2'd3};
   assign    addr3c = {outCount_for_rd_addr, 2'd3};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_1_0, w_1_1, w_1_2, w_1_3, w_2_0, w_2_1, w_2_2, w_2_3;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_2_0, z_2_1, z_2_2, z_2_3;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_1_0, u_1_1, u_1_2, u_1_3, u_2_0, u_2_1, u_2_2, u_2_3;

    reg inFlip1, outFlip1;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
    end

   assign inBank0[0] = addr0[4] ^ addr0[0];
   assign inBank0[1] = addr0[5] ^ addr0[1];
   assign inAddr0[0] = addr0[2];
   assign inAddr0[1] = addr0[3];
   assign inAddr0[2] = addr0[0];
   assign inAddr0[3] = addr0[1];
   assign outBank0[0] = addr0b[4] ^ addr0b[0];
   assign outBank0[1] = addr0b[5] ^ addr0b[1];
   assign outAddr0[0] = addr0b[2];
   assign outAddr0[1] = addr0b[3];
   assign outAddr0[2] = addr0b[4];
   assign outAddr0[3] = addr0b[5];
   assign outBank_a0[0] = addr0c[4] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[5] ^ addr0c[1];
   assign outAddr_a0[0] = addr0c[2];
   assign outAddr_a0[1] = addr0c[3];
   assign outAddr_a0[2] = addr0c[4];
   assign outAddr_a0[3] = addr0c[5];

   assign inBank1[0] = addr1[4] ^ addr1[0];
   assign inBank1[1] = addr1[5] ^ addr1[1];
   assign inAddr1[0] = addr1[2];
   assign inAddr1[1] = addr1[3];
   assign inAddr1[2] = addr1[0];
   assign inAddr1[3] = addr1[1];
   assign outBank1[0] = addr1b[4] ^ addr1b[0];
   assign outBank1[1] = addr1b[5] ^ addr1b[1];
   assign outAddr1[0] = addr1b[2];
   assign outAddr1[1] = addr1b[3];
   assign outAddr1[2] = addr1b[4];
   assign outAddr1[3] = addr1b[5];
   assign outBank_a1[0] = addr1c[4] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[5] ^ addr1c[1];
   assign outAddr_a1[0] = addr1c[2];
   assign outAddr_a1[1] = addr1c[3];
   assign outAddr_a1[2] = addr1c[4];
   assign outAddr_a1[3] = addr1c[5];

   assign inBank2[0] = addr2[4] ^ addr2[0];
   assign inBank2[1] = addr2[5] ^ addr2[1];
   assign inAddr2[0] = addr2[2];
   assign inAddr2[1] = addr2[3];
   assign inAddr2[2] = addr2[0];
   assign inAddr2[3] = addr2[1];
   assign outBank2[0] = addr2b[4] ^ addr2b[0];
   assign outBank2[1] = addr2b[5] ^ addr2b[1];
   assign outAddr2[0] = addr2b[2];
   assign outAddr2[1] = addr2b[3];
   assign outAddr2[2] = addr2b[4];
   assign outAddr2[3] = addr2b[5];
   assign outBank_a2[0] = addr2c[4] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[5] ^ addr2c[1];
   assign outAddr_a2[0] = addr2c[2];
   assign outAddr_a2[1] = addr2c[3];
   assign outAddr_a2[2] = addr2c[4];
   assign outAddr_a2[3] = addr2c[5];

   assign inBank3[0] = addr3[4] ^ addr3[0];
   assign inBank3[1] = addr3[5] ^ addr3[1];
   assign inAddr3[0] = addr3[2];
   assign inAddr3[1] = addr3[3];
   assign inAddr3[2] = addr3[0];
   assign inAddr3[3] = addr3[1];
   assign outBank3[0] = addr3b[4] ^ addr3b[0];
   assign outBank3[1] = addr3b[5] ^ addr3b[1];
   assign outAddr3[0] = addr3b[2];
   assign outAddr3[1] = addr3b[3];
   assign outAddr3[2] = addr3b[4];
   assign outAddr3[3] = addr3b[5];
   assign outBank_a3[0] = addr3c[4] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[5] ^ addr3c[1];
   assign outAddr_a3[0] = addr3c[2];
   assign outAddr_a3[1] = addr3c[3];
   assign outAddr_a3[2] = addr3c[4];
   assign outAddr_a3[3] = addr3c[5];

   nextReg #(13, 4) nextReg_123287(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(4, 1) shiftFIFO_123290(.X(next0), .Y(next_out), .clk(clk));


   memArray64_90910 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip1), .outFlip(outFlip1), .next(next), .reset(reset),
        .x0(w_2_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_2_0[logDepth-1:0]),
        .outAddr0(u_2_0), 
        .x1(w_2_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_2_1[logDepth-1:0]),
        .outAddr1(u_2_1), 
        .x2(w_2_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_2_2[logDepth-1:0]),
        .outAddr2(u_2_2), 
        .x3(w_2_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_2_3[logDepth-1:0]),
        .outAddr3(u_2_3), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 12)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 15)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
         if (inCount == 12) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 15) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 12)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign y0 = z_2_0;
    assign y1 = z_2_1;
    assign y2 = z_2_2;
    assign y3 = z_2_3;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[3];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[2];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_1_pipe), .y0(w_2_0), .y1(w_2_1), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_2_pipe), .x1(w_1_3_pipe), .y0(w_2_2), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[3];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[2];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_1_pipe), .y0(z_2_0), .y1(z_2_1), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_2_pipe), .x1(z_1_3_pipe), .y0(z_2_2), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[3];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[2];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_1_pipe), .y0(u_2_0), .y1(u_2_1), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_2_pipe), .x1(u_1_3_pipe), .y0(u_2_2), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
endmodule

module memArray64_90910(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                clk, inFlip, outFlip);

   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 16;
   parameter logDepth = 4;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   nextReg #(16, 4) nextReg_123295(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 16
module DirSum_91381(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7);

   output next_out;
   input clk, reset, next;

   reg [3:0] i5;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   always @(posedge clk) begin
      if (reset == 1) begin
         i5 <= 0;
      end
      else begin
         if (next == 1)
            i5 <= 0;
         else if (i5 == 15)
            i5 <= 0;
         else
            i5 <= i5 + 1;
      end
   end

   codeBlock90915 codeBlockIsnt123300(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i5_in(i5),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7));

endmodule

module D42_91253(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fb1;
      2: out3 <= 16'h3ec5;
      3: out3 <= 16'h3d3f;
      4: out3 <= 16'h3b21;
      5: out3 <= 16'h3871;
      6: out3 <= 16'h3537;
      7: out3 <= 16'h3179;
      8: out3 <= 16'h2d41;
      9: out3 <= 16'h289a;
      10: out3 <= 16'h238e;
      11: out3 <= 16'h1e2b;
      12: out3 <= 16'h187e;
      13: out3 <= 16'h1294;
      14: out3 <= 16'hc7c;
      15: out3 <= 16'h646;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D48_91289(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hed6c;
      2: out3 <= 16'hdc72;
      3: out3 <= 16'hce87;
      4: out3 <= 16'hc4df;
      5: out3 <= 16'hc04f;
      6: out3 <= 16'hc13b;
      7: out3 <= 16'hc78f;
      8: out3 <= 16'hd2bf;
      9: out3 <= 16'he1d5;
      10: out3 <= 16'hf384;
      11: out3 <= 16'h646;
      12: out3 <= 16'h187e;
      13: out3 <= 16'h289a;
      14: out3 <= 16'h3537;
      15: out3 <= 16'h3d3f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D47_91307(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf384;
      2: out3 <= 16'he782;
      3: out3 <= 16'hdc72;
      4: out3 <= 16'hd2bf;
      5: out3 <= 16'hcac9;
      6: out3 <= 16'hc4df;
      7: out3 <= 16'hc13b;
      8: out3 <= 16'hc000;
      9: out3 <= 16'hc13b;
      10: out3 <= 16'hc4df;
      11: out3 <= 16'hcac9;
      12: out3 <= 16'hd2bf;
      13: out3 <= 16'hdc72;
      14: out3 <= 16'he782;
      15: out3 <= 16'hf384;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D46_91325(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf9ba;
      2: out3 <= 16'hf384;
      3: out3 <= 16'hed6c;
      4: out3 <= 16'he782;
      5: out3 <= 16'he1d5;
      6: out3 <= 16'hdc72;
      7: out3 <= 16'hd766;
      8: out3 <= 16'hd2bf;
      9: out3 <= 16'hce87;
      10: out3 <= 16'hcac9;
      11: out3 <= 16'hc78f;
      12: out3 <= 16'hc4df;
      13: out3 <= 16'hc2c1;
      14: out3 <= 16'hc13b;
      15: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D44_91361(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3d3f;
      2: out3 <= 16'h3537;
      3: out3 <= 16'h289a;
      4: out3 <= 16'h187e;
      5: out3 <= 16'h646;
      6: out3 <= 16'hf384;
      7: out3 <= 16'he1d5;
      8: out3 <= 16'hd2bf;
      9: out3 <= 16'hc78f;
      10: out3 <= 16'hc13b;
      11: out3 <= 16'hc04f;
      12: out3 <= 16'hc4df;
      13: out3 <= 16'hce87;
      14: out3 <= 16'hdc72;
      15: out3 <= 16'hed6c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D43_91379(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ec5;
      2: out3 <= 16'h3b21;
      3: out3 <= 16'h3537;
      4: out3 <= 16'h2d41;
      5: out3 <= 16'h238e;
      6: out3 <= 16'h187e;
      7: out3 <= 16'hc7c;
      8: out3 <= 16'h0;
      9: out3 <= 16'hf384;
      10: out3 <= 16'he782;
      11: out3 <= 16'hdc72;
      12: out3 <= 16'hd2bf;
      13: out3 <= 16'hcac9;
      14: out3 <= 16'hc4df;
      15: out3 <= 16'hc13b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 8
// Gap: 1
module codeBlock90915(clk, reset, next_in, next_out,
   i5_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [3:0] i5_in;
   reg [3:0] i5;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(7, 1) shiftFIFO_123303(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a586;
   wire signed [15:0] a563;
   wire signed [15:0] a589;
   wire signed [15:0] a567;
   wire signed [15:0] a590;
   wire signed [15:0] a591;
   wire signed [15:0] a594;
   wire signed [15:0] a595;
   wire signed [15:0] a598;
   wire signed [15:0] a599;
   reg signed [15:0] tm408;
   reg signed [15:0] tm412;
   reg signed [15:0] tm424;
   reg signed [15:0] tm428;
   reg signed [15:0] tm440;
   reg signed [15:0] tm444;
   reg signed [15:0] tm456;
   reg signed [15:0] tm463;
   reg signed [15:0] tm409;
   reg signed [15:0] tm413;
   reg signed [15:0] tm425;
   reg signed [15:0] tm429;
   reg signed [15:0] tm441;
   reg signed [15:0] tm445;
   reg signed [15:0] tm457;
   reg signed [15:0] tm464;
   wire signed [15:0] tm10;
   wire signed [15:0] a568;
   wire signed [15:0] tm11;
   wire signed [15:0] a570;
   wire signed [15:0] tm12;
   wire signed [15:0] a574;
   wire signed [15:0] tm13;
   wire signed [15:0] a576;
   wire signed [15:0] tm14;
   wire signed [15:0] a580;
   wire signed [15:0] tm15;
   wire signed [15:0] a582;
   reg signed [15:0] tm410;
   reg signed [15:0] tm414;
   reg signed [15:0] tm426;
   reg signed [15:0] tm430;
   reg signed [15:0] tm442;
   reg signed [15:0] tm446;
   reg signed [15:0] tm458;
   reg signed [15:0] tm465;
   reg signed [15:0] tm68;
   reg signed [15:0] tm69;
   reg signed [15:0] tm72;
   reg signed [15:0] tm73;
   reg signed [15:0] tm76;
   reg signed [15:0] tm77;
   reg signed [15:0] tm411;
   reg signed [15:0] tm415;
   reg signed [15:0] tm427;
   reg signed [15:0] tm431;
   reg signed [15:0] tm443;
   reg signed [15:0] tm447;
   reg signed [15:0] tm459;
   reg signed [15:0] tm466;
   reg signed [15:0] tm460;
   reg signed [15:0] tm467;
   wire signed [15:0] a569;
   wire signed [15:0] a571;
   wire signed [15:0] a572;
   wire signed [15:0] a573;
   wire signed [15:0] a575;
   wire signed [15:0] a577;
   wire signed [15:0] a578;
   wire signed [15:0] a579;
   wire signed [15:0] a581;
   wire signed [15:0] a583;
   wire signed [15:0] a584;
   wire signed [15:0] a585;
   reg signed [15:0] tm461;
   reg signed [15:0] tm468;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   reg signed [15:0] tm462;
   reg signed [15:0] tm469;


   assign a586 = X0;
   assign a563 = a586;
   assign a589 = X1;
   assign a567 = a589;
   assign a590 = X2;
   assign a591 = X3;
   assign a594 = X4;
   assign a595 = X5;
   assign a598 = X6;
   assign a599 = X7;
   assign a568 = tm10;
   assign a570 = tm11;
   assign a574 = tm12;
   assign a576 = tm13;
   assign a580 = tm14;
   assign a582 = tm15;
   assign Y0 = tm462;
   assign Y1 = tm469;

   D42_91253 instD42inst0_91253(.addr(i5[3:0]), .out(tm10), .clk(clk));

   D48_91289 instD48inst0_91289(.addr(i5[3:0]), .out(tm15), .clk(clk));

   D47_91307 instD47inst0_91307(.addr(i5[3:0]), .out(tm13), .clk(clk));

   D46_91325 instD46inst0_91325(.addr(i5[3:0]), .out(tm11), .clk(clk));

   D44_91361 instD44inst0_91361(.addr(i5[3:0]), .out(tm14), .clk(clk));

   D43_91379 instD43inst0_91379(.addr(i5[3:0]), .out(tm12), .clk(clk));

    multfix #(16, 2) m91014(.a(tm68), .b(tm411), .clk(clk), .q_sc(a569), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91036(.a(tm69), .b(tm415), .clk(clk), .q_sc(a571), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91054(.a(tm69), .b(tm411), .clk(clk), .q_sc(a572), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91065(.a(tm68), .b(tm415), .clk(clk), .q_sc(a573), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91094(.a(tm72), .b(tm427), .clk(clk), .q_sc(a575), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91116(.a(tm73), .b(tm431), .clk(clk), .q_sc(a577), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91134(.a(tm73), .b(tm427), .clk(clk), .q_sc(a578), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91145(.a(tm72), .b(tm431), .clk(clk), .q_sc(a579), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91174(.a(tm76), .b(tm443), .clk(clk), .q_sc(a581), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91196(.a(tm77), .b(tm447), .clk(clk), .q_sc(a583), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91214(.a(tm77), .b(tm443), .clk(clk), .q_sc(a584), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91225(.a(tm76), .b(tm447), .clk(clk), .q_sc(a585), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub91043(.a(a569), .b(a571), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add91072(.a(a572), .b(a573), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub91123(.a(a575), .b(a577), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add91152(.a(a578), .b(a579), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub91203(.a(a581), .b(a583), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add91232(.a(a584), .b(a585), .clk(clk), .q(Y7));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm68 <= 0;
         tm411 <= 0;
         tm69 <= 0;
         tm415 <= 0;
         tm69 <= 0;
         tm411 <= 0;
         tm68 <= 0;
         tm415 <= 0;
         tm72 <= 0;
         tm427 <= 0;
         tm73 <= 0;
         tm431 <= 0;
         tm73 <= 0;
         tm427 <= 0;
         tm72 <= 0;
         tm431 <= 0;
         tm76 <= 0;
         tm443 <= 0;
         tm77 <= 0;
         tm447 <= 0;
         tm77 <= 0;
         tm443 <= 0;
         tm76 <= 0;
         tm447 <= 0;
      end
      else begin
         i5 <= i5_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
         tm408 <= a590;
         tm412 <= a591;
         tm424 <= a594;
         tm428 <= a595;
         tm440 <= a598;
         tm444 <= a599;
         tm456 <= a563;
         tm463 <= a567;
         tm409 <= tm408;
         tm413 <= tm412;
         tm425 <= tm424;
         tm429 <= tm428;
         tm441 <= tm440;
         tm445 <= tm444;
         tm457 <= tm456;
         tm464 <= tm463;
         tm410 <= tm409;
         tm414 <= tm413;
         tm426 <= tm425;
         tm430 <= tm429;
         tm442 <= tm441;
         tm446 <= tm445;
         tm458 <= tm457;
         tm465 <= tm464;
         tm68 <= a568;
         tm69 <= a570;
         tm72 <= a574;
         tm73 <= a576;
         tm76 <= a580;
         tm77 <= a582;
         tm411 <= tm410;
         tm415 <= tm414;
         tm427 <= tm426;
         tm431 <= tm430;
         tm443 <= tm442;
         tm447 <= tm446;
         tm459 <= tm458;
         tm466 <= tm465;
         tm460 <= tm459;
         tm467 <= tm466;
         tm461 <= tm460;
         tm468 <= tm467;
         tm462 <= tm461;
         tm469 <= tm468;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock91384(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(2, 1) shiftFIFO_123306(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a498;
   wire signed [15:0] a499;
   wire signed [15:0] a500;
   wire signed [15:0] a501;
   wire signed [15:0] a506;
   wire signed [15:0] a507;
   wire signed [15:0] a508;
   wire signed [15:0] a509;
   wire signed [16:0] tm274;
   wire signed [16:0] tm275;
   wire signed [16:0] tm276;
   wire signed [16:0] tm277;
   wire signed [16:0] tm278;
   wire signed [16:0] tm279;
   wire signed [16:0] tm280;
   wire signed [16:0] tm281;
   wire signed [15:0] t554;
   wire signed [15:0] t555;
   wire signed [15:0] t556;
   wire signed [15:0] t557;
   wire signed [15:0] t558;
   wire signed [15:0] t559;
   wire signed [15:0] t560;
   wire signed [15:0] t561;
   wire signed [16:0] tm282;
   wire signed [16:0] tm283;
   wire signed [16:0] tm284;
   wire signed [16:0] tm285;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm286;
   wire signed [16:0] tm287;
   wire signed [16:0] tm288;
   wire signed [16:0] tm289;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t562;
   wire signed [15:0] t563;
   wire signed [15:0] t564;
   wire signed [15:0] t565;
   wire signed [15:0] t566;
   wire signed [15:0] t567;
   wire signed [15:0] t568;
   wire signed [15:0] t569;


   assign a498 = X0;
   assign a499 = X4;
   assign a500 = X1;
   assign a501 = X5;
   assign a506 = X2;
   assign a507 = X6;
   assign a508 = X3;
   assign a509 = X7;
   assign t554 = tm274[16:1];
   assign t555 = tm275[16:1];
   assign t556 = tm276[16:1];
   assign t557 = tm277[16:1];
   assign t558 = tm278[16:1];
   assign t559 = tm279[16:1];
   assign t560 = tm280[16:1];
   assign t561 = tm281[16:1];
   assign Y0 = t562;
   assign Y1 = t563;
   assign Y4 = t564;
   assign Y5 = t565;
   assign Y2 = t566;
   assign Y3 = t567;
   assign Y6 = t568;
   assign Y7 = t569;
   assign t562 = tm282[16:1];
   assign t563 = tm283[16:1];
   assign t564 = tm284[16:1];
   assign t565 = tm285[16:1];
   assign t566 = tm286[16:1];
   assign t567 = tm287[16:1];
   assign t568 = tm288[16:1];
   assign t569 = tm289[16:1];

    addfxp #(17, 1) add91396(.a({{1{a498[15]}}, a498}), .b({{1{a499[15]}}, a499}), .clk(clk), .q(tm274));    // 0
    addfxp #(17, 1) add91411(.a({{1{a500[15]}}, a500}), .b({{1{a501[15]}}, a501}), .clk(clk), .q(tm275));    // 0
    subfxp #(17, 1) sub91426(.a({{1{a498[15]}}, a498}), .b({{1{a499[15]}}, a499}), .clk(clk), .q(tm276));    // 0
    subfxp #(17, 1) sub91441(.a({{1{a500[15]}}, a500}), .b({{1{a501[15]}}, a501}), .clk(clk), .q(tm277));    // 0
    addfxp #(17, 1) add91456(.a({{1{a506[15]}}, a506}), .b({{1{a507[15]}}, a507}), .clk(clk), .q(tm278));    // 0
    addfxp #(17, 1) add91471(.a({{1{a508[15]}}, a508}), .b({{1{a509[15]}}, a509}), .clk(clk), .q(tm279));    // 0
    subfxp #(17, 1) sub91486(.a({{1{a506[15]}}, a506}), .b({{1{a507[15]}}, a507}), .clk(clk), .q(tm280));    // 0
    subfxp #(17, 1) sub91501(.a({{1{a508[15]}}, a508}), .b({{1{a509[15]}}, a509}), .clk(clk), .q(tm281));    // 0
    addfxp #(17, 1) add91508(.a({{1{t554[15]}}, t554}), .b({{1{t558[15]}}, t558}), .clk(clk), .q(tm282));    // 1
    addfxp #(17, 1) add91515(.a({{1{t555[15]}}, t555}), .b({{1{t559[15]}}, t559}), .clk(clk), .q(tm283));    // 1
    subfxp #(17, 1) sub91522(.a({{1{t554[15]}}, t554}), .b({{1{t558[15]}}, t558}), .clk(clk), .q(tm284));    // 1
    subfxp #(17, 1) sub91529(.a({{1{t555[15]}}, t555}), .b({{1{t559[15]}}, t559}), .clk(clk), .q(tm285));    // 1
    addfxp #(17, 1) add91552(.a({{1{t556[15]}}, t556}), .b({{1{t561[15]}}, t561}), .clk(clk), .q(tm286));    // 1
    subfxp #(17, 1) sub91559(.a({{1{t557[15]}}, t557}), .b({{1{t560[15]}}, t560}), .clk(clk), .q(tm287));    // 1
    subfxp #(17, 1) sub91566(.a({{1{t556[15]}}, t556}), .b({{1{t561[15]}}, t561}), .clk(clk), .q(tm288));    // 1
    addfxp #(17, 1) add91573(.a({{1{t557[15]}}, t557}), .b({{1{t560[15]}}, t560}), .clk(clk), .q(tm289));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 53
// Gap: 64
module rc91597(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];

   perm91595 instPerm123307(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 53
// Gap: 64
module perm91595(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 2'd0};
   assign    addr0b = {outCount, 2'd0};
   assign    addr0c = {outCount_for_rd_addr, 2'd0};
   assign    addr1 = {inCount, 2'd1};
   assign    addr1b = {outCount, 2'd1};
   assign    addr1c = {outCount_for_rd_addr, 2'd1};
   assign    addr2 = {inCount, 2'd2};
   assign    addr2b = {outCount, 2'd2};
   assign    addr2c = {outCount_for_rd_addr, 2'd2};
   assign    addr3 = {inCount, 2'd3};
   assign    addr3b = {outCount, 2'd3};
   assign    addr3c = {outCount_for_rd_addr, 2'd3};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_1_0, w_1_1, w_1_2, w_1_3, w_2_0, w_2_1, w_2_2, w_2_3;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_2_0, z_2_1, z_2_2, z_2_3;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_1_0, u_1_1, u_1_2, u_1_3, u_2_0, u_2_1, u_2_2, u_2_3;

    reg inFlip1, outFlip1;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
    end

   assign inBank0[0] = addr0[6] ^ addr0[0];
   assign inBank0[1] = addr0[7] ^ addr0[1];
   assign inAddr0[0] = addr0[2];
   assign inAddr0[1] = addr0[3];
   assign inAddr0[2] = addr0[4];
   assign inAddr0[3] = addr0[5];
   assign inAddr0[4] = addr0[0];
   assign inAddr0[5] = addr0[1];
   assign outBank0[0] = addr0b[6] ^ addr0b[0];
   assign outBank0[1] = addr0b[7] ^ addr0b[1];
   assign outAddr0[0] = addr0b[2];
   assign outAddr0[1] = addr0b[3];
   assign outAddr0[2] = addr0b[4];
   assign outAddr0[3] = addr0b[5];
   assign outAddr0[4] = addr0b[6];
   assign outAddr0[5] = addr0b[7];
   assign outBank_a0[0] = addr0c[6] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[7] ^ addr0c[1];
   assign outAddr_a0[0] = addr0c[2];
   assign outAddr_a0[1] = addr0c[3];
   assign outAddr_a0[2] = addr0c[4];
   assign outAddr_a0[3] = addr0c[5];
   assign outAddr_a0[4] = addr0c[6];
   assign outAddr_a0[5] = addr0c[7];

   assign inBank1[0] = addr1[6] ^ addr1[0];
   assign inBank1[1] = addr1[7] ^ addr1[1];
   assign inAddr1[0] = addr1[2];
   assign inAddr1[1] = addr1[3];
   assign inAddr1[2] = addr1[4];
   assign inAddr1[3] = addr1[5];
   assign inAddr1[4] = addr1[0];
   assign inAddr1[5] = addr1[1];
   assign outBank1[0] = addr1b[6] ^ addr1b[0];
   assign outBank1[1] = addr1b[7] ^ addr1b[1];
   assign outAddr1[0] = addr1b[2];
   assign outAddr1[1] = addr1b[3];
   assign outAddr1[2] = addr1b[4];
   assign outAddr1[3] = addr1b[5];
   assign outAddr1[4] = addr1b[6];
   assign outAddr1[5] = addr1b[7];
   assign outBank_a1[0] = addr1c[6] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[7] ^ addr1c[1];
   assign outAddr_a1[0] = addr1c[2];
   assign outAddr_a1[1] = addr1c[3];
   assign outAddr_a1[2] = addr1c[4];
   assign outAddr_a1[3] = addr1c[5];
   assign outAddr_a1[4] = addr1c[6];
   assign outAddr_a1[5] = addr1c[7];

   assign inBank2[0] = addr2[6] ^ addr2[0];
   assign inBank2[1] = addr2[7] ^ addr2[1];
   assign inAddr2[0] = addr2[2];
   assign inAddr2[1] = addr2[3];
   assign inAddr2[2] = addr2[4];
   assign inAddr2[3] = addr2[5];
   assign inAddr2[4] = addr2[0];
   assign inAddr2[5] = addr2[1];
   assign outBank2[0] = addr2b[6] ^ addr2b[0];
   assign outBank2[1] = addr2b[7] ^ addr2b[1];
   assign outAddr2[0] = addr2b[2];
   assign outAddr2[1] = addr2b[3];
   assign outAddr2[2] = addr2b[4];
   assign outAddr2[3] = addr2b[5];
   assign outAddr2[4] = addr2b[6];
   assign outAddr2[5] = addr2b[7];
   assign outBank_a2[0] = addr2c[6] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[7] ^ addr2c[1];
   assign outAddr_a2[0] = addr2c[2];
   assign outAddr_a2[1] = addr2c[3];
   assign outAddr_a2[2] = addr2c[4];
   assign outAddr_a2[3] = addr2c[5];
   assign outAddr_a2[4] = addr2c[6];
   assign outAddr_a2[5] = addr2c[7];

   assign inBank3[0] = addr3[6] ^ addr3[0];
   assign inBank3[1] = addr3[7] ^ addr3[1];
   assign inAddr3[0] = addr3[2];
   assign inAddr3[1] = addr3[3];
   assign inAddr3[2] = addr3[4];
   assign inAddr3[3] = addr3[5];
   assign inAddr3[4] = addr3[0];
   assign inAddr3[5] = addr3[1];
   assign outBank3[0] = addr3b[6] ^ addr3b[0];
   assign outBank3[1] = addr3b[7] ^ addr3b[1];
   assign outAddr3[0] = addr3b[2];
   assign outAddr3[1] = addr3b[3];
   assign outAddr3[2] = addr3b[4];
   assign outAddr3[3] = addr3b[5];
   assign outAddr3[4] = addr3b[6];
   assign outAddr3[5] = addr3b[7];
   assign outBank_a3[0] = addr3c[6] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[7] ^ addr3c[1];
   assign outAddr_a3[0] = addr3c[2];
   assign outAddr_a3[1] = addr3c[3];
   assign outAddr_a3[2] = addr3c[4];
   assign outAddr_a3[3] = addr3c[5];
   assign outAddr_a3[4] = addr3c[6];
   assign outAddr_a3[5] = addr3c[7];

   nextReg #(49, 6) nextReg_123312(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(4, 1) shiftFIFO_123315(.X(next0), .Y(next_out), .clk(clk));


   memArray256_91595 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip1), .outFlip(outFlip1), .next(next), .reset(reset),
        .x0(w_2_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_2_0[logDepth-1:0]),
        .outAddr0(u_2_0), 
        .x1(w_2_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_2_1[logDepth-1:0]),
        .outAddr1(u_2_1), 
        .x2(w_2_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_2_2[logDepth-1:0]),
        .outAddr2(u_2_2), 
        .x3(w_2_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_2_3[logDepth-1:0]),
        .outAddr3(u_2_3), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 48)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 51)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
         if (inCount == 48) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 63) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 48)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign y0 = z_2_0;
    assign y1 = z_2_1;
    assign y2 = z_2_2;
    assign y3 = z_2_3;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[5];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[4];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_1_pipe), .y0(w_2_0), .y1(w_2_1), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_2_pipe), .x1(w_1_3_pipe), .y0(w_2_2), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[5];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[4];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_1_pipe), .y0(z_2_0), .y1(z_2_1), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_2_pipe), .x1(z_1_3_pipe), .y0(z_2_2), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[5];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[4];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_1_pipe), .y0(u_2_0), .y1(u_2_1), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_2_pipe), .x1(u_1_3_pipe), .y0(u_2_2), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
endmodule

module memArray256_91595(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                clk, inFlip, outFlip);

   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   nextReg #(64, 6) nextReg_123320(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 64
module DirSum_92450(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7);

   output next_out;
   input clk, reset, next;

   reg [5:0] i4;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   always @(posedge clk) begin
      if (reset == 1) begin
         i4 <= 0;
      end
      else begin
         if (next == 1)
            i4 <= 0;
         else if (i4 == 63)
            i4 <= 0;
         else
            i4 <= i4 + 1;
      end
   end

   codeBlock91600 codeBlockIsnt123325(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i4_in(i4),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7));

endmodule

module D34_91986(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fd4;
      2: out3 <= 16'h3f4f;
      3: out3 <= 16'h3e72;
      4: out3 <= 16'h3d3f;
      5: out3 <= 16'h3bb6;
      6: out3 <= 16'h39db;
      7: out3 <= 16'h37b0;
      8: out3 <= 16'h3537;
      9: out3 <= 16'h3274;
      10: out3 <= 16'h2f6c;
      11: out3 <= 16'h2c21;
      12: out3 <= 16'h289a;
      13: out3 <= 16'h24da;
      14: out3 <= 16'h20e7;
      15: out3 <= 16'h1cc6;
      16: out3 <= 16'h187e;
      17: out3 <= 16'h1413;
      18: out3 <= 16'hf8d;
      19: out3 <= 16'haf1;
      20: out3 <= 16'h646;
      21: out3 <= 16'h192;
      22: out3 <= 16'hfcdc;
      23: out3 <= 16'hf82a;
      24: out3 <= 16'hf384;
      25: out3 <= 16'heeee;
      26: out3 <= 16'hea70;
      27: out3 <= 16'he611;
      28: out3 <= 16'he1d5;
      29: out3 <= 16'hddc3;
      30: out3 <= 16'hd9e0;
      31: out3 <= 16'hd632;
      32: out3 <= 16'hd2bf;
      33: out3 <= 16'hcf8a;
      34: out3 <= 16'hcc98;
      35: out3 <= 16'hc9ee;
      36: out3 <= 16'hc78f;
      37: out3 <= 16'hc57e;
      38: out3 <= 16'hc3be;
      39: out3 <= 16'hc251;
      40: out3 <= 16'hc13b;
      41: out3 <= 16'hc07b;
      42: out3 <= 16'hc014;
      43: out3 <= 16'hc005;
      44: out3 <= 16'hc04f;
      45: out3 <= 16'hc0f1;
      46: out3 <= 16'hc1eb;
      47: out3 <= 16'hc33b;
      48: out3 <= 16'hc4df;
      49: out3 <= 16'hc6d5;
      50: out3 <= 16'hc91b;
      51: out3 <= 16'hcbad;
      52: out3 <= 16'hce87;
      53: out3 <= 16'hd1a6;
      54: out3 <= 16'hd505;
      55: out3 <= 16'hd8a0;
      56: out3 <= 16'hdc72;
      57: out3 <= 16'he074;
      58: out3 <= 16'he4a3;
      59: out3 <= 16'he8f7;
      60: out3 <= 16'hed6c;
      61: out3 <= 16'hf1fa;
      62: out3 <= 16'hf69c;
      63: out3 <= 16'hfb4b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D33_92052(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fec;
      2: out3 <= 16'h3fb1;
      3: out3 <= 16'h3f4f;
      4: out3 <= 16'h3ec5;
      5: out3 <= 16'h3e15;
      6: out3 <= 16'h3d3f;
      7: out3 <= 16'h3c42;
      8: out3 <= 16'h3b21;
      9: out3 <= 16'h39db;
      10: out3 <= 16'h3871;
      11: out3 <= 16'h36e5;
      12: out3 <= 16'h3537;
      13: out3 <= 16'h3368;
      14: out3 <= 16'h3179;
      15: out3 <= 16'h2f6c;
      16: out3 <= 16'h2d41;
      17: out3 <= 16'h2afb;
      18: out3 <= 16'h289a;
      19: out3 <= 16'h2620;
      20: out3 <= 16'h238e;
      21: out3 <= 16'h20e7;
      22: out3 <= 16'h1e2b;
      23: out3 <= 16'h1b5d;
      24: out3 <= 16'h187e;
      25: out3 <= 16'h1590;
      26: out3 <= 16'h1294;
      27: out3 <= 16'hf8d;
      28: out3 <= 16'hc7c;
      29: out3 <= 16'h964;
      30: out3 <= 16'h646;
      31: out3 <= 16'h324;
      32: out3 <= 16'h0;
      33: out3 <= 16'hfcdc;
      34: out3 <= 16'hf9ba;
      35: out3 <= 16'hf69c;
      36: out3 <= 16'hf384;
      37: out3 <= 16'hf073;
      38: out3 <= 16'hed6c;
      39: out3 <= 16'hea70;
      40: out3 <= 16'he782;
      41: out3 <= 16'he4a3;
      42: out3 <= 16'he1d5;
      43: out3 <= 16'hdf19;
      44: out3 <= 16'hdc72;
      45: out3 <= 16'hd9e0;
      46: out3 <= 16'hd766;
      47: out3 <= 16'hd505;
      48: out3 <= 16'hd2bf;
      49: out3 <= 16'hd094;
      50: out3 <= 16'hce87;
      51: out3 <= 16'hcc98;
      52: out3 <= 16'hcac9;
      53: out3 <= 16'hc91b;
      54: out3 <= 16'hc78f;
      55: out3 <= 16'hc625;
      56: out3 <= 16'hc4df;
      57: out3 <= 16'hc3be;
      58: out3 <= 16'hc2c1;
      59: out3 <= 16'hc1eb;
      60: out3 <= 16'hc13b;
      61: out3 <= 16'hc0b1;
      62: out3 <= 16'hc04f;
      63: out3 <= 16'hc014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D32_92184(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ffb;
      2: out3 <= 16'h3fec;
      3: out3 <= 16'h3fd4;
      4: out3 <= 16'h3fb1;
      5: out3 <= 16'h3f85;
      6: out3 <= 16'h3f4f;
      7: out3 <= 16'h3f0f;
      8: out3 <= 16'h3ec5;
      9: out3 <= 16'h3e72;
      10: out3 <= 16'h3e15;
      11: out3 <= 16'h3daf;
      12: out3 <= 16'h3d3f;
      13: out3 <= 16'h3cc5;
      14: out3 <= 16'h3c42;
      15: out3 <= 16'h3bb6;
      16: out3 <= 16'h3b21;
      17: out3 <= 16'h3a82;
      18: out3 <= 16'h39db;
      19: out3 <= 16'h392b;
      20: out3 <= 16'h3871;
      21: out3 <= 16'h37b0;
      22: out3 <= 16'h36e5;
      23: out3 <= 16'h3612;
      24: out3 <= 16'h3537;
      25: out3 <= 16'h3453;
      26: out3 <= 16'h3368;
      27: out3 <= 16'h3274;
      28: out3 <= 16'h3179;
      29: out3 <= 16'h3076;
      30: out3 <= 16'h2f6c;
      31: out3 <= 16'h2e5a;
      32: out3 <= 16'h2d41;
      33: out3 <= 16'h2c21;
      34: out3 <= 16'h2afb;
      35: out3 <= 16'h29ce;
      36: out3 <= 16'h289a;
      37: out3 <= 16'h2760;
      38: out3 <= 16'h2620;
      39: out3 <= 16'h24da;
      40: out3 <= 16'h238e;
      41: out3 <= 16'h223d;
      42: out3 <= 16'h20e7;
      43: out3 <= 16'h1f8c;
      44: out3 <= 16'h1e2b;
      45: out3 <= 16'h1cc6;
      46: out3 <= 16'h1b5d;
      47: out3 <= 16'h19ef;
      48: out3 <= 16'h187e;
      49: out3 <= 16'h1709;
      50: out3 <= 16'h1590;
      51: out3 <= 16'h1413;
      52: out3 <= 16'h1294;
      53: out3 <= 16'h1112;
      54: out3 <= 16'hf8d;
      55: out3 <= 16'he06;
      56: out3 <= 16'hc7c;
      57: out3 <= 16'haf1;
      58: out3 <= 16'h964;
      59: out3 <= 16'h7d6;
      60: out3 <= 16'h646;
      61: out3 <= 16'h4b5;
      62: out3 <= 16'h324;
      63: out3 <= 16'h192;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D36_92316(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfe6e;
      2: out3 <= 16'hfcdc;
      3: out3 <= 16'hfb4b;
      4: out3 <= 16'hf9ba;
      5: out3 <= 16'hf82a;
      6: out3 <= 16'hf69c;
      7: out3 <= 16'hf50f;
      8: out3 <= 16'hf384;
      9: out3 <= 16'hf1fa;
      10: out3 <= 16'hf073;
      11: out3 <= 16'heeee;
      12: out3 <= 16'hed6c;
      13: out3 <= 16'hebed;
      14: out3 <= 16'hea70;
      15: out3 <= 16'he8f7;
      16: out3 <= 16'he782;
      17: out3 <= 16'he611;
      18: out3 <= 16'he4a3;
      19: out3 <= 16'he33a;
      20: out3 <= 16'he1d5;
      21: out3 <= 16'he074;
      22: out3 <= 16'hdf19;
      23: out3 <= 16'hddc3;
      24: out3 <= 16'hdc72;
      25: out3 <= 16'hdb26;
      26: out3 <= 16'hd9e0;
      27: out3 <= 16'hd8a0;
      28: out3 <= 16'hd766;
      29: out3 <= 16'hd632;
      30: out3 <= 16'hd505;
      31: out3 <= 16'hd3df;
      32: out3 <= 16'hd2bf;
      33: out3 <= 16'hd1a6;
      34: out3 <= 16'hd094;
      35: out3 <= 16'hcf8a;
      36: out3 <= 16'hce87;
      37: out3 <= 16'hcd8c;
      38: out3 <= 16'hcc98;
      39: out3 <= 16'hcbad;
      40: out3 <= 16'hcac9;
      41: out3 <= 16'hc9ee;
      42: out3 <= 16'hc91b;
      43: out3 <= 16'hc850;
      44: out3 <= 16'hc78f;
      45: out3 <= 16'hc6d5;
      46: out3 <= 16'hc625;
      47: out3 <= 16'hc57e;
      48: out3 <= 16'hc4df;
      49: out3 <= 16'hc44a;
      50: out3 <= 16'hc3be;
      51: out3 <= 16'hc33b;
      52: out3 <= 16'hc2c1;
      53: out3 <= 16'hc251;
      54: out3 <= 16'hc1eb;
      55: out3 <= 16'hc18e;
      56: out3 <= 16'hc13b;
      57: out3 <= 16'hc0f1;
      58: out3 <= 16'hc0b1;
      59: out3 <= 16'hc07b;
      60: out3 <= 16'hc04f;
      61: out3 <= 16'hc02c;
      62: out3 <= 16'hc014;
      63: out3 <= 16'hc005;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D37_92382(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfcdc;
      2: out3 <= 16'hf9ba;
      3: out3 <= 16'hf69c;
      4: out3 <= 16'hf384;
      5: out3 <= 16'hf073;
      6: out3 <= 16'hed6c;
      7: out3 <= 16'hea70;
      8: out3 <= 16'he782;
      9: out3 <= 16'he4a3;
      10: out3 <= 16'he1d5;
      11: out3 <= 16'hdf19;
      12: out3 <= 16'hdc72;
      13: out3 <= 16'hd9e0;
      14: out3 <= 16'hd766;
      15: out3 <= 16'hd505;
      16: out3 <= 16'hd2bf;
      17: out3 <= 16'hd094;
      18: out3 <= 16'hce87;
      19: out3 <= 16'hcc98;
      20: out3 <= 16'hcac9;
      21: out3 <= 16'hc91b;
      22: out3 <= 16'hc78f;
      23: out3 <= 16'hc625;
      24: out3 <= 16'hc4df;
      25: out3 <= 16'hc3be;
      26: out3 <= 16'hc2c1;
      27: out3 <= 16'hc1eb;
      28: out3 <= 16'hc13b;
      29: out3 <= 16'hc0b1;
      30: out3 <= 16'hc04f;
      31: out3 <= 16'hc014;
      32: out3 <= 16'hc000;
      33: out3 <= 16'hc014;
      34: out3 <= 16'hc04f;
      35: out3 <= 16'hc0b1;
      36: out3 <= 16'hc13b;
      37: out3 <= 16'hc1eb;
      38: out3 <= 16'hc2c1;
      39: out3 <= 16'hc3be;
      40: out3 <= 16'hc4df;
      41: out3 <= 16'hc625;
      42: out3 <= 16'hc78f;
      43: out3 <= 16'hc91b;
      44: out3 <= 16'hcac9;
      45: out3 <= 16'hcc98;
      46: out3 <= 16'hce87;
      47: out3 <= 16'hd094;
      48: out3 <= 16'hd2bf;
      49: out3 <= 16'hd505;
      50: out3 <= 16'hd766;
      51: out3 <= 16'hd9e0;
      52: out3 <= 16'hdc72;
      53: out3 <= 16'hdf19;
      54: out3 <= 16'he1d5;
      55: out3 <= 16'he4a3;
      56: out3 <= 16'he782;
      57: out3 <= 16'hea70;
      58: out3 <= 16'hed6c;
      59: out3 <= 16'hf073;
      60: out3 <= 16'hf384;
      61: out3 <= 16'hf69c;
      62: out3 <= 16'hf9ba;
      63: out3 <= 16'hfcdc;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D38_92448(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfb4b;
      2: out3 <= 16'hf69c;
      3: out3 <= 16'hf1fa;
      4: out3 <= 16'hed6c;
      5: out3 <= 16'he8f7;
      6: out3 <= 16'he4a3;
      7: out3 <= 16'he074;
      8: out3 <= 16'hdc72;
      9: out3 <= 16'hd8a0;
      10: out3 <= 16'hd505;
      11: out3 <= 16'hd1a6;
      12: out3 <= 16'hce87;
      13: out3 <= 16'hcbad;
      14: out3 <= 16'hc91b;
      15: out3 <= 16'hc6d5;
      16: out3 <= 16'hc4df;
      17: out3 <= 16'hc33b;
      18: out3 <= 16'hc1eb;
      19: out3 <= 16'hc0f1;
      20: out3 <= 16'hc04f;
      21: out3 <= 16'hc005;
      22: out3 <= 16'hc014;
      23: out3 <= 16'hc07b;
      24: out3 <= 16'hc13b;
      25: out3 <= 16'hc251;
      26: out3 <= 16'hc3be;
      27: out3 <= 16'hc57e;
      28: out3 <= 16'hc78f;
      29: out3 <= 16'hc9ee;
      30: out3 <= 16'hcc98;
      31: out3 <= 16'hcf8a;
      32: out3 <= 16'hd2bf;
      33: out3 <= 16'hd632;
      34: out3 <= 16'hd9e0;
      35: out3 <= 16'hddc3;
      36: out3 <= 16'he1d5;
      37: out3 <= 16'he611;
      38: out3 <= 16'hea70;
      39: out3 <= 16'heeee;
      40: out3 <= 16'hf384;
      41: out3 <= 16'hf82a;
      42: out3 <= 16'hfcdc;
      43: out3 <= 16'h192;
      44: out3 <= 16'h646;
      45: out3 <= 16'haf1;
      46: out3 <= 16'hf8d;
      47: out3 <= 16'h1413;
      48: out3 <= 16'h187e;
      49: out3 <= 16'h1cc6;
      50: out3 <= 16'h20e7;
      51: out3 <= 16'h24da;
      52: out3 <= 16'h289a;
      53: out3 <= 16'h2c21;
      54: out3 <= 16'h2f6c;
      55: out3 <= 16'h3274;
      56: out3 <= 16'h3537;
      57: out3 <= 16'h37b0;
      58: out3 <= 16'h39db;
      59: out3 <= 16'h3bb6;
      60: out3 <= 16'h3d3f;
      61: out3 <= 16'h3e72;
      62: out3 <= 16'h3f4f;
      63: out3 <= 16'h3fd4;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 8
// Gap: 1
module codeBlock91600(clk, reset, next_in, next_out,
   i4_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [5:0] i4_in;
   reg [5:0] i4;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(7, 1) shiftFIFO_123328(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a466;
   wire signed [15:0] a443;
   wire signed [15:0] a469;
   wire signed [15:0] a447;
   wire signed [15:0] a470;
   wire signed [15:0] a471;
   wire signed [15:0] a474;
   wire signed [15:0] a475;
   wire signed [15:0] a478;
   wire signed [15:0] a479;
   reg signed [15:0] tm470;
   reg signed [15:0] tm474;
   reg signed [15:0] tm486;
   reg signed [15:0] tm490;
   reg signed [15:0] tm502;
   reg signed [15:0] tm506;
   reg signed [15:0] tm518;
   reg signed [15:0] tm525;
   reg signed [15:0] tm471;
   reg signed [15:0] tm475;
   reg signed [15:0] tm487;
   reg signed [15:0] tm491;
   reg signed [15:0] tm503;
   reg signed [15:0] tm507;
   reg signed [15:0] tm519;
   reg signed [15:0] tm526;
   wire signed [15:0] tm18;
   wire signed [15:0] a448;
   wire signed [15:0] tm19;
   wire signed [15:0] a450;
   wire signed [15:0] tm20;
   wire signed [15:0] a454;
   wire signed [15:0] tm21;
   wire signed [15:0] a456;
   wire signed [15:0] tm22;
   wire signed [15:0] a460;
   wire signed [15:0] tm23;
   wire signed [15:0] a462;
   reg signed [15:0] tm472;
   reg signed [15:0] tm476;
   reg signed [15:0] tm488;
   reg signed [15:0] tm492;
   reg signed [15:0] tm504;
   reg signed [15:0] tm508;
   reg signed [15:0] tm520;
   reg signed [15:0] tm527;
   reg signed [15:0] tm84;
   reg signed [15:0] tm85;
   reg signed [15:0] tm88;
   reg signed [15:0] tm89;
   reg signed [15:0] tm92;
   reg signed [15:0] tm93;
   reg signed [15:0] tm473;
   reg signed [15:0] tm477;
   reg signed [15:0] tm489;
   reg signed [15:0] tm493;
   reg signed [15:0] tm505;
   reg signed [15:0] tm509;
   reg signed [15:0] tm521;
   reg signed [15:0] tm528;
   reg signed [15:0] tm522;
   reg signed [15:0] tm529;
   wire signed [15:0] a449;
   wire signed [15:0] a451;
   wire signed [15:0] a452;
   wire signed [15:0] a453;
   wire signed [15:0] a455;
   wire signed [15:0] a457;
   wire signed [15:0] a458;
   wire signed [15:0] a459;
   wire signed [15:0] a461;
   wire signed [15:0] a463;
   wire signed [15:0] a464;
   wire signed [15:0] a465;
   reg signed [15:0] tm523;
   reg signed [15:0] tm530;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   reg signed [15:0] tm524;
   reg signed [15:0] tm531;


   assign a466 = X0;
   assign a443 = a466;
   assign a469 = X1;
   assign a447 = a469;
   assign a470 = X2;
   assign a471 = X3;
   assign a474 = X4;
   assign a475 = X5;
   assign a478 = X6;
   assign a479 = X7;
   assign a448 = tm18;
   assign a450 = tm19;
   assign a454 = tm20;
   assign a456 = tm21;
   assign a460 = tm22;
   assign a462 = tm23;
   assign Y0 = tm524;
   assign Y1 = tm531;

   D34_91986 instD34inst0_91986(.addr(i4[5:0]), .out(tm22), .clk(clk));

   D33_92052 instD33inst0_92052(.addr(i4[5:0]), .out(tm20), .clk(clk));

   D32_92184 instD32inst0_92184(.addr(i4[5:0]), .out(tm18), .clk(clk));

   D36_92316 instD36inst0_92316(.addr(i4[5:0]), .out(tm19), .clk(clk));

   D37_92382 instD37inst0_92382(.addr(i4[5:0]), .out(tm21), .clk(clk));

   D38_92448 instD38inst0_92448(.addr(i4[5:0]), .out(tm23), .clk(clk));

    multfix #(16, 2) m91699(.a(tm84), .b(tm473), .clk(clk), .q_sc(a449), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91721(.a(tm85), .b(tm477), .clk(clk), .q_sc(a451), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91739(.a(tm85), .b(tm473), .clk(clk), .q_sc(a452), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91750(.a(tm84), .b(tm477), .clk(clk), .q_sc(a453), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91779(.a(tm88), .b(tm489), .clk(clk), .q_sc(a455), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91801(.a(tm89), .b(tm493), .clk(clk), .q_sc(a457), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91819(.a(tm89), .b(tm489), .clk(clk), .q_sc(a458), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91830(.a(tm88), .b(tm493), .clk(clk), .q_sc(a459), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91859(.a(tm92), .b(tm505), .clk(clk), .q_sc(a461), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91881(.a(tm93), .b(tm509), .clk(clk), .q_sc(a463), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91899(.a(tm93), .b(tm505), .clk(clk), .q_sc(a464), .q_unsc(), .rst(reset));
    multfix #(16, 2) m91910(.a(tm92), .b(tm509), .clk(clk), .q_sc(a465), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub91728(.a(a449), .b(a451), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add91757(.a(a452), .b(a453), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub91808(.a(a455), .b(a457), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add91837(.a(a458), .b(a459), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub91888(.a(a461), .b(a463), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add91917(.a(a464), .b(a465), .clk(clk), .q(Y7));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm84 <= 0;
         tm473 <= 0;
         tm85 <= 0;
         tm477 <= 0;
         tm85 <= 0;
         tm473 <= 0;
         tm84 <= 0;
         tm477 <= 0;
         tm88 <= 0;
         tm489 <= 0;
         tm89 <= 0;
         tm493 <= 0;
         tm89 <= 0;
         tm489 <= 0;
         tm88 <= 0;
         tm493 <= 0;
         tm92 <= 0;
         tm505 <= 0;
         tm93 <= 0;
         tm509 <= 0;
         tm93 <= 0;
         tm505 <= 0;
         tm92 <= 0;
         tm509 <= 0;
      end
      else begin
         i4 <= i4_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
         tm470 <= a470;
         tm474 <= a471;
         tm486 <= a474;
         tm490 <= a475;
         tm502 <= a478;
         tm506 <= a479;
         tm518 <= a443;
         tm525 <= a447;
         tm471 <= tm470;
         tm475 <= tm474;
         tm487 <= tm486;
         tm491 <= tm490;
         tm503 <= tm502;
         tm507 <= tm506;
         tm519 <= tm518;
         tm526 <= tm525;
         tm472 <= tm471;
         tm476 <= tm475;
         tm488 <= tm487;
         tm492 <= tm491;
         tm504 <= tm503;
         tm508 <= tm507;
         tm520 <= tm519;
         tm527 <= tm526;
         tm84 <= a448;
         tm85 <= a450;
         tm88 <= a454;
         tm89 <= a456;
         tm92 <= a460;
         tm93 <= a462;
         tm473 <= tm472;
         tm477 <= tm476;
         tm489 <= tm488;
         tm493 <= tm492;
         tm505 <= tm504;
         tm509 <= tm508;
         tm521 <= tm520;
         tm528 <= tm527;
         tm522 <= tm521;
         tm529 <= tm528;
         tm523 <= tm522;
         tm530 <= tm529;
         tm524 <= tm523;
         tm531 <= tm530;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock92453(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(2, 1) shiftFIFO_123331(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a377;
   wire signed [15:0] a378;
   wire signed [15:0] a379;
   wire signed [15:0] a380;
   wire signed [15:0] a385;
   wire signed [15:0] a387;
   wire signed [15:0] a388;
   wire signed [15:0] a389;
   wire signed [16:0] tm290;
   wire signed [16:0] tm291;
   wire signed [16:0] tm292;
   wire signed [16:0] tm293;
   wire signed [16:0] tm294;
   wire signed [16:0] tm295;
   wire signed [16:0] tm296;
   wire signed [16:0] tm297;
   wire signed [15:0] t426;
   wire signed [15:0] t427;
   wire signed [15:0] t428;
   wire signed [15:0] t429;
   wire signed [15:0] t430;
   wire signed [15:0] t431;
   wire signed [15:0] t432;
   wire signed [15:0] t433;
   wire signed [16:0] tm298;
   wire signed [16:0] tm299;
   wire signed [16:0] tm300;
   wire signed [16:0] tm301;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm302;
   wire signed [16:0] tm303;
   wire signed [16:0] tm304;
   wire signed [16:0] tm305;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t434;
   wire signed [15:0] t435;
   wire signed [15:0] t436;
   wire signed [15:0] t437;
   wire signed [15:0] t438;
   wire signed [15:0] t439;
   wire signed [15:0] t440;
   wire signed [15:0] t441;


   assign a377 = X0;
   assign a378 = X4;
   assign a379 = X1;
   assign a380 = X5;
   assign a385 = X2;
   assign a387 = X6;
   assign a388 = X3;
   assign a389 = X7;
   assign t426 = tm290[16:1];
   assign t427 = tm291[16:1];
   assign t428 = tm292[16:1];
   assign t429 = tm293[16:1];
   assign t430 = tm294[16:1];
   assign t431 = tm295[16:1];
   assign t432 = tm296[16:1];
   assign t433 = tm297[16:1];
   assign Y0 = t434;
   assign Y1 = t435;
   assign Y4 = t436;
   assign Y5 = t437;
   assign Y2 = t438;
   assign Y3 = t439;
   assign Y6 = t440;
   assign Y7 = t441;
   assign t434 = tm298[16:1];
   assign t435 = tm299[16:1];
   assign t436 = tm300[16:1];
   assign t437 = tm301[16:1];
   assign t438 = tm302[16:1];
   assign t439 = tm303[16:1];
   assign t440 = tm304[16:1];
   assign t441 = tm305[16:1];

    addfxp #(17, 1) add92465(.a({{1{a377[15]}}, a377}), .b({{1{a378[15]}}, a378}), .clk(clk), .q(tm290));    // 0
    addfxp #(17, 1) add92480(.a({{1{a379[15]}}, a379}), .b({{1{a380[15]}}, a380}), .clk(clk), .q(tm291));    // 0
    subfxp #(17, 1) sub92495(.a({{1{a377[15]}}, a377}), .b({{1{a378[15]}}, a378}), .clk(clk), .q(tm292));    // 0
    subfxp #(17, 1) sub92510(.a({{1{a379[15]}}, a379}), .b({{1{a380[15]}}, a380}), .clk(clk), .q(tm293));    // 0
    addfxp #(17, 1) add92525(.a({{1{a385[15]}}, a385}), .b({{1{a387[15]}}, a387}), .clk(clk), .q(tm294));    // 0
    addfxp #(17, 1) add92540(.a({{1{a388[15]}}, a388}), .b({{1{a389[15]}}, a389}), .clk(clk), .q(tm295));    // 0
    subfxp #(17, 1) sub92555(.a({{1{a385[15]}}, a385}), .b({{1{a387[15]}}, a387}), .clk(clk), .q(tm296));    // 0
    subfxp #(17, 1) sub92570(.a({{1{a388[15]}}, a388}), .b({{1{a389[15]}}, a389}), .clk(clk), .q(tm297));    // 0
    addfxp #(17, 1) add92577(.a({{1{t426[15]}}, t426}), .b({{1{t430[15]}}, t430}), .clk(clk), .q(tm298));    // 1
    addfxp #(17, 1) add92584(.a({{1{t427[15]}}, t427}), .b({{1{t431[15]}}, t431}), .clk(clk), .q(tm299));    // 1
    subfxp #(17, 1) sub92591(.a({{1{t426[15]}}, t426}), .b({{1{t430[15]}}, t430}), .clk(clk), .q(tm300));    // 1
    subfxp #(17, 1) sub92598(.a({{1{t427[15]}}, t427}), .b({{1{t431[15]}}, t431}), .clk(clk), .q(tm301));    // 1
    addfxp #(17, 1) add92621(.a({{1{t428[15]}}, t428}), .b({{1{t433[15]}}, t433}), .clk(clk), .q(tm302));    // 1
    subfxp #(17, 1) sub92628(.a({{1{t429[15]}}, t429}), .b({{1{t432[15]}}, t432}), .clk(clk), .q(tm303));    // 1
    subfxp #(17, 1) sub92635(.a({{1{t428[15]}}, t428}), .b({{1{t433[15]}}, t433}), .clk(clk), .q(tm304));    // 1
    addfxp #(17, 1) add92642(.a({{1{t429[15]}}, t429}), .b({{1{t432[15]}}, t432}), .clk(clk), .q(tm305));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 197
// Gap: 256
module rc92666(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];

   perm92664 instPerm123332(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 197
// Gap: 256
module perm92664(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 256;
   parameter logDepth = 8;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 2'd0};
   assign    addr0b = {outCount, 2'd0};
   assign    addr0c = {outCount_for_rd_addr, 2'd0};
   assign    addr1 = {inCount, 2'd1};
   assign    addr1b = {outCount, 2'd1};
   assign    addr1c = {outCount_for_rd_addr, 2'd1};
   assign    addr2 = {inCount, 2'd2};
   assign    addr2b = {outCount, 2'd2};
   assign    addr2c = {outCount_for_rd_addr, 2'd2};
   assign    addr3 = {inCount, 2'd3};
   assign    addr3b = {outCount, 2'd3};
   assign    addr3c = {outCount_for_rd_addr, 2'd3};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_1_0, w_1_1, w_1_2, w_1_3, w_2_0, w_2_1, w_2_2, w_2_3;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_2_0, z_2_1, z_2_2, z_2_3;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_1_0, u_1_1, u_1_2, u_1_3, u_2_0, u_2_1, u_2_2, u_2_3;

    reg inFlip1, outFlip1;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
    end

   assign inBank0[0] = addr0[8] ^ addr0[0];
   assign inBank0[1] = addr0[9] ^ addr0[1];
   assign inAddr0[0] = addr0[2];
   assign inAddr0[1] = addr0[3];
   assign inAddr0[2] = addr0[4];
   assign inAddr0[3] = addr0[5];
   assign inAddr0[4] = addr0[6];
   assign inAddr0[5] = addr0[7];
   assign inAddr0[6] = addr0[0];
   assign inAddr0[7] = addr0[1];
   assign outBank0[0] = addr0b[8] ^ addr0b[0];
   assign outBank0[1] = addr0b[9] ^ addr0b[1];
   assign outAddr0[0] = addr0b[2];
   assign outAddr0[1] = addr0b[3];
   assign outAddr0[2] = addr0b[4];
   assign outAddr0[3] = addr0b[5];
   assign outAddr0[4] = addr0b[6];
   assign outAddr0[5] = addr0b[7];
   assign outAddr0[6] = addr0b[8];
   assign outAddr0[7] = addr0b[9];
   assign outBank_a0[0] = addr0c[8] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[9] ^ addr0c[1];
   assign outAddr_a0[0] = addr0c[2];
   assign outAddr_a0[1] = addr0c[3];
   assign outAddr_a0[2] = addr0c[4];
   assign outAddr_a0[3] = addr0c[5];
   assign outAddr_a0[4] = addr0c[6];
   assign outAddr_a0[5] = addr0c[7];
   assign outAddr_a0[6] = addr0c[8];
   assign outAddr_a0[7] = addr0c[9];

   assign inBank1[0] = addr1[8] ^ addr1[0];
   assign inBank1[1] = addr1[9] ^ addr1[1];
   assign inAddr1[0] = addr1[2];
   assign inAddr1[1] = addr1[3];
   assign inAddr1[2] = addr1[4];
   assign inAddr1[3] = addr1[5];
   assign inAddr1[4] = addr1[6];
   assign inAddr1[5] = addr1[7];
   assign inAddr1[6] = addr1[0];
   assign inAddr1[7] = addr1[1];
   assign outBank1[0] = addr1b[8] ^ addr1b[0];
   assign outBank1[1] = addr1b[9] ^ addr1b[1];
   assign outAddr1[0] = addr1b[2];
   assign outAddr1[1] = addr1b[3];
   assign outAddr1[2] = addr1b[4];
   assign outAddr1[3] = addr1b[5];
   assign outAddr1[4] = addr1b[6];
   assign outAddr1[5] = addr1b[7];
   assign outAddr1[6] = addr1b[8];
   assign outAddr1[7] = addr1b[9];
   assign outBank_a1[0] = addr1c[8] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[9] ^ addr1c[1];
   assign outAddr_a1[0] = addr1c[2];
   assign outAddr_a1[1] = addr1c[3];
   assign outAddr_a1[2] = addr1c[4];
   assign outAddr_a1[3] = addr1c[5];
   assign outAddr_a1[4] = addr1c[6];
   assign outAddr_a1[5] = addr1c[7];
   assign outAddr_a1[6] = addr1c[8];
   assign outAddr_a1[7] = addr1c[9];

   assign inBank2[0] = addr2[8] ^ addr2[0];
   assign inBank2[1] = addr2[9] ^ addr2[1];
   assign inAddr2[0] = addr2[2];
   assign inAddr2[1] = addr2[3];
   assign inAddr2[2] = addr2[4];
   assign inAddr2[3] = addr2[5];
   assign inAddr2[4] = addr2[6];
   assign inAddr2[5] = addr2[7];
   assign inAddr2[6] = addr2[0];
   assign inAddr2[7] = addr2[1];
   assign outBank2[0] = addr2b[8] ^ addr2b[0];
   assign outBank2[1] = addr2b[9] ^ addr2b[1];
   assign outAddr2[0] = addr2b[2];
   assign outAddr2[1] = addr2b[3];
   assign outAddr2[2] = addr2b[4];
   assign outAddr2[3] = addr2b[5];
   assign outAddr2[4] = addr2b[6];
   assign outAddr2[5] = addr2b[7];
   assign outAddr2[6] = addr2b[8];
   assign outAddr2[7] = addr2b[9];
   assign outBank_a2[0] = addr2c[8] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[9] ^ addr2c[1];
   assign outAddr_a2[0] = addr2c[2];
   assign outAddr_a2[1] = addr2c[3];
   assign outAddr_a2[2] = addr2c[4];
   assign outAddr_a2[3] = addr2c[5];
   assign outAddr_a2[4] = addr2c[6];
   assign outAddr_a2[5] = addr2c[7];
   assign outAddr_a2[6] = addr2c[8];
   assign outAddr_a2[7] = addr2c[9];

   assign inBank3[0] = addr3[8] ^ addr3[0];
   assign inBank3[1] = addr3[9] ^ addr3[1];
   assign inAddr3[0] = addr3[2];
   assign inAddr3[1] = addr3[3];
   assign inAddr3[2] = addr3[4];
   assign inAddr3[3] = addr3[5];
   assign inAddr3[4] = addr3[6];
   assign inAddr3[5] = addr3[7];
   assign inAddr3[6] = addr3[0];
   assign inAddr3[7] = addr3[1];
   assign outBank3[0] = addr3b[8] ^ addr3b[0];
   assign outBank3[1] = addr3b[9] ^ addr3b[1];
   assign outAddr3[0] = addr3b[2];
   assign outAddr3[1] = addr3b[3];
   assign outAddr3[2] = addr3b[4];
   assign outAddr3[3] = addr3b[5];
   assign outAddr3[4] = addr3b[6];
   assign outAddr3[5] = addr3b[7];
   assign outAddr3[6] = addr3b[8];
   assign outAddr3[7] = addr3b[9];
   assign outBank_a3[0] = addr3c[8] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[9] ^ addr3c[1];
   assign outAddr_a3[0] = addr3c[2];
   assign outAddr_a3[1] = addr3c[3];
   assign outAddr_a3[2] = addr3c[4];
   assign outAddr_a3[3] = addr3c[5];
   assign outAddr_a3[4] = addr3c[6];
   assign outAddr_a3[5] = addr3c[7];
   assign outAddr_a3[6] = addr3c[8];
   assign outAddr_a3[7] = addr3c[9];

   nextReg #(193, 8) nextReg_123337(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(4, 1) shiftFIFO_123340(.X(next0), .Y(next_out), .clk(clk));


   memArray1024_92664 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip1), .outFlip(outFlip1), .next(next), .reset(reset),
        .x0(w_2_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_2_0[logDepth-1:0]),
        .outAddr0(u_2_0), 
        .x1(w_2_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_2_1[logDepth-1:0]),
        .outAddr1(u_2_1), 
        .x2(w_2_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_2_2[logDepth-1:0]),
        .outAddr2(u_2_2), 
        .x3(w_2_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_2_3[logDepth-1:0]),
        .outAddr3(u_2_3), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 192)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 195)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
         if (inCount == 192) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 255) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 192)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign y0 = z_2_0;
    assign y1 = z_2_1;
    assign y2 = z_2_2;
    assign y3 = z_2_3;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[7];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[6];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_1_pipe), .y0(w_2_0), .y1(w_2_1), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_2_pipe), .x1(w_1_3_pipe), .y0(w_2_2), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[7];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[6];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_1_pipe), .y0(z_2_0), .y1(z_2_1), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_2_pipe), .x1(z_1_3_pipe), .y0(z_2_2), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[7];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[6];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_1_pipe), .y0(u_2_0), .y1(u_2_1), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_2_pipe), .x1(u_1_3_pipe), .y0(u_2_2), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
endmodule

module memArray1024_92664(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                clk, inFlip, outFlip);

   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 256;
   parameter logDepth = 8;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   nextReg #(256, 8) nextReg_123345(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 256
module DirSum_95055(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7);

   output next_out;
   input clk, reset, next;

   reg [7:0] i3;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   always @(posedge clk) begin
      if (reset == 1) begin
         i3 <= 0;
      end
      else begin
         if (next == 1)
            i3 <= 0;
         else if (i3 == 255)
            i3 <= 0;
         else
            i3 <= i3 + 1;
      end
   end

   codeBlock92669 codeBlockIsnt123350(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i3_in(i3),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7));

endmodule

module D26_93247(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [7:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hff9b;
      2: out3 <= 16'hff37;
      3: out3 <= 16'hfed2;
      4: out3 <= 16'hfe6e;
      5: out3 <= 16'hfe09;
      6: out3 <= 16'hfda5;
      7: out3 <= 16'hfd40;
      8: out3 <= 16'hfcdc;
      9: out3 <= 16'hfc78;
      10: out3 <= 16'hfc13;
      11: out3 <= 16'hfbaf;
      12: out3 <= 16'hfb4b;
      13: out3 <= 16'hfae6;
      14: out3 <= 16'hfa82;
      15: out3 <= 16'hfa1e;
      16: out3 <= 16'hf9ba;
      17: out3 <= 16'hf956;
      18: out3 <= 16'hf8f2;
      19: out3 <= 16'hf88e;
      20: out3 <= 16'hf82a;
      21: out3 <= 16'hf7c7;
      22: out3 <= 16'hf763;
      23: out3 <= 16'hf6ff;
      24: out3 <= 16'hf69c;
      25: out3 <= 16'hf639;
      26: out3 <= 16'hf5d5;
      27: out3 <= 16'hf572;
      28: out3 <= 16'hf50f;
      29: out3 <= 16'hf4ac;
      30: out3 <= 16'hf449;
      31: out3 <= 16'hf3e6;
      32: out3 <= 16'hf384;
      33: out3 <= 16'hf321;
      34: out3 <= 16'hf2bf;
      35: out3 <= 16'hf25c;
      36: out3 <= 16'hf1fa;
      37: out3 <= 16'hf198;
      38: out3 <= 16'hf136;
      39: out3 <= 16'hf0d5;
      40: out3 <= 16'hf073;
      41: out3 <= 16'hf012;
      42: out3 <= 16'hefb0;
      43: out3 <= 16'hef4f;
      44: out3 <= 16'heeee;
      45: out3 <= 16'hee8d;
      46: out3 <= 16'hee2d;
      47: out3 <= 16'hedcc;
      48: out3 <= 16'hed6c;
      49: out3 <= 16'hed0c;
      50: out3 <= 16'hecac;
      51: out3 <= 16'hec4c;
      52: out3 <= 16'hebed;
      53: out3 <= 16'heb8d;
      54: out3 <= 16'heb2e;
      55: out3 <= 16'heacf;
      56: out3 <= 16'hea70;
      57: out3 <= 16'hea12;
      58: out3 <= 16'he9b4;
      59: out3 <= 16'he955;
      60: out3 <= 16'he8f7;
      61: out3 <= 16'he89a;
      62: out3 <= 16'he83c;
      63: out3 <= 16'he7df;
      64: out3 <= 16'he782;
      65: out3 <= 16'he725;
      66: out3 <= 16'he6c9;
      67: out3 <= 16'he66d;
      68: out3 <= 16'he611;
      69: out3 <= 16'he5b5;
      70: out3 <= 16'he559;
      71: out3 <= 16'he4fe;
      72: out3 <= 16'he4a3;
      73: out3 <= 16'he448;
      74: out3 <= 16'he3ee;
      75: out3 <= 16'he394;
      76: out3 <= 16'he33a;
      77: out3 <= 16'he2e0;
      78: out3 <= 16'he287;
      79: out3 <= 16'he22d;
      80: out3 <= 16'he1d5;
      81: out3 <= 16'he17c;
      82: out3 <= 16'he124;
      83: out3 <= 16'he0cc;
      84: out3 <= 16'he074;
      85: out3 <= 16'he01d;
      86: out3 <= 16'hdfc6;
      87: out3 <= 16'hdf6f;
      88: out3 <= 16'hdf19;
      89: out3 <= 16'hdec3;
      90: out3 <= 16'hde6d;
      91: out3 <= 16'hde18;
      92: out3 <= 16'hddc3;
      93: out3 <= 16'hdd6e;
      94: out3 <= 16'hdd19;
      95: out3 <= 16'hdcc5;
      96: out3 <= 16'hdc72;
      97: out3 <= 16'hdc1e;
      98: out3 <= 16'hdbcb;
      99: out3 <= 16'hdb78;
      100: out3 <= 16'hdb26;
      101: out3 <= 16'hdad4;
      102: out3 <= 16'hda82;
      103: out3 <= 16'hda31;
      104: out3 <= 16'hd9e0;
      105: out3 <= 16'hd98f;
      106: out3 <= 16'hd93f;
      107: out3 <= 16'hd8ef;
      108: out3 <= 16'hd8a0;
      109: out3 <= 16'hd851;
      110: out3 <= 16'hd802;
      111: out3 <= 16'hd7b4;
      112: out3 <= 16'hd766;
      113: out3 <= 16'hd719;
      114: out3 <= 16'hd6cb;
      115: out3 <= 16'hd67f;
      116: out3 <= 16'hd632;
      117: out3 <= 16'hd5e6;
      118: out3 <= 16'hd59b;
      119: out3 <= 16'hd550;
      120: out3 <= 16'hd505;
      121: out3 <= 16'hd4bb;
      122: out3 <= 16'hd471;
      123: out3 <= 16'hd428;
      124: out3 <= 16'hd3df;
      125: out3 <= 16'hd396;
      126: out3 <= 16'hd34e;
      127: out3 <= 16'hd306;
      128: out3 <= 16'hd2bf;
      129: out3 <= 16'hd278;
      130: out3 <= 16'hd231;
      131: out3 <= 16'hd1eb;
      132: out3 <= 16'hd1a6;
      133: out3 <= 16'hd161;
      134: out3 <= 16'hd11c;
      135: out3 <= 16'hd0d8;
      136: out3 <= 16'hd094;
      137: out3 <= 16'hd051;
      138: out3 <= 16'hd00e;
      139: out3 <= 16'hcfcc;
      140: out3 <= 16'hcf8a;
      141: out3 <= 16'hcf48;
      142: out3 <= 16'hcf07;
      143: out3 <= 16'hcec7;
      144: out3 <= 16'hce87;
      145: out3 <= 16'hce47;
      146: out3 <= 16'hce08;
      147: out3 <= 16'hcdca;
      148: out3 <= 16'hcd8c;
      149: out3 <= 16'hcd4e;
      150: out3 <= 16'hcd11;
      151: out3 <= 16'hccd4;
      152: out3 <= 16'hcc98;
      153: out3 <= 16'hcc5d;
      154: out3 <= 16'hcc21;
      155: out3 <= 16'hcbe7;
      156: out3 <= 16'hcbad;
      157: out3 <= 16'hcb73;
      158: out3 <= 16'hcb3a;
      159: out3 <= 16'hcb01;
      160: out3 <= 16'hcac9;
      161: out3 <= 16'hca92;
      162: out3 <= 16'hca5b;
      163: out3 <= 16'hca24;
      164: out3 <= 16'hc9ee;
      165: out3 <= 16'hc9b8;
      166: out3 <= 16'hc983;
      167: out3 <= 16'hc94f;
      168: out3 <= 16'hc91b;
      169: out3 <= 16'hc8e8;
      170: out3 <= 16'hc8b5;
      171: out3 <= 16'hc882;
      172: out3 <= 16'hc850;
      173: out3 <= 16'hc81f;
      174: out3 <= 16'hc7ee;
      175: out3 <= 16'hc7be;
      176: out3 <= 16'hc78f;
      177: out3 <= 16'hc75f;
      178: out3 <= 16'hc731;
      179: out3 <= 16'hc703;
      180: out3 <= 16'hc6d5;
      181: out3 <= 16'hc6a8;
      182: out3 <= 16'hc67c;
      183: out3 <= 16'hc650;
      184: out3 <= 16'hc625;
      185: out3 <= 16'hc5fa;
      186: out3 <= 16'hc5d0;
      187: out3 <= 16'hc5a7;
      188: out3 <= 16'hc57e;
      189: out3 <= 16'hc555;
      190: out3 <= 16'hc52d;
      191: out3 <= 16'hc506;
      192: out3 <= 16'hc4df;
      193: out3 <= 16'hc4b9;
      194: out3 <= 16'hc493;
      195: out3 <= 16'hc46e;
      196: out3 <= 16'hc44a;
      197: out3 <= 16'hc426;
      198: out3 <= 16'hc403;
      199: out3 <= 16'hc3e0;
      200: out3 <= 16'hc3be;
      201: out3 <= 16'hc39c;
      202: out3 <= 16'hc37b;
      203: out3 <= 16'hc35b;
      204: out3 <= 16'hc33b;
      205: out3 <= 16'hc31c;
      206: out3 <= 16'hc2fd;
      207: out3 <= 16'hc2df;
      208: out3 <= 16'hc2c1;
      209: out3 <= 16'hc2a5;
      210: out3 <= 16'hc288;
      211: out3 <= 16'hc26d;
      212: out3 <= 16'hc251;
      213: out3 <= 16'hc237;
      214: out3 <= 16'hc21d;
      215: out3 <= 16'hc204;
      216: out3 <= 16'hc1eb;
      217: out3 <= 16'hc1d3;
      218: out3 <= 16'hc1bb;
      219: out3 <= 16'hc1a4;
      220: out3 <= 16'hc18e;
      221: out3 <= 16'hc178;
      222: out3 <= 16'hc163;
      223: out3 <= 16'hc14f;
      224: out3 <= 16'hc13b;
      225: out3 <= 16'hc128;
      226: out3 <= 16'hc115;
      227: out3 <= 16'hc103;
      228: out3 <= 16'hc0f1;
      229: out3 <= 16'hc0e0;
      230: out3 <= 16'hc0d0;
      231: out3 <= 16'hc0c0;
      232: out3 <= 16'hc0b1;
      233: out3 <= 16'hc0a3;
      234: out3 <= 16'hc095;
      235: out3 <= 16'hc088;
      236: out3 <= 16'hc07b;
      237: out3 <= 16'hc06f;
      238: out3 <= 16'hc064;
      239: out3 <= 16'hc059;
      240: out3 <= 16'hc04f;
      241: out3 <= 16'hc045;
      242: out3 <= 16'hc03c;
      243: out3 <= 16'hc034;
      244: out3 <= 16'hc02c;
      245: out3 <= 16'hc025;
      246: out3 <= 16'hc01f;
      247: out3 <= 16'hc019;
      248: out3 <= 16'hc014;
      249: out3 <= 16'hc00f;
      250: out3 <= 16'hc00b;
      251: out3 <= 16'hc008;
      252: out3 <= 16'hc005;
      253: out3 <= 16'hc003;
      254: out3 <= 16'hc001;
      255: out3 <= 16'hc000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D23_93505(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [7:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fff;
      2: out3 <= 16'h3ffb;
      3: out3 <= 16'h3ff5;
      4: out3 <= 16'h3fec;
      5: out3 <= 16'h3fe1;
      6: out3 <= 16'h3fd4;
      7: out3 <= 16'h3fc4;
      8: out3 <= 16'h3fb1;
      9: out3 <= 16'h3f9c;
      10: out3 <= 16'h3f85;
      11: out3 <= 16'h3f6b;
      12: out3 <= 16'h3f4f;
      13: out3 <= 16'h3f30;
      14: out3 <= 16'h3f0f;
      15: out3 <= 16'h3eeb;
      16: out3 <= 16'h3ec5;
      17: out3 <= 16'h3e9d;
      18: out3 <= 16'h3e72;
      19: out3 <= 16'h3e45;
      20: out3 <= 16'h3e15;
      21: out3 <= 16'h3de3;
      22: out3 <= 16'h3daf;
      23: out3 <= 16'h3d78;
      24: out3 <= 16'h3d3f;
      25: out3 <= 16'h3d03;
      26: out3 <= 16'h3cc5;
      27: out3 <= 16'h3c85;
      28: out3 <= 16'h3c42;
      29: out3 <= 16'h3bfd;
      30: out3 <= 16'h3bb6;
      31: out3 <= 16'h3b6d;
      32: out3 <= 16'h3b21;
      33: out3 <= 16'h3ad3;
      34: out3 <= 16'h3a82;
      35: out3 <= 16'h3a30;
      36: out3 <= 16'h39db;
      37: out3 <= 16'h3984;
      38: out3 <= 16'h392b;
      39: out3 <= 16'h38cf;
      40: out3 <= 16'h3871;
      41: out3 <= 16'h3812;
      42: out3 <= 16'h37b0;
      43: out3 <= 16'h374b;
      44: out3 <= 16'h36e5;
      45: out3 <= 16'h367d;
      46: out3 <= 16'h3612;
      47: out3 <= 16'h35a5;
      48: out3 <= 16'h3537;
      49: out3 <= 16'h34c6;
      50: out3 <= 16'h3453;
      51: out3 <= 16'h33df;
      52: out3 <= 16'h3368;
      53: out3 <= 16'h32ef;
      54: out3 <= 16'h3274;
      55: out3 <= 16'h31f8;
      56: out3 <= 16'h3179;
      57: out3 <= 16'h30f9;
      58: out3 <= 16'h3076;
      59: out3 <= 16'h2ff2;
      60: out3 <= 16'h2f6c;
      61: out3 <= 16'h2ee4;
      62: out3 <= 16'h2e5a;
      63: out3 <= 16'h2dcf;
      64: out3 <= 16'h2d41;
      65: out3 <= 16'h2cb2;
      66: out3 <= 16'h2c21;
      67: out3 <= 16'h2b8f;
      68: out3 <= 16'h2afb;
      69: out3 <= 16'h2a65;
      70: out3 <= 16'h29ce;
      71: out3 <= 16'h2935;
      72: out3 <= 16'h289a;
      73: out3 <= 16'h27fe;
      74: out3 <= 16'h2760;
      75: out3 <= 16'h26c1;
      76: out3 <= 16'h2620;
      77: out3 <= 16'h257e;
      78: out3 <= 16'h24da;
      79: out3 <= 16'h2435;
      80: out3 <= 16'h238e;
      81: out3 <= 16'h22e7;
      82: out3 <= 16'h223d;
      83: out3 <= 16'h2193;
      84: out3 <= 16'h20e7;
      85: out3 <= 16'h203a;
      86: out3 <= 16'h1f8c;
      87: out3 <= 16'h1edc;
      88: out3 <= 16'h1e2b;
      89: out3 <= 16'h1d79;
      90: out3 <= 16'h1cc6;
      91: out3 <= 16'h1c12;
      92: out3 <= 16'h1b5d;
      93: out3 <= 16'h1aa7;
      94: out3 <= 16'h19ef;
      95: out3 <= 16'h1937;
      96: out3 <= 16'h187e;
      97: out3 <= 16'h17c4;
      98: out3 <= 16'h1709;
      99: out3 <= 16'h164c;
      100: out3 <= 16'h1590;
      101: out3 <= 16'h14d2;
      102: out3 <= 16'h1413;
      103: out3 <= 16'h1354;
      104: out3 <= 16'h1294;
      105: out3 <= 16'h11d3;
      106: out3 <= 16'h1112;
      107: out3 <= 16'h1050;
      108: out3 <= 16'hf8d;
      109: out3 <= 16'heca;
      110: out3 <= 16'he06;
      111: out3 <= 16'hd41;
      112: out3 <= 16'hc7c;
      113: out3 <= 16'hbb7;
      114: out3 <= 16'haf1;
      115: out3 <= 16'ha2b;
      116: out3 <= 16'h964;
      117: out3 <= 16'h89d;
      118: out3 <= 16'h7d6;
      119: out3 <= 16'h70e;
      120: out3 <= 16'h646;
      121: out3 <= 16'h57e;
      122: out3 <= 16'h4b5;
      123: out3 <= 16'h3ed;
      124: out3 <= 16'h324;
      125: out3 <= 16'h25b;
      126: out3 <= 16'h192;
      127: out3 <= 16'hc9;
      128: out3 <= 16'h0;
      129: out3 <= 16'hff37;
      130: out3 <= 16'hfe6e;
      131: out3 <= 16'hfda5;
      132: out3 <= 16'hfcdc;
      133: out3 <= 16'hfc13;
      134: out3 <= 16'hfb4b;
      135: out3 <= 16'hfa82;
      136: out3 <= 16'hf9ba;
      137: out3 <= 16'hf8f2;
      138: out3 <= 16'hf82a;
      139: out3 <= 16'hf763;
      140: out3 <= 16'hf69c;
      141: out3 <= 16'hf5d5;
      142: out3 <= 16'hf50f;
      143: out3 <= 16'hf449;
      144: out3 <= 16'hf384;
      145: out3 <= 16'hf2bf;
      146: out3 <= 16'hf1fa;
      147: out3 <= 16'hf136;
      148: out3 <= 16'hf073;
      149: out3 <= 16'hefb0;
      150: out3 <= 16'heeee;
      151: out3 <= 16'hee2d;
      152: out3 <= 16'hed6c;
      153: out3 <= 16'hecac;
      154: out3 <= 16'hebed;
      155: out3 <= 16'heb2e;
      156: out3 <= 16'hea70;
      157: out3 <= 16'he9b4;
      158: out3 <= 16'he8f7;
      159: out3 <= 16'he83c;
      160: out3 <= 16'he782;
      161: out3 <= 16'he6c9;
      162: out3 <= 16'he611;
      163: out3 <= 16'he559;
      164: out3 <= 16'he4a3;
      165: out3 <= 16'he3ee;
      166: out3 <= 16'he33a;
      167: out3 <= 16'he287;
      168: out3 <= 16'he1d5;
      169: out3 <= 16'he124;
      170: out3 <= 16'he074;
      171: out3 <= 16'hdfc6;
      172: out3 <= 16'hdf19;
      173: out3 <= 16'hde6d;
      174: out3 <= 16'hddc3;
      175: out3 <= 16'hdd19;
      176: out3 <= 16'hdc72;
      177: out3 <= 16'hdbcb;
      178: out3 <= 16'hdb26;
      179: out3 <= 16'hda82;
      180: out3 <= 16'hd9e0;
      181: out3 <= 16'hd93f;
      182: out3 <= 16'hd8a0;
      183: out3 <= 16'hd802;
      184: out3 <= 16'hd766;
      185: out3 <= 16'hd6cb;
      186: out3 <= 16'hd632;
      187: out3 <= 16'hd59b;
      188: out3 <= 16'hd505;
      189: out3 <= 16'hd471;
      190: out3 <= 16'hd3df;
      191: out3 <= 16'hd34e;
      192: out3 <= 16'hd2bf;
      193: out3 <= 16'hd231;
      194: out3 <= 16'hd1a6;
      195: out3 <= 16'hd11c;
      196: out3 <= 16'hd094;
      197: out3 <= 16'hd00e;
      198: out3 <= 16'hcf8a;
      199: out3 <= 16'hcf07;
      200: out3 <= 16'hce87;
      201: out3 <= 16'hce08;
      202: out3 <= 16'hcd8c;
      203: out3 <= 16'hcd11;
      204: out3 <= 16'hcc98;
      205: out3 <= 16'hcc21;
      206: out3 <= 16'hcbad;
      207: out3 <= 16'hcb3a;
      208: out3 <= 16'hcac9;
      209: out3 <= 16'hca5b;
      210: out3 <= 16'hc9ee;
      211: out3 <= 16'hc983;
      212: out3 <= 16'hc91b;
      213: out3 <= 16'hc8b5;
      214: out3 <= 16'hc850;
      215: out3 <= 16'hc7ee;
      216: out3 <= 16'hc78f;
      217: out3 <= 16'hc731;
      218: out3 <= 16'hc6d5;
      219: out3 <= 16'hc67c;
      220: out3 <= 16'hc625;
      221: out3 <= 16'hc5d0;
      222: out3 <= 16'hc57e;
      223: out3 <= 16'hc52d;
      224: out3 <= 16'hc4df;
      225: out3 <= 16'hc493;
      226: out3 <= 16'hc44a;
      227: out3 <= 16'hc403;
      228: out3 <= 16'hc3be;
      229: out3 <= 16'hc37b;
      230: out3 <= 16'hc33b;
      231: out3 <= 16'hc2fd;
      232: out3 <= 16'hc2c1;
      233: out3 <= 16'hc288;
      234: out3 <= 16'hc251;
      235: out3 <= 16'hc21d;
      236: out3 <= 16'hc1eb;
      237: out3 <= 16'hc1bb;
      238: out3 <= 16'hc18e;
      239: out3 <= 16'hc163;
      240: out3 <= 16'hc13b;
      241: out3 <= 16'hc115;
      242: out3 <= 16'hc0f1;
      243: out3 <= 16'hc0d0;
      244: out3 <= 16'hc0b1;
      245: out3 <= 16'hc095;
      246: out3 <= 16'hc07b;
      247: out3 <= 16'hc064;
      248: out3 <= 16'hc04f;
      249: out3 <= 16'hc03c;
      250: out3 <= 16'hc02c;
      251: out3 <= 16'hc01f;
      252: out3 <= 16'hc014;
      253: out3 <= 16'hc00b;
      254: out3 <= 16'hc005;
      255: out3 <= 16'hc001;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D24_93763(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [7:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ffd;
      2: out3 <= 16'h3ff5;
      3: out3 <= 16'h3fe7;
      4: out3 <= 16'h3fd4;
      5: out3 <= 16'h3fbb;
      6: out3 <= 16'h3f9c;
      7: out3 <= 16'h3f78;
      8: out3 <= 16'h3f4f;
      9: out3 <= 16'h3f20;
      10: out3 <= 16'h3eeb;
      11: out3 <= 16'h3eb1;
      12: out3 <= 16'h3e72;
      13: out3 <= 16'h3e2d;
      14: out3 <= 16'h3de3;
      15: out3 <= 16'h3d93;
      16: out3 <= 16'h3d3f;
      17: out3 <= 16'h3ce4;
      18: out3 <= 16'h3c85;
      19: out3 <= 16'h3c20;
      20: out3 <= 16'h3bb6;
      21: out3 <= 16'h3b47;
      22: out3 <= 16'h3ad3;
      23: out3 <= 16'h3a59;
      24: out3 <= 16'h39db;
      25: out3 <= 16'h3958;
      26: out3 <= 16'h38cf;
      27: out3 <= 16'h3842;
      28: out3 <= 16'h37b0;
      29: out3 <= 16'h3718;
      30: out3 <= 16'h367d;
      31: out3 <= 16'h35dc;
      32: out3 <= 16'h3537;
      33: out3 <= 16'h348d;
      34: out3 <= 16'h33df;
      35: out3 <= 16'h332c;
      36: out3 <= 16'h3274;
      37: out3 <= 16'h31b9;
      38: out3 <= 16'h30f9;
      39: out3 <= 16'h3034;
      40: out3 <= 16'h2f6c;
      41: out3 <= 16'h2e9f;
      42: out3 <= 16'h2dcf;
      43: out3 <= 16'h2cfa;
      44: out3 <= 16'h2c21;
      45: out3 <= 16'h2b45;
      46: out3 <= 16'h2a65;
      47: out3 <= 16'h2981;
      48: out3 <= 16'h289a;
      49: out3 <= 16'h27af;
      50: out3 <= 16'h26c1;
      51: out3 <= 16'h25cf;
      52: out3 <= 16'h24da;
      53: out3 <= 16'h23e2;
      54: out3 <= 16'h22e7;
      55: out3 <= 16'h21e8;
      56: out3 <= 16'h20e7;
      57: out3 <= 16'h1fe3;
      58: out3 <= 16'h1edc;
      59: out3 <= 16'h1dd3;
      60: out3 <= 16'h1cc6;
      61: out3 <= 16'h1bb8;
      62: out3 <= 16'h1aa7;
      63: out3 <= 16'h1993;
      64: out3 <= 16'h187e;
      65: out3 <= 16'h1766;
      66: out3 <= 16'h164c;
      67: out3 <= 16'h1531;
      68: out3 <= 16'h1413;
      69: out3 <= 16'h12f4;
      70: out3 <= 16'h11d3;
      71: out3 <= 16'h10b1;
      72: out3 <= 16'hf8d;
      73: out3 <= 16'he68;
      74: out3 <= 16'hd41;
      75: out3 <= 16'hc1a;
      76: out3 <= 16'haf1;
      77: out3 <= 16'h9c7;
      78: out3 <= 16'h89d;
      79: out3 <= 16'h772;
      80: out3 <= 16'h646;
      81: out3 <= 16'h51a;
      82: out3 <= 16'h3ed;
      83: out3 <= 16'h2c0;
      84: out3 <= 16'h192;
      85: out3 <= 16'h65;
      86: out3 <= 16'hff37;
      87: out3 <= 16'hfe09;
      88: out3 <= 16'hfcdc;
      89: out3 <= 16'hfbaf;
      90: out3 <= 16'hfa82;
      91: out3 <= 16'hf956;
      92: out3 <= 16'hf82a;
      93: out3 <= 16'hf6ff;
      94: out3 <= 16'hf5d5;
      95: out3 <= 16'hf4ac;
      96: out3 <= 16'hf384;
      97: out3 <= 16'hf25c;
      98: out3 <= 16'hf136;
      99: out3 <= 16'hf012;
      100: out3 <= 16'heeee;
      101: out3 <= 16'hedcc;
      102: out3 <= 16'hecac;
      103: out3 <= 16'heb8d;
      104: out3 <= 16'hea70;
      105: out3 <= 16'he955;
      106: out3 <= 16'he83c;
      107: out3 <= 16'he725;
      108: out3 <= 16'he611;
      109: out3 <= 16'he4fe;
      110: out3 <= 16'he3ee;
      111: out3 <= 16'he2e0;
      112: out3 <= 16'he1d5;
      113: out3 <= 16'he0cc;
      114: out3 <= 16'hdfc6;
      115: out3 <= 16'hdec3;
      116: out3 <= 16'hddc3;
      117: out3 <= 16'hdcc5;
      118: out3 <= 16'hdbcb;
      119: out3 <= 16'hdad4;
      120: out3 <= 16'hd9e0;
      121: out3 <= 16'hd8ef;
      122: out3 <= 16'hd802;
      123: out3 <= 16'hd719;
      124: out3 <= 16'hd632;
      125: out3 <= 16'hd550;
      126: out3 <= 16'hd471;
      127: out3 <= 16'hd396;
      128: out3 <= 16'hd2bf;
      129: out3 <= 16'hd1eb;
      130: out3 <= 16'hd11c;
      131: out3 <= 16'hd051;
      132: out3 <= 16'hcf8a;
      133: out3 <= 16'hcec7;
      134: out3 <= 16'hce08;
      135: out3 <= 16'hcd4e;
      136: out3 <= 16'hcc98;
      137: out3 <= 16'hcbe7;
      138: out3 <= 16'hcb3a;
      139: out3 <= 16'hca92;
      140: out3 <= 16'hc9ee;
      141: out3 <= 16'hc94f;
      142: out3 <= 16'hc8b5;
      143: out3 <= 16'hc81f;
      144: out3 <= 16'hc78f;
      145: out3 <= 16'hc703;
      146: out3 <= 16'hc67c;
      147: out3 <= 16'hc5fa;
      148: out3 <= 16'hc57e;
      149: out3 <= 16'hc506;
      150: out3 <= 16'hc493;
      151: out3 <= 16'hc426;
      152: out3 <= 16'hc3be;
      153: out3 <= 16'hc35b;
      154: out3 <= 16'hc2fd;
      155: out3 <= 16'hc2a5;
      156: out3 <= 16'hc251;
      157: out3 <= 16'hc204;
      158: out3 <= 16'hc1bb;
      159: out3 <= 16'hc178;
      160: out3 <= 16'hc13b;
      161: out3 <= 16'hc103;
      162: out3 <= 16'hc0d0;
      163: out3 <= 16'hc0a3;
      164: out3 <= 16'hc07b;
      165: out3 <= 16'hc059;
      166: out3 <= 16'hc03c;
      167: out3 <= 16'hc025;
      168: out3 <= 16'hc014;
      169: out3 <= 16'hc008;
      170: out3 <= 16'hc001;
      171: out3 <= 16'hc000;
      172: out3 <= 16'hc005;
      173: out3 <= 16'hc00f;
      174: out3 <= 16'hc01f;
      175: out3 <= 16'hc034;
      176: out3 <= 16'hc04f;
      177: out3 <= 16'hc06f;
      178: out3 <= 16'hc095;
      179: out3 <= 16'hc0c0;
      180: out3 <= 16'hc0f1;
      181: out3 <= 16'hc128;
      182: out3 <= 16'hc163;
      183: out3 <= 16'hc1a4;
      184: out3 <= 16'hc1eb;
      185: out3 <= 16'hc237;
      186: out3 <= 16'hc288;
      187: out3 <= 16'hc2df;
      188: out3 <= 16'hc33b;
      189: out3 <= 16'hc39c;
      190: out3 <= 16'hc403;
      191: out3 <= 16'hc46e;
      192: out3 <= 16'hc4df;
      193: out3 <= 16'hc555;
      194: out3 <= 16'hc5d0;
      195: out3 <= 16'hc650;
      196: out3 <= 16'hc6d5;
      197: out3 <= 16'hc75f;
      198: out3 <= 16'hc7ee;
      199: out3 <= 16'hc882;
      200: out3 <= 16'hc91b;
      201: out3 <= 16'hc9b8;
      202: out3 <= 16'hca5b;
      203: out3 <= 16'hcb01;
      204: out3 <= 16'hcbad;
      205: out3 <= 16'hcc5d;
      206: out3 <= 16'hcd11;
      207: out3 <= 16'hcdca;
      208: out3 <= 16'hce87;
      209: out3 <= 16'hcf48;
      210: out3 <= 16'hd00e;
      211: out3 <= 16'hd0d8;
      212: out3 <= 16'hd1a6;
      213: out3 <= 16'hd278;
      214: out3 <= 16'hd34e;
      215: out3 <= 16'hd428;
      216: out3 <= 16'hd505;
      217: out3 <= 16'hd5e6;
      218: out3 <= 16'hd6cb;
      219: out3 <= 16'hd7b4;
      220: out3 <= 16'hd8a0;
      221: out3 <= 16'hd98f;
      222: out3 <= 16'hda82;
      223: out3 <= 16'hdb78;
      224: out3 <= 16'hdc72;
      225: out3 <= 16'hdd6e;
      226: out3 <= 16'hde6d;
      227: out3 <= 16'hdf6f;
      228: out3 <= 16'he074;
      229: out3 <= 16'he17c;
      230: out3 <= 16'he287;
      231: out3 <= 16'he394;
      232: out3 <= 16'he4a3;
      233: out3 <= 16'he5b5;
      234: out3 <= 16'he6c9;
      235: out3 <= 16'he7df;
      236: out3 <= 16'he8f7;
      237: out3 <= 16'hea12;
      238: out3 <= 16'heb2e;
      239: out3 <= 16'hec4c;
      240: out3 <= 16'hed6c;
      241: out3 <= 16'hee8d;
      242: out3 <= 16'hefb0;
      243: out3 <= 16'hf0d5;
      244: out3 <= 16'hf1fa;
      245: out3 <= 16'hf321;
      246: out3 <= 16'hf449;
      247: out3 <= 16'hf572;
      248: out3 <= 16'hf69c;
      249: out3 <= 16'hf7c7;
      250: out3 <= 16'hf8f2;
      251: out3 <= 16'hfa1e;
      252: out3 <= 16'hfb4b;
      253: out3 <= 16'hfc78;
      254: out3 <= 16'hfda5;
      255: out3 <= 16'hfed2;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D27_94279(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [7:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hff37;
      2: out3 <= 16'hfe6e;
      3: out3 <= 16'hfda5;
      4: out3 <= 16'hfcdc;
      5: out3 <= 16'hfc13;
      6: out3 <= 16'hfb4b;
      7: out3 <= 16'hfa82;
      8: out3 <= 16'hf9ba;
      9: out3 <= 16'hf8f2;
      10: out3 <= 16'hf82a;
      11: out3 <= 16'hf763;
      12: out3 <= 16'hf69c;
      13: out3 <= 16'hf5d5;
      14: out3 <= 16'hf50f;
      15: out3 <= 16'hf449;
      16: out3 <= 16'hf384;
      17: out3 <= 16'hf2bf;
      18: out3 <= 16'hf1fa;
      19: out3 <= 16'hf136;
      20: out3 <= 16'hf073;
      21: out3 <= 16'hefb0;
      22: out3 <= 16'heeee;
      23: out3 <= 16'hee2d;
      24: out3 <= 16'hed6c;
      25: out3 <= 16'hecac;
      26: out3 <= 16'hebed;
      27: out3 <= 16'heb2e;
      28: out3 <= 16'hea70;
      29: out3 <= 16'he9b4;
      30: out3 <= 16'he8f7;
      31: out3 <= 16'he83c;
      32: out3 <= 16'he782;
      33: out3 <= 16'he6c9;
      34: out3 <= 16'he611;
      35: out3 <= 16'he559;
      36: out3 <= 16'he4a3;
      37: out3 <= 16'he3ee;
      38: out3 <= 16'he33a;
      39: out3 <= 16'he287;
      40: out3 <= 16'he1d5;
      41: out3 <= 16'he124;
      42: out3 <= 16'he074;
      43: out3 <= 16'hdfc6;
      44: out3 <= 16'hdf19;
      45: out3 <= 16'hde6d;
      46: out3 <= 16'hddc3;
      47: out3 <= 16'hdd19;
      48: out3 <= 16'hdc72;
      49: out3 <= 16'hdbcb;
      50: out3 <= 16'hdb26;
      51: out3 <= 16'hda82;
      52: out3 <= 16'hd9e0;
      53: out3 <= 16'hd93f;
      54: out3 <= 16'hd8a0;
      55: out3 <= 16'hd802;
      56: out3 <= 16'hd766;
      57: out3 <= 16'hd6cb;
      58: out3 <= 16'hd632;
      59: out3 <= 16'hd59b;
      60: out3 <= 16'hd505;
      61: out3 <= 16'hd471;
      62: out3 <= 16'hd3df;
      63: out3 <= 16'hd34e;
      64: out3 <= 16'hd2bf;
      65: out3 <= 16'hd231;
      66: out3 <= 16'hd1a6;
      67: out3 <= 16'hd11c;
      68: out3 <= 16'hd094;
      69: out3 <= 16'hd00e;
      70: out3 <= 16'hcf8a;
      71: out3 <= 16'hcf07;
      72: out3 <= 16'hce87;
      73: out3 <= 16'hce08;
      74: out3 <= 16'hcd8c;
      75: out3 <= 16'hcd11;
      76: out3 <= 16'hcc98;
      77: out3 <= 16'hcc21;
      78: out3 <= 16'hcbad;
      79: out3 <= 16'hcb3a;
      80: out3 <= 16'hcac9;
      81: out3 <= 16'hca5b;
      82: out3 <= 16'hc9ee;
      83: out3 <= 16'hc983;
      84: out3 <= 16'hc91b;
      85: out3 <= 16'hc8b5;
      86: out3 <= 16'hc850;
      87: out3 <= 16'hc7ee;
      88: out3 <= 16'hc78f;
      89: out3 <= 16'hc731;
      90: out3 <= 16'hc6d5;
      91: out3 <= 16'hc67c;
      92: out3 <= 16'hc625;
      93: out3 <= 16'hc5d0;
      94: out3 <= 16'hc57e;
      95: out3 <= 16'hc52d;
      96: out3 <= 16'hc4df;
      97: out3 <= 16'hc493;
      98: out3 <= 16'hc44a;
      99: out3 <= 16'hc403;
      100: out3 <= 16'hc3be;
      101: out3 <= 16'hc37b;
      102: out3 <= 16'hc33b;
      103: out3 <= 16'hc2fd;
      104: out3 <= 16'hc2c1;
      105: out3 <= 16'hc288;
      106: out3 <= 16'hc251;
      107: out3 <= 16'hc21d;
      108: out3 <= 16'hc1eb;
      109: out3 <= 16'hc1bb;
      110: out3 <= 16'hc18e;
      111: out3 <= 16'hc163;
      112: out3 <= 16'hc13b;
      113: out3 <= 16'hc115;
      114: out3 <= 16'hc0f1;
      115: out3 <= 16'hc0d0;
      116: out3 <= 16'hc0b1;
      117: out3 <= 16'hc095;
      118: out3 <= 16'hc07b;
      119: out3 <= 16'hc064;
      120: out3 <= 16'hc04f;
      121: out3 <= 16'hc03c;
      122: out3 <= 16'hc02c;
      123: out3 <= 16'hc01f;
      124: out3 <= 16'hc014;
      125: out3 <= 16'hc00b;
      126: out3 <= 16'hc005;
      127: out3 <= 16'hc001;
      128: out3 <= 16'hc000;
      129: out3 <= 16'hc001;
      130: out3 <= 16'hc005;
      131: out3 <= 16'hc00b;
      132: out3 <= 16'hc014;
      133: out3 <= 16'hc01f;
      134: out3 <= 16'hc02c;
      135: out3 <= 16'hc03c;
      136: out3 <= 16'hc04f;
      137: out3 <= 16'hc064;
      138: out3 <= 16'hc07b;
      139: out3 <= 16'hc095;
      140: out3 <= 16'hc0b1;
      141: out3 <= 16'hc0d0;
      142: out3 <= 16'hc0f1;
      143: out3 <= 16'hc115;
      144: out3 <= 16'hc13b;
      145: out3 <= 16'hc163;
      146: out3 <= 16'hc18e;
      147: out3 <= 16'hc1bb;
      148: out3 <= 16'hc1eb;
      149: out3 <= 16'hc21d;
      150: out3 <= 16'hc251;
      151: out3 <= 16'hc288;
      152: out3 <= 16'hc2c1;
      153: out3 <= 16'hc2fd;
      154: out3 <= 16'hc33b;
      155: out3 <= 16'hc37b;
      156: out3 <= 16'hc3be;
      157: out3 <= 16'hc403;
      158: out3 <= 16'hc44a;
      159: out3 <= 16'hc493;
      160: out3 <= 16'hc4df;
      161: out3 <= 16'hc52d;
      162: out3 <= 16'hc57e;
      163: out3 <= 16'hc5d0;
      164: out3 <= 16'hc625;
      165: out3 <= 16'hc67c;
      166: out3 <= 16'hc6d5;
      167: out3 <= 16'hc731;
      168: out3 <= 16'hc78f;
      169: out3 <= 16'hc7ee;
      170: out3 <= 16'hc850;
      171: out3 <= 16'hc8b5;
      172: out3 <= 16'hc91b;
      173: out3 <= 16'hc983;
      174: out3 <= 16'hc9ee;
      175: out3 <= 16'hca5b;
      176: out3 <= 16'hcac9;
      177: out3 <= 16'hcb3a;
      178: out3 <= 16'hcbad;
      179: out3 <= 16'hcc21;
      180: out3 <= 16'hcc98;
      181: out3 <= 16'hcd11;
      182: out3 <= 16'hcd8c;
      183: out3 <= 16'hce08;
      184: out3 <= 16'hce87;
      185: out3 <= 16'hcf07;
      186: out3 <= 16'hcf8a;
      187: out3 <= 16'hd00e;
      188: out3 <= 16'hd094;
      189: out3 <= 16'hd11c;
      190: out3 <= 16'hd1a6;
      191: out3 <= 16'hd231;
      192: out3 <= 16'hd2bf;
      193: out3 <= 16'hd34e;
      194: out3 <= 16'hd3df;
      195: out3 <= 16'hd471;
      196: out3 <= 16'hd505;
      197: out3 <= 16'hd59b;
      198: out3 <= 16'hd632;
      199: out3 <= 16'hd6cb;
      200: out3 <= 16'hd766;
      201: out3 <= 16'hd802;
      202: out3 <= 16'hd8a0;
      203: out3 <= 16'hd93f;
      204: out3 <= 16'hd9e0;
      205: out3 <= 16'hda82;
      206: out3 <= 16'hdb26;
      207: out3 <= 16'hdbcb;
      208: out3 <= 16'hdc72;
      209: out3 <= 16'hdd19;
      210: out3 <= 16'hddc3;
      211: out3 <= 16'hde6d;
      212: out3 <= 16'hdf19;
      213: out3 <= 16'hdfc6;
      214: out3 <= 16'he074;
      215: out3 <= 16'he124;
      216: out3 <= 16'he1d5;
      217: out3 <= 16'he287;
      218: out3 <= 16'he33a;
      219: out3 <= 16'he3ee;
      220: out3 <= 16'he4a3;
      221: out3 <= 16'he559;
      222: out3 <= 16'he611;
      223: out3 <= 16'he6c9;
      224: out3 <= 16'he782;
      225: out3 <= 16'he83c;
      226: out3 <= 16'he8f7;
      227: out3 <= 16'he9b4;
      228: out3 <= 16'hea70;
      229: out3 <= 16'heb2e;
      230: out3 <= 16'hebed;
      231: out3 <= 16'hecac;
      232: out3 <= 16'hed6c;
      233: out3 <= 16'hee2d;
      234: out3 <= 16'heeee;
      235: out3 <= 16'hefb0;
      236: out3 <= 16'hf073;
      237: out3 <= 16'hf136;
      238: out3 <= 16'hf1fa;
      239: out3 <= 16'hf2bf;
      240: out3 <= 16'hf384;
      241: out3 <= 16'hf449;
      242: out3 <= 16'hf50f;
      243: out3 <= 16'hf5d5;
      244: out3 <= 16'hf69c;
      245: out3 <= 16'hf763;
      246: out3 <= 16'hf82a;
      247: out3 <= 16'hf8f2;
      248: out3 <= 16'hf9ba;
      249: out3 <= 16'hfa82;
      250: out3 <= 16'hfb4b;
      251: out3 <= 16'hfc13;
      252: out3 <= 16'hfcdc;
      253: out3 <= 16'hfda5;
      254: out3 <= 16'hfe6e;
      255: out3 <= 16'hff37;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D28_94537(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [7:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfed2;
      2: out3 <= 16'hfda5;
      3: out3 <= 16'hfc78;
      4: out3 <= 16'hfb4b;
      5: out3 <= 16'hfa1e;
      6: out3 <= 16'hf8f2;
      7: out3 <= 16'hf7c7;
      8: out3 <= 16'hf69c;
      9: out3 <= 16'hf572;
      10: out3 <= 16'hf449;
      11: out3 <= 16'hf321;
      12: out3 <= 16'hf1fa;
      13: out3 <= 16'hf0d5;
      14: out3 <= 16'hefb0;
      15: out3 <= 16'hee8d;
      16: out3 <= 16'hed6c;
      17: out3 <= 16'hec4c;
      18: out3 <= 16'heb2e;
      19: out3 <= 16'hea12;
      20: out3 <= 16'he8f7;
      21: out3 <= 16'he7df;
      22: out3 <= 16'he6c9;
      23: out3 <= 16'he5b5;
      24: out3 <= 16'he4a3;
      25: out3 <= 16'he394;
      26: out3 <= 16'he287;
      27: out3 <= 16'he17c;
      28: out3 <= 16'he074;
      29: out3 <= 16'hdf6f;
      30: out3 <= 16'hde6d;
      31: out3 <= 16'hdd6e;
      32: out3 <= 16'hdc72;
      33: out3 <= 16'hdb78;
      34: out3 <= 16'hda82;
      35: out3 <= 16'hd98f;
      36: out3 <= 16'hd8a0;
      37: out3 <= 16'hd7b4;
      38: out3 <= 16'hd6cb;
      39: out3 <= 16'hd5e6;
      40: out3 <= 16'hd505;
      41: out3 <= 16'hd428;
      42: out3 <= 16'hd34e;
      43: out3 <= 16'hd278;
      44: out3 <= 16'hd1a6;
      45: out3 <= 16'hd0d8;
      46: out3 <= 16'hd00e;
      47: out3 <= 16'hcf48;
      48: out3 <= 16'hce87;
      49: out3 <= 16'hcdca;
      50: out3 <= 16'hcd11;
      51: out3 <= 16'hcc5d;
      52: out3 <= 16'hcbad;
      53: out3 <= 16'hcb01;
      54: out3 <= 16'hca5b;
      55: out3 <= 16'hc9b8;
      56: out3 <= 16'hc91b;
      57: out3 <= 16'hc882;
      58: out3 <= 16'hc7ee;
      59: out3 <= 16'hc75f;
      60: out3 <= 16'hc6d5;
      61: out3 <= 16'hc650;
      62: out3 <= 16'hc5d0;
      63: out3 <= 16'hc555;
      64: out3 <= 16'hc4df;
      65: out3 <= 16'hc46e;
      66: out3 <= 16'hc403;
      67: out3 <= 16'hc39c;
      68: out3 <= 16'hc33b;
      69: out3 <= 16'hc2df;
      70: out3 <= 16'hc288;
      71: out3 <= 16'hc237;
      72: out3 <= 16'hc1eb;
      73: out3 <= 16'hc1a4;
      74: out3 <= 16'hc163;
      75: out3 <= 16'hc128;
      76: out3 <= 16'hc0f1;
      77: out3 <= 16'hc0c0;
      78: out3 <= 16'hc095;
      79: out3 <= 16'hc06f;
      80: out3 <= 16'hc04f;
      81: out3 <= 16'hc034;
      82: out3 <= 16'hc01f;
      83: out3 <= 16'hc00f;
      84: out3 <= 16'hc005;
      85: out3 <= 16'hc000;
      86: out3 <= 16'hc001;
      87: out3 <= 16'hc008;
      88: out3 <= 16'hc014;
      89: out3 <= 16'hc025;
      90: out3 <= 16'hc03c;
      91: out3 <= 16'hc059;
      92: out3 <= 16'hc07b;
      93: out3 <= 16'hc0a3;
      94: out3 <= 16'hc0d0;
      95: out3 <= 16'hc103;
      96: out3 <= 16'hc13b;
      97: out3 <= 16'hc178;
      98: out3 <= 16'hc1bb;
      99: out3 <= 16'hc204;
      100: out3 <= 16'hc251;
      101: out3 <= 16'hc2a5;
      102: out3 <= 16'hc2fd;
      103: out3 <= 16'hc35b;
      104: out3 <= 16'hc3be;
      105: out3 <= 16'hc426;
      106: out3 <= 16'hc493;
      107: out3 <= 16'hc506;
      108: out3 <= 16'hc57e;
      109: out3 <= 16'hc5fa;
      110: out3 <= 16'hc67c;
      111: out3 <= 16'hc703;
      112: out3 <= 16'hc78f;
      113: out3 <= 16'hc81f;
      114: out3 <= 16'hc8b5;
      115: out3 <= 16'hc94f;
      116: out3 <= 16'hc9ee;
      117: out3 <= 16'hca92;
      118: out3 <= 16'hcb3a;
      119: out3 <= 16'hcbe7;
      120: out3 <= 16'hcc98;
      121: out3 <= 16'hcd4e;
      122: out3 <= 16'hce08;
      123: out3 <= 16'hcec7;
      124: out3 <= 16'hcf8a;
      125: out3 <= 16'hd051;
      126: out3 <= 16'hd11c;
      127: out3 <= 16'hd1eb;
      128: out3 <= 16'hd2bf;
      129: out3 <= 16'hd396;
      130: out3 <= 16'hd471;
      131: out3 <= 16'hd550;
      132: out3 <= 16'hd632;
      133: out3 <= 16'hd719;
      134: out3 <= 16'hd802;
      135: out3 <= 16'hd8ef;
      136: out3 <= 16'hd9e0;
      137: out3 <= 16'hdad4;
      138: out3 <= 16'hdbcb;
      139: out3 <= 16'hdcc5;
      140: out3 <= 16'hddc3;
      141: out3 <= 16'hdec3;
      142: out3 <= 16'hdfc6;
      143: out3 <= 16'he0cc;
      144: out3 <= 16'he1d5;
      145: out3 <= 16'he2e0;
      146: out3 <= 16'he3ee;
      147: out3 <= 16'he4fe;
      148: out3 <= 16'he611;
      149: out3 <= 16'he725;
      150: out3 <= 16'he83c;
      151: out3 <= 16'he955;
      152: out3 <= 16'hea70;
      153: out3 <= 16'heb8d;
      154: out3 <= 16'hecac;
      155: out3 <= 16'hedcc;
      156: out3 <= 16'heeee;
      157: out3 <= 16'hf012;
      158: out3 <= 16'hf136;
      159: out3 <= 16'hf25c;
      160: out3 <= 16'hf384;
      161: out3 <= 16'hf4ac;
      162: out3 <= 16'hf5d5;
      163: out3 <= 16'hf6ff;
      164: out3 <= 16'hf82a;
      165: out3 <= 16'hf956;
      166: out3 <= 16'hfa82;
      167: out3 <= 16'hfbaf;
      168: out3 <= 16'hfcdc;
      169: out3 <= 16'hfe09;
      170: out3 <= 16'hff37;
      171: out3 <= 16'h65;
      172: out3 <= 16'h192;
      173: out3 <= 16'h2c0;
      174: out3 <= 16'h3ed;
      175: out3 <= 16'h51a;
      176: out3 <= 16'h646;
      177: out3 <= 16'h772;
      178: out3 <= 16'h89d;
      179: out3 <= 16'h9c7;
      180: out3 <= 16'haf1;
      181: out3 <= 16'hc1a;
      182: out3 <= 16'hd41;
      183: out3 <= 16'he68;
      184: out3 <= 16'hf8d;
      185: out3 <= 16'h10b1;
      186: out3 <= 16'h11d3;
      187: out3 <= 16'h12f4;
      188: out3 <= 16'h1413;
      189: out3 <= 16'h1531;
      190: out3 <= 16'h164c;
      191: out3 <= 16'h1766;
      192: out3 <= 16'h187e;
      193: out3 <= 16'h1993;
      194: out3 <= 16'h1aa7;
      195: out3 <= 16'h1bb8;
      196: out3 <= 16'h1cc6;
      197: out3 <= 16'h1dd3;
      198: out3 <= 16'h1edc;
      199: out3 <= 16'h1fe3;
      200: out3 <= 16'h20e7;
      201: out3 <= 16'h21e8;
      202: out3 <= 16'h22e7;
      203: out3 <= 16'h23e2;
      204: out3 <= 16'h24da;
      205: out3 <= 16'h25cf;
      206: out3 <= 16'h26c1;
      207: out3 <= 16'h27af;
      208: out3 <= 16'h289a;
      209: out3 <= 16'h2981;
      210: out3 <= 16'h2a65;
      211: out3 <= 16'h2b45;
      212: out3 <= 16'h2c21;
      213: out3 <= 16'h2cfa;
      214: out3 <= 16'h2dcf;
      215: out3 <= 16'h2e9f;
      216: out3 <= 16'h2f6c;
      217: out3 <= 16'h3034;
      218: out3 <= 16'h30f9;
      219: out3 <= 16'h31b9;
      220: out3 <= 16'h3274;
      221: out3 <= 16'h332c;
      222: out3 <= 16'h33df;
      223: out3 <= 16'h348d;
      224: out3 <= 16'h3537;
      225: out3 <= 16'h35dc;
      226: out3 <= 16'h367d;
      227: out3 <= 16'h3718;
      228: out3 <= 16'h37b0;
      229: out3 <= 16'h3842;
      230: out3 <= 16'h38cf;
      231: out3 <= 16'h3958;
      232: out3 <= 16'h39db;
      233: out3 <= 16'h3a59;
      234: out3 <= 16'h3ad3;
      235: out3 <= 16'h3b47;
      236: out3 <= 16'h3bb6;
      237: out3 <= 16'h3c20;
      238: out3 <= 16'h3c85;
      239: out3 <= 16'h3ce4;
      240: out3 <= 16'h3d3f;
      241: out3 <= 16'h3d93;
      242: out3 <= 16'h3de3;
      243: out3 <= 16'h3e2d;
      244: out3 <= 16'h3e72;
      245: out3 <= 16'h3eb1;
      246: out3 <= 16'h3eeb;
      247: out3 <= 16'h3f20;
      248: out3 <= 16'h3f4f;
      249: out3 <= 16'h3f78;
      250: out3 <= 16'h3f9c;
      251: out3 <= 16'h3fbb;
      252: out3 <= 16'h3fd4;
      253: out3 <= 16'h3fe7;
      254: out3 <= 16'h3ff5;
      255: out3 <= 16'h3ffd;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D22_94795(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [7:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h4000;
      2: out3 <= 16'h3fff;
      3: out3 <= 16'h3ffd;
      4: out3 <= 16'h3ffb;
      5: out3 <= 16'h3ff8;
      6: out3 <= 16'h3ff5;
      7: out3 <= 16'h3ff1;
      8: out3 <= 16'h3fec;
      9: out3 <= 16'h3fe7;
      10: out3 <= 16'h3fe1;
      11: out3 <= 16'h3fdb;
      12: out3 <= 16'h3fd4;
      13: out3 <= 16'h3fcc;
      14: out3 <= 16'h3fc4;
      15: out3 <= 16'h3fbb;
      16: out3 <= 16'h3fb1;
      17: out3 <= 16'h3fa7;
      18: out3 <= 16'h3f9c;
      19: out3 <= 16'h3f91;
      20: out3 <= 16'h3f85;
      21: out3 <= 16'h3f78;
      22: out3 <= 16'h3f6b;
      23: out3 <= 16'h3f5d;
      24: out3 <= 16'h3f4f;
      25: out3 <= 16'h3f40;
      26: out3 <= 16'h3f30;
      27: out3 <= 16'h3f20;
      28: out3 <= 16'h3f0f;
      29: out3 <= 16'h3efd;
      30: out3 <= 16'h3eeb;
      31: out3 <= 16'h3ed8;
      32: out3 <= 16'h3ec5;
      33: out3 <= 16'h3eb1;
      34: out3 <= 16'h3e9d;
      35: out3 <= 16'h3e88;
      36: out3 <= 16'h3e72;
      37: out3 <= 16'h3e5c;
      38: out3 <= 16'h3e45;
      39: out3 <= 16'h3e2d;
      40: out3 <= 16'h3e15;
      41: out3 <= 16'h3dfc;
      42: out3 <= 16'h3de3;
      43: out3 <= 16'h3dc9;
      44: out3 <= 16'h3daf;
      45: out3 <= 16'h3d93;
      46: out3 <= 16'h3d78;
      47: out3 <= 16'h3d5b;
      48: out3 <= 16'h3d3f;
      49: out3 <= 16'h3d21;
      50: out3 <= 16'h3d03;
      51: out3 <= 16'h3ce4;
      52: out3 <= 16'h3cc5;
      53: out3 <= 16'h3ca5;
      54: out3 <= 16'h3c85;
      55: out3 <= 16'h3c64;
      56: out3 <= 16'h3c42;
      57: out3 <= 16'h3c20;
      58: out3 <= 16'h3bfd;
      59: out3 <= 16'h3bda;
      60: out3 <= 16'h3bb6;
      61: out3 <= 16'h3b92;
      62: out3 <= 16'h3b6d;
      63: out3 <= 16'h3b47;
      64: out3 <= 16'h3b21;
      65: out3 <= 16'h3afa;
      66: out3 <= 16'h3ad3;
      67: out3 <= 16'h3aab;
      68: out3 <= 16'h3a82;
      69: out3 <= 16'h3a59;
      70: out3 <= 16'h3a30;
      71: out3 <= 16'h3a06;
      72: out3 <= 16'h39db;
      73: out3 <= 16'h39b0;
      74: out3 <= 16'h3984;
      75: out3 <= 16'h3958;
      76: out3 <= 16'h392b;
      77: out3 <= 16'h38fd;
      78: out3 <= 16'h38cf;
      79: out3 <= 16'h38a1;
      80: out3 <= 16'h3871;
      81: out3 <= 16'h3842;
      82: out3 <= 16'h3812;
      83: out3 <= 16'h37e1;
      84: out3 <= 16'h37b0;
      85: out3 <= 16'h377e;
      86: out3 <= 16'h374b;
      87: out3 <= 16'h3718;
      88: out3 <= 16'h36e5;
      89: out3 <= 16'h36b1;
      90: out3 <= 16'h367d;
      91: out3 <= 16'h3648;
      92: out3 <= 16'h3612;
      93: out3 <= 16'h35dc;
      94: out3 <= 16'h35a5;
      95: out3 <= 16'h356e;
      96: out3 <= 16'h3537;
      97: out3 <= 16'h34ff;
      98: out3 <= 16'h34c6;
      99: out3 <= 16'h348d;
      100: out3 <= 16'h3453;
      101: out3 <= 16'h3419;
      102: out3 <= 16'h33df;
      103: out3 <= 16'h33a3;
      104: out3 <= 16'h3368;
      105: out3 <= 16'h332c;
      106: out3 <= 16'h32ef;
      107: out3 <= 16'h32b2;
      108: out3 <= 16'h3274;
      109: out3 <= 16'h3236;
      110: out3 <= 16'h31f8;
      111: out3 <= 16'h31b9;
      112: out3 <= 16'h3179;
      113: out3 <= 16'h3139;
      114: out3 <= 16'h30f9;
      115: out3 <= 16'h30b8;
      116: out3 <= 16'h3076;
      117: out3 <= 16'h3034;
      118: out3 <= 16'h2ff2;
      119: out3 <= 16'h2faf;
      120: out3 <= 16'h2f6c;
      121: out3 <= 16'h2f28;
      122: out3 <= 16'h2ee4;
      123: out3 <= 16'h2e9f;
      124: out3 <= 16'h2e5a;
      125: out3 <= 16'h2e15;
      126: out3 <= 16'h2dcf;
      127: out3 <= 16'h2d88;
      128: out3 <= 16'h2d41;
      129: out3 <= 16'h2cfa;
      130: out3 <= 16'h2cb2;
      131: out3 <= 16'h2c6a;
      132: out3 <= 16'h2c21;
      133: out3 <= 16'h2bd8;
      134: out3 <= 16'h2b8f;
      135: out3 <= 16'h2b45;
      136: out3 <= 16'h2afb;
      137: out3 <= 16'h2ab0;
      138: out3 <= 16'h2a65;
      139: out3 <= 16'h2a1a;
      140: out3 <= 16'h29ce;
      141: out3 <= 16'h2981;
      142: out3 <= 16'h2935;
      143: out3 <= 16'h28e7;
      144: out3 <= 16'h289a;
      145: out3 <= 16'h284c;
      146: out3 <= 16'h27fe;
      147: out3 <= 16'h27af;
      148: out3 <= 16'h2760;
      149: out3 <= 16'h2711;
      150: out3 <= 16'h26c1;
      151: out3 <= 16'h2671;
      152: out3 <= 16'h2620;
      153: out3 <= 16'h25cf;
      154: out3 <= 16'h257e;
      155: out3 <= 16'h252c;
      156: out3 <= 16'h24da;
      157: out3 <= 16'h2488;
      158: out3 <= 16'h2435;
      159: out3 <= 16'h23e2;
      160: out3 <= 16'h238e;
      161: out3 <= 16'h233b;
      162: out3 <= 16'h22e7;
      163: out3 <= 16'h2292;
      164: out3 <= 16'h223d;
      165: out3 <= 16'h21e8;
      166: out3 <= 16'h2193;
      167: out3 <= 16'h213d;
      168: out3 <= 16'h20e7;
      169: out3 <= 16'h2091;
      170: out3 <= 16'h203a;
      171: out3 <= 16'h1fe3;
      172: out3 <= 16'h1f8c;
      173: out3 <= 16'h1f34;
      174: out3 <= 16'h1edc;
      175: out3 <= 16'h1e84;
      176: out3 <= 16'h1e2b;
      177: out3 <= 16'h1dd3;
      178: out3 <= 16'h1d79;
      179: out3 <= 16'h1d20;
      180: out3 <= 16'h1cc6;
      181: out3 <= 16'h1c6c;
      182: out3 <= 16'h1c12;
      183: out3 <= 16'h1bb8;
      184: out3 <= 16'h1b5d;
      185: out3 <= 16'h1b02;
      186: out3 <= 16'h1aa7;
      187: out3 <= 16'h1a4b;
      188: out3 <= 16'h19ef;
      189: out3 <= 16'h1993;
      190: out3 <= 16'h1937;
      191: out3 <= 16'h18db;
      192: out3 <= 16'h187e;
      193: out3 <= 16'h1821;
      194: out3 <= 16'h17c4;
      195: out3 <= 16'h1766;
      196: out3 <= 16'h1709;
      197: out3 <= 16'h16ab;
      198: out3 <= 16'h164c;
      199: out3 <= 16'h15ee;
      200: out3 <= 16'h1590;
      201: out3 <= 16'h1531;
      202: out3 <= 16'h14d2;
      203: out3 <= 16'h1473;
      204: out3 <= 16'h1413;
      205: out3 <= 16'h13b4;
      206: out3 <= 16'h1354;
      207: out3 <= 16'h12f4;
      208: out3 <= 16'h1294;
      209: out3 <= 16'h1234;
      210: out3 <= 16'h11d3;
      211: out3 <= 16'h1173;
      212: out3 <= 16'h1112;
      213: out3 <= 16'h10b1;
      214: out3 <= 16'h1050;
      215: out3 <= 16'hfee;
      216: out3 <= 16'hf8d;
      217: out3 <= 16'hf2b;
      218: out3 <= 16'heca;
      219: out3 <= 16'he68;
      220: out3 <= 16'he06;
      221: out3 <= 16'hda4;
      222: out3 <= 16'hd41;
      223: out3 <= 16'hcdf;
      224: out3 <= 16'hc7c;
      225: out3 <= 16'hc1a;
      226: out3 <= 16'hbb7;
      227: out3 <= 16'hb54;
      228: out3 <= 16'haf1;
      229: out3 <= 16'ha8e;
      230: out3 <= 16'ha2b;
      231: out3 <= 16'h9c7;
      232: out3 <= 16'h964;
      233: out3 <= 16'h901;
      234: out3 <= 16'h89d;
      235: out3 <= 16'h839;
      236: out3 <= 16'h7d6;
      237: out3 <= 16'h772;
      238: out3 <= 16'h70e;
      239: out3 <= 16'h6aa;
      240: out3 <= 16'h646;
      241: out3 <= 16'h5e2;
      242: out3 <= 16'h57e;
      243: out3 <= 16'h51a;
      244: out3 <= 16'h4b5;
      245: out3 <= 16'h451;
      246: out3 <= 16'h3ed;
      247: out3 <= 16'h388;
      248: out3 <= 16'h324;
      249: out3 <= 16'h2c0;
      250: out3 <= 16'h25b;
      251: out3 <= 16'h1f7;
      252: out3 <= 16'h192;
      253: out3 <= 16'h12e;
      254: out3 <= 16'hc9;
      255: out3 <= 16'h65;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 8
// Gap: 1
module codeBlock92669(clk, reset, next_in, next_out,
   i3_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [7:0] i3_in;
   reg [7:0] i3;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(7, 1) shiftFIFO_123353(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a345;
   wire signed [15:0] a322;
   wire signed [15:0] a348;
   wire signed [15:0] a326;
   wire signed [15:0] a349;
   wire signed [15:0] a350;
   wire signed [15:0] a353;
   wire signed [15:0] a354;
   wire signed [15:0] a357;
   wire signed [15:0] a358;
   reg signed [15:0] tm532;
   reg signed [15:0] tm536;
   reg signed [15:0] tm548;
   reg signed [15:0] tm552;
   reg signed [15:0] tm564;
   reg signed [15:0] tm568;
   reg signed [15:0] tm580;
   reg signed [15:0] tm587;
   reg signed [15:0] tm533;
   reg signed [15:0] tm537;
   reg signed [15:0] tm549;
   reg signed [15:0] tm553;
   reg signed [15:0] tm565;
   reg signed [15:0] tm569;
   reg signed [15:0] tm581;
   reg signed [15:0] tm588;
   wire signed [15:0] tm26;
   wire signed [15:0] a327;
   wire signed [15:0] tm27;
   wire signed [15:0] a329;
   wire signed [15:0] tm28;
   wire signed [15:0] a333;
   wire signed [15:0] tm29;
   wire signed [15:0] a335;
   wire signed [15:0] tm30;
   wire signed [15:0] a339;
   wire signed [15:0] tm31;
   wire signed [15:0] a341;
   reg signed [15:0] tm534;
   reg signed [15:0] tm538;
   reg signed [15:0] tm550;
   reg signed [15:0] tm554;
   reg signed [15:0] tm566;
   reg signed [15:0] tm570;
   reg signed [15:0] tm582;
   reg signed [15:0] tm589;
   reg signed [15:0] tm100;
   reg signed [15:0] tm101;
   reg signed [15:0] tm104;
   reg signed [15:0] tm105;
   reg signed [15:0] tm108;
   reg signed [15:0] tm109;
   reg signed [15:0] tm535;
   reg signed [15:0] tm539;
   reg signed [15:0] tm551;
   reg signed [15:0] tm555;
   reg signed [15:0] tm567;
   reg signed [15:0] tm571;
   reg signed [15:0] tm583;
   reg signed [15:0] tm590;
   reg signed [15:0] tm584;
   reg signed [15:0] tm591;
   wire signed [15:0] a328;
   wire signed [15:0] a330;
   wire signed [15:0] a331;
   wire signed [15:0] a332;
   wire signed [15:0] a334;
   wire signed [15:0] a336;
   wire signed [15:0] a337;
   wire signed [15:0] a338;
   wire signed [15:0] a340;
   wire signed [15:0] a342;
   wire signed [15:0] a343;
   wire signed [15:0] a344;
   reg signed [15:0] tm585;
   reg signed [15:0] tm592;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   reg signed [15:0] tm586;
   reg signed [15:0] tm593;


   assign a345 = X0;
   assign a322 = a345;
   assign a348 = X1;
   assign a326 = a348;
   assign a349 = X2;
   assign a350 = X3;
   assign a353 = X4;
   assign a354 = X5;
   assign a357 = X6;
   assign a358 = X7;
   assign a327 = tm26;
   assign a329 = tm27;
   assign a333 = tm28;
   assign a335 = tm29;
   assign a339 = tm30;
   assign a341 = tm31;
   assign Y0 = tm586;
   assign Y1 = tm593;

   D26_93247 instD26inst0_93247(.addr(i3[7:0]), .out(tm27), .clk(clk));

   D23_93505 instD23inst0_93505(.addr(i3[7:0]), .out(tm28), .clk(clk));

   D24_93763 instD24inst0_93763(.addr(i3[7:0]), .out(tm30), .clk(clk));

   D27_94279 instD27inst0_94279(.addr(i3[7:0]), .out(tm29), .clk(clk));

   D28_94537 instD28inst0_94537(.addr(i3[7:0]), .out(tm31), .clk(clk));

   D22_94795 instD22inst0_94795(.addr(i3[7:0]), .out(tm26), .clk(clk));

    multfix #(16, 2) m92768(.a(tm100), .b(tm535), .clk(clk), .q_sc(a328), .q_unsc(), .rst(reset));
    multfix #(16, 2) m92790(.a(tm101), .b(tm539), .clk(clk), .q_sc(a330), .q_unsc(), .rst(reset));
    multfix #(16, 2) m92808(.a(tm101), .b(tm535), .clk(clk), .q_sc(a331), .q_unsc(), .rst(reset));
    multfix #(16, 2) m92819(.a(tm100), .b(tm539), .clk(clk), .q_sc(a332), .q_unsc(), .rst(reset));
    multfix #(16, 2) m92848(.a(tm104), .b(tm551), .clk(clk), .q_sc(a334), .q_unsc(), .rst(reset));
    multfix #(16, 2) m92870(.a(tm105), .b(tm555), .clk(clk), .q_sc(a336), .q_unsc(), .rst(reset));
    multfix #(16, 2) m92888(.a(tm105), .b(tm551), .clk(clk), .q_sc(a337), .q_unsc(), .rst(reset));
    multfix #(16, 2) m92899(.a(tm104), .b(tm555), .clk(clk), .q_sc(a338), .q_unsc(), .rst(reset));
    multfix #(16, 2) m92928(.a(tm108), .b(tm567), .clk(clk), .q_sc(a340), .q_unsc(), .rst(reset));
    multfix #(16, 2) m92950(.a(tm109), .b(tm571), .clk(clk), .q_sc(a342), .q_unsc(), .rst(reset));
    multfix #(16, 2) m92968(.a(tm109), .b(tm567), .clk(clk), .q_sc(a343), .q_unsc(), .rst(reset));
    multfix #(16, 2) m92979(.a(tm108), .b(tm571), .clk(clk), .q_sc(a344), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub92797(.a(a328), .b(a330), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add92826(.a(a331), .b(a332), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub92877(.a(a334), .b(a336), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add92906(.a(a337), .b(a338), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub92957(.a(a340), .b(a342), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add92986(.a(a343), .b(a344), .clk(clk), .q(Y7));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm100 <= 0;
         tm535 <= 0;
         tm101 <= 0;
         tm539 <= 0;
         tm101 <= 0;
         tm535 <= 0;
         tm100 <= 0;
         tm539 <= 0;
         tm104 <= 0;
         tm551 <= 0;
         tm105 <= 0;
         tm555 <= 0;
         tm105 <= 0;
         tm551 <= 0;
         tm104 <= 0;
         tm555 <= 0;
         tm108 <= 0;
         tm567 <= 0;
         tm109 <= 0;
         tm571 <= 0;
         tm109 <= 0;
         tm567 <= 0;
         tm108 <= 0;
         tm571 <= 0;
      end
      else begin
         i3 <= i3_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
         tm532 <= a349;
         tm536 <= a350;
         tm548 <= a353;
         tm552 <= a354;
         tm564 <= a357;
         tm568 <= a358;
         tm580 <= a322;
         tm587 <= a326;
         tm533 <= tm532;
         tm537 <= tm536;
         tm549 <= tm548;
         tm553 <= tm552;
         tm565 <= tm564;
         tm569 <= tm568;
         tm581 <= tm580;
         tm588 <= tm587;
         tm534 <= tm533;
         tm538 <= tm537;
         tm550 <= tm549;
         tm554 <= tm553;
         tm566 <= tm565;
         tm570 <= tm569;
         tm582 <= tm581;
         tm589 <= tm588;
         tm100 <= a327;
         tm101 <= a329;
         tm104 <= a333;
         tm105 <= a335;
         tm108 <= a339;
         tm109 <= a341;
         tm535 <= tm534;
         tm539 <= tm538;
         tm551 <= tm550;
         tm555 <= tm554;
         tm567 <= tm566;
         tm571 <= tm570;
         tm583 <= tm582;
         tm590 <= tm589;
         tm584 <= tm583;
         tm591 <= tm590;
         tm585 <= tm584;
         tm592 <= tm591;
         tm586 <= tm585;
         tm593 <= tm592;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock95058(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(2, 1) shiftFIFO_123356(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a257;
   wire signed [15:0] a258;
   wire signed [15:0] a259;
   wire signed [15:0] a260;
   wire signed [15:0] a265;
   wire signed [15:0] a266;
   wire signed [15:0] a267;
   wire signed [15:0] a268;
   wire signed [16:0] tm306;
   wire signed [16:0] tm307;
   wire signed [16:0] tm308;
   wire signed [16:0] tm309;
   wire signed [16:0] tm310;
   wire signed [16:0] tm311;
   wire signed [16:0] tm312;
   wire signed [16:0] tm313;
   wire signed [15:0] t297;
   wire signed [15:0] t298;
   wire signed [15:0] t299;
   wire signed [15:0] t300;
   wire signed [15:0] t301;
   wire signed [15:0] t302;
   wire signed [15:0] t303;
   wire signed [15:0] t304;
   wire signed [16:0] tm314;
   wire signed [16:0] tm315;
   wire signed [16:0] tm316;
   wire signed [16:0] tm317;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm318;
   wire signed [16:0] tm319;
   wire signed [16:0] tm320;
   wire signed [16:0] tm321;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t305;
   wire signed [15:0] t306;
   wire signed [15:0] t307;
   wire signed [15:0] t308;
   wire signed [15:0] t309;
   wire signed [15:0] t310;
   wire signed [15:0] t311;
   wire signed [15:0] t312;


   assign a257 = X0;
   assign a258 = X4;
   assign a259 = X1;
   assign a260 = X5;
   assign a265 = X2;
   assign a266 = X6;
   assign a267 = X3;
   assign a268 = X7;
   assign t297 = tm306[16:1];
   assign t298 = tm307[16:1];
   assign t299 = tm308[16:1];
   assign t300 = tm309[16:1];
   assign t301 = tm310[16:1];
   assign t302 = tm311[16:1];
   assign t303 = tm312[16:1];
   assign t304 = tm313[16:1];
   assign Y0 = t305;
   assign Y1 = t306;
   assign Y4 = t307;
   assign Y5 = t308;
   assign Y2 = t309;
   assign Y3 = t310;
   assign Y6 = t311;
   assign Y7 = t312;
   assign t305 = tm314[16:1];
   assign t306 = tm315[16:1];
   assign t307 = tm316[16:1];
   assign t308 = tm317[16:1];
   assign t309 = tm318[16:1];
   assign t310 = tm319[16:1];
   assign t311 = tm320[16:1];
   assign t312 = tm321[16:1];

    addfxp #(17, 1) add95070(.a({{1{a257[15]}}, a257}), .b({{1{a258[15]}}, a258}), .clk(clk), .q(tm306));    // 0
    addfxp #(17, 1) add95085(.a({{1{a259[15]}}, a259}), .b({{1{a260[15]}}, a260}), .clk(clk), .q(tm307));    // 0
    subfxp #(17, 1) sub95100(.a({{1{a257[15]}}, a257}), .b({{1{a258[15]}}, a258}), .clk(clk), .q(tm308));    // 0
    subfxp #(17, 1) sub95115(.a({{1{a259[15]}}, a259}), .b({{1{a260[15]}}, a260}), .clk(clk), .q(tm309));    // 0
    addfxp #(17, 1) add95130(.a({{1{a265[15]}}, a265}), .b({{1{a266[15]}}, a266}), .clk(clk), .q(tm310));    // 0
    addfxp #(17, 1) add95145(.a({{1{a267[15]}}, a267}), .b({{1{a268[15]}}, a268}), .clk(clk), .q(tm311));    // 0
    subfxp #(17, 1) sub95160(.a({{1{a265[15]}}, a265}), .b({{1{a266[15]}}, a266}), .clk(clk), .q(tm312));    // 0
    subfxp #(17, 1) sub95175(.a({{1{a267[15]}}, a267}), .b({{1{a268[15]}}, a268}), .clk(clk), .q(tm313));    // 0
    addfxp #(17, 1) add95182(.a({{1{t297[15]}}, t297}), .b({{1{t301[15]}}, t301}), .clk(clk), .q(tm314));    // 1
    addfxp #(17, 1) add95189(.a({{1{t298[15]}}, t298}), .b({{1{t302[15]}}, t302}), .clk(clk), .q(tm315));    // 1
    subfxp #(17, 1) sub95196(.a({{1{t297[15]}}, t297}), .b({{1{t301[15]}}, t301}), .clk(clk), .q(tm316));    // 1
    subfxp #(17, 1) sub95203(.a({{1{t298[15]}}, t298}), .b({{1{t302[15]}}, t302}), .clk(clk), .q(tm317));    // 1
    addfxp #(17, 1) add95226(.a({{1{t299[15]}}, t299}), .b({{1{t304[15]}}, t304}), .clk(clk), .q(tm318));    // 1
    subfxp #(17, 1) sub95233(.a({{1{t300[15]}}, t300}), .b({{1{t303[15]}}, t303}), .clk(clk), .q(tm319));    // 1
    subfxp #(17, 1) sub95240(.a({{1{t299[15]}}, t299}), .b({{1{t304[15]}}, t304}), .clk(clk), .q(tm320));    // 1
    addfxp #(17, 1) add95247(.a({{1{t300[15]}}, t300}), .b({{1{t303[15]}}, t303}), .clk(clk), .q(tm321));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 773
// Gap: 1024
module rc95271(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];

   perm95269 instPerm123357(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 773
// Gap: 1024
module perm95269(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 1024;
   parameter logDepth = 10;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 2'd0};
   assign    addr0b = {outCount, 2'd0};
   assign    addr0c = {outCount_for_rd_addr, 2'd0};
   assign    addr1 = {inCount, 2'd1};
   assign    addr1b = {outCount, 2'd1};
   assign    addr1c = {outCount_for_rd_addr, 2'd1};
   assign    addr2 = {inCount, 2'd2};
   assign    addr2b = {outCount, 2'd2};
   assign    addr2c = {outCount_for_rd_addr, 2'd2};
   assign    addr3 = {inCount, 2'd3};
   assign    addr3b = {outCount, 2'd3};
   assign    addr3c = {outCount_for_rd_addr, 2'd3};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_1_0, w_1_1, w_1_2, w_1_3, w_2_0, w_2_1, w_2_2, w_2_3;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_2_0, z_2_1, z_2_2, z_2_3;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_1_0, u_1_1, u_1_2, u_1_3, u_2_0, u_2_1, u_2_2, u_2_3;

    reg inFlip1, outFlip1;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
    end

   assign inBank0[0] = addr0[10] ^ addr0[0];
   assign inBank0[1] = addr0[11] ^ addr0[1];
   assign inAddr0[0] = addr0[2];
   assign inAddr0[1] = addr0[3];
   assign inAddr0[2] = addr0[4];
   assign inAddr0[3] = addr0[5];
   assign inAddr0[4] = addr0[6];
   assign inAddr0[5] = addr0[7];
   assign inAddr0[6] = addr0[8];
   assign inAddr0[7] = addr0[9];
   assign inAddr0[8] = addr0[0];
   assign inAddr0[9] = addr0[1];
   assign outBank0[0] = addr0b[10] ^ addr0b[0];
   assign outBank0[1] = addr0b[11] ^ addr0b[1];
   assign outAddr0[0] = addr0b[2];
   assign outAddr0[1] = addr0b[3];
   assign outAddr0[2] = addr0b[4];
   assign outAddr0[3] = addr0b[5];
   assign outAddr0[4] = addr0b[6];
   assign outAddr0[5] = addr0b[7];
   assign outAddr0[6] = addr0b[8];
   assign outAddr0[7] = addr0b[9];
   assign outAddr0[8] = addr0b[10];
   assign outAddr0[9] = addr0b[11];
   assign outBank_a0[0] = addr0c[10] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[11] ^ addr0c[1];
   assign outAddr_a0[0] = addr0c[2];
   assign outAddr_a0[1] = addr0c[3];
   assign outAddr_a0[2] = addr0c[4];
   assign outAddr_a0[3] = addr0c[5];
   assign outAddr_a0[4] = addr0c[6];
   assign outAddr_a0[5] = addr0c[7];
   assign outAddr_a0[6] = addr0c[8];
   assign outAddr_a0[7] = addr0c[9];
   assign outAddr_a0[8] = addr0c[10];
   assign outAddr_a0[9] = addr0c[11];

   assign inBank1[0] = addr1[10] ^ addr1[0];
   assign inBank1[1] = addr1[11] ^ addr1[1];
   assign inAddr1[0] = addr1[2];
   assign inAddr1[1] = addr1[3];
   assign inAddr1[2] = addr1[4];
   assign inAddr1[3] = addr1[5];
   assign inAddr1[4] = addr1[6];
   assign inAddr1[5] = addr1[7];
   assign inAddr1[6] = addr1[8];
   assign inAddr1[7] = addr1[9];
   assign inAddr1[8] = addr1[0];
   assign inAddr1[9] = addr1[1];
   assign outBank1[0] = addr1b[10] ^ addr1b[0];
   assign outBank1[1] = addr1b[11] ^ addr1b[1];
   assign outAddr1[0] = addr1b[2];
   assign outAddr1[1] = addr1b[3];
   assign outAddr1[2] = addr1b[4];
   assign outAddr1[3] = addr1b[5];
   assign outAddr1[4] = addr1b[6];
   assign outAddr1[5] = addr1b[7];
   assign outAddr1[6] = addr1b[8];
   assign outAddr1[7] = addr1b[9];
   assign outAddr1[8] = addr1b[10];
   assign outAddr1[9] = addr1b[11];
   assign outBank_a1[0] = addr1c[10] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[11] ^ addr1c[1];
   assign outAddr_a1[0] = addr1c[2];
   assign outAddr_a1[1] = addr1c[3];
   assign outAddr_a1[2] = addr1c[4];
   assign outAddr_a1[3] = addr1c[5];
   assign outAddr_a1[4] = addr1c[6];
   assign outAddr_a1[5] = addr1c[7];
   assign outAddr_a1[6] = addr1c[8];
   assign outAddr_a1[7] = addr1c[9];
   assign outAddr_a1[8] = addr1c[10];
   assign outAddr_a1[9] = addr1c[11];

   assign inBank2[0] = addr2[10] ^ addr2[0];
   assign inBank2[1] = addr2[11] ^ addr2[1];
   assign inAddr2[0] = addr2[2];
   assign inAddr2[1] = addr2[3];
   assign inAddr2[2] = addr2[4];
   assign inAddr2[3] = addr2[5];
   assign inAddr2[4] = addr2[6];
   assign inAddr2[5] = addr2[7];
   assign inAddr2[6] = addr2[8];
   assign inAddr2[7] = addr2[9];
   assign inAddr2[8] = addr2[0];
   assign inAddr2[9] = addr2[1];
   assign outBank2[0] = addr2b[10] ^ addr2b[0];
   assign outBank2[1] = addr2b[11] ^ addr2b[1];
   assign outAddr2[0] = addr2b[2];
   assign outAddr2[1] = addr2b[3];
   assign outAddr2[2] = addr2b[4];
   assign outAddr2[3] = addr2b[5];
   assign outAddr2[4] = addr2b[6];
   assign outAddr2[5] = addr2b[7];
   assign outAddr2[6] = addr2b[8];
   assign outAddr2[7] = addr2b[9];
   assign outAddr2[8] = addr2b[10];
   assign outAddr2[9] = addr2b[11];
   assign outBank_a2[0] = addr2c[10] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[11] ^ addr2c[1];
   assign outAddr_a2[0] = addr2c[2];
   assign outAddr_a2[1] = addr2c[3];
   assign outAddr_a2[2] = addr2c[4];
   assign outAddr_a2[3] = addr2c[5];
   assign outAddr_a2[4] = addr2c[6];
   assign outAddr_a2[5] = addr2c[7];
   assign outAddr_a2[6] = addr2c[8];
   assign outAddr_a2[7] = addr2c[9];
   assign outAddr_a2[8] = addr2c[10];
   assign outAddr_a2[9] = addr2c[11];

   assign inBank3[0] = addr3[10] ^ addr3[0];
   assign inBank3[1] = addr3[11] ^ addr3[1];
   assign inAddr3[0] = addr3[2];
   assign inAddr3[1] = addr3[3];
   assign inAddr3[2] = addr3[4];
   assign inAddr3[3] = addr3[5];
   assign inAddr3[4] = addr3[6];
   assign inAddr3[5] = addr3[7];
   assign inAddr3[6] = addr3[8];
   assign inAddr3[7] = addr3[9];
   assign inAddr3[8] = addr3[0];
   assign inAddr3[9] = addr3[1];
   assign outBank3[0] = addr3b[10] ^ addr3b[0];
   assign outBank3[1] = addr3b[11] ^ addr3b[1];
   assign outAddr3[0] = addr3b[2];
   assign outAddr3[1] = addr3b[3];
   assign outAddr3[2] = addr3b[4];
   assign outAddr3[3] = addr3b[5];
   assign outAddr3[4] = addr3b[6];
   assign outAddr3[5] = addr3b[7];
   assign outAddr3[6] = addr3b[8];
   assign outAddr3[7] = addr3b[9];
   assign outAddr3[8] = addr3b[10];
   assign outAddr3[9] = addr3b[11];
   assign outBank_a3[0] = addr3c[10] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[11] ^ addr3c[1];
   assign outAddr_a3[0] = addr3c[2];
   assign outAddr_a3[1] = addr3c[3];
   assign outAddr_a3[2] = addr3c[4];
   assign outAddr_a3[3] = addr3c[5];
   assign outAddr_a3[4] = addr3c[6];
   assign outAddr_a3[5] = addr3c[7];
   assign outAddr_a3[6] = addr3c[8];
   assign outAddr_a3[7] = addr3c[9];
   assign outAddr_a3[8] = addr3c[10];
   assign outAddr_a3[9] = addr3c[11];

   nextReg #(769, 10) nextReg_123362(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(4, 1) shiftFIFO_123365(.X(next0), .Y(next_out), .clk(clk));


   memArray4096_95269 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip1), .outFlip(outFlip1), .next(next), .reset(reset),
        .x0(w_2_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_2_0[logDepth-1:0]),
        .outAddr0(u_2_0), 
        .x1(w_2_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_2_1[logDepth-1:0]),
        .outAddr1(u_2_1), 
        .x2(w_2_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_2_2[logDepth-1:0]),
        .outAddr2(u_2_2), 
        .x3(w_2_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_2_3[logDepth-1:0]),
        .outAddr3(u_2_3), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 768)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 771)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
         if (inCount == 768) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 1023) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 768)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign y0 = z_2_0;
    assign y1 = z_2_1;
    assign y2 = z_2_2;
    assign y3 = z_2_3;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[9];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[8];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_1_pipe), .y0(w_2_0), .y1(w_2_1), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_2_pipe), .x1(w_1_3_pipe), .y0(w_2_2), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[9];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[8];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_1_pipe), .y0(z_2_0), .y1(z_2_1), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_2_pipe), .x1(z_1_3_pipe), .y0(z_2_2), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[9];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[8];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_1_pipe), .y0(u_2_0), .y1(u_2_1), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_2_pipe), .x1(u_1_3_pipe), .y0(u_2_2), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
endmodule

module memArray4096_95269(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                clk, inFlip, outFlip);

   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 1024;
   parameter logDepth = 10;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   nextReg #(1024, 10) nextReg_123370(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 1024
module DirSum_103804(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7);

   output next_out;
   input clk, reset, next;

   reg [9:0] i2;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   always @(posedge clk) begin
      if (reset == 1) begin
         i2 <= 0;
      end
      else begin
         if (next == 1)
            i2 <= 0;
         else if (i2 == 1023)
            i2 <= 0;
         else
            i2 <= i2 + 1;
      end
   end

   codeBlock95274 codeBlockIsnt123375(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i2_in(i2),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7));

endmodule

module D12_97646(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [9:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h4000;
      2: out3 <= 16'h4000;
      3: out3 <= 16'h4000;
      4: out3 <= 16'h4000;
      5: out3 <= 16'h4000;
      6: out3 <= 16'h3fff;
      7: out3 <= 16'h3fff;
      8: out3 <= 16'h3fff;
      9: out3 <= 16'h3ffe;
      10: out3 <= 16'h3ffe;
      11: out3 <= 16'h3ffe;
      12: out3 <= 16'h3ffd;
      13: out3 <= 16'h3ffd;
      14: out3 <= 16'h3ffc;
      15: out3 <= 16'h3ffc;
      16: out3 <= 16'h3ffb;
      17: out3 <= 16'h3ffa;
      18: out3 <= 16'h3ffa;
      19: out3 <= 16'h3ff9;
      20: out3 <= 16'h3ff8;
      21: out3 <= 16'h3ff7;
      22: out3 <= 16'h3ff7;
      23: out3 <= 16'h3ff6;
      24: out3 <= 16'h3ff5;
      25: out3 <= 16'h3ff4;
      26: out3 <= 16'h3ff3;
      27: out3 <= 16'h3ff2;
      28: out3 <= 16'h3ff1;
      29: out3 <= 16'h3ff0;
      30: out3 <= 16'h3fef;
      31: out3 <= 16'h3fed;
      32: out3 <= 16'h3fec;
      33: out3 <= 16'h3feb;
      34: out3 <= 16'h3fea;
      35: out3 <= 16'h3fe8;
      36: out3 <= 16'h3fe7;
      37: out3 <= 16'h3fe6;
      38: out3 <= 16'h3fe4;
      39: out3 <= 16'h3fe3;
      40: out3 <= 16'h3fe1;
      41: out3 <= 16'h3fe0;
      42: out3 <= 16'h3fde;
      43: out3 <= 16'h3fdc;
      44: out3 <= 16'h3fdb;
      45: out3 <= 16'h3fd9;
      46: out3 <= 16'h3fd7;
      47: out3 <= 16'h3fd5;
      48: out3 <= 16'h3fd4;
      49: out3 <= 16'h3fd2;
      50: out3 <= 16'h3fd0;
      51: out3 <= 16'h3fce;
      52: out3 <= 16'h3fcc;
      53: out3 <= 16'h3fca;
      54: out3 <= 16'h3fc8;
      55: out3 <= 16'h3fc6;
      56: out3 <= 16'h3fc4;
      57: out3 <= 16'h3fc1;
      58: out3 <= 16'h3fbf;
      59: out3 <= 16'h3fbd;
      60: out3 <= 16'h3fbb;
      61: out3 <= 16'h3fb8;
      62: out3 <= 16'h3fb6;
      63: out3 <= 16'h3fb4;
      64: out3 <= 16'h3fb1;
      65: out3 <= 16'h3faf;
      66: out3 <= 16'h3fac;
      67: out3 <= 16'h3faa;
      68: out3 <= 16'h3fa7;
      69: out3 <= 16'h3fa4;
      70: out3 <= 16'h3fa2;
      71: out3 <= 16'h3f9f;
      72: out3 <= 16'h3f9c;
      73: out3 <= 16'h3f99;
      74: out3 <= 16'h3f97;
      75: out3 <= 16'h3f94;
      76: out3 <= 16'h3f91;
      77: out3 <= 16'h3f8e;
      78: out3 <= 16'h3f8b;
      79: out3 <= 16'h3f88;
      80: out3 <= 16'h3f85;
      81: out3 <= 16'h3f82;
      82: out3 <= 16'h3f7f;
      83: out3 <= 16'h3f7b;
      84: out3 <= 16'h3f78;
      85: out3 <= 16'h3f75;
      86: out3 <= 16'h3f72;
      87: out3 <= 16'h3f6e;
      88: out3 <= 16'h3f6b;
      89: out3 <= 16'h3f68;
      90: out3 <= 16'h3f64;
      91: out3 <= 16'h3f61;
      92: out3 <= 16'h3f5d;
      93: out3 <= 16'h3f5a;
      94: out3 <= 16'h3f56;
      95: out3 <= 16'h3f52;
      96: out3 <= 16'h3f4f;
      97: out3 <= 16'h3f4b;
      98: out3 <= 16'h3f47;
      99: out3 <= 16'h3f43;
      100: out3 <= 16'h3f40;
      101: out3 <= 16'h3f3c;
      102: out3 <= 16'h3f38;
      103: out3 <= 16'h3f34;
      104: out3 <= 16'h3f30;
      105: out3 <= 16'h3f2c;
      106: out3 <= 16'h3f28;
      107: out3 <= 16'h3f24;
      108: out3 <= 16'h3f20;
      109: out3 <= 16'h3f1c;
      110: out3 <= 16'h3f17;
      111: out3 <= 16'h3f13;
      112: out3 <= 16'h3f0f;
      113: out3 <= 16'h3f0a;
      114: out3 <= 16'h3f06;
      115: out3 <= 16'h3f02;
      116: out3 <= 16'h3efd;
      117: out3 <= 16'h3ef9;
      118: out3 <= 16'h3ef4;
      119: out3 <= 16'h3ef0;
      120: out3 <= 16'h3eeb;
      121: out3 <= 16'h3ee7;
      122: out3 <= 16'h3ee2;
      123: out3 <= 16'h3edd;
      124: out3 <= 16'h3ed8;
      125: out3 <= 16'h3ed4;
      126: out3 <= 16'h3ecf;
      127: out3 <= 16'h3eca;
      128: out3 <= 16'h3ec5;
      129: out3 <= 16'h3ec0;
      130: out3 <= 16'h3ebb;
      131: out3 <= 16'h3eb6;
      132: out3 <= 16'h3eb1;
      133: out3 <= 16'h3eac;
      134: out3 <= 16'h3ea7;
      135: out3 <= 16'h3ea2;
      136: out3 <= 16'h3e9d;
      137: out3 <= 16'h3e98;
      138: out3 <= 16'h3e92;
      139: out3 <= 16'h3e8d;
      140: out3 <= 16'h3e88;
      141: out3 <= 16'h3e82;
      142: out3 <= 16'h3e7d;
      143: out3 <= 16'h3e77;
      144: out3 <= 16'h3e72;
      145: out3 <= 16'h3e6c;
      146: out3 <= 16'h3e67;
      147: out3 <= 16'h3e61;
      148: out3 <= 16'h3e5c;
      149: out3 <= 16'h3e56;
      150: out3 <= 16'h3e50;
      151: out3 <= 16'h3e4a;
      152: out3 <= 16'h3e45;
      153: out3 <= 16'h3e3f;
      154: out3 <= 16'h3e39;
      155: out3 <= 16'h3e33;
      156: out3 <= 16'h3e2d;
      157: out3 <= 16'h3e27;
      158: out3 <= 16'h3e21;
      159: out3 <= 16'h3e1b;
      160: out3 <= 16'h3e15;
      161: out3 <= 16'h3e0f;
      162: out3 <= 16'h3e09;
      163: out3 <= 16'h3e03;
      164: out3 <= 16'h3dfc;
      165: out3 <= 16'h3df6;
      166: out3 <= 16'h3df0;
      167: out3 <= 16'h3de9;
      168: out3 <= 16'h3de3;
      169: out3 <= 16'h3ddd;
      170: out3 <= 16'h3dd6;
      171: out3 <= 16'h3dd0;
      172: out3 <= 16'h3dc9;
      173: out3 <= 16'h3dc2;
      174: out3 <= 16'h3dbc;
      175: out3 <= 16'h3db5;
      176: out3 <= 16'h3daf;
      177: out3 <= 16'h3da8;
      178: out3 <= 16'h3da1;
      179: out3 <= 16'h3d9a;
      180: out3 <= 16'h3d93;
      181: out3 <= 16'h3d8d;
      182: out3 <= 16'h3d86;
      183: out3 <= 16'h3d7f;
      184: out3 <= 16'h3d78;
      185: out3 <= 16'h3d71;
      186: out3 <= 16'h3d6a;
      187: out3 <= 16'h3d63;
      188: out3 <= 16'h3d5b;
      189: out3 <= 16'h3d54;
      190: out3 <= 16'h3d4d;
      191: out3 <= 16'h3d46;
      192: out3 <= 16'h3d3f;
      193: out3 <= 16'h3d37;
      194: out3 <= 16'h3d30;
      195: out3 <= 16'h3d28;
      196: out3 <= 16'h3d21;
      197: out3 <= 16'h3d1a;
      198: out3 <= 16'h3d12;
      199: out3 <= 16'h3d0b;
      200: out3 <= 16'h3d03;
      201: out3 <= 16'h3cfb;
      202: out3 <= 16'h3cf4;
      203: out3 <= 16'h3cec;
      204: out3 <= 16'h3ce4;
      205: out3 <= 16'h3cdd;
      206: out3 <= 16'h3cd5;
      207: out3 <= 16'h3ccd;
      208: out3 <= 16'h3cc5;
      209: out3 <= 16'h3cbd;
      210: out3 <= 16'h3cb5;
      211: out3 <= 16'h3cad;
      212: out3 <= 16'h3ca5;
      213: out3 <= 16'h3c9d;
      214: out3 <= 16'h3c95;
      215: out3 <= 16'h3c8d;
      216: out3 <= 16'h3c85;
      217: out3 <= 16'h3c7d;
      218: out3 <= 16'h3c74;
      219: out3 <= 16'h3c6c;
      220: out3 <= 16'h3c64;
      221: out3 <= 16'h3c5b;
      222: out3 <= 16'h3c53;
      223: out3 <= 16'h3c4b;
      224: out3 <= 16'h3c42;
      225: out3 <= 16'h3c3a;
      226: out3 <= 16'h3c31;
      227: out3 <= 16'h3c29;
      228: out3 <= 16'h3c20;
      229: out3 <= 16'h3c17;
      230: out3 <= 16'h3c0f;
      231: out3 <= 16'h3c06;
      232: out3 <= 16'h3bfd;
      233: out3 <= 16'h3bf5;
      234: out3 <= 16'h3bec;
      235: out3 <= 16'h3be3;
      236: out3 <= 16'h3bda;
      237: out3 <= 16'h3bd1;
      238: out3 <= 16'h3bc8;
      239: out3 <= 16'h3bbf;
      240: out3 <= 16'h3bb6;
      241: out3 <= 16'h3bad;
      242: out3 <= 16'h3ba4;
      243: out3 <= 16'h3b9b;
      244: out3 <= 16'h3b92;
      245: out3 <= 16'h3b88;
      246: out3 <= 16'h3b7f;
      247: out3 <= 16'h3b76;
      248: out3 <= 16'h3b6d;
      249: out3 <= 16'h3b63;
      250: out3 <= 16'h3b5a;
      251: out3 <= 16'h3b50;
      252: out3 <= 16'h3b47;
      253: out3 <= 16'h3b3e;
      254: out3 <= 16'h3b34;
      255: out3 <= 16'h3b2a;
      256: out3 <= 16'h3b21;
      257: out3 <= 16'h3b17;
      258: out3 <= 16'h3b0e;
      259: out3 <= 16'h3b04;
      260: out3 <= 16'h3afa;
      261: out3 <= 16'h3af0;
      262: out3 <= 16'h3ae6;
      263: out3 <= 16'h3add;
      264: out3 <= 16'h3ad3;
      265: out3 <= 16'h3ac9;
      266: out3 <= 16'h3abf;
      267: out3 <= 16'h3ab5;
      268: out3 <= 16'h3aab;
      269: out3 <= 16'h3aa1;
      270: out3 <= 16'h3a97;
      271: out3 <= 16'h3a8d;
      272: out3 <= 16'h3a82;
      273: out3 <= 16'h3a78;
      274: out3 <= 16'h3a6e;
      275: out3 <= 16'h3a64;
      276: out3 <= 16'h3a59;
      277: out3 <= 16'h3a4f;
      278: out3 <= 16'h3a45;
      279: out3 <= 16'h3a3a;
      280: out3 <= 16'h3a30;
      281: out3 <= 16'h3a25;
      282: out3 <= 16'h3a1b;
      283: out3 <= 16'h3a10;
      284: out3 <= 16'h3a06;
      285: out3 <= 16'h39fb;
      286: out3 <= 16'h39f0;
      287: out3 <= 16'h39e6;
      288: out3 <= 16'h39db;
      289: out3 <= 16'h39d0;
      290: out3 <= 16'h39c5;
      291: out3 <= 16'h39bb;
      292: out3 <= 16'h39b0;
      293: out3 <= 16'h39a5;
      294: out3 <= 16'h399a;
      295: out3 <= 16'h398f;
      296: out3 <= 16'h3984;
      297: out3 <= 16'h3979;
      298: out3 <= 16'h396e;
      299: out3 <= 16'h3963;
      300: out3 <= 16'h3958;
      301: out3 <= 16'h394c;
      302: out3 <= 16'h3941;
      303: out3 <= 16'h3936;
      304: out3 <= 16'h392b;
      305: out3 <= 16'h391f;
      306: out3 <= 16'h3914;
      307: out3 <= 16'h3909;
      308: out3 <= 16'h38fd;
      309: out3 <= 16'h38f2;
      310: out3 <= 16'h38e6;
      311: out3 <= 16'h38db;
      312: out3 <= 16'h38cf;
      313: out3 <= 16'h38c3;
      314: out3 <= 16'h38b8;
      315: out3 <= 16'h38ac;
      316: out3 <= 16'h38a1;
      317: out3 <= 16'h3895;
      318: out3 <= 16'h3889;
      319: out3 <= 16'h387d;
      320: out3 <= 16'h3871;
      321: out3 <= 16'h3866;
      322: out3 <= 16'h385a;
      323: out3 <= 16'h384e;
      324: out3 <= 16'h3842;
      325: out3 <= 16'h3836;
      326: out3 <= 16'h382a;
      327: out3 <= 16'h381e;
      328: out3 <= 16'h3812;
      329: out3 <= 16'h3805;
      330: out3 <= 16'h37f9;
      331: out3 <= 16'h37ed;
      332: out3 <= 16'h37e1;
      333: out3 <= 16'h37d5;
      334: out3 <= 16'h37c8;
      335: out3 <= 16'h37bc;
      336: out3 <= 16'h37b0;
      337: out3 <= 16'h37a3;
      338: out3 <= 16'h3797;
      339: out3 <= 16'h378a;
      340: out3 <= 16'h377e;
      341: out3 <= 16'h3771;
      342: out3 <= 16'h3765;
      343: out3 <= 16'h3758;
      344: out3 <= 16'h374b;
      345: out3 <= 16'h373f;
      346: out3 <= 16'h3732;
      347: out3 <= 16'h3725;
      348: out3 <= 16'h3718;
      349: out3 <= 16'h370c;
      350: out3 <= 16'h36ff;
      351: out3 <= 16'h36f2;
      352: out3 <= 16'h36e5;
      353: out3 <= 16'h36d8;
      354: out3 <= 16'h36cb;
      355: out3 <= 16'h36be;
      356: out3 <= 16'h36b1;
      357: out3 <= 16'h36a4;
      358: out3 <= 16'h3697;
      359: out3 <= 16'h368a;
      360: out3 <= 16'h367d;
      361: out3 <= 16'h366f;
      362: out3 <= 16'h3662;
      363: out3 <= 16'h3655;
      364: out3 <= 16'h3648;
      365: out3 <= 16'h363a;
      366: out3 <= 16'h362d;
      367: out3 <= 16'h3620;
      368: out3 <= 16'h3612;
      369: out3 <= 16'h3605;
      370: out3 <= 16'h35f7;
      371: out3 <= 16'h35ea;
      372: out3 <= 16'h35dc;
      373: out3 <= 16'h35ce;
      374: out3 <= 16'h35c1;
      375: out3 <= 16'h35b3;
      376: out3 <= 16'h35a5;
      377: out3 <= 16'h3598;
      378: out3 <= 16'h358a;
      379: out3 <= 16'h357c;
      380: out3 <= 16'h356e;
      381: out3 <= 16'h3561;
      382: out3 <= 16'h3553;
      383: out3 <= 16'h3545;
      384: out3 <= 16'h3537;
      385: out3 <= 16'h3529;
      386: out3 <= 16'h351b;
      387: out3 <= 16'h350d;
      388: out3 <= 16'h34ff;
      389: out3 <= 16'h34f1;
      390: out3 <= 16'h34e2;
      391: out3 <= 16'h34d4;
      392: out3 <= 16'h34c6;
      393: out3 <= 16'h34b8;
      394: out3 <= 16'h34aa;
      395: out3 <= 16'h349b;
      396: out3 <= 16'h348d;
      397: out3 <= 16'h347f;
      398: out3 <= 16'h3470;
      399: out3 <= 16'h3462;
      400: out3 <= 16'h3453;
      401: out3 <= 16'h3445;
      402: out3 <= 16'h3436;
      403: out3 <= 16'h3428;
      404: out3 <= 16'h3419;
      405: out3 <= 16'h340b;
      406: out3 <= 16'h33fc;
      407: out3 <= 16'h33ed;
      408: out3 <= 16'h33df;
      409: out3 <= 16'h33d0;
      410: out3 <= 16'h33c1;
      411: out3 <= 16'h33b2;
      412: out3 <= 16'h33a3;
      413: out3 <= 16'h3395;
      414: out3 <= 16'h3386;
      415: out3 <= 16'h3377;
      416: out3 <= 16'h3368;
      417: out3 <= 16'h3359;
      418: out3 <= 16'h334a;
      419: out3 <= 16'h333b;
      420: out3 <= 16'h332c;
      421: out3 <= 16'h331d;
      422: out3 <= 16'h330d;
      423: out3 <= 16'h32fe;
      424: out3 <= 16'h32ef;
      425: out3 <= 16'h32e0;
      426: out3 <= 16'h32d0;
      427: out3 <= 16'h32c1;
      428: out3 <= 16'h32b2;
      429: out3 <= 16'h32a3;
      430: out3 <= 16'h3293;
      431: out3 <= 16'h3284;
      432: out3 <= 16'h3274;
      433: out3 <= 16'h3265;
      434: out3 <= 16'h3255;
      435: out3 <= 16'h3246;
      436: out3 <= 16'h3236;
      437: out3 <= 16'h3227;
      438: out3 <= 16'h3217;
      439: out3 <= 16'h3207;
      440: out3 <= 16'h31f8;
      441: out3 <= 16'h31e8;
      442: out3 <= 16'h31d8;
      443: out3 <= 16'h31c8;
      444: out3 <= 16'h31b9;
      445: out3 <= 16'h31a9;
      446: out3 <= 16'h3199;
      447: out3 <= 16'h3189;
      448: out3 <= 16'h3179;
      449: out3 <= 16'h3169;
      450: out3 <= 16'h3159;
      451: out3 <= 16'h3149;
      452: out3 <= 16'h3139;
      453: out3 <= 16'h3129;
      454: out3 <= 16'h3119;
      455: out3 <= 16'h3109;
      456: out3 <= 16'h30f9;
      457: out3 <= 16'h30e8;
      458: out3 <= 16'h30d8;
      459: out3 <= 16'h30c8;
      460: out3 <= 16'h30b8;
      461: out3 <= 16'h30a7;
      462: out3 <= 16'h3097;
      463: out3 <= 16'h3087;
      464: out3 <= 16'h3076;
      465: out3 <= 16'h3066;
      466: out3 <= 16'h3055;
      467: out3 <= 16'h3045;
      468: out3 <= 16'h3034;
      469: out3 <= 16'h3024;
      470: out3 <= 16'h3013;
      471: out3 <= 16'h3002;
      472: out3 <= 16'h2ff2;
      473: out3 <= 16'h2fe1;
      474: out3 <= 16'h2fd0;
      475: out3 <= 16'h2fc0;
      476: out3 <= 16'h2faf;
      477: out3 <= 16'h2f9e;
      478: out3 <= 16'h2f8d;
      479: out3 <= 16'h2f7d;
      480: out3 <= 16'h2f6c;
      481: out3 <= 16'h2f5b;
      482: out3 <= 16'h2f4a;
      483: out3 <= 16'h2f39;
      484: out3 <= 16'h2f28;
      485: out3 <= 16'h2f17;
      486: out3 <= 16'h2f06;
      487: out3 <= 16'h2ef5;
      488: out3 <= 16'h2ee4;
      489: out3 <= 16'h2ed3;
      490: out3 <= 16'h2ec2;
      491: out3 <= 16'h2eb0;
      492: out3 <= 16'h2e9f;
      493: out3 <= 16'h2e8e;
      494: out3 <= 16'h2e7d;
      495: out3 <= 16'h2e6b;
      496: out3 <= 16'h2e5a;
      497: out3 <= 16'h2e49;
      498: out3 <= 16'h2e37;
      499: out3 <= 16'h2e26;
      500: out3 <= 16'h2e15;
      501: out3 <= 16'h2e03;
      502: out3 <= 16'h2df2;
      503: out3 <= 16'h2de0;
      504: out3 <= 16'h2dcf;
      505: out3 <= 16'h2dbd;
      506: out3 <= 16'h2dab;
      507: out3 <= 16'h2d9a;
      508: out3 <= 16'h2d88;
      509: out3 <= 16'h2d76;
      510: out3 <= 16'h2d65;
      511: out3 <= 16'h2d53;
      512: out3 <= 16'h2d41;
      513: out3 <= 16'h2d2f;
      514: out3 <= 16'h2d1e;
      515: out3 <= 16'h2d0c;
      516: out3 <= 16'h2cfa;
      517: out3 <= 16'h2ce8;
      518: out3 <= 16'h2cd6;
      519: out3 <= 16'h2cc4;
      520: out3 <= 16'h2cb2;
      521: out3 <= 16'h2ca0;
      522: out3 <= 16'h2c8e;
      523: out3 <= 16'h2c7c;
      524: out3 <= 16'h2c6a;
      525: out3 <= 16'h2c58;
      526: out3 <= 16'h2c46;
      527: out3 <= 16'h2c34;
      528: out3 <= 16'h2c21;
      529: out3 <= 16'h2c0f;
      530: out3 <= 16'h2bfd;
      531: out3 <= 16'h2beb;
      532: out3 <= 16'h2bd8;
      533: out3 <= 16'h2bc6;
      534: out3 <= 16'h2bb4;
      535: out3 <= 16'h2ba1;
      536: out3 <= 16'h2b8f;
      537: out3 <= 16'h2b7d;
      538: out3 <= 16'h2b6a;
      539: out3 <= 16'h2b58;
      540: out3 <= 16'h2b45;
      541: out3 <= 16'h2b33;
      542: out3 <= 16'h2b20;
      543: out3 <= 16'h2b0d;
      544: out3 <= 16'h2afb;
      545: out3 <= 16'h2ae8;
      546: out3 <= 16'h2ad6;
      547: out3 <= 16'h2ac3;
      548: out3 <= 16'h2ab0;
      549: out3 <= 16'h2a9d;
      550: out3 <= 16'h2a8b;
      551: out3 <= 16'h2a78;
      552: out3 <= 16'h2a65;
      553: out3 <= 16'h2a52;
      554: out3 <= 16'h2a3f;
      555: out3 <= 16'h2a2c;
      556: out3 <= 16'h2a1a;
      557: out3 <= 16'h2a07;
      558: out3 <= 16'h29f4;
      559: out3 <= 16'h29e1;
      560: out3 <= 16'h29ce;
      561: out3 <= 16'h29bb;
      562: out3 <= 16'h29a7;
      563: out3 <= 16'h2994;
      564: out3 <= 16'h2981;
      565: out3 <= 16'h296e;
      566: out3 <= 16'h295b;
      567: out3 <= 16'h2948;
      568: out3 <= 16'h2935;
      569: out3 <= 16'h2921;
      570: out3 <= 16'h290e;
      571: out3 <= 16'h28fb;
      572: out3 <= 16'h28e7;
      573: out3 <= 16'h28d4;
      574: out3 <= 16'h28c1;
      575: out3 <= 16'h28ad;
      576: out3 <= 16'h289a;
      577: out3 <= 16'h2886;
      578: out3 <= 16'h2873;
      579: out3 <= 16'h2860;
      580: out3 <= 16'h284c;
      581: out3 <= 16'h2838;
      582: out3 <= 16'h2825;
      583: out3 <= 16'h2811;
      584: out3 <= 16'h27fe;
      585: out3 <= 16'h27ea;
      586: out3 <= 16'h27d6;
      587: out3 <= 16'h27c3;
      588: out3 <= 16'h27af;
      589: out3 <= 16'h279b;
      590: out3 <= 16'h2788;
      591: out3 <= 16'h2774;
      592: out3 <= 16'h2760;
      593: out3 <= 16'h274c;
      594: out3 <= 16'h2738;
      595: out3 <= 16'h2724;
      596: out3 <= 16'h2711;
      597: out3 <= 16'h26fd;
      598: out3 <= 16'h26e9;
      599: out3 <= 16'h26d5;
      600: out3 <= 16'h26c1;
      601: out3 <= 16'h26ad;
      602: out3 <= 16'h2699;
      603: out3 <= 16'h2685;
      604: out3 <= 16'h2671;
      605: out3 <= 16'h265c;
      606: out3 <= 16'h2648;
      607: out3 <= 16'h2634;
      608: out3 <= 16'h2620;
      609: out3 <= 16'h260c;
      610: out3 <= 16'h25f8;
      611: out3 <= 16'h25e3;
      612: out3 <= 16'h25cf;
      613: out3 <= 16'h25bb;
      614: out3 <= 16'h25a6;
      615: out3 <= 16'h2592;
      616: out3 <= 16'h257e;
      617: out3 <= 16'h2569;
      618: out3 <= 16'h2555;
      619: out3 <= 16'h2541;
      620: out3 <= 16'h252c;
      621: out3 <= 16'h2518;
      622: out3 <= 16'h2503;
      623: out3 <= 16'h24ef;
      624: out3 <= 16'h24da;
      625: out3 <= 16'h24c5;
      626: out3 <= 16'h24b1;
      627: out3 <= 16'h249c;
      628: out3 <= 16'h2488;
      629: out3 <= 16'h2473;
      630: out3 <= 16'h245e;
      631: out3 <= 16'h244a;
      632: out3 <= 16'h2435;
      633: out3 <= 16'h2420;
      634: out3 <= 16'h240b;
      635: out3 <= 16'h23f7;
      636: out3 <= 16'h23e2;
      637: out3 <= 16'h23cd;
      638: out3 <= 16'h23b8;
      639: out3 <= 16'h23a3;
      640: out3 <= 16'h238e;
      641: out3 <= 16'h237a;
      642: out3 <= 16'h2365;
      643: out3 <= 16'h2350;
      644: out3 <= 16'h233b;
      645: out3 <= 16'h2326;
      646: out3 <= 16'h2311;
      647: out3 <= 16'h22fc;
      648: out3 <= 16'h22e7;
      649: out3 <= 16'h22d2;
      650: out3 <= 16'h22bc;
      651: out3 <= 16'h22a7;
      652: out3 <= 16'h2292;
      653: out3 <= 16'h227d;
      654: out3 <= 16'h2268;
      655: out3 <= 16'h2253;
      656: out3 <= 16'h223d;
      657: out3 <= 16'h2228;
      658: out3 <= 16'h2213;
      659: out3 <= 16'h21fe;
      660: out3 <= 16'h21e8;
      661: out3 <= 16'h21d3;
      662: out3 <= 16'h21be;
      663: out3 <= 16'h21a8;
      664: out3 <= 16'h2193;
      665: out3 <= 16'h217d;
      666: out3 <= 16'h2168;
      667: out3 <= 16'h2153;
      668: out3 <= 16'h213d;
      669: out3 <= 16'h2128;
      670: out3 <= 16'h2112;
      671: out3 <= 16'h20fd;
      672: out3 <= 16'h20e7;
      673: out3 <= 16'h20d1;
      674: out3 <= 16'h20bc;
      675: out3 <= 16'h20a6;
      676: out3 <= 16'h2091;
      677: out3 <= 16'h207b;
      678: out3 <= 16'h2065;
      679: out3 <= 16'h2050;
      680: out3 <= 16'h203a;
      681: out3 <= 16'h2024;
      682: out3 <= 16'h200f;
      683: out3 <= 16'h1ff9;
      684: out3 <= 16'h1fe3;
      685: out3 <= 16'h1fcd;
      686: out3 <= 16'h1fb7;
      687: out3 <= 16'h1fa2;
      688: out3 <= 16'h1f8c;
      689: out3 <= 16'h1f76;
      690: out3 <= 16'h1f60;
      691: out3 <= 16'h1f4a;
      692: out3 <= 16'h1f34;
      693: out3 <= 16'h1f1e;
      694: out3 <= 16'h1f08;
      695: out3 <= 16'h1ef2;
      696: out3 <= 16'h1edc;
      697: out3 <= 16'h1ec6;
      698: out3 <= 16'h1eb0;
      699: out3 <= 16'h1e9a;
      700: out3 <= 16'h1e84;
      701: out3 <= 16'h1e6e;
      702: out3 <= 16'h1e58;
      703: out3 <= 16'h1e42;
      704: out3 <= 16'h1e2b;
      705: out3 <= 16'h1e15;
      706: out3 <= 16'h1dff;
      707: out3 <= 16'h1de9;
      708: out3 <= 16'h1dd3;
      709: out3 <= 16'h1dbc;
      710: out3 <= 16'h1da6;
      711: out3 <= 16'h1d90;
      712: out3 <= 16'h1d79;
      713: out3 <= 16'h1d63;
      714: out3 <= 16'h1d4d;
      715: out3 <= 16'h1d36;
      716: out3 <= 16'h1d20;
      717: out3 <= 16'h1d0a;
      718: out3 <= 16'h1cf3;
      719: out3 <= 16'h1cdd;
      720: out3 <= 16'h1cc6;
      721: out3 <= 16'h1cb0;
      722: out3 <= 16'h1c99;
      723: out3 <= 16'h1c83;
      724: out3 <= 16'h1c6c;
      725: out3 <= 16'h1c56;
      726: out3 <= 16'h1c3f;
      727: out3 <= 16'h1c29;
      728: out3 <= 16'h1c12;
      729: out3 <= 16'h1bfc;
      730: out3 <= 16'h1be5;
      731: out3 <= 16'h1bce;
      732: out3 <= 16'h1bb8;
      733: out3 <= 16'h1ba1;
      734: out3 <= 16'h1b8a;
      735: out3 <= 16'h1b74;
      736: out3 <= 16'h1b5d;
      737: out3 <= 16'h1b46;
      738: out3 <= 16'h1b30;
      739: out3 <= 16'h1b19;
      740: out3 <= 16'h1b02;
      741: out3 <= 16'h1aeb;
      742: out3 <= 16'h1ad4;
      743: out3 <= 16'h1abe;
      744: out3 <= 16'h1aa7;
      745: out3 <= 16'h1a90;
      746: out3 <= 16'h1a79;
      747: out3 <= 16'h1a62;
      748: out3 <= 16'h1a4b;
      749: out3 <= 16'h1a34;
      750: out3 <= 16'h1a1d;
      751: out3 <= 16'h1a06;
      752: out3 <= 16'h19ef;
      753: out3 <= 16'h19d8;
      754: out3 <= 16'h19c1;
      755: out3 <= 16'h19aa;
      756: out3 <= 16'h1993;
      757: out3 <= 16'h197c;
      758: out3 <= 16'h1965;
      759: out3 <= 16'h194e;
      760: out3 <= 16'h1937;
      761: out3 <= 16'h1920;
      762: out3 <= 16'h1909;
      763: out3 <= 16'h18f2;
      764: out3 <= 16'h18db;
      765: out3 <= 16'h18c3;
      766: out3 <= 16'h18ac;
      767: out3 <= 16'h1895;
      768: out3 <= 16'h187e;
      769: out3 <= 16'h1867;
      770: out3 <= 16'h184f;
      771: out3 <= 16'h1838;
      772: out3 <= 16'h1821;
      773: out3 <= 16'h180a;
      774: out3 <= 16'h17f2;
      775: out3 <= 16'h17db;
      776: out3 <= 16'h17c4;
      777: out3 <= 16'h17ac;
      778: out3 <= 16'h1795;
      779: out3 <= 16'h177e;
      780: out3 <= 16'h1766;
      781: out3 <= 16'h174f;
      782: out3 <= 16'h1737;
      783: out3 <= 16'h1720;
      784: out3 <= 16'h1709;
      785: out3 <= 16'h16f1;
      786: out3 <= 16'h16da;
      787: out3 <= 16'h16c2;
      788: out3 <= 16'h16ab;
      789: out3 <= 16'h1693;
      790: out3 <= 16'h167c;
      791: out3 <= 16'h1664;
      792: out3 <= 16'h164c;
      793: out3 <= 16'h1635;
      794: out3 <= 16'h161d;
      795: out3 <= 16'h1606;
      796: out3 <= 16'h15ee;
      797: out3 <= 16'h15d7;
      798: out3 <= 16'h15bf;
      799: out3 <= 16'h15a7;
      800: out3 <= 16'h1590;
      801: out3 <= 16'h1578;
      802: out3 <= 16'h1560;
      803: out3 <= 16'h1549;
      804: out3 <= 16'h1531;
      805: out3 <= 16'h1519;
      806: out3 <= 16'h1501;
      807: out3 <= 16'h14ea;
      808: out3 <= 16'h14d2;
      809: out3 <= 16'h14ba;
      810: out3 <= 16'h14a2;
      811: out3 <= 16'h148b;
      812: out3 <= 16'h1473;
      813: out3 <= 16'h145b;
      814: out3 <= 16'h1443;
      815: out3 <= 16'h142b;
      816: out3 <= 16'h1413;
      817: out3 <= 16'h13fb;
      818: out3 <= 16'h13e4;
      819: out3 <= 16'h13cc;
      820: out3 <= 16'h13b4;
      821: out3 <= 16'h139c;
      822: out3 <= 16'h1384;
      823: out3 <= 16'h136c;
      824: out3 <= 16'h1354;
      825: out3 <= 16'h133c;
      826: out3 <= 16'h1324;
      827: out3 <= 16'h130c;
      828: out3 <= 16'h12f4;
      829: out3 <= 16'h12dc;
      830: out3 <= 16'h12c4;
      831: out3 <= 16'h12ac;
      832: out3 <= 16'h1294;
      833: out3 <= 16'h127c;
      834: out3 <= 16'h1264;
      835: out3 <= 16'h124c;
      836: out3 <= 16'h1234;
      837: out3 <= 16'h121c;
      838: out3 <= 16'h1204;
      839: out3 <= 16'h11eb;
      840: out3 <= 16'h11d3;
      841: out3 <= 16'h11bb;
      842: out3 <= 16'h11a3;
      843: out3 <= 16'h118b;
      844: out3 <= 16'h1173;
      845: out3 <= 16'h115a;
      846: out3 <= 16'h1142;
      847: out3 <= 16'h112a;
      848: out3 <= 16'h1112;
      849: out3 <= 16'h10fa;
      850: out3 <= 16'h10e1;
      851: out3 <= 16'h10c9;
      852: out3 <= 16'h10b1;
      853: out3 <= 16'h1099;
      854: out3 <= 16'h1080;
      855: out3 <= 16'h1068;
      856: out3 <= 16'h1050;
      857: out3 <= 16'h1037;
      858: out3 <= 16'h101f;
      859: out3 <= 16'h1007;
      860: out3 <= 16'hfee;
      861: out3 <= 16'hfd6;
      862: out3 <= 16'hfbe;
      863: out3 <= 16'hfa5;
      864: out3 <= 16'hf8d;
      865: out3 <= 16'hf75;
      866: out3 <= 16'hf5c;
      867: out3 <= 16'hf44;
      868: out3 <= 16'hf2b;
      869: out3 <= 16'hf13;
      870: out3 <= 16'hefb;
      871: out3 <= 16'hee2;
      872: out3 <= 16'heca;
      873: out3 <= 16'heb1;
      874: out3 <= 16'he99;
      875: out3 <= 16'he80;
      876: out3 <= 16'he68;
      877: out3 <= 16'he4f;
      878: out3 <= 16'he37;
      879: out3 <= 16'he1e;
      880: out3 <= 16'he06;
      881: out3 <= 16'hded;
      882: out3 <= 16'hdd5;
      883: out3 <= 16'hdbc;
      884: out3 <= 16'hda4;
      885: out3 <= 16'hd8b;
      886: out3 <= 16'hd72;
      887: out3 <= 16'hd5a;
      888: out3 <= 16'hd41;
      889: out3 <= 16'hd29;
      890: out3 <= 16'hd10;
      891: out3 <= 16'hcf8;
      892: out3 <= 16'hcdf;
      893: out3 <= 16'hcc6;
      894: out3 <= 16'hcae;
      895: out3 <= 16'hc95;
      896: out3 <= 16'hc7c;
      897: out3 <= 16'hc64;
      898: out3 <= 16'hc4b;
      899: out3 <= 16'hc32;
      900: out3 <= 16'hc1a;
      901: out3 <= 16'hc01;
      902: out3 <= 16'hbe8;
      903: out3 <= 16'hbd0;
      904: out3 <= 16'hbb7;
      905: out3 <= 16'hb9e;
      906: out3 <= 16'hb85;
      907: out3 <= 16'hb6d;
      908: out3 <= 16'hb54;
      909: out3 <= 16'hb3b;
      910: out3 <= 16'hb23;
      911: out3 <= 16'hb0a;
      912: out3 <= 16'haf1;
      913: out3 <= 16'had8;
      914: out3 <= 16'hac0;
      915: out3 <= 16'haa7;
      916: out3 <= 16'ha8e;
      917: out3 <= 16'ha75;
      918: out3 <= 16'ha5c;
      919: out3 <= 16'ha44;
      920: out3 <= 16'ha2b;
      921: out3 <= 16'ha12;
      922: out3 <= 16'h9f9;
      923: out3 <= 16'h9e0;
      924: out3 <= 16'h9c7;
      925: out3 <= 16'h9af;
      926: out3 <= 16'h996;
      927: out3 <= 16'h97d;
      928: out3 <= 16'h964;
      929: out3 <= 16'h94b;
      930: out3 <= 16'h932;
      931: out3 <= 16'h919;
      932: out3 <= 16'h901;
      933: out3 <= 16'h8e8;
      934: out3 <= 16'h8cf;
      935: out3 <= 16'h8b6;
      936: out3 <= 16'h89d;
      937: out3 <= 16'h884;
      938: out3 <= 16'h86b;
      939: out3 <= 16'h852;
      940: out3 <= 16'h839;
      941: out3 <= 16'h820;
      942: out3 <= 16'h807;
      943: out3 <= 16'h7ef;
      944: out3 <= 16'h7d6;
      945: out3 <= 16'h7bd;
      946: out3 <= 16'h7a4;
      947: out3 <= 16'h78b;
      948: out3 <= 16'h772;
      949: out3 <= 16'h759;
      950: out3 <= 16'h740;
      951: out3 <= 16'h727;
      952: out3 <= 16'h70e;
      953: out3 <= 16'h6f5;
      954: out3 <= 16'h6dc;
      955: out3 <= 16'h6c3;
      956: out3 <= 16'h6aa;
      957: out3 <= 16'h691;
      958: out3 <= 16'h678;
      959: out3 <= 16'h65f;
      960: out3 <= 16'h646;
      961: out3 <= 16'h62d;
      962: out3 <= 16'h614;
      963: out3 <= 16'h5fb;
      964: out3 <= 16'h5e2;
      965: out3 <= 16'h5c9;
      966: out3 <= 16'h5b0;
      967: out3 <= 16'h597;
      968: out3 <= 16'h57e;
      969: out3 <= 16'h565;
      970: out3 <= 16'h54c;
      971: out3 <= 16'h533;
      972: out3 <= 16'h51a;
      973: out3 <= 16'h500;
      974: out3 <= 16'h4e7;
      975: out3 <= 16'h4ce;
      976: out3 <= 16'h4b5;
      977: out3 <= 16'h49c;
      978: out3 <= 16'h483;
      979: out3 <= 16'h46a;
      980: out3 <= 16'h451;
      981: out3 <= 16'h438;
      982: out3 <= 16'h41f;
      983: out3 <= 16'h406;
      984: out3 <= 16'h3ed;
      985: out3 <= 16'h3d4;
      986: out3 <= 16'h3bb;
      987: out3 <= 16'h3a1;
      988: out3 <= 16'h388;
      989: out3 <= 16'h36f;
      990: out3 <= 16'h356;
      991: out3 <= 16'h33d;
      992: out3 <= 16'h324;
      993: out3 <= 16'h30b;
      994: out3 <= 16'h2f2;
      995: out3 <= 16'h2d9;
      996: out3 <= 16'h2c0;
      997: out3 <= 16'h2a6;
      998: out3 <= 16'h28d;
      999: out3 <= 16'h274;
      1000: out3 <= 16'h25b;
      1001: out3 <= 16'h242;
      1002: out3 <= 16'h229;
      1003: out3 <= 16'h210;
      1004: out3 <= 16'h1f7;
      1005: out3 <= 16'h1dd;
      1006: out3 <= 16'h1c4;
      1007: out3 <= 16'h1ab;
      1008: out3 <= 16'h192;
      1009: out3 <= 16'h179;
      1010: out3 <= 16'h160;
      1011: out3 <= 16'h147;
      1012: out3 <= 16'h12e;
      1013: out3 <= 16'h114;
      1014: out3 <= 16'hfb;
      1015: out3 <= 16'he2;
      1016: out3 <= 16'hc9;
      1017: out3 <= 16'hb0;
      1018: out3 <= 16'h97;
      1019: out3 <= 16'h7e;
      1020: out3 <= 16'h65;
      1021: out3 <= 16'h4b;
      1022: out3 <= 16'h32;
      1023: out3 <= 16'h19;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D18_98672(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [9:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hffb5;
      2: out3 <= 16'hff69;
      3: out3 <= 16'hff1e;
      4: out3 <= 16'hfed2;
      5: out3 <= 16'hfe87;
      6: out3 <= 16'hfe3c;
      7: out3 <= 16'hfdf0;
      8: out3 <= 16'hfda5;
      9: out3 <= 16'hfd5a;
      10: out3 <= 16'hfd0e;
      11: out3 <= 16'hfcc3;
      12: out3 <= 16'hfc78;
      13: out3 <= 16'hfc2c;
      14: out3 <= 16'hfbe1;
      15: out3 <= 16'hfb96;
      16: out3 <= 16'hfb4b;
      17: out3 <= 16'hfb00;
      18: out3 <= 16'hfab4;
      19: out3 <= 16'hfa69;
      20: out3 <= 16'hfa1e;
      21: out3 <= 16'hf9d3;
      22: out3 <= 16'hf988;
      23: out3 <= 16'hf93d;
      24: out3 <= 16'hf8f2;
      25: out3 <= 16'hf8a7;
      26: out3 <= 16'hf85c;
      27: out3 <= 16'hf811;
      28: out3 <= 16'hf7c7;
      29: out3 <= 16'hf77c;
      30: out3 <= 16'hf731;
      31: out3 <= 16'hf6e7;
      32: out3 <= 16'hf69c;
      33: out3 <= 16'hf651;
      34: out3 <= 16'hf607;
      35: out3 <= 16'hf5bc;
      36: out3 <= 16'hf572;
      37: out3 <= 16'hf528;
      38: out3 <= 16'hf4dd;
      39: out3 <= 16'hf493;
      40: out3 <= 16'hf449;
      41: out3 <= 16'hf3ff;
      42: out3 <= 16'hf3b5;
      43: out3 <= 16'hf36b;
      44: out3 <= 16'hf321;
      45: out3 <= 16'hf2d7;
      46: out3 <= 16'hf28e;
      47: out3 <= 16'hf244;
      48: out3 <= 16'hf1fa;
      49: out3 <= 16'hf1b1;
      50: out3 <= 16'hf167;
      51: out3 <= 16'hf11e;
      52: out3 <= 16'hf0d5;
      53: out3 <= 16'hf08b;
      54: out3 <= 16'hf042;
      55: out3 <= 16'heff9;
      56: out3 <= 16'hefb0;
      57: out3 <= 16'hef67;
      58: out3 <= 16'hef1f;
      59: out3 <= 16'heed6;
      60: out3 <= 16'hee8d;
      61: out3 <= 16'hee45;
      62: out3 <= 16'hedfc;
      63: out3 <= 16'hedb4;
      64: out3 <= 16'hed6c;
      65: out3 <= 16'hed24;
      66: out3 <= 16'hecdc;
      67: out3 <= 16'hec94;
      68: out3 <= 16'hec4c;
      69: out3 <= 16'hec05;
      70: out3 <= 16'hebbd;
      71: out3 <= 16'heb75;
      72: out3 <= 16'heb2e;
      73: out3 <= 16'heae7;
      74: out3 <= 16'heaa0;
      75: out3 <= 16'hea59;
      76: out3 <= 16'hea12;
      77: out3 <= 16'he9cb;
      78: out3 <= 16'he984;
      79: out3 <= 16'he93e;
      80: out3 <= 16'he8f7;
      81: out3 <= 16'he8b1;
      82: out3 <= 16'he86b;
      83: out3 <= 16'he825;
      84: out3 <= 16'he7df;
      85: out3 <= 16'he799;
      86: out3 <= 16'he754;
      87: out3 <= 16'he70e;
      88: out3 <= 16'he6c9;
      89: out3 <= 16'he684;
      90: out3 <= 16'he63f;
      91: out3 <= 16'he5fa;
      92: out3 <= 16'he5b5;
      93: out3 <= 16'he570;
      94: out3 <= 16'he52c;
      95: out3 <= 16'he4e7;
      96: out3 <= 16'he4a3;
      97: out3 <= 16'he45f;
      98: out3 <= 16'he41b;
      99: out3 <= 16'he3d7;
      100: out3 <= 16'he394;
      101: out3 <= 16'he350;
      102: out3 <= 16'he30d;
      103: out3 <= 16'he2ca;
      104: out3 <= 16'he287;
      105: out3 <= 16'he244;
      106: out3 <= 16'he201;
      107: out3 <= 16'he1be;
      108: out3 <= 16'he17c;
      109: out3 <= 16'he13a;
      110: out3 <= 16'he0f8;
      111: out3 <= 16'he0b6;
      112: out3 <= 16'he074;
      113: out3 <= 16'he033;
      114: out3 <= 16'hdff1;
      115: out3 <= 16'hdfb0;
      116: out3 <= 16'hdf6f;
      117: out3 <= 16'hdf2f;
      118: out3 <= 16'hdeee;
      119: out3 <= 16'hdead;
      120: out3 <= 16'hde6d;
      121: out3 <= 16'hde2d;
      122: out3 <= 16'hdded;
      123: out3 <= 16'hddad;
      124: out3 <= 16'hdd6e;
      125: out3 <= 16'hdd2e;
      126: out3 <= 16'hdcef;
      127: out3 <= 16'hdcb0;
      128: out3 <= 16'hdc72;
      129: out3 <= 16'hdc33;
      130: out3 <= 16'hdbf5;
      131: out3 <= 16'hdbb6;
      132: out3 <= 16'hdb78;
      133: out3 <= 16'hdb3b;
      134: out3 <= 16'hdafd;
      135: out3 <= 16'hdabf;
      136: out3 <= 16'hda82;
      137: out3 <= 16'hda45;
      138: out3 <= 16'hda08;
      139: out3 <= 16'hd9cc;
      140: out3 <= 16'hd98f;
      141: out3 <= 16'hd953;
      142: out3 <= 16'hd917;
      143: out3 <= 16'hd8dc;
      144: out3 <= 16'hd8a0;
      145: out3 <= 16'hd865;
      146: out3 <= 16'hd82a;
      147: out3 <= 16'hd7ef;
      148: out3 <= 16'hd7b4;
      149: out3 <= 16'hd77a;
      150: out3 <= 16'hd73f;
      151: out3 <= 16'hd705;
      152: out3 <= 16'hd6cb;
      153: out3 <= 16'hd692;
      154: out3 <= 16'hd659;
      155: out3 <= 16'hd61f;
      156: out3 <= 16'hd5e6;
      157: out3 <= 16'hd5ae;
      158: out3 <= 16'hd575;
      159: out3 <= 16'hd53d;
      160: out3 <= 16'hd505;
      161: out3 <= 16'hd4cd;
      162: out3 <= 16'hd496;
      163: out3 <= 16'hd45f;
      164: out3 <= 16'hd428;
      165: out3 <= 16'hd3f1;
      166: out3 <= 16'hd3ba;
      167: out3 <= 16'hd384;
      168: out3 <= 16'hd34e;
      169: out3 <= 16'hd318;
      170: out3 <= 16'hd2e2;
      171: out3 <= 16'hd2ad;
      172: out3 <= 16'hd278;
      173: out3 <= 16'hd243;
      174: out3 <= 16'hd20e;
      175: out3 <= 16'hd1da;
      176: out3 <= 16'hd1a6;
      177: out3 <= 16'hd172;
      178: out3 <= 16'hd13e;
      179: out3 <= 16'hd10b;
      180: out3 <= 16'hd0d8;
      181: out3 <= 16'hd0a5;
      182: out3 <= 16'hd073;
      183: out3 <= 16'hd040;
      184: out3 <= 16'hd00e;
      185: out3 <= 16'hcfdc;
      186: out3 <= 16'hcfab;
      187: out3 <= 16'hcf79;
      188: out3 <= 16'hcf48;
      189: out3 <= 16'hcf18;
      190: out3 <= 16'hcee7;
      191: out3 <= 16'hceb7;
      192: out3 <= 16'hce87;
      193: out3 <= 16'hce57;
      194: out3 <= 16'hce28;
      195: out3 <= 16'hcdf9;
      196: out3 <= 16'hcdca;
      197: out3 <= 16'hcd9b;
      198: out3 <= 16'hcd6d;
      199: out3 <= 16'hcd3f;
      200: out3 <= 16'hcd11;
      201: out3 <= 16'hcce3;
      202: out3 <= 16'hccb6;
      203: out3 <= 16'hcc89;
      204: out3 <= 16'hcc5d;
      205: out3 <= 16'hcc30;
      206: out3 <= 16'hcc04;
      207: out3 <= 16'hcbd8;
      208: out3 <= 16'hcbad;
      209: out3 <= 16'hcb81;
      210: out3 <= 16'hcb56;
      211: out3 <= 16'hcb2c;
      212: out3 <= 16'hcb01;
      213: out3 <= 16'hcad7;
      214: out3 <= 16'hcaad;
      215: out3 <= 16'hca84;
      216: out3 <= 16'hca5b;
      217: out3 <= 16'hca32;
      218: out3 <= 16'hca09;
      219: out3 <= 16'hc9e0;
      220: out3 <= 16'hc9b8;
      221: out3 <= 16'hc991;
      222: out3 <= 16'hc969;
      223: out3 <= 16'hc942;
      224: out3 <= 16'hc91b;
      225: out3 <= 16'hc8f4;
      226: out3 <= 16'hc8ce;
      227: out3 <= 16'hc8a8;
      228: out3 <= 16'hc882;
      229: out3 <= 16'hc85d;
      230: out3 <= 16'hc838;
      231: out3 <= 16'hc813;
      232: out3 <= 16'hc7ee;
      233: out3 <= 16'hc7ca;
      234: out3 <= 16'hc7a6;
      235: out3 <= 16'hc783;
      236: out3 <= 16'hc75f;
      237: out3 <= 16'hc73d;
      238: out3 <= 16'hc71a;
      239: out3 <= 16'hc6f7;
      240: out3 <= 16'hc6d5;
      241: out3 <= 16'hc6b4;
      242: out3 <= 16'hc692;
      243: out3 <= 16'hc671;
      244: out3 <= 16'hc650;
      245: out3 <= 16'hc630;
      246: out3 <= 16'hc610;
      247: out3 <= 16'hc5f0;
      248: out3 <= 16'hc5d0;
      249: out3 <= 16'hc5b1;
      250: out3 <= 16'hc592;
      251: out3 <= 16'hc573;
      252: out3 <= 16'hc555;
      253: out3 <= 16'hc537;
      254: out3 <= 16'hc51a;
      255: out3 <= 16'hc4fc;
      256: out3 <= 16'hc4df;
      257: out3 <= 16'hc4c2;
      258: out3 <= 16'hc4a6;
      259: out3 <= 16'hc48a;
      260: out3 <= 16'hc46e;
      261: out3 <= 16'hc453;
      262: out3 <= 16'hc438;
      263: out3 <= 16'hc41d;
      264: out3 <= 16'hc403;
      265: out3 <= 16'hc3e9;
      266: out3 <= 16'hc3cf;
      267: out3 <= 16'hc3b5;
      268: out3 <= 16'hc39c;
      269: out3 <= 16'hc383;
      270: out3 <= 16'hc36b;
      271: out3 <= 16'hc353;
      272: out3 <= 16'hc33b;
      273: out3 <= 16'hc323;
      274: out3 <= 16'hc30c;
      275: out3 <= 16'hc2f5;
      276: out3 <= 16'hc2df;
      277: out3 <= 16'hc2c9;
      278: out3 <= 16'hc2b3;
      279: out3 <= 16'hc29d;
      280: out3 <= 16'hc288;
      281: out3 <= 16'hc273;
      282: out3 <= 16'hc25f;
      283: out3 <= 16'hc24b;
      284: out3 <= 16'hc237;
      285: out3 <= 16'hc223;
      286: out3 <= 16'hc210;
      287: out3 <= 16'hc1fd;
      288: out3 <= 16'hc1eb;
      289: out3 <= 16'hc1d9;
      290: out3 <= 16'hc1c7;
      291: out3 <= 16'hc1b6;
      292: out3 <= 16'hc1a4;
      293: out3 <= 16'hc194;
      294: out3 <= 16'hc183;
      295: out3 <= 16'hc173;
      296: out3 <= 16'hc163;
      297: out3 <= 16'hc154;
      298: out3 <= 16'hc145;
      299: out3 <= 16'hc136;
      300: out3 <= 16'hc128;
      301: out3 <= 16'hc119;
      302: out3 <= 16'hc10c;
      303: out3 <= 16'hc0fe;
      304: out3 <= 16'hc0f1;
      305: out3 <= 16'hc0e4;
      306: out3 <= 16'hc0d8;
      307: out3 <= 16'hc0cc;
      308: out3 <= 16'hc0c0;
      309: out3 <= 16'hc0b5;
      310: out3 <= 16'hc0aa;
      311: out3 <= 16'hc09f;
      312: out3 <= 16'hc095;
      313: out3 <= 16'hc08b;
      314: out3 <= 16'hc081;
      315: out3 <= 16'hc078;
      316: out3 <= 16'hc06f;
      317: out3 <= 16'hc067;
      318: out3 <= 16'hc05e;
      319: out3 <= 16'hc056;
      320: out3 <= 16'hc04f;
      321: out3 <= 16'hc048;
      322: out3 <= 16'hc041;
      323: out3 <= 16'hc03a;
      324: out3 <= 16'hc034;
      325: out3 <= 16'hc02e;
      326: out3 <= 16'hc029;
      327: out3 <= 16'hc024;
      328: out3 <= 16'hc01f;
      329: out3 <= 16'hc01a;
      330: out3 <= 16'hc016;
      331: out3 <= 16'hc013;
      332: out3 <= 16'hc00f;
      333: out3 <= 16'hc00c;
      334: out3 <= 16'hc009;
      335: out3 <= 16'hc007;
      336: out3 <= 16'hc005;
      337: out3 <= 16'hc003;
      338: out3 <= 16'hc002;
      339: out3 <= 16'hc001;
      340: out3 <= 16'hc000;
      341: out3 <= 16'hc000;
      342: out3 <= 16'hc000;
      343: out3 <= 16'hc000;
      344: out3 <= 16'hc001;
      345: out3 <= 16'hc002;
      346: out3 <= 16'hc004;
      347: out3 <= 16'hc006;
      348: out3 <= 16'hc008;
      349: out3 <= 16'hc00a;
      350: out3 <= 16'hc00d;
      351: out3 <= 16'hc010;
      352: out3 <= 16'hc014;
      353: out3 <= 16'hc018;
      354: out3 <= 16'hc01c;
      355: out3 <= 16'hc020;
      356: out3 <= 16'hc025;
      357: out3 <= 16'hc02b;
      358: out3 <= 16'hc030;
      359: out3 <= 16'hc036;
      360: out3 <= 16'hc03c;
      361: out3 <= 16'hc043;
      362: out3 <= 16'hc04a;
      363: out3 <= 16'hc051;
      364: out3 <= 16'hc059;
      365: out3 <= 16'hc061;
      366: out3 <= 16'hc069;
      367: out3 <= 16'hc072;
      368: out3 <= 16'hc07b;
      369: out3 <= 16'hc085;
      370: out3 <= 16'hc08e;
      371: out3 <= 16'hc098;
      372: out3 <= 16'hc0a3;
      373: out3 <= 16'hc0ae;
      374: out3 <= 16'hc0b9;
      375: out3 <= 16'hc0c4;
      376: out3 <= 16'hc0d0;
      377: out3 <= 16'hc0dc;
      378: out3 <= 16'hc0e9;
      379: out3 <= 16'hc0f6;
      380: out3 <= 16'hc103;
      381: out3 <= 16'hc110;
      382: out3 <= 16'hc11e;
      383: out3 <= 16'hc12c;
      384: out3 <= 16'hc13b;
      385: out3 <= 16'hc14a;
      386: out3 <= 16'hc159;
      387: out3 <= 16'hc168;
      388: out3 <= 16'hc178;
      389: out3 <= 16'hc189;
      390: out3 <= 16'hc199;
      391: out3 <= 16'hc1aa;
      392: out3 <= 16'hc1bb;
      393: out3 <= 16'hc1cd;
      394: out3 <= 16'hc1df;
      395: out3 <= 16'hc1f1;
      396: out3 <= 16'hc204;
      397: out3 <= 16'hc217;
      398: out3 <= 16'hc22a;
      399: out3 <= 16'hc23e;
      400: out3 <= 16'hc251;
      401: out3 <= 16'hc266;
      402: out3 <= 16'hc27a;
      403: out3 <= 16'hc28f;
      404: out3 <= 16'hc2a5;
      405: out3 <= 16'hc2ba;
      406: out3 <= 16'hc2d0;
      407: out3 <= 16'hc2e6;
      408: out3 <= 16'hc2fd;
      409: out3 <= 16'hc314;
      410: out3 <= 16'hc32b;
      411: out3 <= 16'hc343;
      412: out3 <= 16'hc35b;
      413: out3 <= 16'hc373;
      414: out3 <= 16'hc38c;
      415: out3 <= 16'hc3a5;
      416: out3 <= 16'hc3be;
      417: out3 <= 16'hc3d7;
      418: out3 <= 16'hc3f1;
      419: out3 <= 16'hc40b;
      420: out3 <= 16'hc426;
      421: out3 <= 16'hc441;
      422: out3 <= 16'hc45c;
      423: out3 <= 16'hc478;
      424: out3 <= 16'hc493;
      425: out3 <= 16'hc4b0;
      426: out3 <= 16'hc4cc;
      427: out3 <= 16'hc4e9;
      428: out3 <= 16'hc506;
      429: out3 <= 16'hc523;
      430: out3 <= 16'hc541;
      431: out3 <= 16'hc55f;
      432: out3 <= 16'hc57e;
      433: out3 <= 16'hc59c;
      434: out3 <= 16'hc5bb;
      435: out3 <= 16'hc5db;
      436: out3 <= 16'hc5fa;
      437: out3 <= 16'hc61a;
      438: out3 <= 16'hc63b;
      439: out3 <= 16'hc65b;
      440: out3 <= 16'hc67c;
      441: out3 <= 16'hc69d;
      442: out3 <= 16'hc6bf;
      443: out3 <= 16'hc6e1;
      444: out3 <= 16'hc703;
      445: out3 <= 16'hc725;
      446: out3 <= 16'hc748;
      447: out3 <= 16'hc76b;
      448: out3 <= 16'hc78f;
      449: out3 <= 16'hc7b2;
      450: out3 <= 16'hc7d6;
      451: out3 <= 16'hc7fb;
      452: out3 <= 16'hc81f;
      453: out3 <= 16'hc844;
      454: out3 <= 16'hc869;
      455: out3 <= 16'hc88f;
      456: out3 <= 16'hc8b5;
      457: out3 <= 16'hc8db;
      458: out3 <= 16'hc901;
      459: out3 <= 16'hc928;
      460: out3 <= 16'hc94f;
      461: out3 <= 16'hc976;
      462: out3 <= 16'hc99e;
      463: out3 <= 16'hc9c6;
      464: out3 <= 16'hc9ee;
      465: out3 <= 16'hca16;
      466: out3 <= 16'hca3f;
      467: out3 <= 16'hca68;
      468: out3 <= 16'hca92;
      469: out3 <= 16'hcabb;
      470: out3 <= 16'hcae5;
      471: out3 <= 16'hcb0f;
      472: out3 <= 16'hcb3a;
      473: out3 <= 16'hcb65;
      474: out3 <= 16'hcb90;
      475: out3 <= 16'hcbbb;
      476: out3 <= 16'hcbe7;
      477: out3 <= 16'hcc13;
      478: out3 <= 16'hcc3f;
      479: out3 <= 16'hcc6b;
      480: out3 <= 16'hcc98;
      481: out3 <= 16'hccc5;
      482: out3 <= 16'hccf3;
      483: out3 <= 16'hcd20;
      484: out3 <= 16'hcd4e;
      485: out3 <= 16'hcd7c;
      486: out3 <= 16'hcdab;
      487: out3 <= 16'hcdd9;
      488: out3 <= 16'hce08;
      489: out3 <= 16'hce38;
      490: out3 <= 16'hce67;
      491: out3 <= 16'hce97;
      492: out3 <= 16'hcec7;
      493: out3 <= 16'hcef7;
      494: out3 <= 16'hcf28;
      495: out3 <= 16'hcf59;
      496: out3 <= 16'hcf8a;
      497: out3 <= 16'hcfbb;
      498: out3 <= 16'hcfed;
      499: out3 <= 16'hd01f;
      500: out3 <= 16'hd051;
      501: out3 <= 16'hd083;
      502: out3 <= 16'hd0b6;
      503: out3 <= 16'hd0e9;
      504: out3 <= 16'hd11c;
      505: out3 <= 16'hd150;
      506: out3 <= 16'hd183;
      507: out3 <= 16'hd1b7;
      508: out3 <= 16'hd1eb;
      509: out3 <= 16'hd220;
      510: out3 <= 16'hd255;
      511: out3 <= 16'hd28a;
      512: out3 <= 16'hd2bf;
      513: out3 <= 16'hd2f4;
      514: out3 <= 16'hd32a;
      515: out3 <= 16'hd360;
      516: out3 <= 16'hd396;
      517: out3 <= 16'hd3cc;
      518: out3 <= 16'hd403;
      519: out3 <= 16'hd43a;
      520: out3 <= 16'hd471;
      521: out3 <= 16'hd4a8;
      522: out3 <= 16'hd4e0;
      523: out3 <= 16'hd518;
      524: out3 <= 16'hd550;
      525: out3 <= 16'hd588;
      526: out3 <= 16'hd5c1;
      527: out3 <= 16'hd5f9;
      528: out3 <= 16'hd632;
      529: out3 <= 16'hd66c;
      530: out3 <= 16'hd6a5;
      531: out3 <= 16'hd6df;
      532: out3 <= 16'hd719;
      533: out3 <= 16'hd753;
      534: out3 <= 16'hd78d;
      535: out3 <= 16'hd7c8;
      536: out3 <= 16'hd802;
      537: out3 <= 16'hd83d;
      538: out3 <= 16'hd878;
      539: out3 <= 16'hd8b4;
      540: out3 <= 16'hd8ef;
      541: out3 <= 16'hd92b;
      542: out3 <= 16'hd967;
      543: out3 <= 16'hd9a4;
      544: out3 <= 16'hd9e0;
      545: out3 <= 16'hda1d;
      546: out3 <= 16'hda5a;
      547: out3 <= 16'hda97;
      548: out3 <= 16'hdad4;
      549: out3 <= 16'hdb11;
      550: out3 <= 16'hdb4f;
      551: out3 <= 16'hdb8d;
      552: out3 <= 16'hdbcb;
      553: out3 <= 16'hdc09;
      554: out3 <= 16'hdc48;
      555: out3 <= 16'hdc86;
      556: out3 <= 16'hdcc5;
      557: out3 <= 16'hdd04;
      558: out3 <= 16'hdd44;
      559: out3 <= 16'hdd83;
      560: out3 <= 16'hddc3;
      561: out3 <= 16'hde02;
      562: out3 <= 16'hde42;
      563: out3 <= 16'hde83;
      564: out3 <= 16'hdec3;
      565: out3 <= 16'hdf03;
      566: out3 <= 16'hdf44;
      567: out3 <= 16'hdf85;
      568: out3 <= 16'hdfc6;
      569: out3 <= 16'he007;
      570: out3 <= 16'he049;
      571: out3 <= 16'he08a;
      572: out3 <= 16'he0cc;
      573: out3 <= 16'he10e;
      574: out3 <= 16'he150;
      575: out3 <= 16'he192;
      576: out3 <= 16'he1d5;
      577: out3 <= 16'he217;
      578: out3 <= 16'he25a;
      579: out3 <= 16'he29d;
      580: out3 <= 16'he2e0;
      581: out3 <= 16'he323;
      582: out3 <= 16'he367;
      583: out3 <= 16'he3aa;
      584: out3 <= 16'he3ee;
      585: out3 <= 16'he432;
      586: out3 <= 16'he476;
      587: out3 <= 16'he4ba;
      588: out3 <= 16'he4fe;
      589: out3 <= 16'he542;
      590: out3 <= 16'he587;
      591: out3 <= 16'he5cc;
      592: out3 <= 16'he611;
      593: out3 <= 16'he656;
      594: out3 <= 16'he69b;
      595: out3 <= 16'he6e0;
      596: out3 <= 16'he725;
      597: out3 <= 16'he76b;
      598: out3 <= 16'he7b1;
      599: out3 <= 16'he7f6;
      600: out3 <= 16'he83c;
      601: out3 <= 16'he882;
      602: out3 <= 16'he8c9;
      603: out3 <= 16'he90f;
      604: out3 <= 16'he955;
      605: out3 <= 16'he99c;
      606: out3 <= 16'he9e3;
      607: out3 <= 16'hea29;
      608: out3 <= 16'hea70;
      609: out3 <= 16'heab7;
      610: out3 <= 16'heaff;
      611: out3 <= 16'heb46;
      612: out3 <= 16'heb8d;
      613: out3 <= 16'hebd5;
      614: out3 <= 16'hec1c;
      615: out3 <= 16'hec64;
      616: out3 <= 16'hecac;
      617: out3 <= 16'hecf4;
      618: out3 <= 16'hed3c;
      619: out3 <= 16'hed84;
      620: out3 <= 16'hedcc;
      621: out3 <= 16'hee15;
      622: out3 <= 16'hee5d;
      623: out3 <= 16'heea6;
      624: out3 <= 16'heeee;
      625: out3 <= 16'hef37;
      626: out3 <= 16'hef80;
      627: out3 <= 16'hefc9;
      628: out3 <= 16'hf012;
      629: out3 <= 16'hf05b;
      630: out3 <= 16'hf0a4;
      631: out3 <= 16'hf0ed;
      632: out3 <= 16'hf136;
      633: out3 <= 16'hf180;
      634: out3 <= 16'hf1c9;
      635: out3 <= 16'hf213;
      636: out3 <= 16'hf25c;
      637: out3 <= 16'hf2a6;
      638: out3 <= 16'hf2f0;
      639: out3 <= 16'hf33a;
      640: out3 <= 16'hf384;
      641: out3 <= 16'hf3ce;
      642: out3 <= 16'hf418;
      643: out3 <= 16'hf462;
      644: out3 <= 16'hf4ac;
      645: out3 <= 16'hf4f6;
      646: out3 <= 16'hf540;
      647: out3 <= 16'hf58b;
      648: out3 <= 16'hf5d5;
      649: out3 <= 16'hf620;
      650: out3 <= 16'hf66a;
      651: out3 <= 16'hf6b5;
      652: out3 <= 16'hf6ff;
      653: out3 <= 16'hf74a;
      654: out3 <= 16'hf795;
      655: out3 <= 16'hf7e0;
      656: out3 <= 16'hf82a;
      657: out3 <= 16'hf875;
      658: out3 <= 16'hf8c0;
      659: out3 <= 16'hf90b;
      660: out3 <= 16'hf956;
      661: out3 <= 16'hf9a1;
      662: out3 <= 16'hf9ec;
      663: out3 <= 16'hfa37;
      664: out3 <= 16'hfa82;
      665: out3 <= 16'hfacd;
      666: out3 <= 16'hfb19;
      667: out3 <= 16'hfb64;
      668: out3 <= 16'hfbaf;
      669: out3 <= 16'hfbfa;
      670: out3 <= 16'hfc45;
      671: out3 <= 16'hfc91;
      672: out3 <= 16'hfcdc;
      673: out3 <= 16'hfd27;
      674: out3 <= 16'hfd73;
      675: out3 <= 16'hfdbe;
      676: out3 <= 16'hfe09;
      677: out3 <= 16'hfe55;
      678: out3 <= 16'hfea0;
      679: out3 <= 16'hfeec;
      680: out3 <= 16'hff37;
      681: out3 <= 16'hff82;
      682: out3 <= 16'hffce;
      683: out3 <= 16'h19;
      684: out3 <= 16'h65;
      685: out3 <= 16'hb0;
      686: out3 <= 16'hfb;
      687: out3 <= 16'h147;
      688: out3 <= 16'h192;
      689: out3 <= 16'h1dd;
      690: out3 <= 16'h229;
      691: out3 <= 16'h274;
      692: out3 <= 16'h2c0;
      693: out3 <= 16'h30b;
      694: out3 <= 16'h356;
      695: out3 <= 16'h3a1;
      696: out3 <= 16'h3ed;
      697: out3 <= 16'h438;
      698: out3 <= 16'h483;
      699: out3 <= 16'h4ce;
      700: out3 <= 16'h51a;
      701: out3 <= 16'h565;
      702: out3 <= 16'h5b0;
      703: out3 <= 16'h5fb;
      704: out3 <= 16'h646;
      705: out3 <= 16'h691;
      706: out3 <= 16'h6dc;
      707: out3 <= 16'h727;
      708: out3 <= 16'h772;
      709: out3 <= 16'h7bd;
      710: out3 <= 16'h807;
      711: out3 <= 16'h852;
      712: out3 <= 16'h89d;
      713: out3 <= 16'h8e8;
      714: out3 <= 16'h932;
      715: out3 <= 16'h97d;
      716: out3 <= 16'h9c7;
      717: out3 <= 16'ha12;
      718: out3 <= 16'ha5c;
      719: out3 <= 16'haa7;
      720: out3 <= 16'haf1;
      721: out3 <= 16'hb3b;
      722: out3 <= 16'hb85;
      723: out3 <= 16'hbd0;
      724: out3 <= 16'hc1a;
      725: out3 <= 16'hc64;
      726: out3 <= 16'hcae;
      727: out3 <= 16'hcf8;
      728: out3 <= 16'hd41;
      729: out3 <= 16'hd8b;
      730: out3 <= 16'hdd5;
      731: out3 <= 16'he1e;
      732: out3 <= 16'he68;
      733: out3 <= 16'heb1;
      734: out3 <= 16'hefb;
      735: out3 <= 16'hf44;
      736: out3 <= 16'hf8d;
      737: out3 <= 16'hfd6;
      738: out3 <= 16'h101f;
      739: out3 <= 16'h1068;
      740: out3 <= 16'h10b1;
      741: out3 <= 16'h10fa;
      742: out3 <= 16'h1142;
      743: out3 <= 16'h118b;
      744: out3 <= 16'h11d3;
      745: out3 <= 16'h121c;
      746: out3 <= 16'h1264;
      747: out3 <= 16'h12ac;
      748: out3 <= 16'h12f4;
      749: out3 <= 16'h133c;
      750: out3 <= 16'h1384;
      751: out3 <= 16'h13cc;
      752: out3 <= 16'h1413;
      753: out3 <= 16'h145b;
      754: out3 <= 16'h14a2;
      755: out3 <= 16'h14ea;
      756: out3 <= 16'h1531;
      757: out3 <= 16'h1578;
      758: out3 <= 16'h15bf;
      759: out3 <= 16'h1606;
      760: out3 <= 16'h164c;
      761: out3 <= 16'h1693;
      762: out3 <= 16'h16da;
      763: out3 <= 16'h1720;
      764: out3 <= 16'h1766;
      765: out3 <= 16'h17ac;
      766: out3 <= 16'h17f2;
      767: out3 <= 16'h1838;
      768: out3 <= 16'h187e;
      769: out3 <= 16'h18c3;
      770: out3 <= 16'h1909;
      771: out3 <= 16'h194e;
      772: out3 <= 16'h1993;
      773: out3 <= 16'h19d8;
      774: out3 <= 16'h1a1d;
      775: out3 <= 16'h1a62;
      776: out3 <= 16'h1aa7;
      777: out3 <= 16'h1aeb;
      778: out3 <= 16'h1b30;
      779: out3 <= 16'h1b74;
      780: out3 <= 16'h1bb8;
      781: out3 <= 16'h1bfc;
      782: out3 <= 16'h1c3f;
      783: out3 <= 16'h1c83;
      784: out3 <= 16'h1cc6;
      785: out3 <= 16'h1d0a;
      786: out3 <= 16'h1d4d;
      787: out3 <= 16'h1d90;
      788: out3 <= 16'h1dd3;
      789: out3 <= 16'h1e15;
      790: out3 <= 16'h1e58;
      791: out3 <= 16'h1e9a;
      792: out3 <= 16'h1edc;
      793: out3 <= 16'h1f1e;
      794: out3 <= 16'h1f60;
      795: out3 <= 16'h1fa2;
      796: out3 <= 16'h1fe3;
      797: out3 <= 16'h2024;
      798: out3 <= 16'h2065;
      799: out3 <= 16'h20a6;
      800: out3 <= 16'h20e7;
      801: out3 <= 16'h2128;
      802: out3 <= 16'h2168;
      803: out3 <= 16'h21a8;
      804: out3 <= 16'h21e8;
      805: out3 <= 16'h2228;
      806: out3 <= 16'h2268;
      807: out3 <= 16'h22a7;
      808: out3 <= 16'h22e7;
      809: out3 <= 16'h2326;
      810: out3 <= 16'h2365;
      811: out3 <= 16'h23a3;
      812: out3 <= 16'h23e2;
      813: out3 <= 16'h2420;
      814: out3 <= 16'h245e;
      815: out3 <= 16'h249c;
      816: out3 <= 16'h24da;
      817: out3 <= 16'h2518;
      818: out3 <= 16'h2555;
      819: out3 <= 16'h2592;
      820: out3 <= 16'h25cf;
      821: out3 <= 16'h260c;
      822: out3 <= 16'h2648;
      823: out3 <= 16'h2685;
      824: out3 <= 16'h26c1;
      825: out3 <= 16'h26fd;
      826: out3 <= 16'h2738;
      827: out3 <= 16'h2774;
      828: out3 <= 16'h27af;
      829: out3 <= 16'h27ea;
      830: out3 <= 16'h2825;
      831: out3 <= 16'h2860;
      832: out3 <= 16'h289a;
      833: out3 <= 16'h28d4;
      834: out3 <= 16'h290e;
      835: out3 <= 16'h2948;
      836: out3 <= 16'h2981;
      837: out3 <= 16'h29bb;
      838: out3 <= 16'h29f4;
      839: out3 <= 16'h2a2c;
      840: out3 <= 16'h2a65;
      841: out3 <= 16'h2a9d;
      842: out3 <= 16'h2ad6;
      843: out3 <= 16'h2b0d;
      844: out3 <= 16'h2b45;
      845: out3 <= 16'h2b7d;
      846: out3 <= 16'h2bb4;
      847: out3 <= 16'h2beb;
      848: out3 <= 16'h2c21;
      849: out3 <= 16'h2c58;
      850: out3 <= 16'h2c8e;
      851: out3 <= 16'h2cc4;
      852: out3 <= 16'h2cfa;
      853: out3 <= 16'h2d2f;
      854: out3 <= 16'h2d65;
      855: out3 <= 16'h2d9a;
      856: out3 <= 16'h2dcf;
      857: out3 <= 16'h2e03;
      858: out3 <= 16'h2e37;
      859: out3 <= 16'h2e6b;
      860: out3 <= 16'h2e9f;
      861: out3 <= 16'h2ed3;
      862: out3 <= 16'h2f06;
      863: out3 <= 16'h2f39;
      864: out3 <= 16'h2f6c;
      865: out3 <= 16'h2f9e;
      866: out3 <= 16'h2fd0;
      867: out3 <= 16'h3002;
      868: out3 <= 16'h3034;
      869: out3 <= 16'h3066;
      870: out3 <= 16'h3097;
      871: out3 <= 16'h30c8;
      872: out3 <= 16'h30f9;
      873: out3 <= 16'h3129;
      874: out3 <= 16'h3159;
      875: out3 <= 16'h3189;
      876: out3 <= 16'h31b9;
      877: out3 <= 16'h31e8;
      878: out3 <= 16'h3217;
      879: out3 <= 16'h3246;
      880: out3 <= 16'h3274;
      881: out3 <= 16'h32a3;
      882: out3 <= 16'h32d0;
      883: out3 <= 16'h32fe;
      884: out3 <= 16'h332c;
      885: out3 <= 16'h3359;
      886: out3 <= 16'h3386;
      887: out3 <= 16'h33b2;
      888: out3 <= 16'h33df;
      889: out3 <= 16'h340b;
      890: out3 <= 16'h3436;
      891: out3 <= 16'h3462;
      892: out3 <= 16'h348d;
      893: out3 <= 16'h34b8;
      894: out3 <= 16'h34e2;
      895: out3 <= 16'h350d;
      896: out3 <= 16'h3537;
      897: out3 <= 16'h3561;
      898: out3 <= 16'h358a;
      899: out3 <= 16'h35b3;
      900: out3 <= 16'h35dc;
      901: out3 <= 16'h3605;
      902: out3 <= 16'h362d;
      903: out3 <= 16'h3655;
      904: out3 <= 16'h367d;
      905: out3 <= 16'h36a4;
      906: out3 <= 16'h36cb;
      907: out3 <= 16'h36f2;
      908: out3 <= 16'h3718;
      909: out3 <= 16'h373f;
      910: out3 <= 16'h3765;
      911: out3 <= 16'h378a;
      912: out3 <= 16'h37b0;
      913: out3 <= 16'h37d5;
      914: out3 <= 16'h37f9;
      915: out3 <= 16'h381e;
      916: out3 <= 16'h3842;
      917: out3 <= 16'h3866;
      918: out3 <= 16'h3889;
      919: out3 <= 16'h38ac;
      920: out3 <= 16'h38cf;
      921: out3 <= 16'h38f2;
      922: out3 <= 16'h3914;
      923: out3 <= 16'h3936;
      924: out3 <= 16'h3958;
      925: out3 <= 16'h3979;
      926: out3 <= 16'h399a;
      927: out3 <= 16'h39bb;
      928: out3 <= 16'h39db;
      929: out3 <= 16'h39fb;
      930: out3 <= 16'h3a1b;
      931: out3 <= 16'h3a3a;
      932: out3 <= 16'h3a59;
      933: out3 <= 16'h3a78;
      934: out3 <= 16'h3a97;
      935: out3 <= 16'h3ab5;
      936: out3 <= 16'h3ad3;
      937: out3 <= 16'h3af0;
      938: out3 <= 16'h3b0e;
      939: out3 <= 16'h3b2a;
      940: out3 <= 16'h3b47;
      941: out3 <= 16'h3b63;
      942: out3 <= 16'h3b7f;
      943: out3 <= 16'h3b9b;
      944: out3 <= 16'h3bb6;
      945: out3 <= 16'h3bd1;
      946: out3 <= 16'h3bec;
      947: out3 <= 16'h3c06;
      948: out3 <= 16'h3c20;
      949: out3 <= 16'h3c3a;
      950: out3 <= 16'h3c53;
      951: out3 <= 16'h3c6c;
      952: out3 <= 16'h3c85;
      953: out3 <= 16'h3c9d;
      954: out3 <= 16'h3cb5;
      955: out3 <= 16'h3ccd;
      956: out3 <= 16'h3ce4;
      957: out3 <= 16'h3cfb;
      958: out3 <= 16'h3d12;
      959: out3 <= 16'h3d28;
      960: out3 <= 16'h3d3f;
      961: out3 <= 16'h3d54;
      962: out3 <= 16'h3d6a;
      963: out3 <= 16'h3d7f;
      964: out3 <= 16'h3d93;
      965: out3 <= 16'h3da8;
      966: out3 <= 16'h3dbc;
      967: out3 <= 16'h3dd0;
      968: out3 <= 16'h3de3;
      969: out3 <= 16'h3df6;
      970: out3 <= 16'h3e09;
      971: out3 <= 16'h3e1b;
      972: out3 <= 16'h3e2d;
      973: out3 <= 16'h3e3f;
      974: out3 <= 16'h3e50;
      975: out3 <= 16'h3e61;
      976: out3 <= 16'h3e72;
      977: out3 <= 16'h3e82;
      978: out3 <= 16'h3e92;
      979: out3 <= 16'h3ea2;
      980: out3 <= 16'h3eb1;
      981: out3 <= 16'h3ec0;
      982: out3 <= 16'h3ecf;
      983: out3 <= 16'h3edd;
      984: out3 <= 16'h3eeb;
      985: out3 <= 16'h3ef9;
      986: out3 <= 16'h3f06;
      987: out3 <= 16'h3f13;
      988: out3 <= 16'h3f20;
      989: out3 <= 16'h3f2c;
      990: out3 <= 16'h3f38;
      991: out3 <= 16'h3f43;
      992: out3 <= 16'h3f4f;
      993: out3 <= 16'h3f5a;
      994: out3 <= 16'h3f64;
      995: out3 <= 16'h3f6e;
      996: out3 <= 16'h3f78;
      997: out3 <= 16'h3f82;
      998: out3 <= 16'h3f8b;
      999: out3 <= 16'h3f94;
      1000: out3 <= 16'h3f9c;
      1001: out3 <= 16'h3fa4;
      1002: out3 <= 16'h3fac;
      1003: out3 <= 16'h3fb4;
      1004: out3 <= 16'h3fbb;
      1005: out3 <= 16'h3fc1;
      1006: out3 <= 16'h3fc8;
      1007: out3 <= 16'h3fce;
      1008: out3 <= 16'h3fd4;
      1009: out3 <= 16'h3fd9;
      1010: out3 <= 16'h3fde;
      1011: out3 <= 16'h3fe3;
      1012: out3 <= 16'h3fe7;
      1013: out3 <= 16'h3feb;
      1014: out3 <= 16'h3fef;
      1015: out3 <= 16'h3ff2;
      1016: out3 <= 16'h3ff5;
      1017: out3 <= 16'h3ff7;
      1018: out3 <= 16'h3ffa;
      1019: out3 <= 16'h3ffc;
      1020: out3 <= 16'h3ffd;
      1021: out3 <= 16'h3ffe;
      1022: out3 <= 16'h3fff;
      1023: out3 <= 16'h4000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D16_100724(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [9:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hffe7;
      2: out3 <= 16'hffce;
      3: out3 <= 16'hffb5;
      4: out3 <= 16'hff9b;
      5: out3 <= 16'hff82;
      6: out3 <= 16'hff69;
      7: out3 <= 16'hff50;
      8: out3 <= 16'hff37;
      9: out3 <= 16'hff1e;
      10: out3 <= 16'hff05;
      11: out3 <= 16'hfeec;
      12: out3 <= 16'hfed2;
      13: out3 <= 16'hfeb9;
      14: out3 <= 16'hfea0;
      15: out3 <= 16'hfe87;
      16: out3 <= 16'hfe6e;
      17: out3 <= 16'hfe55;
      18: out3 <= 16'hfe3c;
      19: out3 <= 16'hfe23;
      20: out3 <= 16'hfe09;
      21: out3 <= 16'hfdf0;
      22: out3 <= 16'hfdd7;
      23: out3 <= 16'hfdbe;
      24: out3 <= 16'hfda5;
      25: out3 <= 16'hfd8c;
      26: out3 <= 16'hfd73;
      27: out3 <= 16'hfd5a;
      28: out3 <= 16'hfd40;
      29: out3 <= 16'hfd27;
      30: out3 <= 16'hfd0e;
      31: out3 <= 16'hfcf5;
      32: out3 <= 16'hfcdc;
      33: out3 <= 16'hfcc3;
      34: out3 <= 16'hfcaa;
      35: out3 <= 16'hfc91;
      36: out3 <= 16'hfc78;
      37: out3 <= 16'hfc5f;
      38: out3 <= 16'hfc45;
      39: out3 <= 16'hfc2c;
      40: out3 <= 16'hfc13;
      41: out3 <= 16'hfbfa;
      42: out3 <= 16'hfbe1;
      43: out3 <= 16'hfbc8;
      44: out3 <= 16'hfbaf;
      45: out3 <= 16'hfb96;
      46: out3 <= 16'hfb7d;
      47: out3 <= 16'hfb64;
      48: out3 <= 16'hfb4b;
      49: out3 <= 16'hfb32;
      50: out3 <= 16'hfb19;
      51: out3 <= 16'hfb00;
      52: out3 <= 16'hfae6;
      53: out3 <= 16'hfacd;
      54: out3 <= 16'hfab4;
      55: out3 <= 16'hfa9b;
      56: out3 <= 16'hfa82;
      57: out3 <= 16'hfa69;
      58: out3 <= 16'hfa50;
      59: out3 <= 16'hfa37;
      60: out3 <= 16'hfa1e;
      61: out3 <= 16'hfa05;
      62: out3 <= 16'hf9ec;
      63: out3 <= 16'hf9d3;
      64: out3 <= 16'hf9ba;
      65: out3 <= 16'hf9a1;
      66: out3 <= 16'hf988;
      67: out3 <= 16'hf96f;
      68: out3 <= 16'hf956;
      69: out3 <= 16'hf93d;
      70: out3 <= 16'hf924;
      71: out3 <= 16'hf90b;
      72: out3 <= 16'hf8f2;
      73: out3 <= 16'hf8d9;
      74: out3 <= 16'hf8c0;
      75: out3 <= 16'hf8a7;
      76: out3 <= 16'hf88e;
      77: out3 <= 16'hf875;
      78: out3 <= 16'hf85c;
      79: out3 <= 16'hf843;
      80: out3 <= 16'hf82a;
      81: out3 <= 16'hf811;
      82: out3 <= 16'hf7f9;
      83: out3 <= 16'hf7e0;
      84: out3 <= 16'hf7c7;
      85: out3 <= 16'hf7ae;
      86: out3 <= 16'hf795;
      87: out3 <= 16'hf77c;
      88: out3 <= 16'hf763;
      89: out3 <= 16'hf74a;
      90: out3 <= 16'hf731;
      91: out3 <= 16'hf718;
      92: out3 <= 16'hf6ff;
      93: out3 <= 16'hf6e7;
      94: out3 <= 16'hf6ce;
      95: out3 <= 16'hf6b5;
      96: out3 <= 16'hf69c;
      97: out3 <= 16'hf683;
      98: out3 <= 16'hf66a;
      99: out3 <= 16'hf651;
      100: out3 <= 16'hf639;
      101: out3 <= 16'hf620;
      102: out3 <= 16'hf607;
      103: out3 <= 16'hf5ee;
      104: out3 <= 16'hf5d5;
      105: out3 <= 16'hf5bc;
      106: out3 <= 16'hf5a4;
      107: out3 <= 16'hf58b;
      108: out3 <= 16'hf572;
      109: out3 <= 16'hf559;
      110: out3 <= 16'hf540;
      111: out3 <= 16'hf528;
      112: out3 <= 16'hf50f;
      113: out3 <= 16'hf4f6;
      114: out3 <= 16'hf4dd;
      115: out3 <= 16'hf4c5;
      116: out3 <= 16'hf4ac;
      117: out3 <= 16'hf493;
      118: out3 <= 16'hf47b;
      119: out3 <= 16'hf462;
      120: out3 <= 16'hf449;
      121: out3 <= 16'hf430;
      122: out3 <= 16'hf418;
      123: out3 <= 16'hf3ff;
      124: out3 <= 16'hf3e6;
      125: out3 <= 16'hf3ce;
      126: out3 <= 16'hf3b5;
      127: out3 <= 16'hf39c;
      128: out3 <= 16'hf384;
      129: out3 <= 16'hf36b;
      130: out3 <= 16'hf352;
      131: out3 <= 16'hf33a;
      132: out3 <= 16'hf321;
      133: out3 <= 16'hf308;
      134: out3 <= 16'hf2f0;
      135: out3 <= 16'hf2d7;
      136: out3 <= 16'hf2bf;
      137: out3 <= 16'hf2a6;
      138: out3 <= 16'hf28e;
      139: out3 <= 16'hf275;
      140: out3 <= 16'hf25c;
      141: out3 <= 16'hf244;
      142: out3 <= 16'hf22b;
      143: out3 <= 16'hf213;
      144: out3 <= 16'hf1fa;
      145: out3 <= 16'hf1e2;
      146: out3 <= 16'hf1c9;
      147: out3 <= 16'hf1b1;
      148: out3 <= 16'hf198;
      149: out3 <= 16'hf180;
      150: out3 <= 16'hf167;
      151: out3 <= 16'hf14f;
      152: out3 <= 16'hf136;
      153: out3 <= 16'hf11e;
      154: out3 <= 16'hf105;
      155: out3 <= 16'hf0ed;
      156: out3 <= 16'hf0d5;
      157: out3 <= 16'hf0bc;
      158: out3 <= 16'hf0a4;
      159: out3 <= 16'hf08b;
      160: out3 <= 16'hf073;
      161: out3 <= 16'hf05b;
      162: out3 <= 16'hf042;
      163: out3 <= 16'hf02a;
      164: out3 <= 16'hf012;
      165: out3 <= 16'heff9;
      166: out3 <= 16'hefe1;
      167: out3 <= 16'hefc9;
      168: out3 <= 16'hefb0;
      169: out3 <= 16'hef98;
      170: out3 <= 16'hef80;
      171: out3 <= 16'hef67;
      172: out3 <= 16'hef4f;
      173: out3 <= 16'hef37;
      174: out3 <= 16'hef1f;
      175: out3 <= 16'hef06;
      176: out3 <= 16'heeee;
      177: out3 <= 16'heed6;
      178: out3 <= 16'heebe;
      179: out3 <= 16'heea6;
      180: out3 <= 16'hee8d;
      181: out3 <= 16'hee75;
      182: out3 <= 16'hee5d;
      183: out3 <= 16'hee45;
      184: out3 <= 16'hee2d;
      185: out3 <= 16'hee15;
      186: out3 <= 16'hedfc;
      187: out3 <= 16'hede4;
      188: out3 <= 16'hedcc;
      189: out3 <= 16'hedb4;
      190: out3 <= 16'hed9c;
      191: out3 <= 16'hed84;
      192: out3 <= 16'hed6c;
      193: out3 <= 16'hed54;
      194: out3 <= 16'hed3c;
      195: out3 <= 16'hed24;
      196: out3 <= 16'hed0c;
      197: out3 <= 16'hecf4;
      198: out3 <= 16'hecdc;
      199: out3 <= 16'hecc4;
      200: out3 <= 16'hecac;
      201: out3 <= 16'hec94;
      202: out3 <= 16'hec7c;
      203: out3 <= 16'hec64;
      204: out3 <= 16'hec4c;
      205: out3 <= 16'hec34;
      206: out3 <= 16'hec1c;
      207: out3 <= 16'hec05;
      208: out3 <= 16'hebed;
      209: out3 <= 16'hebd5;
      210: out3 <= 16'hebbd;
      211: out3 <= 16'heba5;
      212: out3 <= 16'heb8d;
      213: out3 <= 16'heb75;
      214: out3 <= 16'heb5e;
      215: out3 <= 16'heb46;
      216: out3 <= 16'heb2e;
      217: out3 <= 16'heb16;
      218: out3 <= 16'heaff;
      219: out3 <= 16'heae7;
      220: out3 <= 16'heacf;
      221: out3 <= 16'heab7;
      222: out3 <= 16'heaa0;
      223: out3 <= 16'hea88;
      224: out3 <= 16'hea70;
      225: out3 <= 16'hea59;
      226: out3 <= 16'hea41;
      227: out3 <= 16'hea29;
      228: out3 <= 16'hea12;
      229: out3 <= 16'he9fa;
      230: out3 <= 16'he9e3;
      231: out3 <= 16'he9cb;
      232: out3 <= 16'he9b4;
      233: out3 <= 16'he99c;
      234: out3 <= 16'he984;
      235: out3 <= 16'he96d;
      236: out3 <= 16'he955;
      237: out3 <= 16'he93e;
      238: out3 <= 16'he926;
      239: out3 <= 16'he90f;
      240: out3 <= 16'he8f7;
      241: out3 <= 16'he8e0;
      242: out3 <= 16'he8c9;
      243: out3 <= 16'he8b1;
      244: out3 <= 16'he89a;
      245: out3 <= 16'he882;
      246: out3 <= 16'he86b;
      247: out3 <= 16'he854;
      248: out3 <= 16'he83c;
      249: out3 <= 16'he825;
      250: out3 <= 16'he80e;
      251: out3 <= 16'he7f6;
      252: out3 <= 16'he7df;
      253: out3 <= 16'he7c8;
      254: out3 <= 16'he7b1;
      255: out3 <= 16'he799;
      256: out3 <= 16'he782;
      257: out3 <= 16'he76b;
      258: out3 <= 16'he754;
      259: out3 <= 16'he73d;
      260: out3 <= 16'he725;
      261: out3 <= 16'he70e;
      262: out3 <= 16'he6f7;
      263: out3 <= 16'he6e0;
      264: out3 <= 16'he6c9;
      265: out3 <= 16'he6b2;
      266: out3 <= 16'he69b;
      267: out3 <= 16'he684;
      268: out3 <= 16'he66d;
      269: out3 <= 16'he656;
      270: out3 <= 16'he63f;
      271: out3 <= 16'he628;
      272: out3 <= 16'he611;
      273: out3 <= 16'he5fa;
      274: out3 <= 16'he5e3;
      275: out3 <= 16'he5cc;
      276: out3 <= 16'he5b5;
      277: out3 <= 16'he59e;
      278: out3 <= 16'he587;
      279: out3 <= 16'he570;
      280: out3 <= 16'he559;
      281: out3 <= 16'he542;
      282: out3 <= 16'he52c;
      283: out3 <= 16'he515;
      284: out3 <= 16'he4fe;
      285: out3 <= 16'he4e7;
      286: out3 <= 16'he4d0;
      287: out3 <= 16'he4ba;
      288: out3 <= 16'he4a3;
      289: out3 <= 16'he48c;
      290: out3 <= 16'he476;
      291: out3 <= 16'he45f;
      292: out3 <= 16'he448;
      293: out3 <= 16'he432;
      294: out3 <= 16'he41b;
      295: out3 <= 16'he404;
      296: out3 <= 16'he3ee;
      297: out3 <= 16'he3d7;
      298: out3 <= 16'he3c1;
      299: out3 <= 16'he3aa;
      300: out3 <= 16'he394;
      301: out3 <= 16'he37d;
      302: out3 <= 16'he367;
      303: out3 <= 16'he350;
      304: out3 <= 16'he33a;
      305: out3 <= 16'he323;
      306: out3 <= 16'he30d;
      307: out3 <= 16'he2f6;
      308: out3 <= 16'he2e0;
      309: out3 <= 16'he2ca;
      310: out3 <= 16'he2b3;
      311: out3 <= 16'he29d;
      312: out3 <= 16'he287;
      313: out3 <= 16'he270;
      314: out3 <= 16'he25a;
      315: out3 <= 16'he244;
      316: out3 <= 16'he22d;
      317: out3 <= 16'he217;
      318: out3 <= 16'he201;
      319: out3 <= 16'he1eb;
      320: out3 <= 16'he1d5;
      321: out3 <= 16'he1be;
      322: out3 <= 16'he1a8;
      323: out3 <= 16'he192;
      324: out3 <= 16'he17c;
      325: out3 <= 16'he166;
      326: out3 <= 16'he150;
      327: out3 <= 16'he13a;
      328: out3 <= 16'he124;
      329: out3 <= 16'he10e;
      330: out3 <= 16'he0f8;
      331: out3 <= 16'he0e2;
      332: out3 <= 16'he0cc;
      333: out3 <= 16'he0b6;
      334: out3 <= 16'he0a0;
      335: out3 <= 16'he08a;
      336: out3 <= 16'he074;
      337: out3 <= 16'he05e;
      338: out3 <= 16'he049;
      339: out3 <= 16'he033;
      340: out3 <= 16'he01d;
      341: out3 <= 16'he007;
      342: out3 <= 16'hdff1;
      343: out3 <= 16'hdfdc;
      344: out3 <= 16'hdfc6;
      345: out3 <= 16'hdfb0;
      346: out3 <= 16'hdf9b;
      347: out3 <= 16'hdf85;
      348: out3 <= 16'hdf6f;
      349: out3 <= 16'hdf5a;
      350: out3 <= 16'hdf44;
      351: out3 <= 16'hdf2f;
      352: out3 <= 16'hdf19;
      353: out3 <= 16'hdf03;
      354: out3 <= 16'hdeee;
      355: out3 <= 16'hded8;
      356: out3 <= 16'hdec3;
      357: out3 <= 16'hdead;
      358: out3 <= 16'hde98;
      359: out3 <= 16'hde83;
      360: out3 <= 16'hde6d;
      361: out3 <= 16'hde58;
      362: out3 <= 16'hde42;
      363: out3 <= 16'hde2d;
      364: out3 <= 16'hde18;
      365: out3 <= 16'hde02;
      366: out3 <= 16'hdded;
      367: out3 <= 16'hddd8;
      368: out3 <= 16'hddc3;
      369: out3 <= 16'hddad;
      370: out3 <= 16'hdd98;
      371: out3 <= 16'hdd83;
      372: out3 <= 16'hdd6e;
      373: out3 <= 16'hdd59;
      374: out3 <= 16'hdd44;
      375: out3 <= 16'hdd2e;
      376: out3 <= 16'hdd19;
      377: out3 <= 16'hdd04;
      378: out3 <= 16'hdcef;
      379: out3 <= 16'hdcda;
      380: out3 <= 16'hdcc5;
      381: out3 <= 16'hdcb0;
      382: out3 <= 16'hdc9b;
      383: out3 <= 16'hdc86;
      384: out3 <= 16'hdc72;
      385: out3 <= 16'hdc5d;
      386: out3 <= 16'hdc48;
      387: out3 <= 16'hdc33;
      388: out3 <= 16'hdc1e;
      389: out3 <= 16'hdc09;
      390: out3 <= 16'hdbf5;
      391: out3 <= 16'hdbe0;
      392: out3 <= 16'hdbcb;
      393: out3 <= 16'hdbb6;
      394: out3 <= 16'hdba2;
      395: out3 <= 16'hdb8d;
      396: out3 <= 16'hdb78;
      397: out3 <= 16'hdb64;
      398: out3 <= 16'hdb4f;
      399: out3 <= 16'hdb3b;
      400: out3 <= 16'hdb26;
      401: out3 <= 16'hdb11;
      402: out3 <= 16'hdafd;
      403: out3 <= 16'hdae8;
      404: out3 <= 16'hdad4;
      405: out3 <= 16'hdabf;
      406: out3 <= 16'hdaab;
      407: out3 <= 16'hda97;
      408: out3 <= 16'hda82;
      409: out3 <= 16'hda6e;
      410: out3 <= 16'hda5a;
      411: out3 <= 16'hda45;
      412: out3 <= 16'hda31;
      413: out3 <= 16'hda1d;
      414: out3 <= 16'hda08;
      415: out3 <= 16'hd9f4;
      416: out3 <= 16'hd9e0;
      417: out3 <= 16'hd9cc;
      418: out3 <= 16'hd9b8;
      419: out3 <= 16'hd9a4;
      420: out3 <= 16'hd98f;
      421: out3 <= 16'hd97b;
      422: out3 <= 16'hd967;
      423: out3 <= 16'hd953;
      424: out3 <= 16'hd93f;
      425: out3 <= 16'hd92b;
      426: out3 <= 16'hd917;
      427: out3 <= 16'hd903;
      428: out3 <= 16'hd8ef;
      429: out3 <= 16'hd8dc;
      430: out3 <= 16'hd8c8;
      431: out3 <= 16'hd8b4;
      432: out3 <= 16'hd8a0;
      433: out3 <= 16'hd88c;
      434: out3 <= 16'hd878;
      435: out3 <= 16'hd865;
      436: out3 <= 16'hd851;
      437: out3 <= 16'hd83d;
      438: out3 <= 16'hd82a;
      439: out3 <= 16'hd816;
      440: out3 <= 16'hd802;
      441: out3 <= 16'hd7ef;
      442: out3 <= 16'hd7db;
      443: out3 <= 16'hd7c8;
      444: out3 <= 16'hd7b4;
      445: out3 <= 16'hd7a0;
      446: out3 <= 16'hd78d;
      447: out3 <= 16'hd77a;
      448: out3 <= 16'hd766;
      449: out3 <= 16'hd753;
      450: out3 <= 16'hd73f;
      451: out3 <= 16'hd72c;
      452: out3 <= 16'hd719;
      453: out3 <= 16'hd705;
      454: out3 <= 16'hd6f2;
      455: out3 <= 16'hd6df;
      456: out3 <= 16'hd6cb;
      457: out3 <= 16'hd6b8;
      458: out3 <= 16'hd6a5;
      459: out3 <= 16'hd692;
      460: out3 <= 16'hd67f;
      461: out3 <= 16'hd66c;
      462: out3 <= 16'hd659;
      463: out3 <= 16'hd645;
      464: out3 <= 16'hd632;
      465: out3 <= 16'hd61f;
      466: out3 <= 16'hd60c;
      467: out3 <= 16'hd5f9;
      468: out3 <= 16'hd5e6;
      469: out3 <= 16'hd5d4;
      470: out3 <= 16'hd5c1;
      471: out3 <= 16'hd5ae;
      472: out3 <= 16'hd59b;
      473: out3 <= 16'hd588;
      474: out3 <= 16'hd575;
      475: out3 <= 16'hd563;
      476: out3 <= 16'hd550;
      477: out3 <= 16'hd53d;
      478: out3 <= 16'hd52a;
      479: out3 <= 16'hd518;
      480: out3 <= 16'hd505;
      481: out3 <= 16'hd4f3;
      482: out3 <= 16'hd4e0;
      483: out3 <= 16'hd4cd;
      484: out3 <= 16'hd4bb;
      485: out3 <= 16'hd4a8;
      486: out3 <= 16'hd496;
      487: out3 <= 16'hd483;
      488: out3 <= 16'hd471;
      489: out3 <= 16'hd45f;
      490: out3 <= 16'hd44c;
      491: out3 <= 16'hd43a;
      492: out3 <= 16'hd428;
      493: out3 <= 16'hd415;
      494: out3 <= 16'hd403;
      495: out3 <= 16'hd3f1;
      496: out3 <= 16'hd3df;
      497: out3 <= 16'hd3cc;
      498: out3 <= 16'hd3ba;
      499: out3 <= 16'hd3a8;
      500: out3 <= 16'hd396;
      501: out3 <= 16'hd384;
      502: out3 <= 16'hd372;
      503: out3 <= 16'hd360;
      504: out3 <= 16'hd34e;
      505: out3 <= 16'hd33c;
      506: out3 <= 16'hd32a;
      507: out3 <= 16'hd318;
      508: out3 <= 16'hd306;
      509: out3 <= 16'hd2f4;
      510: out3 <= 16'hd2e2;
      511: out3 <= 16'hd2d1;
      512: out3 <= 16'hd2bf;
      513: out3 <= 16'hd2ad;
      514: out3 <= 16'hd29b;
      515: out3 <= 16'hd28a;
      516: out3 <= 16'hd278;
      517: out3 <= 16'hd266;
      518: out3 <= 16'hd255;
      519: out3 <= 16'hd243;
      520: out3 <= 16'hd231;
      521: out3 <= 16'hd220;
      522: out3 <= 16'hd20e;
      523: out3 <= 16'hd1fd;
      524: out3 <= 16'hd1eb;
      525: out3 <= 16'hd1da;
      526: out3 <= 16'hd1c9;
      527: out3 <= 16'hd1b7;
      528: out3 <= 16'hd1a6;
      529: out3 <= 16'hd195;
      530: out3 <= 16'hd183;
      531: out3 <= 16'hd172;
      532: out3 <= 16'hd161;
      533: out3 <= 16'hd150;
      534: out3 <= 16'hd13e;
      535: out3 <= 16'hd12d;
      536: out3 <= 16'hd11c;
      537: out3 <= 16'hd10b;
      538: out3 <= 16'hd0fa;
      539: out3 <= 16'hd0e9;
      540: out3 <= 16'hd0d8;
      541: out3 <= 16'hd0c7;
      542: out3 <= 16'hd0b6;
      543: out3 <= 16'hd0a5;
      544: out3 <= 16'hd094;
      545: out3 <= 16'hd083;
      546: out3 <= 16'hd073;
      547: out3 <= 16'hd062;
      548: out3 <= 16'hd051;
      549: out3 <= 16'hd040;
      550: out3 <= 16'hd030;
      551: out3 <= 16'hd01f;
      552: out3 <= 16'hd00e;
      553: out3 <= 16'hcffe;
      554: out3 <= 16'hcfed;
      555: out3 <= 16'hcfdc;
      556: out3 <= 16'hcfcc;
      557: out3 <= 16'hcfbb;
      558: out3 <= 16'hcfab;
      559: out3 <= 16'hcf9a;
      560: out3 <= 16'hcf8a;
      561: out3 <= 16'hcf79;
      562: out3 <= 16'hcf69;
      563: out3 <= 16'hcf59;
      564: out3 <= 16'hcf48;
      565: out3 <= 16'hcf38;
      566: out3 <= 16'hcf28;
      567: out3 <= 16'hcf18;
      568: out3 <= 16'hcf07;
      569: out3 <= 16'hcef7;
      570: out3 <= 16'hcee7;
      571: out3 <= 16'hced7;
      572: out3 <= 16'hcec7;
      573: out3 <= 16'hceb7;
      574: out3 <= 16'hcea7;
      575: out3 <= 16'hce97;
      576: out3 <= 16'hce87;
      577: out3 <= 16'hce77;
      578: out3 <= 16'hce67;
      579: out3 <= 16'hce57;
      580: out3 <= 16'hce47;
      581: out3 <= 16'hce38;
      582: out3 <= 16'hce28;
      583: out3 <= 16'hce18;
      584: out3 <= 16'hce08;
      585: out3 <= 16'hcdf9;
      586: out3 <= 16'hcde9;
      587: out3 <= 16'hcdd9;
      588: out3 <= 16'hcdca;
      589: out3 <= 16'hcdba;
      590: out3 <= 16'hcdab;
      591: out3 <= 16'hcd9b;
      592: out3 <= 16'hcd8c;
      593: out3 <= 16'hcd7c;
      594: out3 <= 16'hcd6d;
      595: out3 <= 16'hcd5d;
      596: out3 <= 16'hcd4e;
      597: out3 <= 16'hcd3f;
      598: out3 <= 16'hcd30;
      599: out3 <= 16'hcd20;
      600: out3 <= 16'hcd11;
      601: out3 <= 16'hcd02;
      602: out3 <= 16'hccf3;
      603: out3 <= 16'hcce3;
      604: out3 <= 16'hccd4;
      605: out3 <= 16'hccc5;
      606: out3 <= 16'hccb6;
      607: out3 <= 16'hcca7;
      608: out3 <= 16'hcc98;
      609: out3 <= 16'hcc89;
      610: out3 <= 16'hcc7a;
      611: out3 <= 16'hcc6b;
      612: out3 <= 16'hcc5d;
      613: out3 <= 16'hcc4e;
      614: out3 <= 16'hcc3f;
      615: out3 <= 16'hcc30;
      616: out3 <= 16'hcc21;
      617: out3 <= 16'hcc13;
      618: out3 <= 16'hcc04;
      619: out3 <= 16'hcbf5;
      620: out3 <= 16'hcbe7;
      621: out3 <= 16'hcbd8;
      622: out3 <= 16'hcbca;
      623: out3 <= 16'hcbbb;
      624: out3 <= 16'hcbad;
      625: out3 <= 16'hcb9e;
      626: out3 <= 16'hcb90;
      627: out3 <= 16'hcb81;
      628: out3 <= 16'hcb73;
      629: out3 <= 16'hcb65;
      630: out3 <= 16'hcb56;
      631: out3 <= 16'hcb48;
      632: out3 <= 16'hcb3a;
      633: out3 <= 16'hcb2c;
      634: out3 <= 16'hcb1e;
      635: out3 <= 16'hcb0f;
      636: out3 <= 16'hcb01;
      637: out3 <= 16'hcaf3;
      638: out3 <= 16'hcae5;
      639: out3 <= 16'hcad7;
      640: out3 <= 16'hcac9;
      641: out3 <= 16'hcabb;
      642: out3 <= 16'hcaad;
      643: out3 <= 16'hca9f;
      644: out3 <= 16'hca92;
      645: out3 <= 16'hca84;
      646: out3 <= 16'hca76;
      647: out3 <= 16'hca68;
      648: out3 <= 16'hca5b;
      649: out3 <= 16'hca4d;
      650: out3 <= 16'hca3f;
      651: out3 <= 16'hca32;
      652: out3 <= 16'hca24;
      653: out3 <= 16'hca16;
      654: out3 <= 16'hca09;
      655: out3 <= 16'hc9fb;
      656: out3 <= 16'hc9ee;
      657: out3 <= 16'hc9e0;
      658: out3 <= 16'hc9d3;
      659: out3 <= 16'hc9c6;
      660: out3 <= 16'hc9b8;
      661: out3 <= 16'hc9ab;
      662: out3 <= 16'hc99e;
      663: out3 <= 16'hc991;
      664: out3 <= 16'hc983;
      665: out3 <= 16'hc976;
      666: out3 <= 16'hc969;
      667: out3 <= 16'hc95c;
      668: out3 <= 16'hc94f;
      669: out3 <= 16'hc942;
      670: out3 <= 16'hc935;
      671: out3 <= 16'hc928;
      672: out3 <= 16'hc91b;
      673: out3 <= 16'hc90e;
      674: out3 <= 16'hc901;
      675: out3 <= 16'hc8f4;
      676: out3 <= 16'hc8e8;
      677: out3 <= 16'hc8db;
      678: out3 <= 16'hc8ce;
      679: out3 <= 16'hc8c1;
      680: out3 <= 16'hc8b5;
      681: out3 <= 16'hc8a8;
      682: out3 <= 16'hc89b;
      683: out3 <= 16'hc88f;
      684: out3 <= 16'hc882;
      685: out3 <= 16'hc876;
      686: out3 <= 16'hc869;
      687: out3 <= 16'hc85d;
      688: out3 <= 16'hc850;
      689: out3 <= 16'hc844;
      690: out3 <= 16'hc838;
      691: out3 <= 16'hc82b;
      692: out3 <= 16'hc81f;
      693: out3 <= 16'hc813;
      694: out3 <= 16'hc807;
      695: out3 <= 16'hc7fb;
      696: out3 <= 16'hc7ee;
      697: out3 <= 16'hc7e2;
      698: out3 <= 16'hc7d6;
      699: out3 <= 16'hc7ca;
      700: out3 <= 16'hc7be;
      701: out3 <= 16'hc7b2;
      702: out3 <= 16'hc7a6;
      703: out3 <= 16'hc79a;
      704: out3 <= 16'hc78f;
      705: out3 <= 16'hc783;
      706: out3 <= 16'hc777;
      707: out3 <= 16'hc76b;
      708: out3 <= 16'hc75f;
      709: out3 <= 16'hc754;
      710: out3 <= 16'hc748;
      711: out3 <= 16'hc73d;
      712: out3 <= 16'hc731;
      713: out3 <= 16'hc725;
      714: out3 <= 16'hc71a;
      715: out3 <= 16'hc70e;
      716: out3 <= 16'hc703;
      717: out3 <= 16'hc6f7;
      718: out3 <= 16'hc6ec;
      719: out3 <= 16'hc6e1;
      720: out3 <= 16'hc6d5;
      721: out3 <= 16'hc6ca;
      722: out3 <= 16'hc6bf;
      723: out3 <= 16'hc6b4;
      724: out3 <= 16'hc6a8;
      725: out3 <= 16'hc69d;
      726: out3 <= 16'hc692;
      727: out3 <= 16'hc687;
      728: out3 <= 16'hc67c;
      729: out3 <= 16'hc671;
      730: out3 <= 16'hc666;
      731: out3 <= 16'hc65b;
      732: out3 <= 16'hc650;
      733: out3 <= 16'hc645;
      734: out3 <= 16'hc63b;
      735: out3 <= 16'hc630;
      736: out3 <= 16'hc625;
      737: out3 <= 16'hc61a;
      738: out3 <= 16'hc610;
      739: out3 <= 16'hc605;
      740: out3 <= 16'hc5fa;
      741: out3 <= 16'hc5f0;
      742: out3 <= 16'hc5e5;
      743: out3 <= 16'hc5db;
      744: out3 <= 16'hc5d0;
      745: out3 <= 16'hc5c6;
      746: out3 <= 16'hc5bb;
      747: out3 <= 16'hc5b1;
      748: out3 <= 16'hc5a7;
      749: out3 <= 16'hc59c;
      750: out3 <= 16'hc592;
      751: out3 <= 16'hc588;
      752: out3 <= 16'hc57e;
      753: out3 <= 16'hc573;
      754: out3 <= 16'hc569;
      755: out3 <= 16'hc55f;
      756: out3 <= 16'hc555;
      757: out3 <= 16'hc54b;
      758: out3 <= 16'hc541;
      759: out3 <= 16'hc537;
      760: out3 <= 16'hc52d;
      761: out3 <= 16'hc523;
      762: out3 <= 16'hc51a;
      763: out3 <= 16'hc510;
      764: out3 <= 16'hc506;
      765: out3 <= 16'hc4fc;
      766: out3 <= 16'hc4f2;
      767: out3 <= 16'hc4e9;
      768: out3 <= 16'hc4df;
      769: out3 <= 16'hc4d6;
      770: out3 <= 16'hc4cc;
      771: out3 <= 16'hc4c2;
      772: out3 <= 16'hc4b9;
      773: out3 <= 16'hc4b0;
      774: out3 <= 16'hc4a6;
      775: out3 <= 16'hc49d;
      776: out3 <= 16'hc493;
      777: out3 <= 16'hc48a;
      778: out3 <= 16'hc481;
      779: out3 <= 16'hc478;
      780: out3 <= 16'hc46e;
      781: out3 <= 16'hc465;
      782: out3 <= 16'hc45c;
      783: out3 <= 16'hc453;
      784: out3 <= 16'hc44a;
      785: out3 <= 16'hc441;
      786: out3 <= 16'hc438;
      787: out3 <= 16'hc42f;
      788: out3 <= 16'hc426;
      789: out3 <= 16'hc41d;
      790: out3 <= 16'hc414;
      791: out3 <= 16'hc40b;
      792: out3 <= 16'hc403;
      793: out3 <= 16'hc3fa;
      794: out3 <= 16'hc3f1;
      795: out3 <= 16'hc3e9;
      796: out3 <= 16'hc3e0;
      797: out3 <= 16'hc3d7;
      798: out3 <= 16'hc3cf;
      799: out3 <= 16'hc3c6;
      800: out3 <= 16'hc3be;
      801: out3 <= 16'hc3b5;
      802: out3 <= 16'hc3ad;
      803: out3 <= 16'hc3a5;
      804: out3 <= 16'hc39c;
      805: out3 <= 16'hc394;
      806: out3 <= 16'hc38c;
      807: out3 <= 16'hc383;
      808: out3 <= 16'hc37b;
      809: out3 <= 16'hc373;
      810: out3 <= 16'hc36b;
      811: out3 <= 16'hc363;
      812: out3 <= 16'hc35b;
      813: out3 <= 16'hc353;
      814: out3 <= 16'hc34b;
      815: out3 <= 16'hc343;
      816: out3 <= 16'hc33b;
      817: out3 <= 16'hc333;
      818: out3 <= 16'hc32b;
      819: out3 <= 16'hc323;
      820: out3 <= 16'hc31c;
      821: out3 <= 16'hc314;
      822: out3 <= 16'hc30c;
      823: out3 <= 16'hc305;
      824: out3 <= 16'hc2fd;
      825: out3 <= 16'hc2f5;
      826: out3 <= 16'hc2ee;
      827: out3 <= 16'hc2e6;
      828: out3 <= 16'hc2df;
      829: out3 <= 16'hc2d8;
      830: out3 <= 16'hc2d0;
      831: out3 <= 16'hc2c9;
      832: out3 <= 16'hc2c1;
      833: out3 <= 16'hc2ba;
      834: out3 <= 16'hc2b3;
      835: out3 <= 16'hc2ac;
      836: out3 <= 16'hc2a5;
      837: out3 <= 16'hc29d;
      838: out3 <= 16'hc296;
      839: out3 <= 16'hc28f;
      840: out3 <= 16'hc288;
      841: out3 <= 16'hc281;
      842: out3 <= 16'hc27a;
      843: out3 <= 16'hc273;
      844: out3 <= 16'hc26d;
      845: out3 <= 16'hc266;
      846: out3 <= 16'hc25f;
      847: out3 <= 16'hc258;
      848: out3 <= 16'hc251;
      849: out3 <= 16'hc24b;
      850: out3 <= 16'hc244;
      851: out3 <= 16'hc23e;
      852: out3 <= 16'hc237;
      853: out3 <= 16'hc230;
      854: out3 <= 16'hc22a;
      855: out3 <= 16'hc223;
      856: out3 <= 16'hc21d;
      857: out3 <= 16'hc217;
      858: out3 <= 16'hc210;
      859: out3 <= 16'hc20a;
      860: out3 <= 16'hc204;
      861: out3 <= 16'hc1fd;
      862: out3 <= 16'hc1f7;
      863: out3 <= 16'hc1f1;
      864: out3 <= 16'hc1eb;
      865: out3 <= 16'hc1e5;
      866: out3 <= 16'hc1df;
      867: out3 <= 16'hc1d9;
      868: out3 <= 16'hc1d3;
      869: out3 <= 16'hc1cd;
      870: out3 <= 16'hc1c7;
      871: out3 <= 16'hc1c1;
      872: out3 <= 16'hc1bb;
      873: out3 <= 16'hc1b6;
      874: out3 <= 16'hc1b0;
      875: out3 <= 16'hc1aa;
      876: out3 <= 16'hc1a4;
      877: out3 <= 16'hc19f;
      878: out3 <= 16'hc199;
      879: out3 <= 16'hc194;
      880: out3 <= 16'hc18e;
      881: out3 <= 16'hc189;
      882: out3 <= 16'hc183;
      883: out3 <= 16'hc17e;
      884: out3 <= 16'hc178;
      885: out3 <= 16'hc173;
      886: out3 <= 16'hc16e;
      887: out3 <= 16'hc168;
      888: out3 <= 16'hc163;
      889: out3 <= 16'hc15e;
      890: out3 <= 16'hc159;
      891: out3 <= 16'hc154;
      892: out3 <= 16'hc14f;
      893: out3 <= 16'hc14a;
      894: out3 <= 16'hc145;
      895: out3 <= 16'hc140;
      896: out3 <= 16'hc13b;
      897: out3 <= 16'hc136;
      898: out3 <= 16'hc131;
      899: out3 <= 16'hc12c;
      900: out3 <= 16'hc128;
      901: out3 <= 16'hc123;
      902: out3 <= 16'hc11e;
      903: out3 <= 16'hc119;
      904: out3 <= 16'hc115;
      905: out3 <= 16'hc110;
      906: out3 <= 16'hc10c;
      907: out3 <= 16'hc107;
      908: out3 <= 16'hc103;
      909: out3 <= 16'hc0fe;
      910: out3 <= 16'hc0fa;
      911: out3 <= 16'hc0f6;
      912: out3 <= 16'hc0f1;
      913: out3 <= 16'hc0ed;
      914: out3 <= 16'hc0e9;
      915: out3 <= 16'hc0e4;
      916: out3 <= 16'hc0e0;
      917: out3 <= 16'hc0dc;
      918: out3 <= 16'hc0d8;
      919: out3 <= 16'hc0d4;
      920: out3 <= 16'hc0d0;
      921: out3 <= 16'hc0cc;
      922: out3 <= 16'hc0c8;
      923: out3 <= 16'hc0c4;
      924: out3 <= 16'hc0c0;
      925: out3 <= 16'hc0bd;
      926: out3 <= 16'hc0b9;
      927: out3 <= 16'hc0b5;
      928: out3 <= 16'hc0b1;
      929: out3 <= 16'hc0ae;
      930: out3 <= 16'hc0aa;
      931: out3 <= 16'hc0a6;
      932: out3 <= 16'hc0a3;
      933: out3 <= 16'hc09f;
      934: out3 <= 16'hc09c;
      935: out3 <= 16'hc098;
      936: out3 <= 16'hc095;
      937: out3 <= 16'hc092;
      938: out3 <= 16'hc08e;
      939: out3 <= 16'hc08b;
      940: out3 <= 16'hc088;
      941: out3 <= 16'hc085;
      942: out3 <= 16'hc081;
      943: out3 <= 16'hc07e;
      944: out3 <= 16'hc07b;
      945: out3 <= 16'hc078;
      946: out3 <= 16'hc075;
      947: out3 <= 16'hc072;
      948: out3 <= 16'hc06f;
      949: out3 <= 16'hc06c;
      950: out3 <= 16'hc069;
      951: out3 <= 16'hc067;
      952: out3 <= 16'hc064;
      953: out3 <= 16'hc061;
      954: out3 <= 16'hc05e;
      955: out3 <= 16'hc05c;
      956: out3 <= 16'hc059;
      957: out3 <= 16'hc056;
      958: out3 <= 16'hc054;
      959: out3 <= 16'hc051;
      960: out3 <= 16'hc04f;
      961: out3 <= 16'hc04c;
      962: out3 <= 16'hc04a;
      963: out3 <= 16'hc048;
      964: out3 <= 16'hc045;
      965: out3 <= 16'hc043;
      966: out3 <= 16'hc041;
      967: out3 <= 16'hc03f;
      968: out3 <= 16'hc03c;
      969: out3 <= 16'hc03a;
      970: out3 <= 16'hc038;
      971: out3 <= 16'hc036;
      972: out3 <= 16'hc034;
      973: out3 <= 16'hc032;
      974: out3 <= 16'hc030;
      975: out3 <= 16'hc02e;
      976: out3 <= 16'hc02c;
      977: out3 <= 16'hc02b;
      978: out3 <= 16'hc029;
      979: out3 <= 16'hc027;
      980: out3 <= 16'hc025;
      981: out3 <= 16'hc024;
      982: out3 <= 16'hc022;
      983: out3 <= 16'hc020;
      984: out3 <= 16'hc01f;
      985: out3 <= 16'hc01d;
      986: out3 <= 16'hc01c;
      987: out3 <= 16'hc01a;
      988: out3 <= 16'hc019;
      989: out3 <= 16'hc018;
      990: out3 <= 16'hc016;
      991: out3 <= 16'hc015;
      992: out3 <= 16'hc014;
      993: out3 <= 16'hc013;
      994: out3 <= 16'hc011;
      995: out3 <= 16'hc010;
      996: out3 <= 16'hc00f;
      997: out3 <= 16'hc00e;
      998: out3 <= 16'hc00d;
      999: out3 <= 16'hc00c;
      1000: out3 <= 16'hc00b;
      1001: out3 <= 16'hc00a;
      1002: out3 <= 16'hc009;
      1003: out3 <= 16'hc009;
      1004: out3 <= 16'hc008;
      1005: out3 <= 16'hc007;
      1006: out3 <= 16'hc006;
      1007: out3 <= 16'hc006;
      1008: out3 <= 16'hc005;
      1009: out3 <= 16'hc004;
      1010: out3 <= 16'hc004;
      1011: out3 <= 16'hc003;
      1012: out3 <= 16'hc003;
      1013: out3 <= 16'hc002;
      1014: out3 <= 16'hc002;
      1015: out3 <= 16'hc002;
      1016: out3 <= 16'hc001;
      1017: out3 <= 16'hc001;
      1018: out3 <= 16'hc001;
      1019: out3 <= 16'hc000;
      1020: out3 <= 16'hc000;
      1021: out3 <= 16'hc000;
      1022: out3 <= 16'hc000;
      1023: out3 <= 16'hc000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D14_101750(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [9:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h4000;
      2: out3 <= 16'h3fff;
      3: out3 <= 16'h3ffe;
      4: out3 <= 16'h3ffd;
      5: out3 <= 16'h3ffc;
      6: out3 <= 16'h3ffa;
      7: out3 <= 16'h3ff7;
      8: out3 <= 16'h3ff5;
      9: out3 <= 16'h3ff2;
      10: out3 <= 16'h3fef;
      11: out3 <= 16'h3feb;
      12: out3 <= 16'h3fe7;
      13: out3 <= 16'h3fe3;
      14: out3 <= 16'h3fde;
      15: out3 <= 16'h3fd9;
      16: out3 <= 16'h3fd4;
      17: out3 <= 16'h3fce;
      18: out3 <= 16'h3fc8;
      19: out3 <= 16'h3fc1;
      20: out3 <= 16'h3fbb;
      21: out3 <= 16'h3fb4;
      22: out3 <= 16'h3fac;
      23: out3 <= 16'h3fa4;
      24: out3 <= 16'h3f9c;
      25: out3 <= 16'h3f94;
      26: out3 <= 16'h3f8b;
      27: out3 <= 16'h3f82;
      28: out3 <= 16'h3f78;
      29: out3 <= 16'h3f6e;
      30: out3 <= 16'h3f64;
      31: out3 <= 16'h3f5a;
      32: out3 <= 16'h3f4f;
      33: out3 <= 16'h3f43;
      34: out3 <= 16'h3f38;
      35: out3 <= 16'h3f2c;
      36: out3 <= 16'h3f20;
      37: out3 <= 16'h3f13;
      38: out3 <= 16'h3f06;
      39: out3 <= 16'h3ef9;
      40: out3 <= 16'h3eeb;
      41: out3 <= 16'h3edd;
      42: out3 <= 16'h3ecf;
      43: out3 <= 16'h3ec0;
      44: out3 <= 16'h3eb1;
      45: out3 <= 16'h3ea2;
      46: out3 <= 16'h3e92;
      47: out3 <= 16'h3e82;
      48: out3 <= 16'h3e72;
      49: out3 <= 16'h3e61;
      50: out3 <= 16'h3e50;
      51: out3 <= 16'h3e3f;
      52: out3 <= 16'h3e2d;
      53: out3 <= 16'h3e1b;
      54: out3 <= 16'h3e09;
      55: out3 <= 16'h3df6;
      56: out3 <= 16'h3de3;
      57: out3 <= 16'h3dd0;
      58: out3 <= 16'h3dbc;
      59: out3 <= 16'h3da8;
      60: out3 <= 16'h3d93;
      61: out3 <= 16'h3d7f;
      62: out3 <= 16'h3d6a;
      63: out3 <= 16'h3d54;
      64: out3 <= 16'h3d3f;
      65: out3 <= 16'h3d28;
      66: out3 <= 16'h3d12;
      67: out3 <= 16'h3cfb;
      68: out3 <= 16'h3ce4;
      69: out3 <= 16'h3ccd;
      70: out3 <= 16'h3cb5;
      71: out3 <= 16'h3c9d;
      72: out3 <= 16'h3c85;
      73: out3 <= 16'h3c6c;
      74: out3 <= 16'h3c53;
      75: out3 <= 16'h3c3a;
      76: out3 <= 16'h3c20;
      77: out3 <= 16'h3c06;
      78: out3 <= 16'h3bec;
      79: out3 <= 16'h3bd1;
      80: out3 <= 16'h3bb6;
      81: out3 <= 16'h3b9b;
      82: out3 <= 16'h3b7f;
      83: out3 <= 16'h3b63;
      84: out3 <= 16'h3b47;
      85: out3 <= 16'h3b2a;
      86: out3 <= 16'h3b0e;
      87: out3 <= 16'h3af0;
      88: out3 <= 16'h3ad3;
      89: out3 <= 16'h3ab5;
      90: out3 <= 16'h3a97;
      91: out3 <= 16'h3a78;
      92: out3 <= 16'h3a59;
      93: out3 <= 16'h3a3a;
      94: out3 <= 16'h3a1b;
      95: out3 <= 16'h39fb;
      96: out3 <= 16'h39db;
      97: out3 <= 16'h39bb;
      98: out3 <= 16'h399a;
      99: out3 <= 16'h3979;
      100: out3 <= 16'h3958;
      101: out3 <= 16'h3936;
      102: out3 <= 16'h3914;
      103: out3 <= 16'h38f2;
      104: out3 <= 16'h38cf;
      105: out3 <= 16'h38ac;
      106: out3 <= 16'h3889;
      107: out3 <= 16'h3866;
      108: out3 <= 16'h3842;
      109: out3 <= 16'h381e;
      110: out3 <= 16'h37f9;
      111: out3 <= 16'h37d5;
      112: out3 <= 16'h37b0;
      113: out3 <= 16'h378a;
      114: out3 <= 16'h3765;
      115: out3 <= 16'h373f;
      116: out3 <= 16'h3718;
      117: out3 <= 16'h36f2;
      118: out3 <= 16'h36cb;
      119: out3 <= 16'h36a4;
      120: out3 <= 16'h367d;
      121: out3 <= 16'h3655;
      122: out3 <= 16'h362d;
      123: out3 <= 16'h3605;
      124: out3 <= 16'h35dc;
      125: out3 <= 16'h35b3;
      126: out3 <= 16'h358a;
      127: out3 <= 16'h3561;
      128: out3 <= 16'h3537;
      129: out3 <= 16'h350d;
      130: out3 <= 16'h34e2;
      131: out3 <= 16'h34b8;
      132: out3 <= 16'h348d;
      133: out3 <= 16'h3462;
      134: out3 <= 16'h3436;
      135: out3 <= 16'h340b;
      136: out3 <= 16'h33df;
      137: out3 <= 16'h33b2;
      138: out3 <= 16'h3386;
      139: out3 <= 16'h3359;
      140: out3 <= 16'h332c;
      141: out3 <= 16'h32fe;
      142: out3 <= 16'h32d0;
      143: out3 <= 16'h32a3;
      144: out3 <= 16'h3274;
      145: out3 <= 16'h3246;
      146: out3 <= 16'h3217;
      147: out3 <= 16'h31e8;
      148: out3 <= 16'h31b9;
      149: out3 <= 16'h3189;
      150: out3 <= 16'h3159;
      151: out3 <= 16'h3129;
      152: out3 <= 16'h30f9;
      153: out3 <= 16'h30c8;
      154: out3 <= 16'h3097;
      155: out3 <= 16'h3066;
      156: out3 <= 16'h3034;
      157: out3 <= 16'h3002;
      158: out3 <= 16'h2fd0;
      159: out3 <= 16'h2f9e;
      160: out3 <= 16'h2f6c;
      161: out3 <= 16'h2f39;
      162: out3 <= 16'h2f06;
      163: out3 <= 16'h2ed3;
      164: out3 <= 16'h2e9f;
      165: out3 <= 16'h2e6b;
      166: out3 <= 16'h2e37;
      167: out3 <= 16'h2e03;
      168: out3 <= 16'h2dcf;
      169: out3 <= 16'h2d9a;
      170: out3 <= 16'h2d65;
      171: out3 <= 16'h2d2f;
      172: out3 <= 16'h2cfa;
      173: out3 <= 16'h2cc4;
      174: out3 <= 16'h2c8e;
      175: out3 <= 16'h2c58;
      176: out3 <= 16'h2c21;
      177: out3 <= 16'h2beb;
      178: out3 <= 16'h2bb4;
      179: out3 <= 16'h2b7d;
      180: out3 <= 16'h2b45;
      181: out3 <= 16'h2b0d;
      182: out3 <= 16'h2ad6;
      183: out3 <= 16'h2a9d;
      184: out3 <= 16'h2a65;
      185: out3 <= 16'h2a2c;
      186: out3 <= 16'h29f4;
      187: out3 <= 16'h29bb;
      188: out3 <= 16'h2981;
      189: out3 <= 16'h2948;
      190: out3 <= 16'h290e;
      191: out3 <= 16'h28d4;
      192: out3 <= 16'h289a;
      193: out3 <= 16'h2860;
      194: out3 <= 16'h2825;
      195: out3 <= 16'h27ea;
      196: out3 <= 16'h27af;
      197: out3 <= 16'h2774;
      198: out3 <= 16'h2738;
      199: out3 <= 16'h26fd;
      200: out3 <= 16'h26c1;
      201: out3 <= 16'h2685;
      202: out3 <= 16'h2648;
      203: out3 <= 16'h260c;
      204: out3 <= 16'h25cf;
      205: out3 <= 16'h2592;
      206: out3 <= 16'h2555;
      207: out3 <= 16'h2518;
      208: out3 <= 16'h24da;
      209: out3 <= 16'h249c;
      210: out3 <= 16'h245e;
      211: out3 <= 16'h2420;
      212: out3 <= 16'h23e2;
      213: out3 <= 16'h23a3;
      214: out3 <= 16'h2365;
      215: out3 <= 16'h2326;
      216: out3 <= 16'h22e7;
      217: out3 <= 16'h22a7;
      218: out3 <= 16'h2268;
      219: out3 <= 16'h2228;
      220: out3 <= 16'h21e8;
      221: out3 <= 16'h21a8;
      222: out3 <= 16'h2168;
      223: out3 <= 16'h2128;
      224: out3 <= 16'h20e7;
      225: out3 <= 16'h20a6;
      226: out3 <= 16'h2065;
      227: out3 <= 16'h2024;
      228: out3 <= 16'h1fe3;
      229: out3 <= 16'h1fa2;
      230: out3 <= 16'h1f60;
      231: out3 <= 16'h1f1e;
      232: out3 <= 16'h1edc;
      233: out3 <= 16'h1e9a;
      234: out3 <= 16'h1e58;
      235: out3 <= 16'h1e15;
      236: out3 <= 16'h1dd3;
      237: out3 <= 16'h1d90;
      238: out3 <= 16'h1d4d;
      239: out3 <= 16'h1d0a;
      240: out3 <= 16'h1cc6;
      241: out3 <= 16'h1c83;
      242: out3 <= 16'h1c3f;
      243: out3 <= 16'h1bfc;
      244: out3 <= 16'h1bb8;
      245: out3 <= 16'h1b74;
      246: out3 <= 16'h1b30;
      247: out3 <= 16'h1aeb;
      248: out3 <= 16'h1aa7;
      249: out3 <= 16'h1a62;
      250: out3 <= 16'h1a1d;
      251: out3 <= 16'h19d8;
      252: out3 <= 16'h1993;
      253: out3 <= 16'h194e;
      254: out3 <= 16'h1909;
      255: out3 <= 16'h18c3;
      256: out3 <= 16'h187e;
      257: out3 <= 16'h1838;
      258: out3 <= 16'h17f2;
      259: out3 <= 16'h17ac;
      260: out3 <= 16'h1766;
      261: out3 <= 16'h1720;
      262: out3 <= 16'h16da;
      263: out3 <= 16'h1693;
      264: out3 <= 16'h164c;
      265: out3 <= 16'h1606;
      266: out3 <= 16'h15bf;
      267: out3 <= 16'h1578;
      268: out3 <= 16'h1531;
      269: out3 <= 16'h14ea;
      270: out3 <= 16'h14a2;
      271: out3 <= 16'h145b;
      272: out3 <= 16'h1413;
      273: out3 <= 16'h13cc;
      274: out3 <= 16'h1384;
      275: out3 <= 16'h133c;
      276: out3 <= 16'h12f4;
      277: out3 <= 16'h12ac;
      278: out3 <= 16'h1264;
      279: out3 <= 16'h121c;
      280: out3 <= 16'h11d3;
      281: out3 <= 16'h118b;
      282: out3 <= 16'h1142;
      283: out3 <= 16'h10fa;
      284: out3 <= 16'h10b1;
      285: out3 <= 16'h1068;
      286: out3 <= 16'h101f;
      287: out3 <= 16'hfd6;
      288: out3 <= 16'hf8d;
      289: out3 <= 16'hf44;
      290: out3 <= 16'hefb;
      291: out3 <= 16'heb1;
      292: out3 <= 16'he68;
      293: out3 <= 16'he1e;
      294: out3 <= 16'hdd5;
      295: out3 <= 16'hd8b;
      296: out3 <= 16'hd41;
      297: out3 <= 16'hcf8;
      298: out3 <= 16'hcae;
      299: out3 <= 16'hc64;
      300: out3 <= 16'hc1a;
      301: out3 <= 16'hbd0;
      302: out3 <= 16'hb85;
      303: out3 <= 16'hb3b;
      304: out3 <= 16'haf1;
      305: out3 <= 16'haa7;
      306: out3 <= 16'ha5c;
      307: out3 <= 16'ha12;
      308: out3 <= 16'h9c7;
      309: out3 <= 16'h97d;
      310: out3 <= 16'h932;
      311: out3 <= 16'h8e8;
      312: out3 <= 16'h89d;
      313: out3 <= 16'h852;
      314: out3 <= 16'h807;
      315: out3 <= 16'h7bd;
      316: out3 <= 16'h772;
      317: out3 <= 16'h727;
      318: out3 <= 16'h6dc;
      319: out3 <= 16'h691;
      320: out3 <= 16'h646;
      321: out3 <= 16'h5fb;
      322: out3 <= 16'h5b0;
      323: out3 <= 16'h565;
      324: out3 <= 16'h51a;
      325: out3 <= 16'h4ce;
      326: out3 <= 16'h483;
      327: out3 <= 16'h438;
      328: out3 <= 16'h3ed;
      329: out3 <= 16'h3a1;
      330: out3 <= 16'h356;
      331: out3 <= 16'h30b;
      332: out3 <= 16'h2c0;
      333: out3 <= 16'h274;
      334: out3 <= 16'h229;
      335: out3 <= 16'h1dd;
      336: out3 <= 16'h192;
      337: out3 <= 16'h147;
      338: out3 <= 16'hfb;
      339: out3 <= 16'hb0;
      340: out3 <= 16'h65;
      341: out3 <= 16'h19;
      342: out3 <= 16'hffce;
      343: out3 <= 16'hff82;
      344: out3 <= 16'hff37;
      345: out3 <= 16'hfeec;
      346: out3 <= 16'hfea0;
      347: out3 <= 16'hfe55;
      348: out3 <= 16'hfe09;
      349: out3 <= 16'hfdbe;
      350: out3 <= 16'hfd73;
      351: out3 <= 16'hfd27;
      352: out3 <= 16'hfcdc;
      353: out3 <= 16'hfc91;
      354: out3 <= 16'hfc45;
      355: out3 <= 16'hfbfa;
      356: out3 <= 16'hfbaf;
      357: out3 <= 16'hfb64;
      358: out3 <= 16'hfb19;
      359: out3 <= 16'hfacd;
      360: out3 <= 16'hfa82;
      361: out3 <= 16'hfa37;
      362: out3 <= 16'hf9ec;
      363: out3 <= 16'hf9a1;
      364: out3 <= 16'hf956;
      365: out3 <= 16'hf90b;
      366: out3 <= 16'hf8c0;
      367: out3 <= 16'hf875;
      368: out3 <= 16'hf82a;
      369: out3 <= 16'hf7e0;
      370: out3 <= 16'hf795;
      371: out3 <= 16'hf74a;
      372: out3 <= 16'hf6ff;
      373: out3 <= 16'hf6b5;
      374: out3 <= 16'hf66a;
      375: out3 <= 16'hf620;
      376: out3 <= 16'hf5d5;
      377: out3 <= 16'hf58b;
      378: out3 <= 16'hf540;
      379: out3 <= 16'hf4f6;
      380: out3 <= 16'hf4ac;
      381: out3 <= 16'hf462;
      382: out3 <= 16'hf418;
      383: out3 <= 16'hf3ce;
      384: out3 <= 16'hf384;
      385: out3 <= 16'hf33a;
      386: out3 <= 16'hf2f0;
      387: out3 <= 16'hf2a6;
      388: out3 <= 16'hf25c;
      389: out3 <= 16'hf213;
      390: out3 <= 16'hf1c9;
      391: out3 <= 16'hf180;
      392: out3 <= 16'hf136;
      393: out3 <= 16'hf0ed;
      394: out3 <= 16'hf0a4;
      395: out3 <= 16'hf05b;
      396: out3 <= 16'hf012;
      397: out3 <= 16'hefc9;
      398: out3 <= 16'hef80;
      399: out3 <= 16'hef37;
      400: out3 <= 16'heeee;
      401: out3 <= 16'heea6;
      402: out3 <= 16'hee5d;
      403: out3 <= 16'hee15;
      404: out3 <= 16'hedcc;
      405: out3 <= 16'hed84;
      406: out3 <= 16'hed3c;
      407: out3 <= 16'hecf4;
      408: out3 <= 16'hecac;
      409: out3 <= 16'hec64;
      410: out3 <= 16'hec1c;
      411: out3 <= 16'hebd5;
      412: out3 <= 16'heb8d;
      413: out3 <= 16'heb46;
      414: out3 <= 16'heaff;
      415: out3 <= 16'heab7;
      416: out3 <= 16'hea70;
      417: out3 <= 16'hea29;
      418: out3 <= 16'he9e3;
      419: out3 <= 16'he99c;
      420: out3 <= 16'he955;
      421: out3 <= 16'he90f;
      422: out3 <= 16'he8c9;
      423: out3 <= 16'he882;
      424: out3 <= 16'he83c;
      425: out3 <= 16'he7f6;
      426: out3 <= 16'he7b1;
      427: out3 <= 16'he76b;
      428: out3 <= 16'he725;
      429: out3 <= 16'he6e0;
      430: out3 <= 16'he69b;
      431: out3 <= 16'he656;
      432: out3 <= 16'he611;
      433: out3 <= 16'he5cc;
      434: out3 <= 16'he587;
      435: out3 <= 16'he542;
      436: out3 <= 16'he4fe;
      437: out3 <= 16'he4ba;
      438: out3 <= 16'he476;
      439: out3 <= 16'he432;
      440: out3 <= 16'he3ee;
      441: out3 <= 16'he3aa;
      442: out3 <= 16'he367;
      443: out3 <= 16'he323;
      444: out3 <= 16'he2e0;
      445: out3 <= 16'he29d;
      446: out3 <= 16'he25a;
      447: out3 <= 16'he217;
      448: out3 <= 16'he1d5;
      449: out3 <= 16'he192;
      450: out3 <= 16'he150;
      451: out3 <= 16'he10e;
      452: out3 <= 16'he0cc;
      453: out3 <= 16'he08a;
      454: out3 <= 16'he049;
      455: out3 <= 16'he007;
      456: out3 <= 16'hdfc6;
      457: out3 <= 16'hdf85;
      458: out3 <= 16'hdf44;
      459: out3 <= 16'hdf03;
      460: out3 <= 16'hdec3;
      461: out3 <= 16'hde83;
      462: out3 <= 16'hde42;
      463: out3 <= 16'hde02;
      464: out3 <= 16'hddc3;
      465: out3 <= 16'hdd83;
      466: out3 <= 16'hdd44;
      467: out3 <= 16'hdd04;
      468: out3 <= 16'hdcc5;
      469: out3 <= 16'hdc86;
      470: out3 <= 16'hdc48;
      471: out3 <= 16'hdc09;
      472: out3 <= 16'hdbcb;
      473: out3 <= 16'hdb8d;
      474: out3 <= 16'hdb4f;
      475: out3 <= 16'hdb11;
      476: out3 <= 16'hdad4;
      477: out3 <= 16'hda97;
      478: out3 <= 16'hda5a;
      479: out3 <= 16'hda1d;
      480: out3 <= 16'hd9e0;
      481: out3 <= 16'hd9a4;
      482: out3 <= 16'hd967;
      483: out3 <= 16'hd92b;
      484: out3 <= 16'hd8ef;
      485: out3 <= 16'hd8b4;
      486: out3 <= 16'hd878;
      487: out3 <= 16'hd83d;
      488: out3 <= 16'hd802;
      489: out3 <= 16'hd7c8;
      490: out3 <= 16'hd78d;
      491: out3 <= 16'hd753;
      492: out3 <= 16'hd719;
      493: out3 <= 16'hd6df;
      494: out3 <= 16'hd6a5;
      495: out3 <= 16'hd66c;
      496: out3 <= 16'hd632;
      497: out3 <= 16'hd5f9;
      498: out3 <= 16'hd5c1;
      499: out3 <= 16'hd588;
      500: out3 <= 16'hd550;
      501: out3 <= 16'hd518;
      502: out3 <= 16'hd4e0;
      503: out3 <= 16'hd4a8;
      504: out3 <= 16'hd471;
      505: out3 <= 16'hd43a;
      506: out3 <= 16'hd403;
      507: out3 <= 16'hd3cc;
      508: out3 <= 16'hd396;
      509: out3 <= 16'hd360;
      510: out3 <= 16'hd32a;
      511: out3 <= 16'hd2f4;
      512: out3 <= 16'hd2bf;
      513: out3 <= 16'hd28a;
      514: out3 <= 16'hd255;
      515: out3 <= 16'hd220;
      516: out3 <= 16'hd1eb;
      517: out3 <= 16'hd1b7;
      518: out3 <= 16'hd183;
      519: out3 <= 16'hd150;
      520: out3 <= 16'hd11c;
      521: out3 <= 16'hd0e9;
      522: out3 <= 16'hd0b6;
      523: out3 <= 16'hd083;
      524: out3 <= 16'hd051;
      525: out3 <= 16'hd01f;
      526: out3 <= 16'hcfed;
      527: out3 <= 16'hcfbb;
      528: out3 <= 16'hcf8a;
      529: out3 <= 16'hcf59;
      530: out3 <= 16'hcf28;
      531: out3 <= 16'hcef7;
      532: out3 <= 16'hcec7;
      533: out3 <= 16'hce97;
      534: out3 <= 16'hce67;
      535: out3 <= 16'hce38;
      536: out3 <= 16'hce08;
      537: out3 <= 16'hcdd9;
      538: out3 <= 16'hcdab;
      539: out3 <= 16'hcd7c;
      540: out3 <= 16'hcd4e;
      541: out3 <= 16'hcd20;
      542: out3 <= 16'hccf3;
      543: out3 <= 16'hccc5;
      544: out3 <= 16'hcc98;
      545: out3 <= 16'hcc6b;
      546: out3 <= 16'hcc3f;
      547: out3 <= 16'hcc13;
      548: out3 <= 16'hcbe7;
      549: out3 <= 16'hcbbb;
      550: out3 <= 16'hcb90;
      551: out3 <= 16'hcb65;
      552: out3 <= 16'hcb3a;
      553: out3 <= 16'hcb0f;
      554: out3 <= 16'hcae5;
      555: out3 <= 16'hcabb;
      556: out3 <= 16'hca92;
      557: out3 <= 16'hca68;
      558: out3 <= 16'hca3f;
      559: out3 <= 16'hca16;
      560: out3 <= 16'hc9ee;
      561: out3 <= 16'hc9c6;
      562: out3 <= 16'hc99e;
      563: out3 <= 16'hc976;
      564: out3 <= 16'hc94f;
      565: out3 <= 16'hc928;
      566: out3 <= 16'hc901;
      567: out3 <= 16'hc8db;
      568: out3 <= 16'hc8b5;
      569: out3 <= 16'hc88f;
      570: out3 <= 16'hc869;
      571: out3 <= 16'hc844;
      572: out3 <= 16'hc81f;
      573: out3 <= 16'hc7fb;
      574: out3 <= 16'hc7d6;
      575: out3 <= 16'hc7b2;
      576: out3 <= 16'hc78f;
      577: out3 <= 16'hc76b;
      578: out3 <= 16'hc748;
      579: out3 <= 16'hc725;
      580: out3 <= 16'hc703;
      581: out3 <= 16'hc6e1;
      582: out3 <= 16'hc6bf;
      583: out3 <= 16'hc69d;
      584: out3 <= 16'hc67c;
      585: out3 <= 16'hc65b;
      586: out3 <= 16'hc63b;
      587: out3 <= 16'hc61a;
      588: out3 <= 16'hc5fa;
      589: out3 <= 16'hc5db;
      590: out3 <= 16'hc5bb;
      591: out3 <= 16'hc59c;
      592: out3 <= 16'hc57e;
      593: out3 <= 16'hc55f;
      594: out3 <= 16'hc541;
      595: out3 <= 16'hc523;
      596: out3 <= 16'hc506;
      597: out3 <= 16'hc4e9;
      598: out3 <= 16'hc4cc;
      599: out3 <= 16'hc4b0;
      600: out3 <= 16'hc493;
      601: out3 <= 16'hc478;
      602: out3 <= 16'hc45c;
      603: out3 <= 16'hc441;
      604: out3 <= 16'hc426;
      605: out3 <= 16'hc40b;
      606: out3 <= 16'hc3f1;
      607: out3 <= 16'hc3d7;
      608: out3 <= 16'hc3be;
      609: out3 <= 16'hc3a5;
      610: out3 <= 16'hc38c;
      611: out3 <= 16'hc373;
      612: out3 <= 16'hc35b;
      613: out3 <= 16'hc343;
      614: out3 <= 16'hc32b;
      615: out3 <= 16'hc314;
      616: out3 <= 16'hc2fd;
      617: out3 <= 16'hc2e6;
      618: out3 <= 16'hc2d0;
      619: out3 <= 16'hc2ba;
      620: out3 <= 16'hc2a5;
      621: out3 <= 16'hc28f;
      622: out3 <= 16'hc27a;
      623: out3 <= 16'hc266;
      624: out3 <= 16'hc251;
      625: out3 <= 16'hc23e;
      626: out3 <= 16'hc22a;
      627: out3 <= 16'hc217;
      628: out3 <= 16'hc204;
      629: out3 <= 16'hc1f1;
      630: out3 <= 16'hc1df;
      631: out3 <= 16'hc1cd;
      632: out3 <= 16'hc1bb;
      633: out3 <= 16'hc1aa;
      634: out3 <= 16'hc199;
      635: out3 <= 16'hc189;
      636: out3 <= 16'hc178;
      637: out3 <= 16'hc168;
      638: out3 <= 16'hc159;
      639: out3 <= 16'hc14a;
      640: out3 <= 16'hc13b;
      641: out3 <= 16'hc12c;
      642: out3 <= 16'hc11e;
      643: out3 <= 16'hc110;
      644: out3 <= 16'hc103;
      645: out3 <= 16'hc0f6;
      646: out3 <= 16'hc0e9;
      647: out3 <= 16'hc0dc;
      648: out3 <= 16'hc0d0;
      649: out3 <= 16'hc0c4;
      650: out3 <= 16'hc0b9;
      651: out3 <= 16'hc0ae;
      652: out3 <= 16'hc0a3;
      653: out3 <= 16'hc098;
      654: out3 <= 16'hc08e;
      655: out3 <= 16'hc085;
      656: out3 <= 16'hc07b;
      657: out3 <= 16'hc072;
      658: out3 <= 16'hc069;
      659: out3 <= 16'hc061;
      660: out3 <= 16'hc059;
      661: out3 <= 16'hc051;
      662: out3 <= 16'hc04a;
      663: out3 <= 16'hc043;
      664: out3 <= 16'hc03c;
      665: out3 <= 16'hc036;
      666: out3 <= 16'hc030;
      667: out3 <= 16'hc02b;
      668: out3 <= 16'hc025;
      669: out3 <= 16'hc020;
      670: out3 <= 16'hc01c;
      671: out3 <= 16'hc018;
      672: out3 <= 16'hc014;
      673: out3 <= 16'hc010;
      674: out3 <= 16'hc00d;
      675: out3 <= 16'hc00a;
      676: out3 <= 16'hc008;
      677: out3 <= 16'hc006;
      678: out3 <= 16'hc004;
      679: out3 <= 16'hc002;
      680: out3 <= 16'hc001;
      681: out3 <= 16'hc000;
      682: out3 <= 16'hc000;
      683: out3 <= 16'hc000;
      684: out3 <= 16'hc000;
      685: out3 <= 16'hc001;
      686: out3 <= 16'hc002;
      687: out3 <= 16'hc003;
      688: out3 <= 16'hc005;
      689: out3 <= 16'hc007;
      690: out3 <= 16'hc009;
      691: out3 <= 16'hc00c;
      692: out3 <= 16'hc00f;
      693: out3 <= 16'hc013;
      694: out3 <= 16'hc016;
      695: out3 <= 16'hc01a;
      696: out3 <= 16'hc01f;
      697: out3 <= 16'hc024;
      698: out3 <= 16'hc029;
      699: out3 <= 16'hc02e;
      700: out3 <= 16'hc034;
      701: out3 <= 16'hc03a;
      702: out3 <= 16'hc041;
      703: out3 <= 16'hc048;
      704: out3 <= 16'hc04f;
      705: out3 <= 16'hc056;
      706: out3 <= 16'hc05e;
      707: out3 <= 16'hc067;
      708: out3 <= 16'hc06f;
      709: out3 <= 16'hc078;
      710: out3 <= 16'hc081;
      711: out3 <= 16'hc08b;
      712: out3 <= 16'hc095;
      713: out3 <= 16'hc09f;
      714: out3 <= 16'hc0aa;
      715: out3 <= 16'hc0b5;
      716: out3 <= 16'hc0c0;
      717: out3 <= 16'hc0cc;
      718: out3 <= 16'hc0d8;
      719: out3 <= 16'hc0e4;
      720: out3 <= 16'hc0f1;
      721: out3 <= 16'hc0fe;
      722: out3 <= 16'hc10c;
      723: out3 <= 16'hc119;
      724: out3 <= 16'hc128;
      725: out3 <= 16'hc136;
      726: out3 <= 16'hc145;
      727: out3 <= 16'hc154;
      728: out3 <= 16'hc163;
      729: out3 <= 16'hc173;
      730: out3 <= 16'hc183;
      731: out3 <= 16'hc194;
      732: out3 <= 16'hc1a4;
      733: out3 <= 16'hc1b6;
      734: out3 <= 16'hc1c7;
      735: out3 <= 16'hc1d9;
      736: out3 <= 16'hc1eb;
      737: out3 <= 16'hc1fd;
      738: out3 <= 16'hc210;
      739: out3 <= 16'hc223;
      740: out3 <= 16'hc237;
      741: out3 <= 16'hc24b;
      742: out3 <= 16'hc25f;
      743: out3 <= 16'hc273;
      744: out3 <= 16'hc288;
      745: out3 <= 16'hc29d;
      746: out3 <= 16'hc2b3;
      747: out3 <= 16'hc2c9;
      748: out3 <= 16'hc2df;
      749: out3 <= 16'hc2f5;
      750: out3 <= 16'hc30c;
      751: out3 <= 16'hc323;
      752: out3 <= 16'hc33b;
      753: out3 <= 16'hc353;
      754: out3 <= 16'hc36b;
      755: out3 <= 16'hc383;
      756: out3 <= 16'hc39c;
      757: out3 <= 16'hc3b5;
      758: out3 <= 16'hc3cf;
      759: out3 <= 16'hc3e9;
      760: out3 <= 16'hc403;
      761: out3 <= 16'hc41d;
      762: out3 <= 16'hc438;
      763: out3 <= 16'hc453;
      764: out3 <= 16'hc46e;
      765: out3 <= 16'hc48a;
      766: out3 <= 16'hc4a6;
      767: out3 <= 16'hc4c2;
      768: out3 <= 16'hc4df;
      769: out3 <= 16'hc4fc;
      770: out3 <= 16'hc51a;
      771: out3 <= 16'hc537;
      772: out3 <= 16'hc555;
      773: out3 <= 16'hc573;
      774: out3 <= 16'hc592;
      775: out3 <= 16'hc5b1;
      776: out3 <= 16'hc5d0;
      777: out3 <= 16'hc5f0;
      778: out3 <= 16'hc610;
      779: out3 <= 16'hc630;
      780: out3 <= 16'hc650;
      781: out3 <= 16'hc671;
      782: out3 <= 16'hc692;
      783: out3 <= 16'hc6b4;
      784: out3 <= 16'hc6d5;
      785: out3 <= 16'hc6f7;
      786: out3 <= 16'hc71a;
      787: out3 <= 16'hc73d;
      788: out3 <= 16'hc75f;
      789: out3 <= 16'hc783;
      790: out3 <= 16'hc7a6;
      791: out3 <= 16'hc7ca;
      792: out3 <= 16'hc7ee;
      793: out3 <= 16'hc813;
      794: out3 <= 16'hc838;
      795: out3 <= 16'hc85d;
      796: out3 <= 16'hc882;
      797: out3 <= 16'hc8a8;
      798: out3 <= 16'hc8ce;
      799: out3 <= 16'hc8f4;
      800: out3 <= 16'hc91b;
      801: out3 <= 16'hc942;
      802: out3 <= 16'hc969;
      803: out3 <= 16'hc991;
      804: out3 <= 16'hc9b8;
      805: out3 <= 16'hc9e0;
      806: out3 <= 16'hca09;
      807: out3 <= 16'hca32;
      808: out3 <= 16'hca5b;
      809: out3 <= 16'hca84;
      810: out3 <= 16'hcaad;
      811: out3 <= 16'hcad7;
      812: out3 <= 16'hcb01;
      813: out3 <= 16'hcb2c;
      814: out3 <= 16'hcb56;
      815: out3 <= 16'hcb81;
      816: out3 <= 16'hcbad;
      817: out3 <= 16'hcbd8;
      818: out3 <= 16'hcc04;
      819: out3 <= 16'hcc30;
      820: out3 <= 16'hcc5d;
      821: out3 <= 16'hcc89;
      822: out3 <= 16'hccb6;
      823: out3 <= 16'hcce3;
      824: out3 <= 16'hcd11;
      825: out3 <= 16'hcd3f;
      826: out3 <= 16'hcd6d;
      827: out3 <= 16'hcd9b;
      828: out3 <= 16'hcdca;
      829: out3 <= 16'hcdf9;
      830: out3 <= 16'hce28;
      831: out3 <= 16'hce57;
      832: out3 <= 16'hce87;
      833: out3 <= 16'hceb7;
      834: out3 <= 16'hcee7;
      835: out3 <= 16'hcf18;
      836: out3 <= 16'hcf48;
      837: out3 <= 16'hcf79;
      838: out3 <= 16'hcfab;
      839: out3 <= 16'hcfdc;
      840: out3 <= 16'hd00e;
      841: out3 <= 16'hd040;
      842: out3 <= 16'hd073;
      843: out3 <= 16'hd0a5;
      844: out3 <= 16'hd0d8;
      845: out3 <= 16'hd10b;
      846: out3 <= 16'hd13e;
      847: out3 <= 16'hd172;
      848: out3 <= 16'hd1a6;
      849: out3 <= 16'hd1da;
      850: out3 <= 16'hd20e;
      851: out3 <= 16'hd243;
      852: out3 <= 16'hd278;
      853: out3 <= 16'hd2ad;
      854: out3 <= 16'hd2e2;
      855: out3 <= 16'hd318;
      856: out3 <= 16'hd34e;
      857: out3 <= 16'hd384;
      858: out3 <= 16'hd3ba;
      859: out3 <= 16'hd3f1;
      860: out3 <= 16'hd428;
      861: out3 <= 16'hd45f;
      862: out3 <= 16'hd496;
      863: out3 <= 16'hd4cd;
      864: out3 <= 16'hd505;
      865: out3 <= 16'hd53d;
      866: out3 <= 16'hd575;
      867: out3 <= 16'hd5ae;
      868: out3 <= 16'hd5e6;
      869: out3 <= 16'hd61f;
      870: out3 <= 16'hd659;
      871: out3 <= 16'hd692;
      872: out3 <= 16'hd6cb;
      873: out3 <= 16'hd705;
      874: out3 <= 16'hd73f;
      875: out3 <= 16'hd77a;
      876: out3 <= 16'hd7b4;
      877: out3 <= 16'hd7ef;
      878: out3 <= 16'hd82a;
      879: out3 <= 16'hd865;
      880: out3 <= 16'hd8a0;
      881: out3 <= 16'hd8dc;
      882: out3 <= 16'hd917;
      883: out3 <= 16'hd953;
      884: out3 <= 16'hd98f;
      885: out3 <= 16'hd9cc;
      886: out3 <= 16'hda08;
      887: out3 <= 16'hda45;
      888: out3 <= 16'hda82;
      889: out3 <= 16'hdabf;
      890: out3 <= 16'hdafd;
      891: out3 <= 16'hdb3b;
      892: out3 <= 16'hdb78;
      893: out3 <= 16'hdbb6;
      894: out3 <= 16'hdbf5;
      895: out3 <= 16'hdc33;
      896: out3 <= 16'hdc72;
      897: out3 <= 16'hdcb0;
      898: out3 <= 16'hdcef;
      899: out3 <= 16'hdd2e;
      900: out3 <= 16'hdd6e;
      901: out3 <= 16'hddad;
      902: out3 <= 16'hdded;
      903: out3 <= 16'hde2d;
      904: out3 <= 16'hde6d;
      905: out3 <= 16'hdead;
      906: out3 <= 16'hdeee;
      907: out3 <= 16'hdf2f;
      908: out3 <= 16'hdf6f;
      909: out3 <= 16'hdfb0;
      910: out3 <= 16'hdff1;
      911: out3 <= 16'he033;
      912: out3 <= 16'he074;
      913: out3 <= 16'he0b6;
      914: out3 <= 16'he0f8;
      915: out3 <= 16'he13a;
      916: out3 <= 16'he17c;
      917: out3 <= 16'he1be;
      918: out3 <= 16'he201;
      919: out3 <= 16'he244;
      920: out3 <= 16'he287;
      921: out3 <= 16'he2ca;
      922: out3 <= 16'he30d;
      923: out3 <= 16'he350;
      924: out3 <= 16'he394;
      925: out3 <= 16'he3d7;
      926: out3 <= 16'he41b;
      927: out3 <= 16'he45f;
      928: out3 <= 16'he4a3;
      929: out3 <= 16'he4e7;
      930: out3 <= 16'he52c;
      931: out3 <= 16'he570;
      932: out3 <= 16'he5b5;
      933: out3 <= 16'he5fa;
      934: out3 <= 16'he63f;
      935: out3 <= 16'he684;
      936: out3 <= 16'he6c9;
      937: out3 <= 16'he70e;
      938: out3 <= 16'he754;
      939: out3 <= 16'he799;
      940: out3 <= 16'he7df;
      941: out3 <= 16'he825;
      942: out3 <= 16'he86b;
      943: out3 <= 16'he8b1;
      944: out3 <= 16'he8f7;
      945: out3 <= 16'he93e;
      946: out3 <= 16'he984;
      947: out3 <= 16'he9cb;
      948: out3 <= 16'hea12;
      949: out3 <= 16'hea59;
      950: out3 <= 16'heaa0;
      951: out3 <= 16'heae7;
      952: out3 <= 16'heb2e;
      953: out3 <= 16'heb75;
      954: out3 <= 16'hebbd;
      955: out3 <= 16'hec05;
      956: out3 <= 16'hec4c;
      957: out3 <= 16'hec94;
      958: out3 <= 16'hecdc;
      959: out3 <= 16'hed24;
      960: out3 <= 16'hed6c;
      961: out3 <= 16'hedb4;
      962: out3 <= 16'hedfc;
      963: out3 <= 16'hee45;
      964: out3 <= 16'hee8d;
      965: out3 <= 16'heed6;
      966: out3 <= 16'hef1f;
      967: out3 <= 16'hef67;
      968: out3 <= 16'hefb0;
      969: out3 <= 16'heff9;
      970: out3 <= 16'hf042;
      971: out3 <= 16'hf08b;
      972: out3 <= 16'hf0d5;
      973: out3 <= 16'hf11e;
      974: out3 <= 16'hf167;
      975: out3 <= 16'hf1b1;
      976: out3 <= 16'hf1fa;
      977: out3 <= 16'hf244;
      978: out3 <= 16'hf28e;
      979: out3 <= 16'hf2d7;
      980: out3 <= 16'hf321;
      981: out3 <= 16'hf36b;
      982: out3 <= 16'hf3b5;
      983: out3 <= 16'hf3ff;
      984: out3 <= 16'hf449;
      985: out3 <= 16'hf493;
      986: out3 <= 16'hf4dd;
      987: out3 <= 16'hf528;
      988: out3 <= 16'hf572;
      989: out3 <= 16'hf5bc;
      990: out3 <= 16'hf607;
      991: out3 <= 16'hf651;
      992: out3 <= 16'hf69c;
      993: out3 <= 16'hf6e7;
      994: out3 <= 16'hf731;
      995: out3 <= 16'hf77c;
      996: out3 <= 16'hf7c7;
      997: out3 <= 16'hf811;
      998: out3 <= 16'hf85c;
      999: out3 <= 16'hf8a7;
      1000: out3 <= 16'hf8f2;
      1001: out3 <= 16'hf93d;
      1002: out3 <= 16'hf988;
      1003: out3 <= 16'hf9d3;
      1004: out3 <= 16'hfa1e;
      1005: out3 <= 16'hfa69;
      1006: out3 <= 16'hfab4;
      1007: out3 <= 16'hfb00;
      1008: out3 <= 16'hfb4b;
      1009: out3 <= 16'hfb96;
      1010: out3 <= 16'hfbe1;
      1011: out3 <= 16'hfc2c;
      1012: out3 <= 16'hfc78;
      1013: out3 <= 16'hfcc3;
      1014: out3 <= 16'hfd0e;
      1015: out3 <= 16'hfd5a;
      1016: out3 <= 16'hfda5;
      1017: out3 <= 16'hfdf0;
      1018: out3 <= 16'hfe3c;
      1019: out3 <= 16'hfe87;
      1020: out3 <= 16'hfed2;
      1021: out3 <= 16'hff1e;
      1022: out3 <= 16'hff69;
      1023: out3 <= 16'hffb5;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D13_102776(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [9:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h4000;
      2: out3 <= 16'h4000;
      3: out3 <= 16'h3fff;
      4: out3 <= 16'h3fff;
      5: out3 <= 16'h3ffe;
      6: out3 <= 16'h3ffd;
      7: out3 <= 16'h3ffc;
      8: out3 <= 16'h3ffb;
      9: out3 <= 16'h3ffa;
      10: out3 <= 16'h3ff8;
      11: out3 <= 16'h3ff7;
      12: out3 <= 16'h3ff5;
      13: out3 <= 16'h3ff3;
      14: out3 <= 16'h3ff1;
      15: out3 <= 16'h3fef;
      16: out3 <= 16'h3fec;
      17: out3 <= 16'h3fea;
      18: out3 <= 16'h3fe7;
      19: out3 <= 16'h3fe4;
      20: out3 <= 16'h3fe1;
      21: out3 <= 16'h3fde;
      22: out3 <= 16'h3fdb;
      23: out3 <= 16'h3fd7;
      24: out3 <= 16'h3fd4;
      25: out3 <= 16'h3fd0;
      26: out3 <= 16'h3fcc;
      27: out3 <= 16'h3fc8;
      28: out3 <= 16'h3fc4;
      29: out3 <= 16'h3fbf;
      30: out3 <= 16'h3fbb;
      31: out3 <= 16'h3fb6;
      32: out3 <= 16'h3fb1;
      33: out3 <= 16'h3fac;
      34: out3 <= 16'h3fa7;
      35: out3 <= 16'h3fa2;
      36: out3 <= 16'h3f9c;
      37: out3 <= 16'h3f97;
      38: out3 <= 16'h3f91;
      39: out3 <= 16'h3f8b;
      40: out3 <= 16'h3f85;
      41: out3 <= 16'h3f7f;
      42: out3 <= 16'h3f78;
      43: out3 <= 16'h3f72;
      44: out3 <= 16'h3f6b;
      45: out3 <= 16'h3f64;
      46: out3 <= 16'h3f5d;
      47: out3 <= 16'h3f56;
      48: out3 <= 16'h3f4f;
      49: out3 <= 16'h3f47;
      50: out3 <= 16'h3f40;
      51: out3 <= 16'h3f38;
      52: out3 <= 16'h3f30;
      53: out3 <= 16'h3f28;
      54: out3 <= 16'h3f20;
      55: out3 <= 16'h3f17;
      56: out3 <= 16'h3f0f;
      57: out3 <= 16'h3f06;
      58: out3 <= 16'h3efd;
      59: out3 <= 16'h3ef4;
      60: out3 <= 16'h3eeb;
      61: out3 <= 16'h3ee2;
      62: out3 <= 16'h3ed8;
      63: out3 <= 16'h3ecf;
      64: out3 <= 16'h3ec5;
      65: out3 <= 16'h3ebb;
      66: out3 <= 16'h3eb1;
      67: out3 <= 16'h3ea7;
      68: out3 <= 16'h3e9d;
      69: out3 <= 16'h3e92;
      70: out3 <= 16'h3e88;
      71: out3 <= 16'h3e7d;
      72: out3 <= 16'h3e72;
      73: out3 <= 16'h3e67;
      74: out3 <= 16'h3e5c;
      75: out3 <= 16'h3e50;
      76: out3 <= 16'h3e45;
      77: out3 <= 16'h3e39;
      78: out3 <= 16'h3e2d;
      79: out3 <= 16'h3e21;
      80: out3 <= 16'h3e15;
      81: out3 <= 16'h3e09;
      82: out3 <= 16'h3dfc;
      83: out3 <= 16'h3df0;
      84: out3 <= 16'h3de3;
      85: out3 <= 16'h3dd6;
      86: out3 <= 16'h3dc9;
      87: out3 <= 16'h3dbc;
      88: out3 <= 16'h3daf;
      89: out3 <= 16'h3da1;
      90: out3 <= 16'h3d93;
      91: out3 <= 16'h3d86;
      92: out3 <= 16'h3d78;
      93: out3 <= 16'h3d6a;
      94: out3 <= 16'h3d5b;
      95: out3 <= 16'h3d4d;
      96: out3 <= 16'h3d3f;
      97: out3 <= 16'h3d30;
      98: out3 <= 16'h3d21;
      99: out3 <= 16'h3d12;
      100: out3 <= 16'h3d03;
      101: out3 <= 16'h3cf4;
      102: out3 <= 16'h3ce4;
      103: out3 <= 16'h3cd5;
      104: out3 <= 16'h3cc5;
      105: out3 <= 16'h3cb5;
      106: out3 <= 16'h3ca5;
      107: out3 <= 16'h3c95;
      108: out3 <= 16'h3c85;
      109: out3 <= 16'h3c74;
      110: out3 <= 16'h3c64;
      111: out3 <= 16'h3c53;
      112: out3 <= 16'h3c42;
      113: out3 <= 16'h3c31;
      114: out3 <= 16'h3c20;
      115: out3 <= 16'h3c0f;
      116: out3 <= 16'h3bfd;
      117: out3 <= 16'h3bec;
      118: out3 <= 16'h3bda;
      119: out3 <= 16'h3bc8;
      120: out3 <= 16'h3bb6;
      121: out3 <= 16'h3ba4;
      122: out3 <= 16'h3b92;
      123: out3 <= 16'h3b7f;
      124: out3 <= 16'h3b6d;
      125: out3 <= 16'h3b5a;
      126: out3 <= 16'h3b47;
      127: out3 <= 16'h3b34;
      128: out3 <= 16'h3b21;
      129: out3 <= 16'h3b0e;
      130: out3 <= 16'h3afa;
      131: out3 <= 16'h3ae6;
      132: out3 <= 16'h3ad3;
      133: out3 <= 16'h3abf;
      134: out3 <= 16'h3aab;
      135: out3 <= 16'h3a97;
      136: out3 <= 16'h3a82;
      137: out3 <= 16'h3a6e;
      138: out3 <= 16'h3a59;
      139: out3 <= 16'h3a45;
      140: out3 <= 16'h3a30;
      141: out3 <= 16'h3a1b;
      142: out3 <= 16'h3a06;
      143: out3 <= 16'h39f0;
      144: out3 <= 16'h39db;
      145: out3 <= 16'h39c5;
      146: out3 <= 16'h39b0;
      147: out3 <= 16'h399a;
      148: out3 <= 16'h3984;
      149: out3 <= 16'h396e;
      150: out3 <= 16'h3958;
      151: out3 <= 16'h3941;
      152: out3 <= 16'h392b;
      153: out3 <= 16'h3914;
      154: out3 <= 16'h38fd;
      155: out3 <= 16'h38e6;
      156: out3 <= 16'h38cf;
      157: out3 <= 16'h38b8;
      158: out3 <= 16'h38a1;
      159: out3 <= 16'h3889;
      160: out3 <= 16'h3871;
      161: out3 <= 16'h385a;
      162: out3 <= 16'h3842;
      163: out3 <= 16'h382a;
      164: out3 <= 16'h3812;
      165: out3 <= 16'h37f9;
      166: out3 <= 16'h37e1;
      167: out3 <= 16'h37c8;
      168: out3 <= 16'h37b0;
      169: out3 <= 16'h3797;
      170: out3 <= 16'h377e;
      171: out3 <= 16'h3765;
      172: out3 <= 16'h374b;
      173: out3 <= 16'h3732;
      174: out3 <= 16'h3718;
      175: out3 <= 16'h36ff;
      176: out3 <= 16'h36e5;
      177: out3 <= 16'h36cb;
      178: out3 <= 16'h36b1;
      179: out3 <= 16'h3697;
      180: out3 <= 16'h367d;
      181: out3 <= 16'h3662;
      182: out3 <= 16'h3648;
      183: out3 <= 16'h362d;
      184: out3 <= 16'h3612;
      185: out3 <= 16'h35f7;
      186: out3 <= 16'h35dc;
      187: out3 <= 16'h35c1;
      188: out3 <= 16'h35a5;
      189: out3 <= 16'h358a;
      190: out3 <= 16'h356e;
      191: out3 <= 16'h3553;
      192: out3 <= 16'h3537;
      193: out3 <= 16'h351b;
      194: out3 <= 16'h34ff;
      195: out3 <= 16'h34e2;
      196: out3 <= 16'h34c6;
      197: out3 <= 16'h34aa;
      198: out3 <= 16'h348d;
      199: out3 <= 16'h3470;
      200: out3 <= 16'h3453;
      201: out3 <= 16'h3436;
      202: out3 <= 16'h3419;
      203: out3 <= 16'h33fc;
      204: out3 <= 16'h33df;
      205: out3 <= 16'h33c1;
      206: out3 <= 16'h33a3;
      207: out3 <= 16'h3386;
      208: out3 <= 16'h3368;
      209: out3 <= 16'h334a;
      210: out3 <= 16'h332c;
      211: out3 <= 16'h330d;
      212: out3 <= 16'h32ef;
      213: out3 <= 16'h32d0;
      214: out3 <= 16'h32b2;
      215: out3 <= 16'h3293;
      216: out3 <= 16'h3274;
      217: out3 <= 16'h3255;
      218: out3 <= 16'h3236;
      219: out3 <= 16'h3217;
      220: out3 <= 16'h31f8;
      221: out3 <= 16'h31d8;
      222: out3 <= 16'h31b9;
      223: out3 <= 16'h3199;
      224: out3 <= 16'h3179;
      225: out3 <= 16'h3159;
      226: out3 <= 16'h3139;
      227: out3 <= 16'h3119;
      228: out3 <= 16'h30f9;
      229: out3 <= 16'h30d8;
      230: out3 <= 16'h30b8;
      231: out3 <= 16'h3097;
      232: out3 <= 16'h3076;
      233: out3 <= 16'h3055;
      234: out3 <= 16'h3034;
      235: out3 <= 16'h3013;
      236: out3 <= 16'h2ff2;
      237: out3 <= 16'h2fd0;
      238: out3 <= 16'h2faf;
      239: out3 <= 16'h2f8d;
      240: out3 <= 16'h2f6c;
      241: out3 <= 16'h2f4a;
      242: out3 <= 16'h2f28;
      243: out3 <= 16'h2f06;
      244: out3 <= 16'h2ee4;
      245: out3 <= 16'h2ec2;
      246: out3 <= 16'h2e9f;
      247: out3 <= 16'h2e7d;
      248: out3 <= 16'h2e5a;
      249: out3 <= 16'h2e37;
      250: out3 <= 16'h2e15;
      251: out3 <= 16'h2df2;
      252: out3 <= 16'h2dcf;
      253: out3 <= 16'h2dab;
      254: out3 <= 16'h2d88;
      255: out3 <= 16'h2d65;
      256: out3 <= 16'h2d41;
      257: out3 <= 16'h2d1e;
      258: out3 <= 16'h2cfa;
      259: out3 <= 16'h2cd6;
      260: out3 <= 16'h2cb2;
      261: out3 <= 16'h2c8e;
      262: out3 <= 16'h2c6a;
      263: out3 <= 16'h2c46;
      264: out3 <= 16'h2c21;
      265: out3 <= 16'h2bfd;
      266: out3 <= 16'h2bd8;
      267: out3 <= 16'h2bb4;
      268: out3 <= 16'h2b8f;
      269: out3 <= 16'h2b6a;
      270: out3 <= 16'h2b45;
      271: out3 <= 16'h2b20;
      272: out3 <= 16'h2afb;
      273: out3 <= 16'h2ad6;
      274: out3 <= 16'h2ab0;
      275: out3 <= 16'h2a8b;
      276: out3 <= 16'h2a65;
      277: out3 <= 16'h2a3f;
      278: out3 <= 16'h2a1a;
      279: out3 <= 16'h29f4;
      280: out3 <= 16'h29ce;
      281: out3 <= 16'h29a7;
      282: out3 <= 16'h2981;
      283: out3 <= 16'h295b;
      284: out3 <= 16'h2935;
      285: out3 <= 16'h290e;
      286: out3 <= 16'h28e7;
      287: out3 <= 16'h28c1;
      288: out3 <= 16'h289a;
      289: out3 <= 16'h2873;
      290: out3 <= 16'h284c;
      291: out3 <= 16'h2825;
      292: out3 <= 16'h27fe;
      293: out3 <= 16'h27d6;
      294: out3 <= 16'h27af;
      295: out3 <= 16'h2788;
      296: out3 <= 16'h2760;
      297: out3 <= 16'h2738;
      298: out3 <= 16'h2711;
      299: out3 <= 16'h26e9;
      300: out3 <= 16'h26c1;
      301: out3 <= 16'h2699;
      302: out3 <= 16'h2671;
      303: out3 <= 16'h2648;
      304: out3 <= 16'h2620;
      305: out3 <= 16'h25f8;
      306: out3 <= 16'h25cf;
      307: out3 <= 16'h25a6;
      308: out3 <= 16'h257e;
      309: out3 <= 16'h2555;
      310: out3 <= 16'h252c;
      311: out3 <= 16'h2503;
      312: out3 <= 16'h24da;
      313: out3 <= 16'h24b1;
      314: out3 <= 16'h2488;
      315: out3 <= 16'h245e;
      316: out3 <= 16'h2435;
      317: out3 <= 16'h240b;
      318: out3 <= 16'h23e2;
      319: out3 <= 16'h23b8;
      320: out3 <= 16'h238e;
      321: out3 <= 16'h2365;
      322: out3 <= 16'h233b;
      323: out3 <= 16'h2311;
      324: out3 <= 16'h22e7;
      325: out3 <= 16'h22bc;
      326: out3 <= 16'h2292;
      327: out3 <= 16'h2268;
      328: out3 <= 16'h223d;
      329: out3 <= 16'h2213;
      330: out3 <= 16'h21e8;
      331: out3 <= 16'h21be;
      332: out3 <= 16'h2193;
      333: out3 <= 16'h2168;
      334: out3 <= 16'h213d;
      335: out3 <= 16'h2112;
      336: out3 <= 16'h20e7;
      337: out3 <= 16'h20bc;
      338: out3 <= 16'h2091;
      339: out3 <= 16'h2065;
      340: out3 <= 16'h203a;
      341: out3 <= 16'h200f;
      342: out3 <= 16'h1fe3;
      343: out3 <= 16'h1fb7;
      344: out3 <= 16'h1f8c;
      345: out3 <= 16'h1f60;
      346: out3 <= 16'h1f34;
      347: out3 <= 16'h1f08;
      348: out3 <= 16'h1edc;
      349: out3 <= 16'h1eb0;
      350: out3 <= 16'h1e84;
      351: out3 <= 16'h1e58;
      352: out3 <= 16'h1e2b;
      353: out3 <= 16'h1dff;
      354: out3 <= 16'h1dd3;
      355: out3 <= 16'h1da6;
      356: out3 <= 16'h1d79;
      357: out3 <= 16'h1d4d;
      358: out3 <= 16'h1d20;
      359: out3 <= 16'h1cf3;
      360: out3 <= 16'h1cc6;
      361: out3 <= 16'h1c99;
      362: out3 <= 16'h1c6c;
      363: out3 <= 16'h1c3f;
      364: out3 <= 16'h1c12;
      365: out3 <= 16'h1be5;
      366: out3 <= 16'h1bb8;
      367: out3 <= 16'h1b8a;
      368: out3 <= 16'h1b5d;
      369: out3 <= 16'h1b30;
      370: out3 <= 16'h1b02;
      371: out3 <= 16'h1ad4;
      372: out3 <= 16'h1aa7;
      373: out3 <= 16'h1a79;
      374: out3 <= 16'h1a4b;
      375: out3 <= 16'h1a1d;
      376: out3 <= 16'h19ef;
      377: out3 <= 16'h19c1;
      378: out3 <= 16'h1993;
      379: out3 <= 16'h1965;
      380: out3 <= 16'h1937;
      381: out3 <= 16'h1909;
      382: out3 <= 16'h18db;
      383: out3 <= 16'h18ac;
      384: out3 <= 16'h187e;
      385: out3 <= 16'h184f;
      386: out3 <= 16'h1821;
      387: out3 <= 16'h17f2;
      388: out3 <= 16'h17c4;
      389: out3 <= 16'h1795;
      390: out3 <= 16'h1766;
      391: out3 <= 16'h1737;
      392: out3 <= 16'h1709;
      393: out3 <= 16'h16da;
      394: out3 <= 16'h16ab;
      395: out3 <= 16'h167c;
      396: out3 <= 16'h164c;
      397: out3 <= 16'h161d;
      398: out3 <= 16'h15ee;
      399: out3 <= 16'h15bf;
      400: out3 <= 16'h1590;
      401: out3 <= 16'h1560;
      402: out3 <= 16'h1531;
      403: out3 <= 16'h1501;
      404: out3 <= 16'h14d2;
      405: out3 <= 16'h14a2;
      406: out3 <= 16'h1473;
      407: out3 <= 16'h1443;
      408: out3 <= 16'h1413;
      409: out3 <= 16'h13e4;
      410: out3 <= 16'h13b4;
      411: out3 <= 16'h1384;
      412: out3 <= 16'h1354;
      413: out3 <= 16'h1324;
      414: out3 <= 16'h12f4;
      415: out3 <= 16'h12c4;
      416: out3 <= 16'h1294;
      417: out3 <= 16'h1264;
      418: out3 <= 16'h1234;
      419: out3 <= 16'h1204;
      420: out3 <= 16'h11d3;
      421: out3 <= 16'h11a3;
      422: out3 <= 16'h1173;
      423: out3 <= 16'h1142;
      424: out3 <= 16'h1112;
      425: out3 <= 16'h10e1;
      426: out3 <= 16'h10b1;
      427: out3 <= 16'h1080;
      428: out3 <= 16'h1050;
      429: out3 <= 16'h101f;
      430: out3 <= 16'hfee;
      431: out3 <= 16'hfbe;
      432: out3 <= 16'hf8d;
      433: out3 <= 16'hf5c;
      434: out3 <= 16'hf2b;
      435: out3 <= 16'hefb;
      436: out3 <= 16'heca;
      437: out3 <= 16'he99;
      438: out3 <= 16'he68;
      439: out3 <= 16'he37;
      440: out3 <= 16'he06;
      441: out3 <= 16'hdd5;
      442: out3 <= 16'hda4;
      443: out3 <= 16'hd72;
      444: out3 <= 16'hd41;
      445: out3 <= 16'hd10;
      446: out3 <= 16'hcdf;
      447: out3 <= 16'hcae;
      448: out3 <= 16'hc7c;
      449: out3 <= 16'hc4b;
      450: out3 <= 16'hc1a;
      451: out3 <= 16'hbe8;
      452: out3 <= 16'hbb7;
      453: out3 <= 16'hb85;
      454: out3 <= 16'hb54;
      455: out3 <= 16'hb23;
      456: out3 <= 16'haf1;
      457: out3 <= 16'hac0;
      458: out3 <= 16'ha8e;
      459: out3 <= 16'ha5c;
      460: out3 <= 16'ha2b;
      461: out3 <= 16'h9f9;
      462: out3 <= 16'h9c7;
      463: out3 <= 16'h996;
      464: out3 <= 16'h964;
      465: out3 <= 16'h932;
      466: out3 <= 16'h901;
      467: out3 <= 16'h8cf;
      468: out3 <= 16'h89d;
      469: out3 <= 16'h86b;
      470: out3 <= 16'h839;
      471: out3 <= 16'h807;
      472: out3 <= 16'h7d6;
      473: out3 <= 16'h7a4;
      474: out3 <= 16'h772;
      475: out3 <= 16'h740;
      476: out3 <= 16'h70e;
      477: out3 <= 16'h6dc;
      478: out3 <= 16'h6aa;
      479: out3 <= 16'h678;
      480: out3 <= 16'h646;
      481: out3 <= 16'h614;
      482: out3 <= 16'h5e2;
      483: out3 <= 16'h5b0;
      484: out3 <= 16'h57e;
      485: out3 <= 16'h54c;
      486: out3 <= 16'h51a;
      487: out3 <= 16'h4e7;
      488: out3 <= 16'h4b5;
      489: out3 <= 16'h483;
      490: out3 <= 16'h451;
      491: out3 <= 16'h41f;
      492: out3 <= 16'h3ed;
      493: out3 <= 16'h3bb;
      494: out3 <= 16'h388;
      495: out3 <= 16'h356;
      496: out3 <= 16'h324;
      497: out3 <= 16'h2f2;
      498: out3 <= 16'h2c0;
      499: out3 <= 16'h28d;
      500: out3 <= 16'h25b;
      501: out3 <= 16'h229;
      502: out3 <= 16'h1f7;
      503: out3 <= 16'h1c4;
      504: out3 <= 16'h192;
      505: out3 <= 16'h160;
      506: out3 <= 16'h12e;
      507: out3 <= 16'hfb;
      508: out3 <= 16'hc9;
      509: out3 <= 16'h97;
      510: out3 <= 16'h65;
      511: out3 <= 16'h32;
      512: out3 <= 16'h0;
      513: out3 <= 16'hffce;
      514: out3 <= 16'hff9b;
      515: out3 <= 16'hff69;
      516: out3 <= 16'hff37;
      517: out3 <= 16'hff05;
      518: out3 <= 16'hfed2;
      519: out3 <= 16'hfea0;
      520: out3 <= 16'hfe6e;
      521: out3 <= 16'hfe3c;
      522: out3 <= 16'hfe09;
      523: out3 <= 16'hfdd7;
      524: out3 <= 16'hfda5;
      525: out3 <= 16'hfd73;
      526: out3 <= 16'hfd40;
      527: out3 <= 16'hfd0e;
      528: out3 <= 16'hfcdc;
      529: out3 <= 16'hfcaa;
      530: out3 <= 16'hfc78;
      531: out3 <= 16'hfc45;
      532: out3 <= 16'hfc13;
      533: out3 <= 16'hfbe1;
      534: out3 <= 16'hfbaf;
      535: out3 <= 16'hfb7d;
      536: out3 <= 16'hfb4b;
      537: out3 <= 16'hfb19;
      538: out3 <= 16'hfae6;
      539: out3 <= 16'hfab4;
      540: out3 <= 16'hfa82;
      541: out3 <= 16'hfa50;
      542: out3 <= 16'hfa1e;
      543: out3 <= 16'hf9ec;
      544: out3 <= 16'hf9ba;
      545: out3 <= 16'hf988;
      546: out3 <= 16'hf956;
      547: out3 <= 16'hf924;
      548: out3 <= 16'hf8f2;
      549: out3 <= 16'hf8c0;
      550: out3 <= 16'hf88e;
      551: out3 <= 16'hf85c;
      552: out3 <= 16'hf82a;
      553: out3 <= 16'hf7f9;
      554: out3 <= 16'hf7c7;
      555: out3 <= 16'hf795;
      556: out3 <= 16'hf763;
      557: out3 <= 16'hf731;
      558: out3 <= 16'hf6ff;
      559: out3 <= 16'hf6ce;
      560: out3 <= 16'hf69c;
      561: out3 <= 16'hf66a;
      562: out3 <= 16'hf639;
      563: out3 <= 16'hf607;
      564: out3 <= 16'hf5d5;
      565: out3 <= 16'hf5a4;
      566: out3 <= 16'hf572;
      567: out3 <= 16'hf540;
      568: out3 <= 16'hf50f;
      569: out3 <= 16'hf4dd;
      570: out3 <= 16'hf4ac;
      571: out3 <= 16'hf47b;
      572: out3 <= 16'hf449;
      573: out3 <= 16'hf418;
      574: out3 <= 16'hf3e6;
      575: out3 <= 16'hf3b5;
      576: out3 <= 16'hf384;
      577: out3 <= 16'hf352;
      578: out3 <= 16'hf321;
      579: out3 <= 16'hf2f0;
      580: out3 <= 16'hf2bf;
      581: out3 <= 16'hf28e;
      582: out3 <= 16'hf25c;
      583: out3 <= 16'hf22b;
      584: out3 <= 16'hf1fa;
      585: out3 <= 16'hf1c9;
      586: out3 <= 16'hf198;
      587: out3 <= 16'hf167;
      588: out3 <= 16'hf136;
      589: out3 <= 16'hf105;
      590: out3 <= 16'hf0d5;
      591: out3 <= 16'hf0a4;
      592: out3 <= 16'hf073;
      593: out3 <= 16'hf042;
      594: out3 <= 16'hf012;
      595: out3 <= 16'hefe1;
      596: out3 <= 16'hefb0;
      597: out3 <= 16'hef80;
      598: out3 <= 16'hef4f;
      599: out3 <= 16'hef1f;
      600: out3 <= 16'heeee;
      601: out3 <= 16'heebe;
      602: out3 <= 16'hee8d;
      603: out3 <= 16'hee5d;
      604: out3 <= 16'hee2d;
      605: out3 <= 16'hedfc;
      606: out3 <= 16'hedcc;
      607: out3 <= 16'hed9c;
      608: out3 <= 16'hed6c;
      609: out3 <= 16'hed3c;
      610: out3 <= 16'hed0c;
      611: out3 <= 16'hecdc;
      612: out3 <= 16'hecac;
      613: out3 <= 16'hec7c;
      614: out3 <= 16'hec4c;
      615: out3 <= 16'hec1c;
      616: out3 <= 16'hebed;
      617: out3 <= 16'hebbd;
      618: out3 <= 16'heb8d;
      619: out3 <= 16'heb5e;
      620: out3 <= 16'heb2e;
      621: out3 <= 16'heaff;
      622: out3 <= 16'heacf;
      623: out3 <= 16'heaa0;
      624: out3 <= 16'hea70;
      625: out3 <= 16'hea41;
      626: out3 <= 16'hea12;
      627: out3 <= 16'he9e3;
      628: out3 <= 16'he9b4;
      629: out3 <= 16'he984;
      630: out3 <= 16'he955;
      631: out3 <= 16'he926;
      632: out3 <= 16'he8f7;
      633: out3 <= 16'he8c9;
      634: out3 <= 16'he89a;
      635: out3 <= 16'he86b;
      636: out3 <= 16'he83c;
      637: out3 <= 16'he80e;
      638: out3 <= 16'he7df;
      639: out3 <= 16'he7b1;
      640: out3 <= 16'he782;
      641: out3 <= 16'he754;
      642: out3 <= 16'he725;
      643: out3 <= 16'he6f7;
      644: out3 <= 16'he6c9;
      645: out3 <= 16'he69b;
      646: out3 <= 16'he66d;
      647: out3 <= 16'he63f;
      648: out3 <= 16'he611;
      649: out3 <= 16'he5e3;
      650: out3 <= 16'he5b5;
      651: out3 <= 16'he587;
      652: out3 <= 16'he559;
      653: out3 <= 16'he52c;
      654: out3 <= 16'he4fe;
      655: out3 <= 16'he4d0;
      656: out3 <= 16'he4a3;
      657: out3 <= 16'he476;
      658: out3 <= 16'he448;
      659: out3 <= 16'he41b;
      660: out3 <= 16'he3ee;
      661: out3 <= 16'he3c1;
      662: out3 <= 16'he394;
      663: out3 <= 16'he367;
      664: out3 <= 16'he33a;
      665: out3 <= 16'he30d;
      666: out3 <= 16'he2e0;
      667: out3 <= 16'he2b3;
      668: out3 <= 16'he287;
      669: out3 <= 16'he25a;
      670: out3 <= 16'he22d;
      671: out3 <= 16'he201;
      672: out3 <= 16'he1d5;
      673: out3 <= 16'he1a8;
      674: out3 <= 16'he17c;
      675: out3 <= 16'he150;
      676: out3 <= 16'he124;
      677: out3 <= 16'he0f8;
      678: out3 <= 16'he0cc;
      679: out3 <= 16'he0a0;
      680: out3 <= 16'he074;
      681: out3 <= 16'he049;
      682: out3 <= 16'he01d;
      683: out3 <= 16'hdff1;
      684: out3 <= 16'hdfc6;
      685: out3 <= 16'hdf9b;
      686: out3 <= 16'hdf6f;
      687: out3 <= 16'hdf44;
      688: out3 <= 16'hdf19;
      689: out3 <= 16'hdeee;
      690: out3 <= 16'hdec3;
      691: out3 <= 16'hde98;
      692: out3 <= 16'hde6d;
      693: out3 <= 16'hde42;
      694: out3 <= 16'hde18;
      695: out3 <= 16'hdded;
      696: out3 <= 16'hddc3;
      697: out3 <= 16'hdd98;
      698: out3 <= 16'hdd6e;
      699: out3 <= 16'hdd44;
      700: out3 <= 16'hdd19;
      701: out3 <= 16'hdcef;
      702: out3 <= 16'hdcc5;
      703: out3 <= 16'hdc9b;
      704: out3 <= 16'hdc72;
      705: out3 <= 16'hdc48;
      706: out3 <= 16'hdc1e;
      707: out3 <= 16'hdbf5;
      708: out3 <= 16'hdbcb;
      709: out3 <= 16'hdba2;
      710: out3 <= 16'hdb78;
      711: out3 <= 16'hdb4f;
      712: out3 <= 16'hdb26;
      713: out3 <= 16'hdafd;
      714: out3 <= 16'hdad4;
      715: out3 <= 16'hdaab;
      716: out3 <= 16'hda82;
      717: out3 <= 16'hda5a;
      718: out3 <= 16'hda31;
      719: out3 <= 16'hda08;
      720: out3 <= 16'hd9e0;
      721: out3 <= 16'hd9b8;
      722: out3 <= 16'hd98f;
      723: out3 <= 16'hd967;
      724: out3 <= 16'hd93f;
      725: out3 <= 16'hd917;
      726: out3 <= 16'hd8ef;
      727: out3 <= 16'hd8c8;
      728: out3 <= 16'hd8a0;
      729: out3 <= 16'hd878;
      730: out3 <= 16'hd851;
      731: out3 <= 16'hd82a;
      732: out3 <= 16'hd802;
      733: out3 <= 16'hd7db;
      734: out3 <= 16'hd7b4;
      735: out3 <= 16'hd78d;
      736: out3 <= 16'hd766;
      737: out3 <= 16'hd73f;
      738: out3 <= 16'hd719;
      739: out3 <= 16'hd6f2;
      740: out3 <= 16'hd6cb;
      741: out3 <= 16'hd6a5;
      742: out3 <= 16'hd67f;
      743: out3 <= 16'hd659;
      744: out3 <= 16'hd632;
      745: out3 <= 16'hd60c;
      746: out3 <= 16'hd5e6;
      747: out3 <= 16'hd5c1;
      748: out3 <= 16'hd59b;
      749: out3 <= 16'hd575;
      750: out3 <= 16'hd550;
      751: out3 <= 16'hd52a;
      752: out3 <= 16'hd505;
      753: out3 <= 16'hd4e0;
      754: out3 <= 16'hd4bb;
      755: out3 <= 16'hd496;
      756: out3 <= 16'hd471;
      757: out3 <= 16'hd44c;
      758: out3 <= 16'hd428;
      759: out3 <= 16'hd403;
      760: out3 <= 16'hd3df;
      761: out3 <= 16'hd3ba;
      762: out3 <= 16'hd396;
      763: out3 <= 16'hd372;
      764: out3 <= 16'hd34e;
      765: out3 <= 16'hd32a;
      766: out3 <= 16'hd306;
      767: out3 <= 16'hd2e2;
      768: out3 <= 16'hd2bf;
      769: out3 <= 16'hd29b;
      770: out3 <= 16'hd278;
      771: out3 <= 16'hd255;
      772: out3 <= 16'hd231;
      773: out3 <= 16'hd20e;
      774: out3 <= 16'hd1eb;
      775: out3 <= 16'hd1c9;
      776: out3 <= 16'hd1a6;
      777: out3 <= 16'hd183;
      778: out3 <= 16'hd161;
      779: out3 <= 16'hd13e;
      780: out3 <= 16'hd11c;
      781: out3 <= 16'hd0fa;
      782: out3 <= 16'hd0d8;
      783: out3 <= 16'hd0b6;
      784: out3 <= 16'hd094;
      785: out3 <= 16'hd073;
      786: out3 <= 16'hd051;
      787: out3 <= 16'hd030;
      788: out3 <= 16'hd00e;
      789: out3 <= 16'hcfed;
      790: out3 <= 16'hcfcc;
      791: out3 <= 16'hcfab;
      792: out3 <= 16'hcf8a;
      793: out3 <= 16'hcf69;
      794: out3 <= 16'hcf48;
      795: out3 <= 16'hcf28;
      796: out3 <= 16'hcf07;
      797: out3 <= 16'hcee7;
      798: out3 <= 16'hcec7;
      799: out3 <= 16'hcea7;
      800: out3 <= 16'hce87;
      801: out3 <= 16'hce67;
      802: out3 <= 16'hce47;
      803: out3 <= 16'hce28;
      804: out3 <= 16'hce08;
      805: out3 <= 16'hcde9;
      806: out3 <= 16'hcdca;
      807: out3 <= 16'hcdab;
      808: out3 <= 16'hcd8c;
      809: out3 <= 16'hcd6d;
      810: out3 <= 16'hcd4e;
      811: out3 <= 16'hcd30;
      812: out3 <= 16'hcd11;
      813: out3 <= 16'hccf3;
      814: out3 <= 16'hccd4;
      815: out3 <= 16'hccb6;
      816: out3 <= 16'hcc98;
      817: out3 <= 16'hcc7a;
      818: out3 <= 16'hcc5d;
      819: out3 <= 16'hcc3f;
      820: out3 <= 16'hcc21;
      821: out3 <= 16'hcc04;
      822: out3 <= 16'hcbe7;
      823: out3 <= 16'hcbca;
      824: out3 <= 16'hcbad;
      825: out3 <= 16'hcb90;
      826: out3 <= 16'hcb73;
      827: out3 <= 16'hcb56;
      828: out3 <= 16'hcb3a;
      829: out3 <= 16'hcb1e;
      830: out3 <= 16'hcb01;
      831: out3 <= 16'hcae5;
      832: out3 <= 16'hcac9;
      833: out3 <= 16'hcaad;
      834: out3 <= 16'hca92;
      835: out3 <= 16'hca76;
      836: out3 <= 16'hca5b;
      837: out3 <= 16'hca3f;
      838: out3 <= 16'hca24;
      839: out3 <= 16'hca09;
      840: out3 <= 16'hc9ee;
      841: out3 <= 16'hc9d3;
      842: out3 <= 16'hc9b8;
      843: out3 <= 16'hc99e;
      844: out3 <= 16'hc983;
      845: out3 <= 16'hc969;
      846: out3 <= 16'hc94f;
      847: out3 <= 16'hc935;
      848: out3 <= 16'hc91b;
      849: out3 <= 16'hc901;
      850: out3 <= 16'hc8e8;
      851: out3 <= 16'hc8ce;
      852: out3 <= 16'hc8b5;
      853: out3 <= 16'hc89b;
      854: out3 <= 16'hc882;
      855: out3 <= 16'hc869;
      856: out3 <= 16'hc850;
      857: out3 <= 16'hc838;
      858: out3 <= 16'hc81f;
      859: out3 <= 16'hc807;
      860: out3 <= 16'hc7ee;
      861: out3 <= 16'hc7d6;
      862: out3 <= 16'hc7be;
      863: out3 <= 16'hc7a6;
      864: out3 <= 16'hc78f;
      865: out3 <= 16'hc777;
      866: out3 <= 16'hc75f;
      867: out3 <= 16'hc748;
      868: out3 <= 16'hc731;
      869: out3 <= 16'hc71a;
      870: out3 <= 16'hc703;
      871: out3 <= 16'hc6ec;
      872: out3 <= 16'hc6d5;
      873: out3 <= 16'hc6bf;
      874: out3 <= 16'hc6a8;
      875: out3 <= 16'hc692;
      876: out3 <= 16'hc67c;
      877: out3 <= 16'hc666;
      878: out3 <= 16'hc650;
      879: out3 <= 16'hc63b;
      880: out3 <= 16'hc625;
      881: out3 <= 16'hc610;
      882: out3 <= 16'hc5fa;
      883: out3 <= 16'hc5e5;
      884: out3 <= 16'hc5d0;
      885: out3 <= 16'hc5bb;
      886: out3 <= 16'hc5a7;
      887: out3 <= 16'hc592;
      888: out3 <= 16'hc57e;
      889: out3 <= 16'hc569;
      890: out3 <= 16'hc555;
      891: out3 <= 16'hc541;
      892: out3 <= 16'hc52d;
      893: out3 <= 16'hc51a;
      894: out3 <= 16'hc506;
      895: out3 <= 16'hc4f2;
      896: out3 <= 16'hc4df;
      897: out3 <= 16'hc4cc;
      898: out3 <= 16'hc4b9;
      899: out3 <= 16'hc4a6;
      900: out3 <= 16'hc493;
      901: out3 <= 16'hc481;
      902: out3 <= 16'hc46e;
      903: out3 <= 16'hc45c;
      904: out3 <= 16'hc44a;
      905: out3 <= 16'hc438;
      906: out3 <= 16'hc426;
      907: out3 <= 16'hc414;
      908: out3 <= 16'hc403;
      909: out3 <= 16'hc3f1;
      910: out3 <= 16'hc3e0;
      911: out3 <= 16'hc3cf;
      912: out3 <= 16'hc3be;
      913: out3 <= 16'hc3ad;
      914: out3 <= 16'hc39c;
      915: out3 <= 16'hc38c;
      916: out3 <= 16'hc37b;
      917: out3 <= 16'hc36b;
      918: out3 <= 16'hc35b;
      919: out3 <= 16'hc34b;
      920: out3 <= 16'hc33b;
      921: out3 <= 16'hc32b;
      922: out3 <= 16'hc31c;
      923: out3 <= 16'hc30c;
      924: out3 <= 16'hc2fd;
      925: out3 <= 16'hc2ee;
      926: out3 <= 16'hc2df;
      927: out3 <= 16'hc2d0;
      928: out3 <= 16'hc2c1;
      929: out3 <= 16'hc2b3;
      930: out3 <= 16'hc2a5;
      931: out3 <= 16'hc296;
      932: out3 <= 16'hc288;
      933: out3 <= 16'hc27a;
      934: out3 <= 16'hc26d;
      935: out3 <= 16'hc25f;
      936: out3 <= 16'hc251;
      937: out3 <= 16'hc244;
      938: out3 <= 16'hc237;
      939: out3 <= 16'hc22a;
      940: out3 <= 16'hc21d;
      941: out3 <= 16'hc210;
      942: out3 <= 16'hc204;
      943: out3 <= 16'hc1f7;
      944: out3 <= 16'hc1eb;
      945: out3 <= 16'hc1df;
      946: out3 <= 16'hc1d3;
      947: out3 <= 16'hc1c7;
      948: out3 <= 16'hc1bb;
      949: out3 <= 16'hc1b0;
      950: out3 <= 16'hc1a4;
      951: out3 <= 16'hc199;
      952: out3 <= 16'hc18e;
      953: out3 <= 16'hc183;
      954: out3 <= 16'hc178;
      955: out3 <= 16'hc16e;
      956: out3 <= 16'hc163;
      957: out3 <= 16'hc159;
      958: out3 <= 16'hc14f;
      959: out3 <= 16'hc145;
      960: out3 <= 16'hc13b;
      961: out3 <= 16'hc131;
      962: out3 <= 16'hc128;
      963: out3 <= 16'hc11e;
      964: out3 <= 16'hc115;
      965: out3 <= 16'hc10c;
      966: out3 <= 16'hc103;
      967: out3 <= 16'hc0fa;
      968: out3 <= 16'hc0f1;
      969: out3 <= 16'hc0e9;
      970: out3 <= 16'hc0e0;
      971: out3 <= 16'hc0d8;
      972: out3 <= 16'hc0d0;
      973: out3 <= 16'hc0c8;
      974: out3 <= 16'hc0c0;
      975: out3 <= 16'hc0b9;
      976: out3 <= 16'hc0b1;
      977: out3 <= 16'hc0aa;
      978: out3 <= 16'hc0a3;
      979: out3 <= 16'hc09c;
      980: out3 <= 16'hc095;
      981: out3 <= 16'hc08e;
      982: out3 <= 16'hc088;
      983: out3 <= 16'hc081;
      984: out3 <= 16'hc07b;
      985: out3 <= 16'hc075;
      986: out3 <= 16'hc06f;
      987: out3 <= 16'hc069;
      988: out3 <= 16'hc064;
      989: out3 <= 16'hc05e;
      990: out3 <= 16'hc059;
      991: out3 <= 16'hc054;
      992: out3 <= 16'hc04f;
      993: out3 <= 16'hc04a;
      994: out3 <= 16'hc045;
      995: out3 <= 16'hc041;
      996: out3 <= 16'hc03c;
      997: out3 <= 16'hc038;
      998: out3 <= 16'hc034;
      999: out3 <= 16'hc030;
      1000: out3 <= 16'hc02c;
      1001: out3 <= 16'hc029;
      1002: out3 <= 16'hc025;
      1003: out3 <= 16'hc022;
      1004: out3 <= 16'hc01f;
      1005: out3 <= 16'hc01c;
      1006: out3 <= 16'hc019;
      1007: out3 <= 16'hc016;
      1008: out3 <= 16'hc014;
      1009: out3 <= 16'hc011;
      1010: out3 <= 16'hc00f;
      1011: out3 <= 16'hc00d;
      1012: out3 <= 16'hc00b;
      1013: out3 <= 16'hc009;
      1014: out3 <= 16'hc008;
      1015: out3 <= 16'hc006;
      1016: out3 <= 16'hc005;
      1017: out3 <= 16'hc004;
      1018: out3 <= 16'hc003;
      1019: out3 <= 16'hc002;
      1020: out3 <= 16'hc001;
      1021: out3 <= 16'hc001;
      1022: out3 <= 16'hc000;
      1023: out3 <= 16'hc000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D17_103802(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [9:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hffce;
      2: out3 <= 16'hff9b;
      3: out3 <= 16'hff69;
      4: out3 <= 16'hff37;
      5: out3 <= 16'hff05;
      6: out3 <= 16'hfed2;
      7: out3 <= 16'hfea0;
      8: out3 <= 16'hfe6e;
      9: out3 <= 16'hfe3c;
      10: out3 <= 16'hfe09;
      11: out3 <= 16'hfdd7;
      12: out3 <= 16'hfda5;
      13: out3 <= 16'hfd73;
      14: out3 <= 16'hfd40;
      15: out3 <= 16'hfd0e;
      16: out3 <= 16'hfcdc;
      17: out3 <= 16'hfcaa;
      18: out3 <= 16'hfc78;
      19: out3 <= 16'hfc45;
      20: out3 <= 16'hfc13;
      21: out3 <= 16'hfbe1;
      22: out3 <= 16'hfbaf;
      23: out3 <= 16'hfb7d;
      24: out3 <= 16'hfb4b;
      25: out3 <= 16'hfb19;
      26: out3 <= 16'hfae6;
      27: out3 <= 16'hfab4;
      28: out3 <= 16'hfa82;
      29: out3 <= 16'hfa50;
      30: out3 <= 16'hfa1e;
      31: out3 <= 16'hf9ec;
      32: out3 <= 16'hf9ba;
      33: out3 <= 16'hf988;
      34: out3 <= 16'hf956;
      35: out3 <= 16'hf924;
      36: out3 <= 16'hf8f2;
      37: out3 <= 16'hf8c0;
      38: out3 <= 16'hf88e;
      39: out3 <= 16'hf85c;
      40: out3 <= 16'hf82a;
      41: out3 <= 16'hf7f9;
      42: out3 <= 16'hf7c7;
      43: out3 <= 16'hf795;
      44: out3 <= 16'hf763;
      45: out3 <= 16'hf731;
      46: out3 <= 16'hf6ff;
      47: out3 <= 16'hf6ce;
      48: out3 <= 16'hf69c;
      49: out3 <= 16'hf66a;
      50: out3 <= 16'hf639;
      51: out3 <= 16'hf607;
      52: out3 <= 16'hf5d5;
      53: out3 <= 16'hf5a4;
      54: out3 <= 16'hf572;
      55: out3 <= 16'hf540;
      56: out3 <= 16'hf50f;
      57: out3 <= 16'hf4dd;
      58: out3 <= 16'hf4ac;
      59: out3 <= 16'hf47b;
      60: out3 <= 16'hf449;
      61: out3 <= 16'hf418;
      62: out3 <= 16'hf3e6;
      63: out3 <= 16'hf3b5;
      64: out3 <= 16'hf384;
      65: out3 <= 16'hf352;
      66: out3 <= 16'hf321;
      67: out3 <= 16'hf2f0;
      68: out3 <= 16'hf2bf;
      69: out3 <= 16'hf28e;
      70: out3 <= 16'hf25c;
      71: out3 <= 16'hf22b;
      72: out3 <= 16'hf1fa;
      73: out3 <= 16'hf1c9;
      74: out3 <= 16'hf198;
      75: out3 <= 16'hf167;
      76: out3 <= 16'hf136;
      77: out3 <= 16'hf105;
      78: out3 <= 16'hf0d5;
      79: out3 <= 16'hf0a4;
      80: out3 <= 16'hf073;
      81: out3 <= 16'hf042;
      82: out3 <= 16'hf012;
      83: out3 <= 16'hefe1;
      84: out3 <= 16'hefb0;
      85: out3 <= 16'hef80;
      86: out3 <= 16'hef4f;
      87: out3 <= 16'hef1f;
      88: out3 <= 16'heeee;
      89: out3 <= 16'heebe;
      90: out3 <= 16'hee8d;
      91: out3 <= 16'hee5d;
      92: out3 <= 16'hee2d;
      93: out3 <= 16'hedfc;
      94: out3 <= 16'hedcc;
      95: out3 <= 16'hed9c;
      96: out3 <= 16'hed6c;
      97: out3 <= 16'hed3c;
      98: out3 <= 16'hed0c;
      99: out3 <= 16'hecdc;
      100: out3 <= 16'hecac;
      101: out3 <= 16'hec7c;
      102: out3 <= 16'hec4c;
      103: out3 <= 16'hec1c;
      104: out3 <= 16'hebed;
      105: out3 <= 16'hebbd;
      106: out3 <= 16'heb8d;
      107: out3 <= 16'heb5e;
      108: out3 <= 16'heb2e;
      109: out3 <= 16'heaff;
      110: out3 <= 16'heacf;
      111: out3 <= 16'heaa0;
      112: out3 <= 16'hea70;
      113: out3 <= 16'hea41;
      114: out3 <= 16'hea12;
      115: out3 <= 16'he9e3;
      116: out3 <= 16'he9b4;
      117: out3 <= 16'he984;
      118: out3 <= 16'he955;
      119: out3 <= 16'he926;
      120: out3 <= 16'he8f7;
      121: out3 <= 16'he8c9;
      122: out3 <= 16'he89a;
      123: out3 <= 16'he86b;
      124: out3 <= 16'he83c;
      125: out3 <= 16'he80e;
      126: out3 <= 16'he7df;
      127: out3 <= 16'he7b1;
      128: out3 <= 16'he782;
      129: out3 <= 16'he754;
      130: out3 <= 16'he725;
      131: out3 <= 16'he6f7;
      132: out3 <= 16'he6c9;
      133: out3 <= 16'he69b;
      134: out3 <= 16'he66d;
      135: out3 <= 16'he63f;
      136: out3 <= 16'he611;
      137: out3 <= 16'he5e3;
      138: out3 <= 16'he5b5;
      139: out3 <= 16'he587;
      140: out3 <= 16'he559;
      141: out3 <= 16'he52c;
      142: out3 <= 16'he4fe;
      143: out3 <= 16'he4d0;
      144: out3 <= 16'he4a3;
      145: out3 <= 16'he476;
      146: out3 <= 16'he448;
      147: out3 <= 16'he41b;
      148: out3 <= 16'he3ee;
      149: out3 <= 16'he3c1;
      150: out3 <= 16'he394;
      151: out3 <= 16'he367;
      152: out3 <= 16'he33a;
      153: out3 <= 16'he30d;
      154: out3 <= 16'he2e0;
      155: out3 <= 16'he2b3;
      156: out3 <= 16'he287;
      157: out3 <= 16'he25a;
      158: out3 <= 16'he22d;
      159: out3 <= 16'he201;
      160: out3 <= 16'he1d5;
      161: out3 <= 16'he1a8;
      162: out3 <= 16'he17c;
      163: out3 <= 16'he150;
      164: out3 <= 16'he124;
      165: out3 <= 16'he0f8;
      166: out3 <= 16'he0cc;
      167: out3 <= 16'he0a0;
      168: out3 <= 16'he074;
      169: out3 <= 16'he049;
      170: out3 <= 16'he01d;
      171: out3 <= 16'hdff1;
      172: out3 <= 16'hdfc6;
      173: out3 <= 16'hdf9b;
      174: out3 <= 16'hdf6f;
      175: out3 <= 16'hdf44;
      176: out3 <= 16'hdf19;
      177: out3 <= 16'hdeee;
      178: out3 <= 16'hdec3;
      179: out3 <= 16'hde98;
      180: out3 <= 16'hde6d;
      181: out3 <= 16'hde42;
      182: out3 <= 16'hde18;
      183: out3 <= 16'hdded;
      184: out3 <= 16'hddc3;
      185: out3 <= 16'hdd98;
      186: out3 <= 16'hdd6e;
      187: out3 <= 16'hdd44;
      188: out3 <= 16'hdd19;
      189: out3 <= 16'hdcef;
      190: out3 <= 16'hdcc5;
      191: out3 <= 16'hdc9b;
      192: out3 <= 16'hdc72;
      193: out3 <= 16'hdc48;
      194: out3 <= 16'hdc1e;
      195: out3 <= 16'hdbf5;
      196: out3 <= 16'hdbcb;
      197: out3 <= 16'hdba2;
      198: out3 <= 16'hdb78;
      199: out3 <= 16'hdb4f;
      200: out3 <= 16'hdb26;
      201: out3 <= 16'hdafd;
      202: out3 <= 16'hdad4;
      203: out3 <= 16'hdaab;
      204: out3 <= 16'hda82;
      205: out3 <= 16'hda5a;
      206: out3 <= 16'hda31;
      207: out3 <= 16'hda08;
      208: out3 <= 16'hd9e0;
      209: out3 <= 16'hd9b8;
      210: out3 <= 16'hd98f;
      211: out3 <= 16'hd967;
      212: out3 <= 16'hd93f;
      213: out3 <= 16'hd917;
      214: out3 <= 16'hd8ef;
      215: out3 <= 16'hd8c8;
      216: out3 <= 16'hd8a0;
      217: out3 <= 16'hd878;
      218: out3 <= 16'hd851;
      219: out3 <= 16'hd82a;
      220: out3 <= 16'hd802;
      221: out3 <= 16'hd7db;
      222: out3 <= 16'hd7b4;
      223: out3 <= 16'hd78d;
      224: out3 <= 16'hd766;
      225: out3 <= 16'hd73f;
      226: out3 <= 16'hd719;
      227: out3 <= 16'hd6f2;
      228: out3 <= 16'hd6cb;
      229: out3 <= 16'hd6a5;
      230: out3 <= 16'hd67f;
      231: out3 <= 16'hd659;
      232: out3 <= 16'hd632;
      233: out3 <= 16'hd60c;
      234: out3 <= 16'hd5e6;
      235: out3 <= 16'hd5c1;
      236: out3 <= 16'hd59b;
      237: out3 <= 16'hd575;
      238: out3 <= 16'hd550;
      239: out3 <= 16'hd52a;
      240: out3 <= 16'hd505;
      241: out3 <= 16'hd4e0;
      242: out3 <= 16'hd4bb;
      243: out3 <= 16'hd496;
      244: out3 <= 16'hd471;
      245: out3 <= 16'hd44c;
      246: out3 <= 16'hd428;
      247: out3 <= 16'hd403;
      248: out3 <= 16'hd3df;
      249: out3 <= 16'hd3ba;
      250: out3 <= 16'hd396;
      251: out3 <= 16'hd372;
      252: out3 <= 16'hd34e;
      253: out3 <= 16'hd32a;
      254: out3 <= 16'hd306;
      255: out3 <= 16'hd2e2;
      256: out3 <= 16'hd2bf;
      257: out3 <= 16'hd29b;
      258: out3 <= 16'hd278;
      259: out3 <= 16'hd255;
      260: out3 <= 16'hd231;
      261: out3 <= 16'hd20e;
      262: out3 <= 16'hd1eb;
      263: out3 <= 16'hd1c9;
      264: out3 <= 16'hd1a6;
      265: out3 <= 16'hd183;
      266: out3 <= 16'hd161;
      267: out3 <= 16'hd13e;
      268: out3 <= 16'hd11c;
      269: out3 <= 16'hd0fa;
      270: out3 <= 16'hd0d8;
      271: out3 <= 16'hd0b6;
      272: out3 <= 16'hd094;
      273: out3 <= 16'hd073;
      274: out3 <= 16'hd051;
      275: out3 <= 16'hd030;
      276: out3 <= 16'hd00e;
      277: out3 <= 16'hcfed;
      278: out3 <= 16'hcfcc;
      279: out3 <= 16'hcfab;
      280: out3 <= 16'hcf8a;
      281: out3 <= 16'hcf69;
      282: out3 <= 16'hcf48;
      283: out3 <= 16'hcf28;
      284: out3 <= 16'hcf07;
      285: out3 <= 16'hcee7;
      286: out3 <= 16'hcec7;
      287: out3 <= 16'hcea7;
      288: out3 <= 16'hce87;
      289: out3 <= 16'hce67;
      290: out3 <= 16'hce47;
      291: out3 <= 16'hce28;
      292: out3 <= 16'hce08;
      293: out3 <= 16'hcde9;
      294: out3 <= 16'hcdca;
      295: out3 <= 16'hcdab;
      296: out3 <= 16'hcd8c;
      297: out3 <= 16'hcd6d;
      298: out3 <= 16'hcd4e;
      299: out3 <= 16'hcd30;
      300: out3 <= 16'hcd11;
      301: out3 <= 16'hccf3;
      302: out3 <= 16'hccd4;
      303: out3 <= 16'hccb6;
      304: out3 <= 16'hcc98;
      305: out3 <= 16'hcc7a;
      306: out3 <= 16'hcc5d;
      307: out3 <= 16'hcc3f;
      308: out3 <= 16'hcc21;
      309: out3 <= 16'hcc04;
      310: out3 <= 16'hcbe7;
      311: out3 <= 16'hcbca;
      312: out3 <= 16'hcbad;
      313: out3 <= 16'hcb90;
      314: out3 <= 16'hcb73;
      315: out3 <= 16'hcb56;
      316: out3 <= 16'hcb3a;
      317: out3 <= 16'hcb1e;
      318: out3 <= 16'hcb01;
      319: out3 <= 16'hcae5;
      320: out3 <= 16'hcac9;
      321: out3 <= 16'hcaad;
      322: out3 <= 16'hca92;
      323: out3 <= 16'hca76;
      324: out3 <= 16'hca5b;
      325: out3 <= 16'hca3f;
      326: out3 <= 16'hca24;
      327: out3 <= 16'hca09;
      328: out3 <= 16'hc9ee;
      329: out3 <= 16'hc9d3;
      330: out3 <= 16'hc9b8;
      331: out3 <= 16'hc99e;
      332: out3 <= 16'hc983;
      333: out3 <= 16'hc969;
      334: out3 <= 16'hc94f;
      335: out3 <= 16'hc935;
      336: out3 <= 16'hc91b;
      337: out3 <= 16'hc901;
      338: out3 <= 16'hc8e8;
      339: out3 <= 16'hc8ce;
      340: out3 <= 16'hc8b5;
      341: out3 <= 16'hc89b;
      342: out3 <= 16'hc882;
      343: out3 <= 16'hc869;
      344: out3 <= 16'hc850;
      345: out3 <= 16'hc838;
      346: out3 <= 16'hc81f;
      347: out3 <= 16'hc807;
      348: out3 <= 16'hc7ee;
      349: out3 <= 16'hc7d6;
      350: out3 <= 16'hc7be;
      351: out3 <= 16'hc7a6;
      352: out3 <= 16'hc78f;
      353: out3 <= 16'hc777;
      354: out3 <= 16'hc75f;
      355: out3 <= 16'hc748;
      356: out3 <= 16'hc731;
      357: out3 <= 16'hc71a;
      358: out3 <= 16'hc703;
      359: out3 <= 16'hc6ec;
      360: out3 <= 16'hc6d5;
      361: out3 <= 16'hc6bf;
      362: out3 <= 16'hc6a8;
      363: out3 <= 16'hc692;
      364: out3 <= 16'hc67c;
      365: out3 <= 16'hc666;
      366: out3 <= 16'hc650;
      367: out3 <= 16'hc63b;
      368: out3 <= 16'hc625;
      369: out3 <= 16'hc610;
      370: out3 <= 16'hc5fa;
      371: out3 <= 16'hc5e5;
      372: out3 <= 16'hc5d0;
      373: out3 <= 16'hc5bb;
      374: out3 <= 16'hc5a7;
      375: out3 <= 16'hc592;
      376: out3 <= 16'hc57e;
      377: out3 <= 16'hc569;
      378: out3 <= 16'hc555;
      379: out3 <= 16'hc541;
      380: out3 <= 16'hc52d;
      381: out3 <= 16'hc51a;
      382: out3 <= 16'hc506;
      383: out3 <= 16'hc4f2;
      384: out3 <= 16'hc4df;
      385: out3 <= 16'hc4cc;
      386: out3 <= 16'hc4b9;
      387: out3 <= 16'hc4a6;
      388: out3 <= 16'hc493;
      389: out3 <= 16'hc481;
      390: out3 <= 16'hc46e;
      391: out3 <= 16'hc45c;
      392: out3 <= 16'hc44a;
      393: out3 <= 16'hc438;
      394: out3 <= 16'hc426;
      395: out3 <= 16'hc414;
      396: out3 <= 16'hc403;
      397: out3 <= 16'hc3f1;
      398: out3 <= 16'hc3e0;
      399: out3 <= 16'hc3cf;
      400: out3 <= 16'hc3be;
      401: out3 <= 16'hc3ad;
      402: out3 <= 16'hc39c;
      403: out3 <= 16'hc38c;
      404: out3 <= 16'hc37b;
      405: out3 <= 16'hc36b;
      406: out3 <= 16'hc35b;
      407: out3 <= 16'hc34b;
      408: out3 <= 16'hc33b;
      409: out3 <= 16'hc32b;
      410: out3 <= 16'hc31c;
      411: out3 <= 16'hc30c;
      412: out3 <= 16'hc2fd;
      413: out3 <= 16'hc2ee;
      414: out3 <= 16'hc2df;
      415: out3 <= 16'hc2d0;
      416: out3 <= 16'hc2c1;
      417: out3 <= 16'hc2b3;
      418: out3 <= 16'hc2a5;
      419: out3 <= 16'hc296;
      420: out3 <= 16'hc288;
      421: out3 <= 16'hc27a;
      422: out3 <= 16'hc26d;
      423: out3 <= 16'hc25f;
      424: out3 <= 16'hc251;
      425: out3 <= 16'hc244;
      426: out3 <= 16'hc237;
      427: out3 <= 16'hc22a;
      428: out3 <= 16'hc21d;
      429: out3 <= 16'hc210;
      430: out3 <= 16'hc204;
      431: out3 <= 16'hc1f7;
      432: out3 <= 16'hc1eb;
      433: out3 <= 16'hc1df;
      434: out3 <= 16'hc1d3;
      435: out3 <= 16'hc1c7;
      436: out3 <= 16'hc1bb;
      437: out3 <= 16'hc1b0;
      438: out3 <= 16'hc1a4;
      439: out3 <= 16'hc199;
      440: out3 <= 16'hc18e;
      441: out3 <= 16'hc183;
      442: out3 <= 16'hc178;
      443: out3 <= 16'hc16e;
      444: out3 <= 16'hc163;
      445: out3 <= 16'hc159;
      446: out3 <= 16'hc14f;
      447: out3 <= 16'hc145;
      448: out3 <= 16'hc13b;
      449: out3 <= 16'hc131;
      450: out3 <= 16'hc128;
      451: out3 <= 16'hc11e;
      452: out3 <= 16'hc115;
      453: out3 <= 16'hc10c;
      454: out3 <= 16'hc103;
      455: out3 <= 16'hc0fa;
      456: out3 <= 16'hc0f1;
      457: out3 <= 16'hc0e9;
      458: out3 <= 16'hc0e0;
      459: out3 <= 16'hc0d8;
      460: out3 <= 16'hc0d0;
      461: out3 <= 16'hc0c8;
      462: out3 <= 16'hc0c0;
      463: out3 <= 16'hc0b9;
      464: out3 <= 16'hc0b1;
      465: out3 <= 16'hc0aa;
      466: out3 <= 16'hc0a3;
      467: out3 <= 16'hc09c;
      468: out3 <= 16'hc095;
      469: out3 <= 16'hc08e;
      470: out3 <= 16'hc088;
      471: out3 <= 16'hc081;
      472: out3 <= 16'hc07b;
      473: out3 <= 16'hc075;
      474: out3 <= 16'hc06f;
      475: out3 <= 16'hc069;
      476: out3 <= 16'hc064;
      477: out3 <= 16'hc05e;
      478: out3 <= 16'hc059;
      479: out3 <= 16'hc054;
      480: out3 <= 16'hc04f;
      481: out3 <= 16'hc04a;
      482: out3 <= 16'hc045;
      483: out3 <= 16'hc041;
      484: out3 <= 16'hc03c;
      485: out3 <= 16'hc038;
      486: out3 <= 16'hc034;
      487: out3 <= 16'hc030;
      488: out3 <= 16'hc02c;
      489: out3 <= 16'hc029;
      490: out3 <= 16'hc025;
      491: out3 <= 16'hc022;
      492: out3 <= 16'hc01f;
      493: out3 <= 16'hc01c;
      494: out3 <= 16'hc019;
      495: out3 <= 16'hc016;
      496: out3 <= 16'hc014;
      497: out3 <= 16'hc011;
      498: out3 <= 16'hc00f;
      499: out3 <= 16'hc00d;
      500: out3 <= 16'hc00b;
      501: out3 <= 16'hc009;
      502: out3 <= 16'hc008;
      503: out3 <= 16'hc006;
      504: out3 <= 16'hc005;
      505: out3 <= 16'hc004;
      506: out3 <= 16'hc003;
      507: out3 <= 16'hc002;
      508: out3 <= 16'hc001;
      509: out3 <= 16'hc001;
      510: out3 <= 16'hc000;
      511: out3 <= 16'hc000;
      512: out3 <= 16'hc000;
      513: out3 <= 16'hc000;
      514: out3 <= 16'hc000;
      515: out3 <= 16'hc001;
      516: out3 <= 16'hc001;
      517: out3 <= 16'hc002;
      518: out3 <= 16'hc003;
      519: out3 <= 16'hc004;
      520: out3 <= 16'hc005;
      521: out3 <= 16'hc006;
      522: out3 <= 16'hc008;
      523: out3 <= 16'hc009;
      524: out3 <= 16'hc00b;
      525: out3 <= 16'hc00d;
      526: out3 <= 16'hc00f;
      527: out3 <= 16'hc011;
      528: out3 <= 16'hc014;
      529: out3 <= 16'hc016;
      530: out3 <= 16'hc019;
      531: out3 <= 16'hc01c;
      532: out3 <= 16'hc01f;
      533: out3 <= 16'hc022;
      534: out3 <= 16'hc025;
      535: out3 <= 16'hc029;
      536: out3 <= 16'hc02c;
      537: out3 <= 16'hc030;
      538: out3 <= 16'hc034;
      539: out3 <= 16'hc038;
      540: out3 <= 16'hc03c;
      541: out3 <= 16'hc041;
      542: out3 <= 16'hc045;
      543: out3 <= 16'hc04a;
      544: out3 <= 16'hc04f;
      545: out3 <= 16'hc054;
      546: out3 <= 16'hc059;
      547: out3 <= 16'hc05e;
      548: out3 <= 16'hc064;
      549: out3 <= 16'hc069;
      550: out3 <= 16'hc06f;
      551: out3 <= 16'hc075;
      552: out3 <= 16'hc07b;
      553: out3 <= 16'hc081;
      554: out3 <= 16'hc088;
      555: out3 <= 16'hc08e;
      556: out3 <= 16'hc095;
      557: out3 <= 16'hc09c;
      558: out3 <= 16'hc0a3;
      559: out3 <= 16'hc0aa;
      560: out3 <= 16'hc0b1;
      561: out3 <= 16'hc0b9;
      562: out3 <= 16'hc0c0;
      563: out3 <= 16'hc0c8;
      564: out3 <= 16'hc0d0;
      565: out3 <= 16'hc0d8;
      566: out3 <= 16'hc0e0;
      567: out3 <= 16'hc0e9;
      568: out3 <= 16'hc0f1;
      569: out3 <= 16'hc0fa;
      570: out3 <= 16'hc103;
      571: out3 <= 16'hc10c;
      572: out3 <= 16'hc115;
      573: out3 <= 16'hc11e;
      574: out3 <= 16'hc128;
      575: out3 <= 16'hc131;
      576: out3 <= 16'hc13b;
      577: out3 <= 16'hc145;
      578: out3 <= 16'hc14f;
      579: out3 <= 16'hc159;
      580: out3 <= 16'hc163;
      581: out3 <= 16'hc16e;
      582: out3 <= 16'hc178;
      583: out3 <= 16'hc183;
      584: out3 <= 16'hc18e;
      585: out3 <= 16'hc199;
      586: out3 <= 16'hc1a4;
      587: out3 <= 16'hc1b0;
      588: out3 <= 16'hc1bb;
      589: out3 <= 16'hc1c7;
      590: out3 <= 16'hc1d3;
      591: out3 <= 16'hc1df;
      592: out3 <= 16'hc1eb;
      593: out3 <= 16'hc1f7;
      594: out3 <= 16'hc204;
      595: out3 <= 16'hc210;
      596: out3 <= 16'hc21d;
      597: out3 <= 16'hc22a;
      598: out3 <= 16'hc237;
      599: out3 <= 16'hc244;
      600: out3 <= 16'hc251;
      601: out3 <= 16'hc25f;
      602: out3 <= 16'hc26d;
      603: out3 <= 16'hc27a;
      604: out3 <= 16'hc288;
      605: out3 <= 16'hc296;
      606: out3 <= 16'hc2a5;
      607: out3 <= 16'hc2b3;
      608: out3 <= 16'hc2c1;
      609: out3 <= 16'hc2d0;
      610: out3 <= 16'hc2df;
      611: out3 <= 16'hc2ee;
      612: out3 <= 16'hc2fd;
      613: out3 <= 16'hc30c;
      614: out3 <= 16'hc31c;
      615: out3 <= 16'hc32b;
      616: out3 <= 16'hc33b;
      617: out3 <= 16'hc34b;
      618: out3 <= 16'hc35b;
      619: out3 <= 16'hc36b;
      620: out3 <= 16'hc37b;
      621: out3 <= 16'hc38c;
      622: out3 <= 16'hc39c;
      623: out3 <= 16'hc3ad;
      624: out3 <= 16'hc3be;
      625: out3 <= 16'hc3cf;
      626: out3 <= 16'hc3e0;
      627: out3 <= 16'hc3f1;
      628: out3 <= 16'hc403;
      629: out3 <= 16'hc414;
      630: out3 <= 16'hc426;
      631: out3 <= 16'hc438;
      632: out3 <= 16'hc44a;
      633: out3 <= 16'hc45c;
      634: out3 <= 16'hc46e;
      635: out3 <= 16'hc481;
      636: out3 <= 16'hc493;
      637: out3 <= 16'hc4a6;
      638: out3 <= 16'hc4b9;
      639: out3 <= 16'hc4cc;
      640: out3 <= 16'hc4df;
      641: out3 <= 16'hc4f2;
      642: out3 <= 16'hc506;
      643: out3 <= 16'hc51a;
      644: out3 <= 16'hc52d;
      645: out3 <= 16'hc541;
      646: out3 <= 16'hc555;
      647: out3 <= 16'hc569;
      648: out3 <= 16'hc57e;
      649: out3 <= 16'hc592;
      650: out3 <= 16'hc5a7;
      651: out3 <= 16'hc5bb;
      652: out3 <= 16'hc5d0;
      653: out3 <= 16'hc5e5;
      654: out3 <= 16'hc5fa;
      655: out3 <= 16'hc610;
      656: out3 <= 16'hc625;
      657: out3 <= 16'hc63b;
      658: out3 <= 16'hc650;
      659: out3 <= 16'hc666;
      660: out3 <= 16'hc67c;
      661: out3 <= 16'hc692;
      662: out3 <= 16'hc6a8;
      663: out3 <= 16'hc6bf;
      664: out3 <= 16'hc6d5;
      665: out3 <= 16'hc6ec;
      666: out3 <= 16'hc703;
      667: out3 <= 16'hc71a;
      668: out3 <= 16'hc731;
      669: out3 <= 16'hc748;
      670: out3 <= 16'hc75f;
      671: out3 <= 16'hc777;
      672: out3 <= 16'hc78f;
      673: out3 <= 16'hc7a6;
      674: out3 <= 16'hc7be;
      675: out3 <= 16'hc7d6;
      676: out3 <= 16'hc7ee;
      677: out3 <= 16'hc807;
      678: out3 <= 16'hc81f;
      679: out3 <= 16'hc838;
      680: out3 <= 16'hc850;
      681: out3 <= 16'hc869;
      682: out3 <= 16'hc882;
      683: out3 <= 16'hc89b;
      684: out3 <= 16'hc8b5;
      685: out3 <= 16'hc8ce;
      686: out3 <= 16'hc8e8;
      687: out3 <= 16'hc901;
      688: out3 <= 16'hc91b;
      689: out3 <= 16'hc935;
      690: out3 <= 16'hc94f;
      691: out3 <= 16'hc969;
      692: out3 <= 16'hc983;
      693: out3 <= 16'hc99e;
      694: out3 <= 16'hc9b8;
      695: out3 <= 16'hc9d3;
      696: out3 <= 16'hc9ee;
      697: out3 <= 16'hca09;
      698: out3 <= 16'hca24;
      699: out3 <= 16'hca3f;
      700: out3 <= 16'hca5b;
      701: out3 <= 16'hca76;
      702: out3 <= 16'hca92;
      703: out3 <= 16'hcaad;
      704: out3 <= 16'hcac9;
      705: out3 <= 16'hcae5;
      706: out3 <= 16'hcb01;
      707: out3 <= 16'hcb1e;
      708: out3 <= 16'hcb3a;
      709: out3 <= 16'hcb56;
      710: out3 <= 16'hcb73;
      711: out3 <= 16'hcb90;
      712: out3 <= 16'hcbad;
      713: out3 <= 16'hcbca;
      714: out3 <= 16'hcbe7;
      715: out3 <= 16'hcc04;
      716: out3 <= 16'hcc21;
      717: out3 <= 16'hcc3f;
      718: out3 <= 16'hcc5d;
      719: out3 <= 16'hcc7a;
      720: out3 <= 16'hcc98;
      721: out3 <= 16'hccb6;
      722: out3 <= 16'hccd4;
      723: out3 <= 16'hccf3;
      724: out3 <= 16'hcd11;
      725: out3 <= 16'hcd30;
      726: out3 <= 16'hcd4e;
      727: out3 <= 16'hcd6d;
      728: out3 <= 16'hcd8c;
      729: out3 <= 16'hcdab;
      730: out3 <= 16'hcdca;
      731: out3 <= 16'hcde9;
      732: out3 <= 16'hce08;
      733: out3 <= 16'hce28;
      734: out3 <= 16'hce47;
      735: out3 <= 16'hce67;
      736: out3 <= 16'hce87;
      737: out3 <= 16'hcea7;
      738: out3 <= 16'hcec7;
      739: out3 <= 16'hcee7;
      740: out3 <= 16'hcf07;
      741: out3 <= 16'hcf28;
      742: out3 <= 16'hcf48;
      743: out3 <= 16'hcf69;
      744: out3 <= 16'hcf8a;
      745: out3 <= 16'hcfab;
      746: out3 <= 16'hcfcc;
      747: out3 <= 16'hcfed;
      748: out3 <= 16'hd00e;
      749: out3 <= 16'hd030;
      750: out3 <= 16'hd051;
      751: out3 <= 16'hd073;
      752: out3 <= 16'hd094;
      753: out3 <= 16'hd0b6;
      754: out3 <= 16'hd0d8;
      755: out3 <= 16'hd0fa;
      756: out3 <= 16'hd11c;
      757: out3 <= 16'hd13e;
      758: out3 <= 16'hd161;
      759: out3 <= 16'hd183;
      760: out3 <= 16'hd1a6;
      761: out3 <= 16'hd1c9;
      762: out3 <= 16'hd1eb;
      763: out3 <= 16'hd20e;
      764: out3 <= 16'hd231;
      765: out3 <= 16'hd255;
      766: out3 <= 16'hd278;
      767: out3 <= 16'hd29b;
      768: out3 <= 16'hd2bf;
      769: out3 <= 16'hd2e2;
      770: out3 <= 16'hd306;
      771: out3 <= 16'hd32a;
      772: out3 <= 16'hd34e;
      773: out3 <= 16'hd372;
      774: out3 <= 16'hd396;
      775: out3 <= 16'hd3ba;
      776: out3 <= 16'hd3df;
      777: out3 <= 16'hd403;
      778: out3 <= 16'hd428;
      779: out3 <= 16'hd44c;
      780: out3 <= 16'hd471;
      781: out3 <= 16'hd496;
      782: out3 <= 16'hd4bb;
      783: out3 <= 16'hd4e0;
      784: out3 <= 16'hd505;
      785: out3 <= 16'hd52a;
      786: out3 <= 16'hd550;
      787: out3 <= 16'hd575;
      788: out3 <= 16'hd59b;
      789: out3 <= 16'hd5c1;
      790: out3 <= 16'hd5e6;
      791: out3 <= 16'hd60c;
      792: out3 <= 16'hd632;
      793: out3 <= 16'hd659;
      794: out3 <= 16'hd67f;
      795: out3 <= 16'hd6a5;
      796: out3 <= 16'hd6cb;
      797: out3 <= 16'hd6f2;
      798: out3 <= 16'hd719;
      799: out3 <= 16'hd73f;
      800: out3 <= 16'hd766;
      801: out3 <= 16'hd78d;
      802: out3 <= 16'hd7b4;
      803: out3 <= 16'hd7db;
      804: out3 <= 16'hd802;
      805: out3 <= 16'hd82a;
      806: out3 <= 16'hd851;
      807: out3 <= 16'hd878;
      808: out3 <= 16'hd8a0;
      809: out3 <= 16'hd8c8;
      810: out3 <= 16'hd8ef;
      811: out3 <= 16'hd917;
      812: out3 <= 16'hd93f;
      813: out3 <= 16'hd967;
      814: out3 <= 16'hd98f;
      815: out3 <= 16'hd9b8;
      816: out3 <= 16'hd9e0;
      817: out3 <= 16'hda08;
      818: out3 <= 16'hda31;
      819: out3 <= 16'hda5a;
      820: out3 <= 16'hda82;
      821: out3 <= 16'hdaab;
      822: out3 <= 16'hdad4;
      823: out3 <= 16'hdafd;
      824: out3 <= 16'hdb26;
      825: out3 <= 16'hdb4f;
      826: out3 <= 16'hdb78;
      827: out3 <= 16'hdba2;
      828: out3 <= 16'hdbcb;
      829: out3 <= 16'hdbf5;
      830: out3 <= 16'hdc1e;
      831: out3 <= 16'hdc48;
      832: out3 <= 16'hdc72;
      833: out3 <= 16'hdc9b;
      834: out3 <= 16'hdcc5;
      835: out3 <= 16'hdcef;
      836: out3 <= 16'hdd19;
      837: out3 <= 16'hdd44;
      838: out3 <= 16'hdd6e;
      839: out3 <= 16'hdd98;
      840: out3 <= 16'hddc3;
      841: out3 <= 16'hdded;
      842: out3 <= 16'hde18;
      843: out3 <= 16'hde42;
      844: out3 <= 16'hde6d;
      845: out3 <= 16'hde98;
      846: out3 <= 16'hdec3;
      847: out3 <= 16'hdeee;
      848: out3 <= 16'hdf19;
      849: out3 <= 16'hdf44;
      850: out3 <= 16'hdf6f;
      851: out3 <= 16'hdf9b;
      852: out3 <= 16'hdfc6;
      853: out3 <= 16'hdff1;
      854: out3 <= 16'he01d;
      855: out3 <= 16'he049;
      856: out3 <= 16'he074;
      857: out3 <= 16'he0a0;
      858: out3 <= 16'he0cc;
      859: out3 <= 16'he0f8;
      860: out3 <= 16'he124;
      861: out3 <= 16'he150;
      862: out3 <= 16'he17c;
      863: out3 <= 16'he1a8;
      864: out3 <= 16'he1d5;
      865: out3 <= 16'he201;
      866: out3 <= 16'he22d;
      867: out3 <= 16'he25a;
      868: out3 <= 16'he287;
      869: out3 <= 16'he2b3;
      870: out3 <= 16'he2e0;
      871: out3 <= 16'he30d;
      872: out3 <= 16'he33a;
      873: out3 <= 16'he367;
      874: out3 <= 16'he394;
      875: out3 <= 16'he3c1;
      876: out3 <= 16'he3ee;
      877: out3 <= 16'he41b;
      878: out3 <= 16'he448;
      879: out3 <= 16'he476;
      880: out3 <= 16'he4a3;
      881: out3 <= 16'he4d0;
      882: out3 <= 16'he4fe;
      883: out3 <= 16'he52c;
      884: out3 <= 16'he559;
      885: out3 <= 16'he587;
      886: out3 <= 16'he5b5;
      887: out3 <= 16'he5e3;
      888: out3 <= 16'he611;
      889: out3 <= 16'he63f;
      890: out3 <= 16'he66d;
      891: out3 <= 16'he69b;
      892: out3 <= 16'he6c9;
      893: out3 <= 16'he6f7;
      894: out3 <= 16'he725;
      895: out3 <= 16'he754;
      896: out3 <= 16'he782;
      897: out3 <= 16'he7b1;
      898: out3 <= 16'he7df;
      899: out3 <= 16'he80e;
      900: out3 <= 16'he83c;
      901: out3 <= 16'he86b;
      902: out3 <= 16'he89a;
      903: out3 <= 16'he8c9;
      904: out3 <= 16'he8f7;
      905: out3 <= 16'he926;
      906: out3 <= 16'he955;
      907: out3 <= 16'he984;
      908: out3 <= 16'he9b4;
      909: out3 <= 16'he9e3;
      910: out3 <= 16'hea12;
      911: out3 <= 16'hea41;
      912: out3 <= 16'hea70;
      913: out3 <= 16'heaa0;
      914: out3 <= 16'heacf;
      915: out3 <= 16'heaff;
      916: out3 <= 16'heb2e;
      917: out3 <= 16'heb5e;
      918: out3 <= 16'heb8d;
      919: out3 <= 16'hebbd;
      920: out3 <= 16'hebed;
      921: out3 <= 16'hec1c;
      922: out3 <= 16'hec4c;
      923: out3 <= 16'hec7c;
      924: out3 <= 16'hecac;
      925: out3 <= 16'hecdc;
      926: out3 <= 16'hed0c;
      927: out3 <= 16'hed3c;
      928: out3 <= 16'hed6c;
      929: out3 <= 16'hed9c;
      930: out3 <= 16'hedcc;
      931: out3 <= 16'hedfc;
      932: out3 <= 16'hee2d;
      933: out3 <= 16'hee5d;
      934: out3 <= 16'hee8d;
      935: out3 <= 16'heebe;
      936: out3 <= 16'heeee;
      937: out3 <= 16'hef1f;
      938: out3 <= 16'hef4f;
      939: out3 <= 16'hef80;
      940: out3 <= 16'hefb0;
      941: out3 <= 16'hefe1;
      942: out3 <= 16'hf012;
      943: out3 <= 16'hf042;
      944: out3 <= 16'hf073;
      945: out3 <= 16'hf0a4;
      946: out3 <= 16'hf0d5;
      947: out3 <= 16'hf105;
      948: out3 <= 16'hf136;
      949: out3 <= 16'hf167;
      950: out3 <= 16'hf198;
      951: out3 <= 16'hf1c9;
      952: out3 <= 16'hf1fa;
      953: out3 <= 16'hf22b;
      954: out3 <= 16'hf25c;
      955: out3 <= 16'hf28e;
      956: out3 <= 16'hf2bf;
      957: out3 <= 16'hf2f0;
      958: out3 <= 16'hf321;
      959: out3 <= 16'hf352;
      960: out3 <= 16'hf384;
      961: out3 <= 16'hf3b5;
      962: out3 <= 16'hf3e6;
      963: out3 <= 16'hf418;
      964: out3 <= 16'hf449;
      965: out3 <= 16'hf47b;
      966: out3 <= 16'hf4ac;
      967: out3 <= 16'hf4dd;
      968: out3 <= 16'hf50f;
      969: out3 <= 16'hf540;
      970: out3 <= 16'hf572;
      971: out3 <= 16'hf5a4;
      972: out3 <= 16'hf5d5;
      973: out3 <= 16'hf607;
      974: out3 <= 16'hf639;
      975: out3 <= 16'hf66a;
      976: out3 <= 16'hf69c;
      977: out3 <= 16'hf6ce;
      978: out3 <= 16'hf6ff;
      979: out3 <= 16'hf731;
      980: out3 <= 16'hf763;
      981: out3 <= 16'hf795;
      982: out3 <= 16'hf7c7;
      983: out3 <= 16'hf7f9;
      984: out3 <= 16'hf82a;
      985: out3 <= 16'hf85c;
      986: out3 <= 16'hf88e;
      987: out3 <= 16'hf8c0;
      988: out3 <= 16'hf8f2;
      989: out3 <= 16'hf924;
      990: out3 <= 16'hf956;
      991: out3 <= 16'hf988;
      992: out3 <= 16'hf9ba;
      993: out3 <= 16'hf9ec;
      994: out3 <= 16'hfa1e;
      995: out3 <= 16'hfa50;
      996: out3 <= 16'hfa82;
      997: out3 <= 16'hfab4;
      998: out3 <= 16'hfae6;
      999: out3 <= 16'hfb19;
      1000: out3 <= 16'hfb4b;
      1001: out3 <= 16'hfb7d;
      1002: out3 <= 16'hfbaf;
      1003: out3 <= 16'hfbe1;
      1004: out3 <= 16'hfc13;
      1005: out3 <= 16'hfc45;
      1006: out3 <= 16'hfc78;
      1007: out3 <= 16'hfcaa;
      1008: out3 <= 16'hfcdc;
      1009: out3 <= 16'hfd0e;
      1010: out3 <= 16'hfd40;
      1011: out3 <= 16'hfd73;
      1012: out3 <= 16'hfda5;
      1013: out3 <= 16'hfdd7;
      1014: out3 <= 16'hfe09;
      1015: out3 <= 16'hfe3c;
      1016: out3 <= 16'hfe6e;
      1017: out3 <= 16'hfea0;
      1018: out3 <= 16'hfed2;
      1019: out3 <= 16'hff05;
      1020: out3 <= 16'hff37;
      1021: out3 <= 16'hff69;
      1022: out3 <= 16'hff9b;
      1023: out3 <= 16'hffce;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock95274(clk, reset, next_in, next_out,
   i2_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [9:0] i2_in;
   reg [9:0] i2;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(7, 1) shiftFIFO_123378(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a225;
   wire signed [15:0] a202;
   wire signed [15:0] a228;
   wire signed [15:0] a206;
   wire signed [15:0] a229;
   wire signed [15:0] a230;
   wire signed [15:0] a233;
   wire signed [15:0] a234;
   wire signed [15:0] a237;
   wire signed [15:0] a238;
   reg signed [15:0] tm594;
   reg signed [15:0] tm598;
   reg signed [15:0] tm610;
   reg signed [15:0] tm614;
   reg signed [15:0] tm626;
   reg signed [15:0] tm630;
   reg signed [15:0] tm642;
   reg signed [15:0] tm649;
   reg signed [15:0] tm595;
   reg signed [15:0] tm599;
   reg signed [15:0] tm611;
   reg signed [15:0] tm615;
   reg signed [15:0] tm627;
   reg signed [15:0] tm631;
   reg signed [15:0] tm643;
   reg signed [15:0] tm650;
   wire signed [15:0] tm34;
   wire signed [15:0] a207;
   wire signed [15:0] tm35;
   wire signed [15:0] a209;
   wire signed [15:0] tm36;
   wire signed [15:0] a213;
   wire signed [15:0] tm37;
   wire signed [15:0] a215;
   wire signed [15:0] tm38;
   wire signed [15:0] a219;
   wire signed [15:0] tm39;
   wire signed [15:0] a221;
   reg signed [15:0] tm596;
   reg signed [15:0] tm600;
   reg signed [15:0] tm612;
   reg signed [15:0] tm616;
   reg signed [15:0] tm628;
   reg signed [15:0] tm632;
   reg signed [15:0] tm644;
   reg signed [15:0] tm651;
   reg signed [15:0] tm116;
   reg signed [15:0] tm117;
   reg signed [15:0] tm120;
   reg signed [15:0] tm121;
   reg signed [15:0] tm124;
   reg signed [15:0] tm125;
   reg signed [15:0] tm597;
   reg signed [15:0] tm601;
   reg signed [15:0] tm613;
   reg signed [15:0] tm617;
   reg signed [15:0] tm629;
   reg signed [15:0] tm633;
   reg signed [15:0] tm645;
   reg signed [15:0] tm652;
   reg signed [15:0] tm646;
   reg signed [15:0] tm653;
   wire signed [15:0] a208;
   wire signed [15:0] a210;
   wire signed [15:0] a211;
   wire signed [15:0] a212;
   wire signed [15:0] a214;
   wire signed [15:0] a216;
   wire signed [15:0] a217;
   wire signed [15:0] a218;
   wire signed [15:0] a220;
   wire signed [15:0] a222;
   wire signed [15:0] a223;
   wire signed [15:0] a224;
   reg signed [15:0] tm647;
   reg signed [15:0] tm654;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   reg signed [15:0] tm648;
   reg signed [15:0] tm655;


   assign a225 = X0;
   assign a202 = a225;
   assign a228 = X1;
   assign a206 = a228;
   assign a229 = X2;
   assign a230 = X3;
   assign a233 = X4;
   assign a234 = X5;
   assign a237 = X6;
   assign a238 = X7;
   assign a207 = tm34;
   assign a209 = tm35;
   assign a213 = tm36;
   assign a215 = tm37;
   assign a219 = tm38;
   assign a221 = tm39;
   assign Y0 = tm648;
   assign Y1 = tm655;

   D12_97646 instD12inst0_97646(.addr(i2[9:0]), .out(tm34), .clk(clk));

   D18_98672 instD18inst0_98672(.addr(i2[9:0]), .out(tm39), .clk(clk));

   D16_100724 instD16inst0_100724(.addr(i2[9:0]), .out(tm35), .clk(clk));

   D14_101750 instD14inst0_101750(.addr(i2[9:0]), .out(tm38), .clk(clk));

   D13_102776 instD13inst0_102776(.addr(i2[9:0]), .out(tm36), .clk(clk));

   D17_103802 instD17inst0_103802(.addr(i2[9:0]), .out(tm37), .clk(clk));

    multfix #(16, 2) m95373(.a(tm116), .b(tm597), .clk(clk), .q_sc(a208), .q_unsc(), .rst(reset));
    multfix #(16, 2) m95395(.a(tm117), .b(tm601), .clk(clk), .q_sc(a210), .q_unsc(), .rst(reset));
    multfix #(16, 2) m95413(.a(tm117), .b(tm597), .clk(clk), .q_sc(a211), .q_unsc(), .rst(reset));
    multfix #(16, 2) m95424(.a(tm116), .b(tm601), .clk(clk), .q_sc(a212), .q_unsc(), .rst(reset));
    multfix #(16, 2) m95453(.a(tm120), .b(tm613), .clk(clk), .q_sc(a214), .q_unsc(), .rst(reset));
    multfix #(16, 2) m95475(.a(tm121), .b(tm617), .clk(clk), .q_sc(a216), .q_unsc(), .rst(reset));
    multfix #(16, 2) m95493(.a(tm121), .b(tm613), .clk(clk), .q_sc(a217), .q_unsc(), .rst(reset));
    multfix #(16, 2) m95504(.a(tm120), .b(tm617), .clk(clk), .q_sc(a218), .q_unsc(), .rst(reset));
    multfix #(16, 2) m95533(.a(tm124), .b(tm629), .clk(clk), .q_sc(a220), .q_unsc(), .rst(reset));
    multfix #(16, 2) m95555(.a(tm125), .b(tm633), .clk(clk), .q_sc(a222), .q_unsc(), .rst(reset));
    multfix #(16, 2) m95573(.a(tm125), .b(tm629), .clk(clk), .q_sc(a223), .q_unsc(), .rst(reset));
    multfix #(16, 2) m95584(.a(tm124), .b(tm633), .clk(clk), .q_sc(a224), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub95402(.a(a208), .b(a210), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add95431(.a(a211), .b(a212), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub95482(.a(a214), .b(a216), .clk(clk), .q(Y4));    // 6
    addfxp #(16, 1) add95511(.a(a217), .b(a218), .clk(clk), .q(Y5));    // 6
    subfxp #(16, 1) sub95562(.a(a220), .b(a222), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add95591(.a(a223), .b(a224), .clk(clk), .q(Y7));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm116 <= 0;
         tm597 <= 0;
         tm117 <= 0;
         tm601 <= 0;
         tm117 <= 0;
         tm597 <= 0;
         tm116 <= 0;
         tm601 <= 0;
         tm120 <= 0;
         tm613 <= 0;
         tm121 <= 0;
         tm617 <= 0;
         tm121 <= 0;
         tm613 <= 0;
         tm120 <= 0;
         tm617 <= 0;
         tm124 <= 0;
         tm629 <= 0;
         tm125 <= 0;
         tm633 <= 0;
         tm125 <= 0;
         tm629 <= 0;
         tm124 <= 0;
         tm633 <= 0;
      end
      else begin
         i2 <= i2_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
         tm594 <= a229;
         tm598 <= a230;
         tm610 <= a233;
         tm614 <= a234;
         tm626 <= a237;
         tm630 <= a238;
         tm642 <= a202;
         tm649 <= a206;
         tm595 <= tm594;
         tm599 <= tm598;
         tm611 <= tm610;
         tm615 <= tm614;
         tm627 <= tm626;
         tm631 <= tm630;
         tm643 <= tm642;
         tm650 <= tm649;
         tm596 <= tm595;
         tm600 <= tm599;
         tm612 <= tm611;
         tm616 <= tm615;
         tm628 <= tm627;
         tm632 <= tm631;
         tm644 <= tm643;
         tm651 <= tm650;
         tm116 <= a207;
         tm117 <= a209;
         tm120 <= a213;
         tm121 <= a215;
         tm124 <= a219;
         tm125 <= a221;
         tm597 <= tm596;
         tm601 <= tm600;
         tm613 <= tm612;
         tm617 <= tm616;
         tm629 <= tm628;
         tm633 <= tm632;
         tm645 <= tm644;
         tm652 <= tm651;
         tm646 <= tm645;
         tm653 <= tm652;
         tm647 <= tm646;
         tm654 <= tm653;
         tm648 <= tm647;
         tm655 <= tm654;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock103807(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(2, 1) shiftFIFO_123381(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a137;
   wire signed [15:0] a138;
   wire signed [15:0] a139;
   wire signed [15:0] a140;
   wire signed [15:0] a145;
   wire signed [15:0] a146;
   wire signed [15:0] a147;
   wire signed [15:0] a148;
   wire signed [16:0] tm322;
   wire signed [16:0] tm323;
   wire signed [16:0] tm324;
   wire signed [16:0] tm325;
   wire signed [16:0] tm326;
   wire signed [16:0] tm327;
   wire signed [16:0] tm328;
   wire signed [16:0] tm329;
   wire signed [15:0] t169;
   wire signed [15:0] t170;
   wire signed [15:0] t171;
   wire signed [15:0] t172;
   wire signed [15:0] t173;
   wire signed [15:0] t174;
   wire signed [15:0] t175;
   wire signed [15:0] t176;
   wire signed [16:0] tm330;
   wire signed [16:0] tm331;
   wire signed [16:0] tm332;
   wire signed [16:0] tm333;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [16:0] tm334;
   wire signed [16:0] tm335;
   wire signed [16:0] tm336;
   wire signed [16:0] tm337;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t177;
   wire signed [15:0] t178;
   wire signed [15:0] t179;
   wire signed [15:0] t180;
   wire signed [15:0] t181;
   wire signed [15:0] t182;
   wire signed [15:0] t183;
   wire signed [15:0] t184;


   assign a137 = X0;
   assign a138 = X4;
   assign a139 = X1;
   assign a140 = X5;
   assign a145 = X2;
   assign a146 = X6;
   assign a147 = X3;
   assign a148 = X7;
   assign t169 = tm322[16:1];
   assign t170 = tm323[16:1];
   assign t171 = tm324[16:1];
   assign t172 = tm325[16:1];
   assign t173 = tm326[16:1];
   assign t174 = tm327[16:1];
   assign t175 = tm328[16:1];
   assign t176 = tm329[16:1];
   assign Y0 = t177;
   assign Y1 = t178;
   assign Y4 = t179;
   assign Y5 = t180;
   assign Y2 = t181;
   assign Y3 = t182;
   assign Y6 = t183;
   assign Y7 = t184;
   assign t177 = tm330[16:1];
   assign t178 = tm331[16:1];
   assign t179 = tm332[16:1];
   assign t180 = tm333[16:1];
   assign t181 = tm334[16:1];
   assign t182 = tm335[16:1];
   assign t183 = tm336[16:1];
   assign t184 = tm337[16:1];

    addfxp #(17, 1) add103819(.a({{1{a137[15]}}, a137}), .b({{1{a138[15]}}, a138}), .clk(clk), .q(tm322));    // 0
    addfxp #(17, 1) add103834(.a({{1{a139[15]}}, a139}), .b({{1{a140[15]}}, a140}), .clk(clk), .q(tm323));    // 0
    subfxp #(17, 1) sub103849(.a({{1{a137[15]}}, a137}), .b({{1{a138[15]}}, a138}), .clk(clk), .q(tm324));    // 0
    subfxp #(17, 1) sub103864(.a({{1{a139[15]}}, a139}), .b({{1{a140[15]}}, a140}), .clk(clk), .q(tm325));    // 0
    addfxp #(17, 1) add103879(.a({{1{a145[15]}}, a145}), .b({{1{a146[15]}}, a146}), .clk(clk), .q(tm326));    // 0
    addfxp #(17, 1) add103894(.a({{1{a147[15]}}, a147}), .b({{1{a148[15]}}, a148}), .clk(clk), .q(tm327));    // 0
    subfxp #(17, 1) sub103909(.a({{1{a145[15]}}, a145}), .b({{1{a146[15]}}, a146}), .clk(clk), .q(tm328));    // 0
    subfxp #(17, 1) sub103924(.a({{1{a147[15]}}, a147}), .b({{1{a148[15]}}, a148}), .clk(clk), .q(tm329));    // 0
    addfxp #(17, 1) add103931(.a({{1{t169[15]}}, t169}), .b({{1{t173[15]}}, t173}), .clk(clk), .q(tm330));    // 1
    addfxp #(17, 1) add103938(.a({{1{t170[15]}}, t170}), .b({{1{t174[15]}}, t174}), .clk(clk), .q(tm331));    // 1
    subfxp #(17, 1) sub103945(.a({{1{t169[15]}}, t169}), .b({{1{t173[15]}}, t173}), .clk(clk), .q(tm332));    // 1
    subfxp #(17, 1) sub103952(.a({{1{t170[15]}}, t170}), .b({{1{t174[15]}}, t174}), .clk(clk), .q(tm333));    // 1
    addfxp #(17, 1) add103975(.a({{1{t171[15]}}, t171}), .b({{1{t176[15]}}, t176}), .clk(clk), .q(tm334));    // 1
    subfxp #(17, 1) sub103982(.a({{1{t172[15]}}, t172}), .b({{1{t175[15]}}, t175}), .clk(clk), .q(tm335));    // 1
    subfxp #(17, 1) sub103989(.a({{1{t171[15]}}, t171}), .b({{1{t176[15]}}, t176}), .clk(clk), .q(tm336));    // 1
    addfxp #(17, 1) add103996(.a({{1{t172[15]}}, t172}), .b({{1{t175[15]}}, t175}), .clk(clk), .q(tm337));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 1541
// Gap: 2048
module rc104020(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];

   perm104018 instPerm123382(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 1541
// Gap: 2048
module perm104018(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 2048;
   parameter logDepth = 11;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 2'd0};
   assign    addr0b = {outCount, 2'd0};
   assign    addr0c = {outCount_for_rd_addr, 2'd0};
   assign    addr1 = {inCount, 2'd1};
   assign    addr1b = {outCount, 2'd1};
   assign    addr1c = {outCount_for_rd_addr, 2'd1};
   assign    addr2 = {inCount, 2'd2};
   assign    addr2b = {outCount, 2'd2};
   assign    addr2c = {outCount_for_rd_addr, 2'd2};
   assign    addr3 = {inCount, 2'd3};
   assign    addr3b = {outCount, 2'd3};
   assign    addr3c = {outCount_for_rd_addr, 2'd3};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_1_0, w_1_1, w_1_2, w_1_3, w_2_0, w_2_1, w_2_2, w_2_3;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_2_0, z_2_1, z_2_2, z_2_3;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_1_0, u_1_1, u_1_2, u_1_3, u_2_0, u_2_1, u_2_2, u_2_3;

    reg inFlip1, outFlip1;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
    end

   assign inBank0[0] = addr0[12] ^ addr0[0];
   assign inBank0[1] = addr0[2] ^ addr0[1];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[6];
   assign inAddr0[4] = addr0[7];
   assign inAddr0[5] = addr0[8];
   assign inAddr0[6] = addr0[9];
   assign inAddr0[7] = addr0[10];
   assign inAddr0[8] = addr0[11];
   assign inAddr0[9] = addr0[0];
   assign inAddr0[10] = addr0[1];
   assign outBank0[0] = addr0b[11] ^ addr0b[0];
   assign outBank0[1] = addr0b[12] ^ addr0b[1];
   assign outAddr0[0] = addr0b[2];
   assign outAddr0[1] = addr0b[3];
   assign outAddr0[2] = addr0b[4];
   assign outAddr0[3] = addr0b[5];
   assign outAddr0[4] = addr0b[6];
   assign outAddr0[5] = addr0b[7];
   assign outAddr0[6] = addr0b[8];
   assign outAddr0[7] = addr0b[9];
   assign outAddr0[8] = addr0b[10];
   assign outAddr0[9] = addr0b[11];
   assign outAddr0[10] = addr0b[12];
   assign outBank_a0[0] = addr0c[11] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[12] ^ addr0c[1];
   assign outAddr_a0[0] = addr0c[2];
   assign outAddr_a0[1] = addr0c[3];
   assign outAddr_a0[2] = addr0c[4];
   assign outAddr_a0[3] = addr0c[5];
   assign outAddr_a0[4] = addr0c[6];
   assign outAddr_a0[5] = addr0c[7];
   assign outAddr_a0[6] = addr0c[8];
   assign outAddr_a0[7] = addr0c[9];
   assign outAddr_a0[8] = addr0c[10];
   assign outAddr_a0[9] = addr0c[11];
   assign outAddr_a0[10] = addr0c[12];

   assign inBank1[0] = addr1[12] ^ addr1[0];
   assign inBank1[1] = addr1[2] ^ addr1[1];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[6];
   assign inAddr1[4] = addr1[7];
   assign inAddr1[5] = addr1[8];
   assign inAddr1[6] = addr1[9];
   assign inAddr1[7] = addr1[10];
   assign inAddr1[8] = addr1[11];
   assign inAddr1[9] = addr1[0];
   assign inAddr1[10] = addr1[1];
   assign outBank1[0] = addr1b[11] ^ addr1b[0];
   assign outBank1[1] = addr1b[12] ^ addr1b[1];
   assign outAddr1[0] = addr1b[2];
   assign outAddr1[1] = addr1b[3];
   assign outAddr1[2] = addr1b[4];
   assign outAddr1[3] = addr1b[5];
   assign outAddr1[4] = addr1b[6];
   assign outAddr1[5] = addr1b[7];
   assign outAddr1[6] = addr1b[8];
   assign outAddr1[7] = addr1b[9];
   assign outAddr1[8] = addr1b[10];
   assign outAddr1[9] = addr1b[11];
   assign outAddr1[10] = addr1b[12];
   assign outBank_a1[0] = addr1c[11] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[12] ^ addr1c[1];
   assign outAddr_a1[0] = addr1c[2];
   assign outAddr_a1[1] = addr1c[3];
   assign outAddr_a1[2] = addr1c[4];
   assign outAddr_a1[3] = addr1c[5];
   assign outAddr_a1[4] = addr1c[6];
   assign outAddr_a1[5] = addr1c[7];
   assign outAddr_a1[6] = addr1c[8];
   assign outAddr_a1[7] = addr1c[9];
   assign outAddr_a1[8] = addr1c[10];
   assign outAddr_a1[9] = addr1c[11];
   assign outAddr_a1[10] = addr1c[12];

   assign inBank2[0] = addr2[12] ^ addr2[0];
   assign inBank2[1] = addr2[2] ^ addr2[1];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[5];
   assign inAddr2[3] = addr2[6];
   assign inAddr2[4] = addr2[7];
   assign inAddr2[5] = addr2[8];
   assign inAddr2[6] = addr2[9];
   assign inAddr2[7] = addr2[10];
   assign inAddr2[8] = addr2[11];
   assign inAddr2[9] = addr2[0];
   assign inAddr2[10] = addr2[1];
   assign outBank2[0] = addr2b[11] ^ addr2b[0];
   assign outBank2[1] = addr2b[12] ^ addr2b[1];
   assign outAddr2[0] = addr2b[2];
   assign outAddr2[1] = addr2b[3];
   assign outAddr2[2] = addr2b[4];
   assign outAddr2[3] = addr2b[5];
   assign outAddr2[4] = addr2b[6];
   assign outAddr2[5] = addr2b[7];
   assign outAddr2[6] = addr2b[8];
   assign outAddr2[7] = addr2b[9];
   assign outAddr2[8] = addr2b[10];
   assign outAddr2[9] = addr2b[11];
   assign outAddr2[10] = addr2b[12];
   assign outBank_a2[0] = addr2c[11] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[12] ^ addr2c[1];
   assign outAddr_a2[0] = addr2c[2];
   assign outAddr_a2[1] = addr2c[3];
   assign outAddr_a2[2] = addr2c[4];
   assign outAddr_a2[3] = addr2c[5];
   assign outAddr_a2[4] = addr2c[6];
   assign outAddr_a2[5] = addr2c[7];
   assign outAddr_a2[6] = addr2c[8];
   assign outAddr_a2[7] = addr2c[9];
   assign outAddr_a2[8] = addr2c[10];
   assign outAddr_a2[9] = addr2c[11];
   assign outAddr_a2[10] = addr2c[12];

   assign inBank3[0] = addr3[12] ^ addr3[0];
   assign inBank3[1] = addr3[2] ^ addr3[1];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[5];
   assign inAddr3[3] = addr3[6];
   assign inAddr3[4] = addr3[7];
   assign inAddr3[5] = addr3[8];
   assign inAddr3[6] = addr3[9];
   assign inAddr3[7] = addr3[10];
   assign inAddr3[8] = addr3[11];
   assign inAddr3[9] = addr3[0];
   assign inAddr3[10] = addr3[1];
   assign outBank3[0] = addr3b[11] ^ addr3b[0];
   assign outBank3[1] = addr3b[12] ^ addr3b[1];
   assign outAddr3[0] = addr3b[2];
   assign outAddr3[1] = addr3b[3];
   assign outAddr3[2] = addr3b[4];
   assign outAddr3[3] = addr3b[5];
   assign outAddr3[4] = addr3b[6];
   assign outAddr3[5] = addr3b[7];
   assign outAddr3[6] = addr3b[8];
   assign outAddr3[7] = addr3b[9];
   assign outAddr3[8] = addr3b[10];
   assign outAddr3[9] = addr3b[11];
   assign outAddr3[10] = addr3b[12];
   assign outBank_a3[0] = addr3c[11] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[12] ^ addr3c[1];
   assign outAddr_a3[0] = addr3c[2];
   assign outAddr_a3[1] = addr3c[3];
   assign outAddr_a3[2] = addr3c[4];
   assign outAddr_a3[3] = addr3c[5];
   assign outAddr_a3[4] = addr3c[6];
   assign outAddr_a3[5] = addr3c[7];
   assign outAddr_a3[6] = addr3c[8];
   assign outAddr_a3[7] = addr3c[9];
   assign outAddr_a3[8] = addr3c[10];
   assign outAddr_a3[9] = addr3c[11];
   assign outAddr_a3[10] = addr3c[12];

   nextReg #(1537, 11) nextReg_123387(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(4, 1) shiftFIFO_123390(.X(next0), .Y(next_out), .clk(clk));


   memArray8192_104018 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip1), .outFlip(outFlip1), .next(next), .reset(reset),
        .x0(w_2_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_2_0[logDepth-1:0]),
        .outAddr0(u_2_0), 
        .x1(w_2_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_2_1[logDepth-1:0]),
        .outAddr1(u_2_1), 
        .x2(w_2_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_2_2[logDepth-1:0]),
        .outAddr2(u_2_2), 
        .x3(w_2_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_2_3[logDepth-1:0]),
        .outAddr3(u_2_3), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 1536)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 1539)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
         if (inCount == 1536) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 2047) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 1536)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign y0 = z_2_0;
    assign y1 = z_2_1;
    assign y2 = z_2_2;
    assign y3 = z_2_3;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[10];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_1), .y0(w_1_0), .y1(w_1_1), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_2), .x1(w_0_3), .y0(w_1_2), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[0];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_2_pipe), .y0(w_2_0), .y1(w_2_2), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_1_pipe), .x1(w_1_3_pipe), .y0(w_2_1), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[10];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[9];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_1_pipe), .y0(z_2_0), .y1(z_2_1), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_2_pipe), .x1(z_1_3_pipe), .y0(z_2_2), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[10];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[9];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_1_pipe), .y0(u_2_0), .y1(u_2_1), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_2_pipe), .x1(u_1_3_pipe), .y0(u_2_2), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
endmodule

module memArray8192_104018(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                clk, inFlip, outFlip);

   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 2048;
   parameter logDepth = 11;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   nextReg #(2048, 11) nextReg_123395(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 8
// Gap: 2048
module DirSum_120744(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7);

   output next_out;
   input clk, reset, next;

   reg [10:0] i1;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   always @(posedge clk) begin
      if (reset == 1) begin
         i1 <= 0;
      end
      else begin
         if (next == 1)
            i1 <= 0;
         else if (i1 == 2047)
            i1 <= 0;
         else
            i1 <= i1 + 1;
      end
   end

   codeBlock104022 codeBlockIsnt123400(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7));

endmodule

module D6_106392(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [10:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hffe7;
      2: out3 <= 16'hffce;
      3: out3 <= 16'hffb5;
      4: out3 <= 16'hff9b;
      5: out3 <= 16'hff82;
      6: out3 <= 16'hff69;
      7: out3 <= 16'hff50;
      8: out3 <= 16'hff37;
      9: out3 <= 16'hff1e;
      10: out3 <= 16'hff05;
      11: out3 <= 16'hfeec;
      12: out3 <= 16'hfed2;
      13: out3 <= 16'hfeb9;
      14: out3 <= 16'hfea0;
      15: out3 <= 16'hfe87;
      16: out3 <= 16'hfe6e;
      17: out3 <= 16'hfe55;
      18: out3 <= 16'hfe3c;
      19: out3 <= 16'hfe23;
      20: out3 <= 16'hfe09;
      21: out3 <= 16'hfdf0;
      22: out3 <= 16'hfdd7;
      23: out3 <= 16'hfdbe;
      24: out3 <= 16'hfda5;
      25: out3 <= 16'hfd8c;
      26: out3 <= 16'hfd73;
      27: out3 <= 16'hfd5a;
      28: out3 <= 16'hfd40;
      29: out3 <= 16'hfd27;
      30: out3 <= 16'hfd0e;
      31: out3 <= 16'hfcf5;
      32: out3 <= 16'hfcdc;
      33: out3 <= 16'hfcc3;
      34: out3 <= 16'hfcaa;
      35: out3 <= 16'hfc91;
      36: out3 <= 16'hfc78;
      37: out3 <= 16'hfc5f;
      38: out3 <= 16'hfc45;
      39: out3 <= 16'hfc2c;
      40: out3 <= 16'hfc13;
      41: out3 <= 16'hfbfa;
      42: out3 <= 16'hfbe1;
      43: out3 <= 16'hfbc8;
      44: out3 <= 16'hfbaf;
      45: out3 <= 16'hfb96;
      46: out3 <= 16'hfb7d;
      47: out3 <= 16'hfb64;
      48: out3 <= 16'hfb4b;
      49: out3 <= 16'hfb32;
      50: out3 <= 16'hfb19;
      51: out3 <= 16'hfb00;
      52: out3 <= 16'hfae6;
      53: out3 <= 16'hfacd;
      54: out3 <= 16'hfab4;
      55: out3 <= 16'hfa9b;
      56: out3 <= 16'hfa82;
      57: out3 <= 16'hfa69;
      58: out3 <= 16'hfa50;
      59: out3 <= 16'hfa37;
      60: out3 <= 16'hfa1e;
      61: out3 <= 16'hfa05;
      62: out3 <= 16'hf9ec;
      63: out3 <= 16'hf9d3;
      64: out3 <= 16'hf9ba;
      65: out3 <= 16'hf9a1;
      66: out3 <= 16'hf988;
      67: out3 <= 16'hf96f;
      68: out3 <= 16'hf956;
      69: out3 <= 16'hf93d;
      70: out3 <= 16'hf924;
      71: out3 <= 16'hf90b;
      72: out3 <= 16'hf8f2;
      73: out3 <= 16'hf8d9;
      74: out3 <= 16'hf8c0;
      75: out3 <= 16'hf8a7;
      76: out3 <= 16'hf88e;
      77: out3 <= 16'hf875;
      78: out3 <= 16'hf85c;
      79: out3 <= 16'hf843;
      80: out3 <= 16'hf82a;
      81: out3 <= 16'hf811;
      82: out3 <= 16'hf7f9;
      83: out3 <= 16'hf7e0;
      84: out3 <= 16'hf7c7;
      85: out3 <= 16'hf7ae;
      86: out3 <= 16'hf795;
      87: out3 <= 16'hf77c;
      88: out3 <= 16'hf763;
      89: out3 <= 16'hf74a;
      90: out3 <= 16'hf731;
      91: out3 <= 16'hf718;
      92: out3 <= 16'hf6ff;
      93: out3 <= 16'hf6e7;
      94: out3 <= 16'hf6ce;
      95: out3 <= 16'hf6b5;
      96: out3 <= 16'hf69c;
      97: out3 <= 16'hf683;
      98: out3 <= 16'hf66a;
      99: out3 <= 16'hf651;
      100: out3 <= 16'hf639;
      101: out3 <= 16'hf620;
      102: out3 <= 16'hf607;
      103: out3 <= 16'hf5ee;
      104: out3 <= 16'hf5d5;
      105: out3 <= 16'hf5bc;
      106: out3 <= 16'hf5a4;
      107: out3 <= 16'hf58b;
      108: out3 <= 16'hf572;
      109: out3 <= 16'hf559;
      110: out3 <= 16'hf540;
      111: out3 <= 16'hf528;
      112: out3 <= 16'hf50f;
      113: out3 <= 16'hf4f6;
      114: out3 <= 16'hf4dd;
      115: out3 <= 16'hf4c5;
      116: out3 <= 16'hf4ac;
      117: out3 <= 16'hf493;
      118: out3 <= 16'hf47b;
      119: out3 <= 16'hf462;
      120: out3 <= 16'hf449;
      121: out3 <= 16'hf430;
      122: out3 <= 16'hf418;
      123: out3 <= 16'hf3ff;
      124: out3 <= 16'hf3e6;
      125: out3 <= 16'hf3ce;
      126: out3 <= 16'hf3b5;
      127: out3 <= 16'hf39c;
      128: out3 <= 16'hf384;
      129: out3 <= 16'hf36b;
      130: out3 <= 16'hf352;
      131: out3 <= 16'hf33a;
      132: out3 <= 16'hf321;
      133: out3 <= 16'hf308;
      134: out3 <= 16'hf2f0;
      135: out3 <= 16'hf2d7;
      136: out3 <= 16'hf2bf;
      137: out3 <= 16'hf2a6;
      138: out3 <= 16'hf28e;
      139: out3 <= 16'hf275;
      140: out3 <= 16'hf25c;
      141: out3 <= 16'hf244;
      142: out3 <= 16'hf22b;
      143: out3 <= 16'hf213;
      144: out3 <= 16'hf1fa;
      145: out3 <= 16'hf1e2;
      146: out3 <= 16'hf1c9;
      147: out3 <= 16'hf1b1;
      148: out3 <= 16'hf198;
      149: out3 <= 16'hf180;
      150: out3 <= 16'hf167;
      151: out3 <= 16'hf14f;
      152: out3 <= 16'hf136;
      153: out3 <= 16'hf11e;
      154: out3 <= 16'hf105;
      155: out3 <= 16'hf0ed;
      156: out3 <= 16'hf0d5;
      157: out3 <= 16'hf0bc;
      158: out3 <= 16'hf0a4;
      159: out3 <= 16'hf08b;
      160: out3 <= 16'hf073;
      161: out3 <= 16'hf05b;
      162: out3 <= 16'hf042;
      163: out3 <= 16'hf02a;
      164: out3 <= 16'hf012;
      165: out3 <= 16'heff9;
      166: out3 <= 16'hefe1;
      167: out3 <= 16'hefc9;
      168: out3 <= 16'hefb0;
      169: out3 <= 16'hef98;
      170: out3 <= 16'hef80;
      171: out3 <= 16'hef67;
      172: out3 <= 16'hef4f;
      173: out3 <= 16'hef37;
      174: out3 <= 16'hef1f;
      175: out3 <= 16'hef06;
      176: out3 <= 16'heeee;
      177: out3 <= 16'heed6;
      178: out3 <= 16'heebe;
      179: out3 <= 16'heea6;
      180: out3 <= 16'hee8d;
      181: out3 <= 16'hee75;
      182: out3 <= 16'hee5d;
      183: out3 <= 16'hee45;
      184: out3 <= 16'hee2d;
      185: out3 <= 16'hee15;
      186: out3 <= 16'hedfc;
      187: out3 <= 16'hede4;
      188: out3 <= 16'hedcc;
      189: out3 <= 16'hedb4;
      190: out3 <= 16'hed9c;
      191: out3 <= 16'hed84;
      192: out3 <= 16'hed6c;
      193: out3 <= 16'hed54;
      194: out3 <= 16'hed3c;
      195: out3 <= 16'hed24;
      196: out3 <= 16'hed0c;
      197: out3 <= 16'hecf4;
      198: out3 <= 16'hecdc;
      199: out3 <= 16'hecc4;
      200: out3 <= 16'hecac;
      201: out3 <= 16'hec94;
      202: out3 <= 16'hec7c;
      203: out3 <= 16'hec64;
      204: out3 <= 16'hec4c;
      205: out3 <= 16'hec34;
      206: out3 <= 16'hec1c;
      207: out3 <= 16'hec05;
      208: out3 <= 16'hebed;
      209: out3 <= 16'hebd5;
      210: out3 <= 16'hebbd;
      211: out3 <= 16'heba5;
      212: out3 <= 16'heb8d;
      213: out3 <= 16'heb75;
      214: out3 <= 16'heb5e;
      215: out3 <= 16'heb46;
      216: out3 <= 16'heb2e;
      217: out3 <= 16'heb16;
      218: out3 <= 16'heaff;
      219: out3 <= 16'heae7;
      220: out3 <= 16'heacf;
      221: out3 <= 16'heab7;
      222: out3 <= 16'heaa0;
      223: out3 <= 16'hea88;
      224: out3 <= 16'hea70;
      225: out3 <= 16'hea59;
      226: out3 <= 16'hea41;
      227: out3 <= 16'hea29;
      228: out3 <= 16'hea12;
      229: out3 <= 16'he9fa;
      230: out3 <= 16'he9e3;
      231: out3 <= 16'he9cb;
      232: out3 <= 16'he9b4;
      233: out3 <= 16'he99c;
      234: out3 <= 16'he984;
      235: out3 <= 16'he96d;
      236: out3 <= 16'he955;
      237: out3 <= 16'he93e;
      238: out3 <= 16'he926;
      239: out3 <= 16'he90f;
      240: out3 <= 16'he8f7;
      241: out3 <= 16'he8e0;
      242: out3 <= 16'he8c9;
      243: out3 <= 16'he8b1;
      244: out3 <= 16'he89a;
      245: out3 <= 16'he882;
      246: out3 <= 16'he86b;
      247: out3 <= 16'he854;
      248: out3 <= 16'he83c;
      249: out3 <= 16'he825;
      250: out3 <= 16'he80e;
      251: out3 <= 16'he7f6;
      252: out3 <= 16'he7df;
      253: out3 <= 16'he7c8;
      254: out3 <= 16'he7b1;
      255: out3 <= 16'he799;
      256: out3 <= 16'he782;
      257: out3 <= 16'he76b;
      258: out3 <= 16'he754;
      259: out3 <= 16'he73d;
      260: out3 <= 16'he725;
      261: out3 <= 16'he70e;
      262: out3 <= 16'he6f7;
      263: out3 <= 16'he6e0;
      264: out3 <= 16'he6c9;
      265: out3 <= 16'he6b2;
      266: out3 <= 16'he69b;
      267: out3 <= 16'he684;
      268: out3 <= 16'he66d;
      269: out3 <= 16'he656;
      270: out3 <= 16'he63f;
      271: out3 <= 16'he628;
      272: out3 <= 16'he611;
      273: out3 <= 16'he5fa;
      274: out3 <= 16'he5e3;
      275: out3 <= 16'he5cc;
      276: out3 <= 16'he5b5;
      277: out3 <= 16'he59e;
      278: out3 <= 16'he587;
      279: out3 <= 16'he570;
      280: out3 <= 16'he559;
      281: out3 <= 16'he542;
      282: out3 <= 16'he52c;
      283: out3 <= 16'he515;
      284: out3 <= 16'he4fe;
      285: out3 <= 16'he4e7;
      286: out3 <= 16'he4d0;
      287: out3 <= 16'he4ba;
      288: out3 <= 16'he4a3;
      289: out3 <= 16'he48c;
      290: out3 <= 16'he476;
      291: out3 <= 16'he45f;
      292: out3 <= 16'he448;
      293: out3 <= 16'he432;
      294: out3 <= 16'he41b;
      295: out3 <= 16'he404;
      296: out3 <= 16'he3ee;
      297: out3 <= 16'he3d7;
      298: out3 <= 16'he3c1;
      299: out3 <= 16'he3aa;
      300: out3 <= 16'he394;
      301: out3 <= 16'he37d;
      302: out3 <= 16'he367;
      303: out3 <= 16'he350;
      304: out3 <= 16'he33a;
      305: out3 <= 16'he323;
      306: out3 <= 16'he30d;
      307: out3 <= 16'he2f6;
      308: out3 <= 16'he2e0;
      309: out3 <= 16'he2ca;
      310: out3 <= 16'he2b3;
      311: out3 <= 16'he29d;
      312: out3 <= 16'he287;
      313: out3 <= 16'he270;
      314: out3 <= 16'he25a;
      315: out3 <= 16'he244;
      316: out3 <= 16'he22d;
      317: out3 <= 16'he217;
      318: out3 <= 16'he201;
      319: out3 <= 16'he1eb;
      320: out3 <= 16'he1d5;
      321: out3 <= 16'he1be;
      322: out3 <= 16'he1a8;
      323: out3 <= 16'he192;
      324: out3 <= 16'he17c;
      325: out3 <= 16'he166;
      326: out3 <= 16'he150;
      327: out3 <= 16'he13a;
      328: out3 <= 16'he124;
      329: out3 <= 16'he10e;
      330: out3 <= 16'he0f8;
      331: out3 <= 16'he0e2;
      332: out3 <= 16'he0cc;
      333: out3 <= 16'he0b6;
      334: out3 <= 16'he0a0;
      335: out3 <= 16'he08a;
      336: out3 <= 16'he074;
      337: out3 <= 16'he05e;
      338: out3 <= 16'he049;
      339: out3 <= 16'he033;
      340: out3 <= 16'he01d;
      341: out3 <= 16'he007;
      342: out3 <= 16'hdff1;
      343: out3 <= 16'hdfdc;
      344: out3 <= 16'hdfc6;
      345: out3 <= 16'hdfb0;
      346: out3 <= 16'hdf9b;
      347: out3 <= 16'hdf85;
      348: out3 <= 16'hdf6f;
      349: out3 <= 16'hdf5a;
      350: out3 <= 16'hdf44;
      351: out3 <= 16'hdf2f;
      352: out3 <= 16'hdf19;
      353: out3 <= 16'hdf03;
      354: out3 <= 16'hdeee;
      355: out3 <= 16'hded8;
      356: out3 <= 16'hdec3;
      357: out3 <= 16'hdead;
      358: out3 <= 16'hde98;
      359: out3 <= 16'hde83;
      360: out3 <= 16'hde6d;
      361: out3 <= 16'hde58;
      362: out3 <= 16'hde42;
      363: out3 <= 16'hde2d;
      364: out3 <= 16'hde18;
      365: out3 <= 16'hde02;
      366: out3 <= 16'hdded;
      367: out3 <= 16'hddd8;
      368: out3 <= 16'hddc3;
      369: out3 <= 16'hddad;
      370: out3 <= 16'hdd98;
      371: out3 <= 16'hdd83;
      372: out3 <= 16'hdd6e;
      373: out3 <= 16'hdd59;
      374: out3 <= 16'hdd44;
      375: out3 <= 16'hdd2e;
      376: out3 <= 16'hdd19;
      377: out3 <= 16'hdd04;
      378: out3 <= 16'hdcef;
      379: out3 <= 16'hdcda;
      380: out3 <= 16'hdcc5;
      381: out3 <= 16'hdcb0;
      382: out3 <= 16'hdc9b;
      383: out3 <= 16'hdc86;
      384: out3 <= 16'hdc72;
      385: out3 <= 16'hdc5d;
      386: out3 <= 16'hdc48;
      387: out3 <= 16'hdc33;
      388: out3 <= 16'hdc1e;
      389: out3 <= 16'hdc09;
      390: out3 <= 16'hdbf5;
      391: out3 <= 16'hdbe0;
      392: out3 <= 16'hdbcb;
      393: out3 <= 16'hdbb6;
      394: out3 <= 16'hdba2;
      395: out3 <= 16'hdb8d;
      396: out3 <= 16'hdb78;
      397: out3 <= 16'hdb64;
      398: out3 <= 16'hdb4f;
      399: out3 <= 16'hdb3b;
      400: out3 <= 16'hdb26;
      401: out3 <= 16'hdb11;
      402: out3 <= 16'hdafd;
      403: out3 <= 16'hdae8;
      404: out3 <= 16'hdad4;
      405: out3 <= 16'hdabf;
      406: out3 <= 16'hdaab;
      407: out3 <= 16'hda97;
      408: out3 <= 16'hda82;
      409: out3 <= 16'hda6e;
      410: out3 <= 16'hda5a;
      411: out3 <= 16'hda45;
      412: out3 <= 16'hda31;
      413: out3 <= 16'hda1d;
      414: out3 <= 16'hda08;
      415: out3 <= 16'hd9f4;
      416: out3 <= 16'hd9e0;
      417: out3 <= 16'hd9cc;
      418: out3 <= 16'hd9b8;
      419: out3 <= 16'hd9a4;
      420: out3 <= 16'hd98f;
      421: out3 <= 16'hd97b;
      422: out3 <= 16'hd967;
      423: out3 <= 16'hd953;
      424: out3 <= 16'hd93f;
      425: out3 <= 16'hd92b;
      426: out3 <= 16'hd917;
      427: out3 <= 16'hd903;
      428: out3 <= 16'hd8ef;
      429: out3 <= 16'hd8dc;
      430: out3 <= 16'hd8c8;
      431: out3 <= 16'hd8b4;
      432: out3 <= 16'hd8a0;
      433: out3 <= 16'hd88c;
      434: out3 <= 16'hd878;
      435: out3 <= 16'hd865;
      436: out3 <= 16'hd851;
      437: out3 <= 16'hd83d;
      438: out3 <= 16'hd82a;
      439: out3 <= 16'hd816;
      440: out3 <= 16'hd802;
      441: out3 <= 16'hd7ef;
      442: out3 <= 16'hd7db;
      443: out3 <= 16'hd7c8;
      444: out3 <= 16'hd7b4;
      445: out3 <= 16'hd7a0;
      446: out3 <= 16'hd78d;
      447: out3 <= 16'hd77a;
      448: out3 <= 16'hd766;
      449: out3 <= 16'hd753;
      450: out3 <= 16'hd73f;
      451: out3 <= 16'hd72c;
      452: out3 <= 16'hd719;
      453: out3 <= 16'hd705;
      454: out3 <= 16'hd6f2;
      455: out3 <= 16'hd6df;
      456: out3 <= 16'hd6cb;
      457: out3 <= 16'hd6b8;
      458: out3 <= 16'hd6a5;
      459: out3 <= 16'hd692;
      460: out3 <= 16'hd67f;
      461: out3 <= 16'hd66c;
      462: out3 <= 16'hd659;
      463: out3 <= 16'hd645;
      464: out3 <= 16'hd632;
      465: out3 <= 16'hd61f;
      466: out3 <= 16'hd60c;
      467: out3 <= 16'hd5f9;
      468: out3 <= 16'hd5e6;
      469: out3 <= 16'hd5d4;
      470: out3 <= 16'hd5c1;
      471: out3 <= 16'hd5ae;
      472: out3 <= 16'hd59b;
      473: out3 <= 16'hd588;
      474: out3 <= 16'hd575;
      475: out3 <= 16'hd563;
      476: out3 <= 16'hd550;
      477: out3 <= 16'hd53d;
      478: out3 <= 16'hd52a;
      479: out3 <= 16'hd518;
      480: out3 <= 16'hd505;
      481: out3 <= 16'hd4f3;
      482: out3 <= 16'hd4e0;
      483: out3 <= 16'hd4cd;
      484: out3 <= 16'hd4bb;
      485: out3 <= 16'hd4a8;
      486: out3 <= 16'hd496;
      487: out3 <= 16'hd483;
      488: out3 <= 16'hd471;
      489: out3 <= 16'hd45f;
      490: out3 <= 16'hd44c;
      491: out3 <= 16'hd43a;
      492: out3 <= 16'hd428;
      493: out3 <= 16'hd415;
      494: out3 <= 16'hd403;
      495: out3 <= 16'hd3f1;
      496: out3 <= 16'hd3df;
      497: out3 <= 16'hd3cc;
      498: out3 <= 16'hd3ba;
      499: out3 <= 16'hd3a8;
      500: out3 <= 16'hd396;
      501: out3 <= 16'hd384;
      502: out3 <= 16'hd372;
      503: out3 <= 16'hd360;
      504: out3 <= 16'hd34e;
      505: out3 <= 16'hd33c;
      506: out3 <= 16'hd32a;
      507: out3 <= 16'hd318;
      508: out3 <= 16'hd306;
      509: out3 <= 16'hd2f4;
      510: out3 <= 16'hd2e2;
      511: out3 <= 16'hd2d1;
      512: out3 <= 16'hd2bf;
      513: out3 <= 16'hd2ad;
      514: out3 <= 16'hd29b;
      515: out3 <= 16'hd28a;
      516: out3 <= 16'hd278;
      517: out3 <= 16'hd266;
      518: out3 <= 16'hd255;
      519: out3 <= 16'hd243;
      520: out3 <= 16'hd231;
      521: out3 <= 16'hd220;
      522: out3 <= 16'hd20e;
      523: out3 <= 16'hd1fd;
      524: out3 <= 16'hd1eb;
      525: out3 <= 16'hd1da;
      526: out3 <= 16'hd1c9;
      527: out3 <= 16'hd1b7;
      528: out3 <= 16'hd1a6;
      529: out3 <= 16'hd195;
      530: out3 <= 16'hd183;
      531: out3 <= 16'hd172;
      532: out3 <= 16'hd161;
      533: out3 <= 16'hd150;
      534: out3 <= 16'hd13e;
      535: out3 <= 16'hd12d;
      536: out3 <= 16'hd11c;
      537: out3 <= 16'hd10b;
      538: out3 <= 16'hd0fa;
      539: out3 <= 16'hd0e9;
      540: out3 <= 16'hd0d8;
      541: out3 <= 16'hd0c7;
      542: out3 <= 16'hd0b6;
      543: out3 <= 16'hd0a5;
      544: out3 <= 16'hd094;
      545: out3 <= 16'hd083;
      546: out3 <= 16'hd073;
      547: out3 <= 16'hd062;
      548: out3 <= 16'hd051;
      549: out3 <= 16'hd040;
      550: out3 <= 16'hd030;
      551: out3 <= 16'hd01f;
      552: out3 <= 16'hd00e;
      553: out3 <= 16'hcffe;
      554: out3 <= 16'hcfed;
      555: out3 <= 16'hcfdc;
      556: out3 <= 16'hcfcc;
      557: out3 <= 16'hcfbb;
      558: out3 <= 16'hcfab;
      559: out3 <= 16'hcf9a;
      560: out3 <= 16'hcf8a;
      561: out3 <= 16'hcf79;
      562: out3 <= 16'hcf69;
      563: out3 <= 16'hcf59;
      564: out3 <= 16'hcf48;
      565: out3 <= 16'hcf38;
      566: out3 <= 16'hcf28;
      567: out3 <= 16'hcf18;
      568: out3 <= 16'hcf07;
      569: out3 <= 16'hcef7;
      570: out3 <= 16'hcee7;
      571: out3 <= 16'hced7;
      572: out3 <= 16'hcec7;
      573: out3 <= 16'hceb7;
      574: out3 <= 16'hcea7;
      575: out3 <= 16'hce97;
      576: out3 <= 16'hce87;
      577: out3 <= 16'hce77;
      578: out3 <= 16'hce67;
      579: out3 <= 16'hce57;
      580: out3 <= 16'hce47;
      581: out3 <= 16'hce38;
      582: out3 <= 16'hce28;
      583: out3 <= 16'hce18;
      584: out3 <= 16'hce08;
      585: out3 <= 16'hcdf9;
      586: out3 <= 16'hcde9;
      587: out3 <= 16'hcdd9;
      588: out3 <= 16'hcdca;
      589: out3 <= 16'hcdba;
      590: out3 <= 16'hcdab;
      591: out3 <= 16'hcd9b;
      592: out3 <= 16'hcd8c;
      593: out3 <= 16'hcd7c;
      594: out3 <= 16'hcd6d;
      595: out3 <= 16'hcd5d;
      596: out3 <= 16'hcd4e;
      597: out3 <= 16'hcd3f;
      598: out3 <= 16'hcd30;
      599: out3 <= 16'hcd20;
      600: out3 <= 16'hcd11;
      601: out3 <= 16'hcd02;
      602: out3 <= 16'hccf3;
      603: out3 <= 16'hcce3;
      604: out3 <= 16'hccd4;
      605: out3 <= 16'hccc5;
      606: out3 <= 16'hccb6;
      607: out3 <= 16'hcca7;
      608: out3 <= 16'hcc98;
      609: out3 <= 16'hcc89;
      610: out3 <= 16'hcc7a;
      611: out3 <= 16'hcc6b;
      612: out3 <= 16'hcc5d;
      613: out3 <= 16'hcc4e;
      614: out3 <= 16'hcc3f;
      615: out3 <= 16'hcc30;
      616: out3 <= 16'hcc21;
      617: out3 <= 16'hcc13;
      618: out3 <= 16'hcc04;
      619: out3 <= 16'hcbf5;
      620: out3 <= 16'hcbe7;
      621: out3 <= 16'hcbd8;
      622: out3 <= 16'hcbca;
      623: out3 <= 16'hcbbb;
      624: out3 <= 16'hcbad;
      625: out3 <= 16'hcb9e;
      626: out3 <= 16'hcb90;
      627: out3 <= 16'hcb81;
      628: out3 <= 16'hcb73;
      629: out3 <= 16'hcb65;
      630: out3 <= 16'hcb56;
      631: out3 <= 16'hcb48;
      632: out3 <= 16'hcb3a;
      633: out3 <= 16'hcb2c;
      634: out3 <= 16'hcb1e;
      635: out3 <= 16'hcb0f;
      636: out3 <= 16'hcb01;
      637: out3 <= 16'hcaf3;
      638: out3 <= 16'hcae5;
      639: out3 <= 16'hcad7;
      640: out3 <= 16'hcac9;
      641: out3 <= 16'hcabb;
      642: out3 <= 16'hcaad;
      643: out3 <= 16'hca9f;
      644: out3 <= 16'hca92;
      645: out3 <= 16'hca84;
      646: out3 <= 16'hca76;
      647: out3 <= 16'hca68;
      648: out3 <= 16'hca5b;
      649: out3 <= 16'hca4d;
      650: out3 <= 16'hca3f;
      651: out3 <= 16'hca32;
      652: out3 <= 16'hca24;
      653: out3 <= 16'hca16;
      654: out3 <= 16'hca09;
      655: out3 <= 16'hc9fb;
      656: out3 <= 16'hc9ee;
      657: out3 <= 16'hc9e0;
      658: out3 <= 16'hc9d3;
      659: out3 <= 16'hc9c6;
      660: out3 <= 16'hc9b8;
      661: out3 <= 16'hc9ab;
      662: out3 <= 16'hc99e;
      663: out3 <= 16'hc991;
      664: out3 <= 16'hc983;
      665: out3 <= 16'hc976;
      666: out3 <= 16'hc969;
      667: out3 <= 16'hc95c;
      668: out3 <= 16'hc94f;
      669: out3 <= 16'hc942;
      670: out3 <= 16'hc935;
      671: out3 <= 16'hc928;
      672: out3 <= 16'hc91b;
      673: out3 <= 16'hc90e;
      674: out3 <= 16'hc901;
      675: out3 <= 16'hc8f4;
      676: out3 <= 16'hc8e8;
      677: out3 <= 16'hc8db;
      678: out3 <= 16'hc8ce;
      679: out3 <= 16'hc8c1;
      680: out3 <= 16'hc8b5;
      681: out3 <= 16'hc8a8;
      682: out3 <= 16'hc89b;
      683: out3 <= 16'hc88f;
      684: out3 <= 16'hc882;
      685: out3 <= 16'hc876;
      686: out3 <= 16'hc869;
      687: out3 <= 16'hc85d;
      688: out3 <= 16'hc850;
      689: out3 <= 16'hc844;
      690: out3 <= 16'hc838;
      691: out3 <= 16'hc82b;
      692: out3 <= 16'hc81f;
      693: out3 <= 16'hc813;
      694: out3 <= 16'hc807;
      695: out3 <= 16'hc7fb;
      696: out3 <= 16'hc7ee;
      697: out3 <= 16'hc7e2;
      698: out3 <= 16'hc7d6;
      699: out3 <= 16'hc7ca;
      700: out3 <= 16'hc7be;
      701: out3 <= 16'hc7b2;
      702: out3 <= 16'hc7a6;
      703: out3 <= 16'hc79a;
      704: out3 <= 16'hc78f;
      705: out3 <= 16'hc783;
      706: out3 <= 16'hc777;
      707: out3 <= 16'hc76b;
      708: out3 <= 16'hc75f;
      709: out3 <= 16'hc754;
      710: out3 <= 16'hc748;
      711: out3 <= 16'hc73d;
      712: out3 <= 16'hc731;
      713: out3 <= 16'hc725;
      714: out3 <= 16'hc71a;
      715: out3 <= 16'hc70e;
      716: out3 <= 16'hc703;
      717: out3 <= 16'hc6f7;
      718: out3 <= 16'hc6ec;
      719: out3 <= 16'hc6e1;
      720: out3 <= 16'hc6d5;
      721: out3 <= 16'hc6ca;
      722: out3 <= 16'hc6bf;
      723: out3 <= 16'hc6b4;
      724: out3 <= 16'hc6a8;
      725: out3 <= 16'hc69d;
      726: out3 <= 16'hc692;
      727: out3 <= 16'hc687;
      728: out3 <= 16'hc67c;
      729: out3 <= 16'hc671;
      730: out3 <= 16'hc666;
      731: out3 <= 16'hc65b;
      732: out3 <= 16'hc650;
      733: out3 <= 16'hc645;
      734: out3 <= 16'hc63b;
      735: out3 <= 16'hc630;
      736: out3 <= 16'hc625;
      737: out3 <= 16'hc61a;
      738: out3 <= 16'hc610;
      739: out3 <= 16'hc605;
      740: out3 <= 16'hc5fa;
      741: out3 <= 16'hc5f0;
      742: out3 <= 16'hc5e5;
      743: out3 <= 16'hc5db;
      744: out3 <= 16'hc5d0;
      745: out3 <= 16'hc5c6;
      746: out3 <= 16'hc5bb;
      747: out3 <= 16'hc5b1;
      748: out3 <= 16'hc5a7;
      749: out3 <= 16'hc59c;
      750: out3 <= 16'hc592;
      751: out3 <= 16'hc588;
      752: out3 <= 16'hc57e;
      753: out3 <= 16'hc573;
      754: out3 <= 16'hc569;
      755: out3 <= 16'hc55f;
      756: out3 <= 16'hc555;
      757: out3 <= 16'hc54b;
      758: out3 <= 16'hc541;
      759: out3 <= 16'hc537;
      760: out3 <= 16'hc52d;
      761: out3 <= 16'hc523;
      762: out3 <= 16'hc51a;
      763: out3 <= 16'hc510;
      764: out3 <= 16'hc506;
      765: out3 <= 16'hc4fc;
      766: out3 <= 16'hc4f2;
      767: out3 <= 16'hc4e9;
      768: out3 <= 16'hc4df;
      769: out3 <= 16'hc4d6;
      770: out3 <= 16'hc4cc;
      771: out3 <= 16'hc4c2;
      772: out3 <= 16'hc4b9;
      773: out3 <= 16'hc4b0;
      774: out3 <= 16'hc4a6;
      775: out3 <= 16'hc49d;
      776: out3 <= 16'hc493;
      777: out3 <= 16'hc48a;
      778: out3 <= 16'hc481;
      779: out3 <= 16'hc478;
      780: out3 <= 16'hc46e;
      781: out3 <= 16'hc465;
      782: out3 <= 16'hc45c;
      783: out3 <= 16'hc453;
      784: out3 <= 16'hc44a;
      785: out3 <= 16'hc441;
      786: out3 <= 16'hc438;
      787: out3 <= 16'hc42f;
      788: out3 <= 16'hc426;
      789: out3 <= 16'hc41d;
      790: out3 <= 16'hc414;
      791: out3 <= 16'hc40b;
      792: out3 <= 16'hc403;
      793: out3 <= 16'hc3fa;
      794: out3 <= 16'hc3f1;
      795: out3 <= 16'hc3e9;
      796: out3 <= 16'hc3e0;
      797: out3 <= 16'hc3d7;
      798: out3 <= 16'hc3cf;
      799: out3 <= 16'hc3c6;
      800: out3 <= 16'hc3be;
      801: out3 <= 16'hc3b5;
      802: out3 <= 16'hc3ad;
      803: out3 <= 16'hc3a5;
      804: out3 <= 16'hc39c;
      805: out3 <= 16'hc394;
      806: out3 <= 16'hc38c;
      807: out3 <= 16'hc383;
      808: out3 <= 16'hc37b;
      809: out3 <= 16'hc373;
      810: out3 <= 16'hc36b;
      811: out3 <= 16'hc363;
      812: out3 <= 16'hc35b;
      813: out3 <= 16'hc353;
      814: out3 <= 16'hc34b;
      815: out3 <= 16'hc343;
      816: out3 <= 16'hc33b;
      817: out3 <= 16'hc333;
      818: out3 <= 16'hc32b;
      819: out3 <= 16'hc323;
      820: out3 <= 16'hc31c;
      821: out3 <= 16'hc314;
      822: out3 <= 16'hc30c;
      823: out3 <= 16'hc305;
      824: out3 <= 16'hc2fd;
      825: out3 <= 16'hc2f5;
      826: out3 <= 16'hc2ee;
      827: out3 <= 16'hc2e6;
      828: out3 <= 16'hc2df;
      829: out3 <= 16'hc2d8;
      830: out3 <= 16'hc2d0;
      831: out3 <= 16'hc2c9;
      832: out3 <= 16'hc2c1;
      833: out3 <= 16'hc2ba;
      834: out3 <= 16'hc2b3;
      835: out3 <= 16'hc2ac;
      836: out3 <= 16'hc2a5;
      837: out3 <= 16'hc29d;
      838: out3 <= 16'hc296;
      839: out3 <= 16'hc28f;
      840: out3 <= 16'hc288;
      841: out3 <= 16'hc281;
      842: out3 <= 16'hc27a;
      843: out3 <= 16'hc273;
      844: out3 <= 16'hc26d;
      845: out3 <= 16'hc266;
      846: out3 <= 16'hc25f;
      847: out3 <= 16'hc258;
      848: out3 <= 16'hc251;
      849: out3 <= 16'hc24b;
      850: out3 <= 16'hc244;
      851: out3 <= 16'hc23e;
      852: out3 <= 16'hc237;
      853: out3 <= 16'hc230;
      854: out3 <= 16'hc22a;
      855: out3 <= 16'hc223;
      856: out3 <= 16'hc21d;
      857: out3 <= 16'hc217;
      858: out3 <= 16'hc210;
      859: out3 <= 16'hc20a;
      860: out3 <= 16'hc204;
      861: out3 <= 16'hc1fd;
      862: out3 <= 16'hc1f7;
      863: out3 <= 16'hc1f1;
      864: out3 <= 16'hc1eb;
      865: out3 <= 16'hc1e5;
      866: out3 <= 16'hc1df;
      867: out3 <= 16'hc1d9;
      868: out3 <= 16'hc1d3;
      869: out3 <= 16'hc1cd;
      870: out3 <= 16'hc1c7;
      871: out3 <= 16'hc1c1;
      872: out3 <= 16'hc1bb;
      873: out3 <= 16'hc1b6;
      874: out3 <= 16'hc1b0;
      875: out3 <= 16'hc1aa;
      876: out3 <= 16'hc1a4;
      877: out3 <= 16'hc19f;
      878: out3 <= 16'hc199;
      879: out3 <= 16'hc194;
      880: out3 <= 16'hc18e;
      881: out3 <= 16'hc189;
      882: out3 <= 16'hc183;
      883: out3 <= 16'hc17e;
      884: out3 <= 16'hc178;
      885: out3 <= 16'hc173;
      886: out3 <= 16'hc16e;
      887: out3 <= 16'hc168;
      888: out3 <= 16'hc163;
      889: out3 <= 16'hc15e;
      890: out3 <= 16'hc159;
      891: out3 <= 16'hc154;
      892: out3 <= 16'hc14f;
      893: out3 <= 16'hc14a;
      894: out3 <= 16'hc145;
      895: out3 <= 16'hc140;
      896: out3 <= 16'hc13b;
      897: out3 <= 16'hc136;
      898: out3 <= 16'hc131;
      899: out3 <= 16'hc12c;
      900: out3 <= 16'hc128;
      901: out3 <= 16'hc123;
      902: out3 <= 16'hc11e;
      903: out3 <= 16'hc119;
      904: out3 <= 16'hc115;
      905: out3 <= 16'hc110;
      906: out3 <= 16'hc10c;
      907: out3 <= 16'hc107;
      908: out3 <= 16'hc103;
      909: out3 <= 16'hc0fe;
      910: out3 <= 16'hc0fa;
      911: out3 <= 16'hc0f6;
      912: out3 <= 16'hc0f1;
      913: out3 <= 16'hc0ed;
      914: out3 <= 16'hc0e9;
      915: out3 <= 16'hc0e4;
      916: out3 <= 16'hc0e0;
      917: out3 <= 16'hc0dc;
      918: out3 <= 16'hc0d8;
      919: out3 <= 16'hc0d4;
      920: out3 <= 16'hc0d0;
      921: out3 <= 16'hc0cc;
      922: out3 <= 16'hc0c8;
      923: out3 <= 16'hc0c4;
      924: out3 <= 16'hc0c0;
      925: out3 <= 16'hc0bd;
      926: out3 <= 16'hc0b9;
      927: out3 <= 16'hc0b5;
      928: out3 <= 16'hc0b1;
      929: out3 <= 16'hc0ae;
      930: out3 <= 16'hc0aa;
      931: out3 <= 16'hc0a6;
      932: out3 <= 16'hc0a3;
      933: out3 <= 16'hc09f;
      934: out3 <= 16'hc09c;
      935: out3 <= 16'hc098;
      936: out3 <= 16'hc095;
      937: out3 <= 16'hc092;
      938: out3 <= 16'hc08e;
      939: out3 <= 16'hc08b;
      940: out3 <= 16'hc088;
      941: out3 <= 16'hc085;
      942: out3 <= 16'hc081;
      943: out3 <= 16'hc07e;
      944: out3 <= 16'hc07b;
      945: out3 <= 16'hc078;
      946: out3 <= 16'hc075;
      947: out3 <= 16'hc072;
      948: out3 <= 16'hc06f;
      949: out3 <= 16'hc06c;
      950: out3 <= 16'hc069;
      951: out3 <= 16'hc067;
      952: out3 <= 16'hc064;
      953: out3 <= 16'hc061;
      954: out3 <= 16'hc05e;
      955: out3 <= 16'hc05c;
      956: out3 <= 16'hc059;
      957: out3 <= 16'hc056;
      958: out3 <= 16'hc054;
      959: out3 <= 16'hc051;
      960: out3 <= 16'hc04f;
      961: out3 <= 16'hc04c;
      962: out3 <= 16'hc04a;
      963: out3 <= 16'hc048;
      964: out3 <= 16'hc045;
      965: out3 <= 16'hc043;
      966: out3 <= 16'hc041;
      967: out3 <= 16'hc03f;
      968: out3 <= 16'hc03c;
      969: out3 <= 16'hc03a;
      970: out3 <= 16'hc038;
      971: out3 <= 16'hc036;
      972: out3 <= 16'hc034;
      973: out3 <= 16'hc032;
      974: out3 <= 16'hc030;
      975: out3 <= 16'hc02e;
      976: out3 <= 16'hc02c;
      977: out3 <= 16'hc02b;
      978: out3 <= 16'hc029;
      979: out3 <= 16'hc027;
      980: out3 <= 16'hc025;
      981: out3 <= 16'hc024;
      982: out3 <= 16'hc022;
      983: out3 <= 16'hc020;
      984: out3 <= 16'hc01f;
      985: out3 <= 16'hc01d;
      986: out3 <= 16'hc01c;
      987: out3 <= 16'hc01a;
      988: out3 <= 16'hc019;
      989: out3 <= 16'hc018;
      990: out3 <= 16'hc016;
      991: out3 <= 16'hc015;
      992: out3 <= 16'hc014;
      993: out3 <= 16'hc013;
      994: out3 <= 16'hc011;
      995: out3 <= 16'hc010;
      996: out3 <= 16'hc00f;
      997: out3 <= 16'hc00e;
      998: out3 <= 16'hc00d;
      999: out3 <= 16'hc00c;
      1000: out3 <= 16'hc00b;
      1001: out3 <= 16'hc00a;
      1002: out3 <= 16'hc009;
      1003: out3 <= 16'hc009;
      1004: out3 <= 16'hc008;
      1005: out3 <= 16'hc007;
      1006: out3 <= 16'hc006;
      1007: out3 <= 16'hc006;
      1008: out3 <= 16'hc005;
      1009: out3 <= 16'hc004;
      1010: out3 <= 16'hc004;
      1011: out3 <= 16'hc003;
      1012: out3 <= 16'hc003;
      1013: out3 <= 16'hc002;
      1014: out3 <= 16'hc002;
      1015: out3 <= 16'hc002;
      1016: out3 <= 16'hc001;
      1017: out3 <= 16'hc001;
      1018: out3 <= 16'hc001;
      1019: out3 <= 16'hc000;
      1020: out3 <= 16'hc000;
      1021: out3 <= 16'hc000;
      1022: out3 <= 16'hc000;
      1023: out3 <= 16'hc000;
      1024: out3 <= 16'hc000;
      1025: out3 <= 16'hc000;
      1026: out3 <= 16'hc000;
      1027: out3 <= 16'hc000;
      1028: out3 <= 16'hc000;
      1029: out3 <= 16'hc000;
      1030: out3 <= 16'hc001;
      1031: out3 <= 16'hc001;
      1032: out3 <= 16'hc001;
      1033: out3 <= 16'hc002;
      1034: out3 <= 16'hc002;
      1035: out3 <= 16'hc002;
      1036: out3 <= 16'hc003;
      1037: out3 <= 16'hc003;
      1038: out3 <= 16'hc004;
      1039: out3 <= 16'hc004;
      1040: out3 <= 16'hc005;
      1041: out3 <= 16'hc006;
      1042: out3 <= 16'hc006;
      1043: out3 <= 16'hc007;
      1044: out3 <= 16'hc008;
      1045: out3 <= 16'hc009;
      1046: out3 <= 16'hc009;
      1047: out3 <= 16'hc00a;
      1048: out3 <= 16'hc00b;
      1049: out3 <= 16'hc00c;
      1050: out3 <= 16'hc00d;
      1051: out3 <= 16'hc00e;
      1052: out3 <= 16'hc00f;
      1053: out3 <= 16'hc010;
      1054: out3 <= 16'hc011;
      1055: out3 <= 16'hc013;
      1056: out3 <= 16'hc014;
      1057: out3 <= 16'hc015;
      1058: out3 <= 16'hc016;
      1059: out3 <= 16'hc018;
      1060: out3 <= 16'hc019;
      1061: out3 <= 16'hc01a;
      1062: out3 <= 16'hc01c;
      1063: out3 <= 16'hc01d;
      1064: out3 <= 16'hc01f;
      1065: out3 <= 16'hc020;
      1066: out3 <= 16'hc022;
      1067: out3 <= 16'hc024;
      1068: out3 <= 16'hc025;
      1069: out3 <= 16'hc027;
      1070: out3 <= 16'hc029;
      1071: out3 <= 16'hc02b;
      1072: out3 <= 16'hc02c;
      1073: out3 <= 16'hc02e;
      1074: out3 <= 16'hc030;
      1075: out3 <= 16'hc032;
      1076: out3 <= 16'hc034;
      1077: out3 <= 16'hc036;
      1078: out3 <= 16'hc038;
      1079: out3 <= 16'hc03a;
      1080: out3 <= 16'hc03c;
      1081: out3 <= 16'hc03f;
      1082: out3 <= 16'hc041;
      1083: out3 <= 16'hc043;
      1084: out3 <= 16'hc045;
      1085: out3 <= 16'hc048;
      1086: out3 <= 16'hc04a;
      1087: out3 <= 16'hc04c;
      1088: out3 <= 16'hc04f;
      1089: out3 <= 16'hc051;
      1090: out3 <= 16'hc054;
      1091: out3 <= 16'hc056;
      1092: out3 <= 16'hc059;
      1093: out3 <= 16'hc05c;
      1094: out3 <= 16'hc05e;
      1095: out3 <= 16'hc061;
      1096: out3 <= 16'hc064;
      1097: out3 <= 16'hc067;
      1098: out3 <= 16'hc069;
      1099: out3 <= 16'hc06c;
      1100: out3 <= 16'hc06f;
      1101: out3 <= 16'hc072;
      1102: out3 <= 16'hc075;
      1103: out3 <= 16'hc078;
      1104: out3 <= 16'hc07b;
      1105: out3 <= 16'hc07e;
      1106: out3 <= 16'hc081;
      1107: out3 <= 16'hc085;
      1108: out3 <= 16'hc088;
      1109: out3 <= 16'hc08b;
      1110: out3 <= 16'hc08e;
      1111: out3 <= 16'hc092;
      1112: out3 <= 16'hc095;
      1113: out3 <= 16'hc098;
      1114: out3 <= 16'hc09c;
      1115: out3 <= 16'hc09f;
      1116: out3 <= 16'hc0a3;
      1117: out3 <= 16'hc0a6;
      1118: out3 <= 16'hc0aa;
      1119: out3 <= 16'hc0ae;
      1120: out3 <= 16'hc0b1;
      1121: out3 <= 16'hc0b5;
      1122: out3 <= 16'hc0b9;
      1123: out3 <= 16'hc0bd;
      1124: out3 <= 16'hc0c0;
      1125: out3 <= 16'hc0c4;
      1126: out3 <= 16'hc0c8;
      1127: out3 <= 16'hc0cc;
      1128: out3 <= 16'hc0d0;
      1129: out3 <= 16'hc0d4;
      1130: out3 <= 16'hc0d8;
      1131: out3 <= 16'hc0dc;
      1132: out3 <= 16'hc0e0;
      1133: out3 <= 16'hc0e4;
      1134: out3 <= 16'hc0e9;
      1135: out3 <= 16'hc0ed;
      1136: out3 <= 16'hc0f1;
      1137: out3 <= 16'hc0f6;
      1138: out3 <= 16'hc0fa;
      1139: out3 <= 16'hc0fe;
      1140: out3 <= 16'hc103;
      1141: out3 <= 16'hc107;
      1142: out3 <= 16'hc10c;
      1143: out3 <= 16'hc110;
      1144: out3 <= 16'hc115;
      1145: out3 <= 16'hc119;
      1146: out3 <= 16'hc11e;
      1147: out3 <= 16'hc123;
      1148: out3 <= 16'hc128;
      1149: out3 <= 16'hc12c;
      1150: out3 <= 16'hc131;
      1151: out3 <= 16'hc136;
      1152: out3 <= 16'hc13b;
      1153: out3 <= 16'hc140;
      1154: out3 <= 16'hc145;
      1155: out3 <= 16'hc14a;
      1156: out3 <= 16'hc14f;
      1157: out3 <= 16'hc154;
      1158: out3 <= 16'hc159;
      1159: out3 <= 16'hc15e;
      1160: out3 <= 16'hc163;
      1161: out3 <= 16'hc168;
      1162: out3 <= 16'hc16e;
      1163: out3 <= 16'hc173;
      1164: out3 <= 16'hc178;
      1165: out3 <= 16'hc17e;
      1166: out3 <= 16'hc183;
      1167: out3 <= 16'hc189;
      1168: out3 <= 16'hc18e;
      1169: out3 <= 16'hc194;
      1170: out3 <= 16'hc199;
      1171: out3 <= 16'hc19f;
      1172: out3 <= 16'hc1a4;
      1173: out3 <= 16'hc1aa;
      1174: out3 <= 16'hc1b0;
      1175: out3 <= 16'hc1b6;
      1176: out3 <= 16'hc1bb;
      1177: out3 <= 16'hc1c1;
      1178: out3 <= 16'hc1c7;
      1179: out3 <= 16'hc1cd;
      1180: out3 <= 16'hc1d3;
      1181: out3 <= 16'hc1d9;
      1182: out3 <= 16'hc1df;
      1183: out3 <= 16'hc1e5;
      1184: out3 <= 16'hc1eb;
      1185: out3 <= 16'hc1f1;
      1186: out3 <= 16'hc1f7;
      1187: out3 <= 16'hc1fd;
      1188: out3 <= 16'hc204;
      1189: out3 <= 16'hc20a;
      1190: out3 <= 16'hc210;
      1191: out3 <= 16'hc217;
      1192: out3 <= 16'hc21d;
      1193: out3 <= 16'hc223;
      1194: out3 <= 16'hc22a;
      1195: out3 <= 16'hc230;
      1196: out3 <= 16'hc237;
      1197: out3 <= 16'hc23e;
      1198: out3 <= 16'hc244;
      1199: out3 <= 16'hc24b;
      1200: out3 <= 16'hc251;
      1201: out3 <= 16'hc258;
      1202: out3 <= 16'hc25f;
      1203: out3 <= 16'hc266;
      1204: out3 <= 16'hc26d;
      1205: out3 <= 16'hc273;
      1206: out3 <= 16'hc27a;
      1207: out3 <= 16'hc281;
      1208: out3 <= 16'hc288;
      1209: out3 <= 16'hc28f;
      1210: out3 <= 16'hc296;
      1211: out3 <= 16'hc29d;
      1212: out3 <= 16'hc2a5;
      1213: out3 <= 16'hc2ac;
      1214: out3 <= 16'hc2b3;
      1215: out3 <= 16'hc2ba;
      1216: out3 <= 16'hc2c1;
      1217: out3 <= 16'hc2c9;
      1218: out3 <= 16'hc2d0;
      1219: out3 <= 16'hc2d8;
      1220: out3 <= 16'hc2df;
      1221: out3 <= 16'hc2e6;
      1222: out3 <= 16'hc2ee;
      1223: out3 <= 16'hc2f5;
      1224: out3 <= 16'hc2fd;
      1225: out3 <= 16'hc305;
      1226: out3 <= 16'hc30c;
      1227: out3 <= 16'hc314;
      1228: out3 <= 16'hc31c;
      1229: out3 <= 16'hc323;
      1230: out3 <= 16'hc32b;
      1231: out3 <= 16'hc333;
      1232: out3 <= 16'hc33b;
      1233: out3 <= 16'hc343;
      1234: out3 <= 16'hc34b;
      1235: out3 <= 16'hc353;
      1236: out3 <= 16'hc35b;
      1237: out3 <= 16'hc363;
      1238: out3 <= 16'hc36b;
      1239: out3 <= 16'hc373;
      1240: out3 <= 16'hc37b;
      1241: out3 <= 16'hc383;
      1242: out3 <= 16'hc38c;
      1243: out3 <= 16'hc394;
      1244: out3 <= 16'hc39c;
      1245: out3 <= 16'hc3a5;
      1246: out3 <= 16'hc3ad;
      1247: out3 <= 16'hc3b5;
      1248: out3 <= 16'hc3be;
      1249: out3 <= 16'hc3c6;
      1250: out3 <= 16'hc3cf;
      1251: out3 <= 16'hc3d7;
      1252: out3 <= 16'hc3e0;
      1253: out3 <= 16'hc3e9;
      1254: out3 <= 16'hc3f1;
      1255: out3 <= 16'hc3fa;
      1256: out3 <= 16'hc403;
      1257: out3 <= 16'hc40b;
      1258: out3 <= 16'hc414;
      1259: out3 <= 16'hc41d;
      1260: out3 <= 16'hc426;
      1261: out3 <= 16'hc42f;
      1262: out3 <= 16'hc438;
      1263: out3 <= 16'hc441;
      1264: out3 <= 16'hc44a;
      1265: out3 <= 16'hc453;
      1266: out3 <= 16'hc45c;
      1267: out3 <= 16'hc465;
      1268: out3 <= 16'hc46e;
      1269: out3 <= 16'hc478;
      1270: out3 <= 16'hc481;
      1271: out3 <= 16'hc48a;
      1272: out3 <= 16'hc493;
      1273: out3 <= 16'hc49d;
      1274: out3 <= 16'hc4a6;
      1275: out3 <= 16'hc4b0;
      1276: out3 <= 16'hc4b9;
      1277: out3 <= 16'hc4c2;
      1278: out3 <= 16'hc4cc;
      1279: out3 <= 16'hc4d6;
      1280: out3 <= 16'hc4df;
      1281: out3 <= 16'hc4e9;
      1282: out3 <= 16'hc4f2;
      1283: out3 <= 16'hc4fc;
      1284: out3 <= 16'hc506;
      1285: out3 <= 16'hc510;
      1286: out3 <= 16'hc51a;
      1287: out3 <= 16'hc523;
      1288: out3 <= 16'hc52d;
      1289: out3 <= 16'hc537;
      1290: out3 <= 16'hc541;
      1291: out3 <= 16'hc54b;
      1292: out3 <= 16'hc555;
      1293: out3 <= 16'hc55f;
      1294: out3 <= 16'hc569;
      1295: out3 <= 16'hc573;
      1296: out3 <= 16'hc57e;
      1297: out3 <= 16'hc588;
      1298: out3 <= 16'hc592;
      1299: out3 <= 16'hc59c;
      1300: out3 <= 16'hc5a7;
      1301: out3 <= 16'hc5b1;
      1302: out3 <= 16'hc5bb;
      1303: out3 <= 16'hc5c6;
      1304: out3 <= 16'hc5d0;
      1305: out3 <= 16'hc5db;
      1306: out3 <= 16'hc5e5;
      1307: out3 <= 16'hc5f0;
      1308: out3 <= 16'hc5fa;
      1309: out3 <= 16'hc605;
      1310: out3 <= 16'hc610;
      1311: out3 <= 16'hc61a;
      1312: out3 <= 16'hc625;
      1313: out3 <= 16'hc630;
      1314: out3 <= 16'hc63b;
      1315: out3 <= 16'hc645;
      1316: out3 <= 16'hc650;
      1317: out3 <= 16'hc65b;
      1318: out3 <= 16'hc666;
      1319: out3 <= 16'hc671;
      1320: out3 <= 16'hc67c;
      1321: out3 <= 16'hc687;
      1322: out3 <= 16'hc692;
      1323: out3 <= 16'hc69d;
      1324: out3 <= 16'hc6a8;
      1325: out3 <= 16'hc6b4;
      1326: out3 <= 16'hc6bf;
      1327: out3 <= 16'hc6ca;
      1328: out3 <= 16'hc6d5;
      1329: out3 <= 16'hc6e1;
      1330: out3 <= 16'hc6ec;
      1331: out3 <= 16'hc6f7;
      1332: out3 <= 16'hc703;
      1333: out3 <= 16'hc70e;
      1334: out3 <= 16'hc71a;
      1335: out3 <= 16'hc725;
      1336: out3 <= 16'hc731;
      1337: out3 <= 16'hc73d;
      1338: out3 <= 16'hc748;
      1339: out3 <= 16'hc754;
      1340: out3 <= 16'hc75f;
      1341: out3 <= 16'hc76b;
      1342: out3 <= 16'hc777;
      1343: out3 <= 16'hc783;
      1344: out3 <= 16'hc78f;
      1345: out3 <= 16'hc79a;
      1346: out3 <= 16'hc7a6;
      1347: out3 <= 16'hc7b2;
      1348: out3 <= 16'hc7be;
      1349: out3 <= 16'hc7ca;
      1350: out3 <= 16'hc7d6;
      1351: out3 <= 16'hc7e2;
      1352: out3 <= 16'hc7ee;
      1353: out3 <= 16'hc7fb;
      1354: out3 <= 16'hc807;
      1355: out3 <= 16'hc813;
      1356: out3 <= 16'hc81f;
      1357: out3 <= 16'hc82b;
      1358: out3 <= 16'hc838;
      1359: out3 <= 16'hc844;
      1360: out3 <= 16'hc850;
      1361: out3 <= 16'hc85d;
      1362: out3 <= 16'hc869;
      1363: out3 <= 16'hc876;
      1364: out3 <= 16'hc882;
      1365: out3 <= 16'hc88f;
      1366: out3 <= 16'hc89b;
      1367: out3 <= 16'hc8a8;
      1368: out3 <= 16'hc8b5;
      1369: out3 <= 16'hc8c1;
      1370: out3 <= 16'hc8ce;
      1371: out3 <= 16'hc8db;
      1372: out3 <= 16'hc8e8;
      1373: out3 <= 16'hc8f4;
      1374: out3 <= 16'hc901;
      1375: out3 <= 16'hc90e;
      1376: out3 <= 16'hc91b;
      1377: out3 <= 16'hc928;
      1378: out3 <= 16'hc935;
      1379: out3 <= 16'hc942;
      1380: out3 <= 16'hc94f;
      1381: out3 <= 16'hc95c;
      1382: out3 <= 16'hc969;
      1383: out3 <= 16'hc976;
      1384: out3 <= 16'hc983;
      1385: out3 <= 16'hc991;
      1386: out3 <= 16'hc99e;
      1387: out3 <= 16'hc9ab;
      1388: out3 <= 16'hc9b8;
      1389: out3 <= 16'hc9c6;
      1390: out3 <= 16'hc9d3;
      1391: out3 <= 16'hc9e0;
      1392: out3 <= 16'hc9ee;
      1393: out3 <= 16'hc9fb;
      1394: out3 <= 16'hca09;
      1395: out3 <= 16'hca16;
      1396: out3 <= 16'hca24;
      1397: out3 <= 16'hca32;
      1398: out3 <= 16'hca3f;
      1399: out3 <= 16'hca4d;
      1400: out3 <= 16'hca5b;
      1401: out3 <= 16'hca68;
      1402: out3 <= 16'hca76;
      1403: out3 <= 16'hca84;
      1404: out3 <= 16'hca92;
      1405: out3 <= 16'hca9f;
      1406: out3 <= 16'hcaad;
      1407: out3 <= 16'hcabb;
      1408: out3 <= 16'hcac9;
      1409: out3 <= 16'hcad7;
      1410: out3 <= 16'hcae5;
      1411: out3 <= 16'hcaf3;
      1412: out3 <= 16'hcb01;
      1413: out3 <= 16'hcb0f;
      1414: out3 <= 16'hcb1e;
      1415: out3 <= 16'hcb2c;
      1416: out3 <= 16'hcb3a;
      1417: out3 <= 16'hcb48;
      1418: out3 <= 16'hcb56;
      1419: out3 <= 16'hcb65;
      1420: out3 <= 16'hcb73;
      1421: out3 <= 16'hcb81;
      1422: out3 <= 16'hcb90;
      1423: out3 <= 16'hcb9e;
      1424: out3 <= 16'hcbad;
      1425: out3 <= 16'hcbbb;
      1426: out3 <= 16'hcbca;
      1427: out3 <= 16'hcbd8;
      1428: out3 <= 16'hcbe7;
      1429: out3 <= 16'hcbf5;
      1430: out3 <= 16'hcc04;
      1431: out3 <= 16'hcc13;
      1432: out3 <= 16'hcc21;
      1433: out3 <= 16'hcc30;
      1434: out3 <= 16'hcc3f;
      1435: out3 <= 16'hcc4e;
      1436: out3 <= 16'hcc5d;
      1437: out3 <= 16'hcc6b;
      1438: out3 <= 16'hcc7a;
      1439: out3 <= 16'hcc89;
      1440: out3 <= 16'hcc98;
      1441: out3 <= 16'hcca7;
      1442: out3 <= 16'hccb6;
      1443: out3 <= 16'hccc5;
      1444: out3 <= 16'hccd4;
      1445: out3 <= 16'hcce3;
      1446: out3 <= 16'hccf3;
      1447: out3 <= 16'hcd02;
      1448: out3 <= 16'hcd11;
      1449: out3 <= 16'hcd20;
      1450: out3 <= 16'hcd30;
      1451: out3 <= 16'hcd3f;
      1452: out3 <= 16'hcd4e;
      1453: out3 <= 16'hcd5d;
      1454: out3 <= 16'hcd6d;
      1455: out3 <= 16'hcd7c;
      1456: out3 <= 16'hcd8c;
      1457: out3 <= 16'hcd9b;
      1458: out3 <= 16'hcdab;
      1459: out3 <= 16'hcdba;
      1460: out3 <= 16'hcdca;
      1461: out3 <= 16'hcdd9;
      1462: out3 <= 16'hcde9;
      1463: out3 <= 16'hcdf9;
      1464: out3 <= 16'hce08;
      1465: out3 <= 16'hce18;
      1466: out3 <= 16'hce28;
      1467: out3 <= 16'hce38;
      1468: out3 <= 16'hce47;
      1469: out3 <= 16'hce57;
      1470: out3 <= 16'hce67;
      1471: out3 <= 16'hce77;
      1472: out3 <= 16'hce87;
      1473: out3 <= 16'hce97;
      1474: out3 <= 16'hcea7;
      1475: out3 <= 16'hceb7;
      1476: out3 <= 16'hcec7;
      1477: out3 <= 16'hced7;
      1478: out3 <= 16'hcee7;
      1479: out3 <= 16'hcef7;
      1480: out3 <= 16'hcf07;
      1481: out3 <= 16'hcf18;
      1482: out3 <= 16'hcf28;
      1483: out3 <= 16'hcf38;
      1484: out3 <= 16'hcf48;
      1485: out3 <= 16'hcf59;
      1486: out3 <= 16'hcf69;
      1487: out3 <= 16'hcf79;
      1488: out3 <= 16'hcf8a;
      1489: out3 <= 16'hcf9a;
      1490: out3 <= 16'hcfab;
      1491: out3 <= 16'hcfbb;
      1492: out3 <= 16'hcfcc;
      1493: out3 <= 16'hcfdc;
      1494: out3 <= 16'hcfed;
      1495: out3 <= 16'hcffe;
      1496: out3 <= 16'hd00e;
      1497: out3 <= 16'hd01f;
      1498: out3 <= 16'hd030;
      1499: out3 <= 16'hd040;
      1500: out3 <= 16'hd051;
      1501: out3 <= 16'hd062;
      1502: out3 <= 16'hd073;
      1503: out3 <= 16'hd083;
      1504: out3 <= 16'hd094;
      1505: out3 <= 16'hd0a5;
      1506: out3 <= 16'hd0b6;
      1507: out3 <= 16'hd0c7;
      1508: out3 <= 16'hd0d8;
      1509: out3 <= 16'hd0e9;
      1510: out3 <= 16'hd0fa;
      1511: out3 <= 16'hd10b;
      1512: out3 <= 16'hd11c;
      1513: out3 <= 16'hd12d;
      1514: out3 <= 16'hd13e;
      1515: out3 <= 16'hd150;
      1516: out3 <= 16'hd161;
      1517: out3 <= 16'hd172;
      1518: out3 <= 16'hd183;
      1519: out3 <= 16'hd195;
      1520: out3 <= 16'hd1a6;
      1521: out3 <= 16'hd1b7;
      1522: out3 <= 16'hd1c9;
      1523: out3 <= 16'hd1da;
      1524: out3 <= 16'hd1eb;
      1525: out3 <= 16'hd1fd;
      1526: out3 <= 16'hd20e;
      1527: out3 <= 16'hd220;
      1528: out3 <= 16'hd231;
      1529: out3 <= 16'hd243;
      1530: out3 <= 16'hd255;
      1531: out3 <= 16'hd266;
      1532: out3 <= 16'hd278;
      1533: out3 <= 16'hd28a;
      1534: out3 <= 16'hd29b;
      1535: out3 <= 16'hd2ad;
      1536: out3 <= 16'hd2bf;
      1537: out3 <= 16'hd2d1;
      1538: out3 <= 16'hd2e2;
      1539: out3 <= 16'hd2f4;
      1540: out3 <= 16'hd306;
      1541: out3 <= 16'hd318;
      1542: out3 <= 16'hd32a;
      1543: out3 <= 16'hd33c;
      1544: out3 <= 16'hd34e;
      1545: out3 <= 16'hd360;
      1546: out3 <= 16'hd372;
      1547: out3 <= 16'hd384;
      1548: out3 <= 16'hd396;
      1549: out3 <= 16'hd3a8;
      1550: out3 <= 16'hd3ba;
      1551: out3 <= 16'hd3cc;
      1552: out3 <= 16'hd3df;
      1553: out3 <= 16'hd3f1;
      1554: out3 <= 16'hd403;
      1555: out3 <= 16'hd415;
      1556: out3 <= 16'hd428;
      1557: out3 <= 16'hd43a;
      1558: out3 <= 16'hd44c;
      1559: out3 <= 16'hd45f;
      1560: out3 <= 16'hd471;
      1561: out3 <= 16'hd483;
      1562: out3 <= 16'hd496;
      1563: out3 <= 16'hd4a8;
      1564: out3 <= 16'hd4bb;
      1565: out3 <= 16'hd4cd;
      1566: out3 <= 16'hd4e0;
      1567: out3 <= 16'hd4f3;
      1568: out3 <= 16'hd505;
      1569: out3 <= 16'hd518;
      1570: out3 <= 16'hd52a;
      1571: out3 <= 16'hd53d;
      1572: out3 <= 16'hd550;
      1573: out3 <= 16'hd563;
      1574: out3 <= 16'hd575;
      1575: out3 <= 16'hd588;
      1576: out3 <= 16'hd59b;
      1577: out3 <= 16'hd5ae;
      1578: out3 <= 16'hd5c1;
      1579: out3 <= 16'hd5d4;
      1580: out3 <= 16'hd5e6;
      1581: out3 <= 16'hd5f9;
      1582: out3 <= 16'hd60c;
      1583: out3 <= 16'hd61f;
      1584: out3 <= 16'hd632;
      1585: out3 <= 16'hd645;
      1586: out3 <= 16'hd659;
      1587: out3 <= 16'hd66c;
      1588: out3 <= 16'hd67f;
      1589: out3 <= 16'hd692;
      1590: out3 <= 16'hd6a5;
      1591: out3 <= 16'hd6b8;
      1592: out3 <= 16'hd6cb;
      1593: out3 <= 16'hd6df;
      1594: out3 <= 16'hd6f2;
      1595: out3 <= 16'hd705;
      1596: out3 <= 16'hd719;
      1597: out3 <= 16'hd72c;
      1598: out3 <= 16'hd73f;
      1599: out3 <= 16'hd753;
      1600: out3 <= 16'hd766;
      1601: out3 <= 16'hd77a;
      1602: out3 <= 16'hd78d;
      1603: out3 <= 16'hd7a0;
      1604: out3 <= 16'hd7b4;
      1605: out3 <= 16'hd7c8;
      1606: out3 <= 16'hd7db;
      1607: out3 <= 16'hd7ef;
      1608: out3 <= 16'hd802;
      1609: out3 <= 16'hd816;
      1610: out3 <= 16'hd82a;
      1611: out3 <= 16'hd83d;
      1612: out3 <= 16'hd851;
      1613: out3 <= 16'hd865;
      1614: out3 <= 16'hd878;
      1615: out3 <= 16'hd88c;
      1616: out3 <= 16'hd8a0;
      1617: out3 <= 16'hd8b4;
      1618: out3 <= 16'hd8c8;
      1619: out3 <= 16'hd8dc;
      1620: out3 <= 16'hd8ef;
      1621: out3 <= 16'hd903;
      1622: out3 <= 16'hd917;
      1623: out3 <= 16'hd92b;
      1624: out3 <= 16'hd93f;
      1625: out3 <= 16'hd953;
      1626: out3 <= 16'hd967;
      1627: out3 <= 16'hd97b;
      1628: out3 <= 16'hd98f;
      1629: out3 <= 16'hd9a4;
      1630: out3 <= 16'hd9b8;
      1631: out3 <= 16'hd9cc;
      1632: out3 <= 16'hd9e0;
      1633: out3 <= 16'hd9f4;
      1634: out3 <= 16'hda08;
      1635: out3 <= 16'hda1d;
      1636: out3 <= 16'hda31;
      1637: out3 <= 16'hda45;
      1638: out3 <= 16'hda5a;
      1639: out3 <= 16'hda6e;
      1640: out3 <= 16'hda82;
      1641: out3 <= 16'hda97;
      1642: out3 <= 16'hdaab;
      1643: out3 <= 16'hdabf;
      1644: out3 <= 16'hdad4;
      1645: out3 <= 16'hdae8;
      1646: out3 <= 16'hdafd;
      1647: out3 <= 16'hdb11;
      1648: out3 <= 16'hdb26;
      1649: out3 <= 16'hdb3b;
      1650: out3 <= 16'hdb4f;
      1651: out3 <= 16'hdb64;
      1652: out3 <= 16'hdb78;
      1653: out3 <= 16'hdb8d;
      1654: out3 <= 16'hdba2;
      1655: out3 <= 16'hdbb6;
      1656: out3 <= 16'hdbcb;
      1657: out3 <= 16'hdbe0;
      1658: out3 <= 16'hdbf5;
      1659: out3 <= 16'hdc09;
      1660: out3 <= 16'hdc1e;
      1661: out3 <= 16'hdc33;
      1662: out3 <= 16'hdc48;
      1663: out3 <= 16'hdc5d;
      1664: out3 <= 16'hdc72;
      1665: out3 <= 16'hdc86;
      1666: out3 <= 16'hdc9b;
      1667: out3 <= 16'hdcb0;
      1668: out3 <= 16'hdcc5;
      1669: out3 <= 16'hdcda;
      1670: out3 <= 16'hdcef;
      1671: out3 <= 16'hdd04;
      1672: out3 <= 16'hdd19;
      1673: out3 <= 16'hdd2e;
      1674: out3 <= 16'hdd44;
      1675: out3 <= 16'hdd59;
      1676: out3 <= 16'hdd6e;
      1677: out3 <= 16'hdd83;
      1678: out3 <= 16'hdd98;
      1679: out3 <= 16'hddad;
      1680: out3 <= 16'hddc3;
      1681: out3 <= 16'hddd8;
      1682: out3 <= 16'hdded;
      1683: out3 <= 16'hde02;
      1684: out3 <= 16'hde18;
      1685: out3 <= 16'hde2d;
      1686: out3 <= 16'hde42;
      1687: out3 <= 16'hde58;
      1688: out3 <= 16'hde6d;
      1689: out3 <= 16'hde83;
      1690: out3 <= 16'hde98;
      1691: out3 <= 16'hdead;
      1692: out3 <= 16'hdec3;
      1693: out3 <= 16'hded8;
      1694: out3 <= 16'hdeee;
      1695: out3 <= 16'hdf03;
      1696: out3 <= 16'hdf19;
      1697: out3 <= 16'hdf2f;
      1698: out3 <= 16'hdf44;
      1699: out3 <= 16'hdf5a;
      1700: out3 <= 16'hdf6f;
      1701: out3 <= 16'hdf85;
      1702: out3 <= 16'hdf9b;
      1703: out3 <= 16'hdfb0;
      1704: out3 <= 16'hdfc6;
      1705: out3 <= 16'hdfdc;
      1706: out3 <= 16'hdff1;
      1707: out3 <= 16'he007;
      1708: out3 <= 16'he01d;
      1709: out3 <= 16'he033;
      1710: out3 <= 16'he049;
      1711: out3 <= 16'he05e;
      1712: out3 <= 16'he074;
      1713: out3 <= 16'he08a;
      1714: out3 <= 16'he0a0;
      1715: out3 <= 16'he0b6;
      1716: out3 <= 16'he0cc;
      1717: out3 <= 16'he0e2;
      1718: out3 <= 16'he0f8;
      1719: out3 <= 16'he10e;
      1720: out3 <= 16'he124;
      1721: out3 <= 16'he13a;
      1722: out3 <= 16'he150;
      1723: out3 <= 16'he166;
      1724: out3 <= 16'he17c;
      1725: out3 <= 16'he192;
      1726: out3 <= 16'he1a8;
      1727: out3 <= 16'he1be;
      1728: out3 <= 16'he1d5;
      1729: out3 <= 16'he1eb;
      1730: out3 <= 16'he201;
      1731: out3 <= 16'he217;
      1732: out3 <= 16'he22d;
      1733: out3 <= 16'he244;
      1734: out3 <= 16'he25a;
      1735: out3 <= 16'he270;
      1736: out3 <= 16'he287;
      1737: out3 <= 16'he29d;
      1738: out3 <= 16'he2b3;
      1739: out3 <= 16'he2ca;
      1740: out3 <= 16'he2e0;
      1741: out3 <= 16'he2f6;
      1742: out3 <= 16'he30d;
      1743: out3 <= 16'he323;
      1744: out3 <= 16'he33a;
      1745: out3 <= 16'he350;
      1746: out3 <= 16'he367;
      1747: out3 <= 16'he37d;
      1748: out3 <= 16'he394;
      1749: out3 <= 16'he3aa;
      1750: out3 <= 16'he3c1;
      1751: out3 <= 16'he3d7;
      1752: out3 <= 16'he3ee;
      1753: out3 <= 16'he404;
      1754: out3 <= 16'he41b;
      1755: out3 <= 16'he432;
      1756: out3 <= 16'he448;
      1757: out3 <= 16'he45f;
      1758: out3 <= 16'he476;
      1759: out3 <= 16'he48c;
      1760: out3 <= 16'he4a3;
      1761: out3 <= 16'he4ba;
      1762: out3 <= 16'he4d0;
      1763: out3 <= 16'he4e7;
      1764: out3 <= 16'he4fe;
      1765: out3 <= 16'he515;
      1766: out3 <= 16'he52c;
      1767: out3 <= 16'he542;
      1768: out3 <= 16'he559;
      1769: out3 <= 16'he570;
      1770: out3 <= 16'he587;
      1771: out3 <= 16'he59e;
      1772: out3 <= 16'he5b5;
      1773: out3 <= 16'he5cc;
      1774: out3 <= 16'he5e3;
      1775: out3 <= 16'he5fa;
      1776: out3 <= 16'he611;
      1777: out3 <= 16'he628;
      1778: out3 <= 16'he63f;
      1779: out3 <= 16'he656;
      1780: out3 <= 16'he66d;
      1781: out3 <= 16'he684;
      1782: out3 <= 16'he69b;
      1783: out3 <= 16'he6b2;
      1784: out3 <= 16'he6c9;
      1785: out3 <= 16'he6e0;
      1786: out3 <= 16'he6f7;
      1787: out3 <= 16'he70e;
      1788: out3 <= 16'he725;
      1789: out3 <= 16'he73d;
      1790: out3 <= 16'he754;
      1791: out3 <= 16'he76b;
      1792: out3 <= 16'he782;
      1793: out3 <= 16'he799;
      1794: out3 <= 16'he7b1;
      1795: out3 <= 16'he7c8;
      1796: out3 <= 16'he7df;
      1797: out3 <= 16'he7f6;
      1798: out3 <= 16'he80e;
      1799: out3 <= 16'he825;
      1800: out3 <= 16'he83c;
      1801: out3 <= 16'he854;
      1802: out3 <= 16'he86b;
      1803: out3 <= 16'he882;
      1804: out3 <= 16'he89a;
      1805: out3 <= 16'he8b1;
      1806: out3 <= 16'he8c9;
      1807: out3 <= 16'he8e0;
      1808: out3 <= 16'he8f7;
      1809: out3 <= 16'he90f;
      1810: out3 <= 16'he926;
      1811: out3 <= 16'he93e;
      1812: out3 <= 16'he955;
      1813: out3 <= 16'he96d;
      1814: out3 <= 16'he984;
      1815: out3 <= 16'he99c;
      1816: out3 <= 16'he9b4;
      1817: out3 <= 16'he9cb;
      1818: out3 <= 16'he9e3;
      1819: out3 <= 16'he9fa;
      1820: out3 <= 16'hea12;
      1821: out3 <= 16'hea29;
      1822: out3 <= 16'hea41;
      1823: out3 <= 16'hea59;
      1824: out3 <= 16'hea70;
      1825: out3 <= 16'hea88;
      1826: out3 <= 16'heaa0;
      1827: out3 <= 16'heab7;
      1828: out3 <= 16'heacf;
      1829: out3 <= 16'heae7;
      1830: out3 <= 16'heaff;
      1831: out3 <= 16'heb16;
      1832: out3 <= 16'heb2e;
      1833: out3 <= 16'heb46;
      1834: out3 <= 16'heb5e;
      1835: out3 <= 16'heb75;
      1836: out3 <= 16'heb8d;
      1837: out3 <= 16'heba5;
      1838: out3 <= 16'hebbd;
      1839: out3 <= 16'hebd5;
      1840: out3 <= 16'hebed;
      1841: out3 <= 16'hec05;
      1842: out3 <= 16'hec1c;
      1843: out3 <= 16'hec34;
      1844: out3 <= 16'hec4c;
      1845: out3 <= 16'hec64;
      1846: out3 <= 16'hec7c;
      1847: out3 <= 16'hec94;
      1848: out3 <= 16'hecac;
      1849: out3 <= 16'hecc4;
      1850: out3 <= 16'hecdc;
      1851: out3 <= 16'hecf4;
      1852: out3 <= 16'hed0c;
      1853: out3 <= 16'hed24;
      1854: out3 <= 16'hed3c;
      1855: out3 <= 16'hed54;
      1856: out3 <= 16'hed6c;
      1857: out3 <= 16'hed84;
      1858: out3 <= 16'hed9c;
      1859: out3 <= 16'hedb4;
      1860: out3 <= 16'hedcc;
      1861: out3 <= 16'hede4;
      1862: out3 <= 16'hedfc;
      1863: out3 <= 16'hee15;
      1864: out3 <= 16'hee2d;
      1865: out3 <= 16'hee45;
      1866: out3 <= 16'hee5d;
      1867: out3 <= 16'hee75;
      1868: out3 <= 16'hee8d;
      1869: out3 <= 16'heea6;
      1870: out3 <= 16'heebe;
      1871: out3 <= 16'heed6;
      1872: out3 <= 16'heeee;
      1873: out3 <= 16'hef06;
      1874: out3 <= 16'hef1f;
      1875: out3 <= 16'hef37;
      1876: out3 <= 16'hef4f;
      1877: out3 <= 16'hef67;
      1878: out3 <= 16'hef80;
      1879: out3 <= 16'hef98;
      1880: out3 <= 16'hefb0;
      1881: out3 <= 16'hefc9;
      1882: out3 <= 16'hefe1;
      1883: out3 <= 16'heff9;
      1884: out3 <= 16'hf012;
      1885: out3 <= 16'hf02a;
      1886: out3 <= 16'hf042;
      1887: out3 <= 16'hf05b;
      1888: out3 <= 16'hf073;
      1889: out3 <= 16'hf08b;
      1890: out3 <= 16'hf0a4;
      1891: out3 <= 16'hf0bc;
      1892: out3 <= 16'hf0d5;
      1893: out3 <= 16'hf0ed;
      1894: out3 <= 16'hf105;
      1895: out3 <= 16'hf11e;
      1896: out3 <= 16'hf136;
      1897: out3 <= 16'hf14f;
      1898: out3 <= 16'hf167;
      1899: out3 <= 16'hf180;
      1900: out3 <= 16'hf198;
      1901: out3 <= 16'hf1b1;
      1902: out3 <= 16'hf1c9;
      1903: out3 <= 16'hf1e2;
      1904: out3 <= 16'hf1fa;
      1905: out3 <= 16'hf213;
      1906: out3 <= 16'hf22b;
      1907: out3 <= 16'hf244;
      1908: out3 <= 16'hf25c;
      1909: out3 <= 16'hf275;
      1910: out3 <= 16'hf28e;
      1911: out3 <= 16'hf2a6;
      1912: out3 <= 16'hf2bf;
      1913: out3 <= 16'hf2d7;
      1914: out3 <= 16'hf2f0;
      1915: out3 <= 16'hf308;
      1916: out3 <= 16'hf321;
      1917: out3 <= 16'hf33a;
      1918: out3 <= 16'hf352;
      1919: out3 <= 16'hf36b;
      1920: out3 <= 16'hf384;
      1921: out3 <= 16'hf39c;
      1922: out3 <= 16'hf3b5;
      1923: out3 <= 16'hf3ce;
      1924: out3 <= 16'hf3e6;
      1925: out3 <= 16'hf3ff;
      1926: out3 <= 16'hf418;
      1927: out3 <= 16'hf430;
      1928: out3 <= 16'hf449;
      1929: out3 <= 16'hf462;
      1930: out3 <= 16'hf47b;
      1931: out3 <= 16'hf493;
      1932: out3 <= 16'hf4ac;
      1933: out3 <= 16'hf4c5;
      1934: out3 <= 16'hf4dd;
      1935: out3 <= 16'hf4f6;
      1936: out3 <= 16'hf50f;
      1937: out3 <= 16'hf528;
      1938: out3 <= 16'hf540;
      1939: out3 <= 16'hf559;
      1940: out3 <= 16'hf572;
      1941: out3 <= 16'hf58b;
      1942: out3 <= 16'hf5a4;
      1943: out3 <= 16'hf5bc;
      1944: out3 <= 16'hf5d5;
      1945: out3 <= 16'hf5ee;
      1946: out3 <= 16'hf607;
      1947: out3 <= 16'hf620;
      1948: out3 <= 16'hf639;
      1949: out3 <= 16'hf651;
      1950: out3 <= 16'hf66a;
      1951: out3 <= 16'hf683;
      1952: out3 <= 16'hf69c;
      1953: out3 <= 16'hf6b5;
      1954: out3 <= 16'hf6ce;
      1955: out3 <= 16'hf6e7;
      1956: out3 <= 16'hf6ff;
      1957: out3 <= 16'hf718;
      1958: out3 <= 16'hf731;
      1959: out3 <= 16'hf74a;
      1960: out3 <= 16'hf763;
      1961: out3 <= 16'hf77c;
      1962: out3 <= 16'hf795;
      1963: out3 <= 16'hf7ae;
      1964: out3 <= 16'hf7c7;
      1965: out3 <= 16'hf7e0;
      1966: out3 <= 16'hf7f9;
      1967: out3 <= 16'hf811;
      1968: out3 <= 16'hf82a;
      1969: out3 <= 16'hf843;
      1970: out3 <= 16'hf85c;
      1971: out3 <= 16'hf875;
      1972: out3 <= 16'hf88e;
      1973: out3 <= 16'hf8a7;
      1974: out3 <= 16'hf8c0;
      1975: out3 <= 16'hf8d9;
      1976: out3 <= 16'hf8f2;
      1977: out3 <= 16'hf90b;
      1978: out3 <= 16'hf924;
      1979: out3 <= 16'hf93d;
      1980: out3 <= 16'hf956;
      1981: out3 <= 16'hf96f;
      1982: out3 <= 16'hf988;
      1983: out3 <= 16'hf9a1;
      1984: out3 <= 16'hf9ba;
      1985: out3 <= 16'hf9d3;
      1986: out3 <= 16'hf9ec;
      1987: out3 <= 16'hfa05;
      1988: out3 <= 16'hfa1e;
      1989: out3 <= 16'hfa37;
      1990: out3 <= 16'hfa50;
      1991: out3 <= 16'hfa69;
      1992: out3 <= 16'hfa82;
      1993: out3 <= 16'hfa9b;
      1994: out3 <= 16'hfab4;
      1995: out3 <= 16'hfacd;
      1996: out3 <= 16'hfae6;
      1997: out3 <= 16'hfb00;
      1998: out3 <= 16'hfb19;
      1999: out3 <= 16'hfb32;
      2000: out3 <= 16'hfb4b;
      2001: out3 <= 16'hfb64;
      2002: out3 <= 16'hfb7d;
      2003: out3 <= 16'hfb96;
      2004: out3 <= 16'hfbaf;
      2005: out3 <= 16'hfbc8;
      2006: out3 <= 16'hfbe1;
      2007: out3 <= 16'hfbfa;
      2008: out3 <= 16'hfc13;
      2009: out3 <= 16'hfc2c;
      2010: out3 <= 16'hfc45;
      2011: out3 <= 16'hfc5f;
      2012: out3 <= 16'hfc78;
      2013: out3 <= 16'hfc91;
      2014: out3 <= 16'hfcaa;
      2015: out3 <= 16'hfcc3;
      2016: out3 <= 16'hfcdc;
      2017: out3 <= 16'hfcf5;
      2018: out3 <= 16'hfd0e;
      2019: out3 <= 16'hfd27;
      2020: out3 <= 16'hfd40;
      2021: out3 <= 16'hfd5a;
      2022: out3 <= 16'hfd73;
      2023: out3 <= 16'hfd8c;
      2024: out3 <= 16'hfda5;
      2025: out3 <= 16'hfdbe;
      2026: out3 <= 16'hfdd7;
      2027: out3 <= 16'hfdf0;
      2028: out3 <= 16'hfe09;
      2029: out3 <= 16'hfe23;
      2030: out3 <= 16'hfe3c;
      2031: out3 <= 16'hfe55;
      2032: out3 <= 16'hfe6e;
      2033: out3 <= 16'hfe87;
      2034: out3 <= 16'hfea0;
      2035: out3 <= 16'hfeb9;
      2036: out3 <= 16'hfed2;
      2037: out3 <= 16'hfeec;
      2038: out3 <= 16'hff05;
      2039: out3 <= 16'hff1e;
      2040: out3 <= 16'hff37;
      2041: out3 <= 16'hff50;
      2042: out3 <= 16'hff69;
      2043: out3 <= 16'hff82;
      2044: out3 <= 16'hff9b;
      2045: out3 <= 16'hffb5;
      2046: out3 <= 16'hffce;
      2047: out3 <= 16'hffe7;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D2_108442(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [10:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h4000;
      2: out3 <= 16'h4000;
      3: out3 <= 16'h4000;
      4: out3 <= 16'h4000;
      5: out3 <= 16'h4000;
      6: out3 <= 16'h3fff;
      7: out3 <= 16'h3fff;
      8: out3 <= 16'h3fff;
      9: out3 <= 16'h3ffe;
      10: out3 <= 16'h3ffe;
      11: out3 <= 16'h3ffe;
      12: out3 <= 16'h3ffd;
      13: out3 <= 16'h3ffd;
      14: out3 <= 16'h3ffc;
      15: out3 <= 16'h3ffc;
      16: out3 <= 16'h3ffb;
      17: out3 <= 16'h3ffa;
      18: out3 <= 16'h3ffa;
      19: out3 <= 16'h3ff9;
      20: out3 <= 16'h3ff8;
      21: out3 <= 16'h3ff7;
      22: out3 <= 16'h3ff7;
      23: out3 <= 16'h3ff6;
      24: out3 <= 16'h3ff5;
      25: out3 <= 16'h3ff4;
      26: out3 <= 16'h3ff3;
      27: out3 <= 16'h3ff2;
      28: out3 <= 16'h3ff1;
      29: out3 <= 16'h3ff0;
      30: out3 <= 16'h3fef;
      31: out3 <= 16'h3fed;
      32: out3 <= 16'h3fec;
      33: out3 <= 16'h3feb;
      34: out3 <= 16'h3fea;
      35: out3 <= 16'h3fe8;
      36: out3 <= 16'h3fe7;
      37: out3 <= 16'h3fe6;
      38: out3 <= 16'h3fe4;
      39: out3 <= 16'h3fe3;
      40: out3 <= 16'h3fe1;
      41: out3 <= 16'h3fe0;
      42: out3 <= 16'h3fde;
      43: out3 <= 16'h3fdc;
      44: out3 <= 16'h3fdb;
      45: out3 <= 16'h3fd9;
      46: out3 <= 16'h3fd7;
      47: out3 <= 16'h3fd5;
      48: out3 <= 16'h3fd4;
      49: out3 <= 16'h3fd2;
      50: out3 <= 16'h3fd0;
      51: out3 <= 16'h3fce;
      52: out3 <= 16'h3fcc;
      53: out3 <= 16'h3fca;
      54: out3 <= 16'h3fc8;
      55: out3 <= 16'h3fc6;
      56: out3 <= 16'h3fc4;
      57: out3 <= 16'h3fc1;
      58: out3 <= 16'h3fbf;
      59: out3 <= 16'h3fbd;
      60: out3 <= 16'h3fbb;
      61: out3 <= 16'h3fb8;
      62: out3 <= 16'h3fb6;
      63: out3 <= 16'h3fb4;
      64: out3 <= 16'h3fb1;
      65: out3 <= 16'h3faf;
      66: out3 <= 16'h3fac;
      67: out3 <= 16'h3faa;
      68: out3 <= 16'h3fa7;
      69: out3 <= 16'h3fa4;
      70: out3 <= 16'h3fa2;
      71: out3 <= 16'h3f9f;
      72: out3 <= 16'h3f9c;
      73: out3 <= 16'h3f99;
      74: out3 <= 16'h3f97;
      75: out3 <= 16'h3f94;
      76: out3 <= 16'h3f91;
      77: out3 <= 16'h3f8e;
      78: out3 <= 16'h3f8b;
      79: out3 <= 16'h3f88;
      80: out3 <= 16'h3f85;
      81: out3 <= 16'h3f82;
      82: out3 <= 16'h3f7f;
      83: out3 <= 16'h3f7b;
      84: out3 <= 16'h3f78;
      85: out3 <= 16'h3f75;
      86: out3 <= 16'h3f72;
      87: out3 <= 16'h3f6e;
      88: out3 <= 16'h3f6b;
      89: out3 <= 16'h3f68;
      90: out3 <= 16'h3f64;
      91: out3 <= 16'h3f61;
      92: out3 <= 16'h3f5d;
      93: out3 <= 16'h3f5a;
      94: out3 <= 16'h3f56;
      95: out3 <= 16'h3f52;
      96: out3 <= 16'h3f4f;
      97: out3 <= 16'h3f4b;
      98: out3 <= 16'h3f47;
      99: out3 <= 16'h3f43;
      100: out3 <= 16'h3f40;
      101: out3 <= 16'h3f3c;
      102: out3 <= 16'h3f38;
      103: out3 <= 16'h3f34;
      104: out3 <= 16'h3f30;
      105: out3 <= 16'h3f2c;
      106: out3 <= 16'h3f28;
      107: out3 <= 16'h3f24;
      108: out3 <= 16'h3f20;
      109: out3 <= 16'h3f1c;
      110: out3 <= 16'h3f17;
      111: out3 <= 16'h3f13;
      112: out3 <= 16'h3f0f;
      113: out3 <= 16'h3f0a;
      114: out3 <= 16'h3f06;
      115: out3 <= 16'h3f02;
      116: out3 <= 16'h3efd;
      117: out3 <= 16'h3ef9;
      118: out3 <= 16'h3ef4;
      119: out3 <= 16'h3ef0;
      120: out3 <= 16'h3eeb;
      121: out3 <= 16'h3ee7;
      122: out3 <= 16'h3ee2;
      123: out3 <= 16'h3edd;
      124: out3 <= 16'h3ed8;
      125: out3 <= 16'h3ed4;
      126: out3 <= 16'h3ecf;
      127: out3 <= 16'h3eca;
      128: out3 <= 16'h3ec5;
      129: out3 <= 16'h3ec0;
      130: out3 <= 16'h3ebb;
      131: out3 <= 16'h3eb6;
      132: out3 <= 16'h3eb1;
      133: out3 <= 16'h3eac;
      134: out3 <= 16'h3ea7;
      135: out3 <= 16'h3ea2;
      136: out3 <= 16'h3e9d;
      137: out3 <= 16'h3e98;
      138: out3 <= 16'h3e92;
      139: out3 <= 16'h3e8d;
      140: out3 <= 16'h3e88;
      141: out3 <= 16'h3e82;
      142: out3 <= 16'h3e7d;
      143: out3 <= 16'h3e77;
      144: out3 <= 16'h3e72;
      145: out3 <= 16'h3e6c;
      146: out3 <= 16'h3e67;
      147: out3 <= 16'h3e61;
      148: out3 <= 16'h3e5c;
      149: out3 <= 16'h3e56;
      150: out3 <= 16'h3e50;
      151: out3 <= 16'h3e4a;
      152: out3 <= 16'h3e45;
      153: out3 <= 16'h3e3f;
      154: out3 <= 16'h3e39;
      155: out3 <= 16'h3e33;
      156: out3 <= 16'h3e2d;
      157: out3 <= 16'h3e27;
      158: out3 <= 16'h3e21;
      159: out3 <= 16'h3e1b;
      160: out3 <= 16'h3e15;
      161: out3 <= 16'h3e0f;
      162: out3 <= 16'h3e09;
      163: out3 <= 16'h3e03;
      164: out3 <= 16'h3dfc;
      165: out3 <= 16'h3df6;
      166: out3 <= 16'h3df0;
      167: out3 <= 16'h3de9;
      168: out3 <= 16'h3de3;
      169: out3 <= 16'h3ddd;
      170: out3 <= 16'h3dd6;
      171: out3 <= 16'h3dd0;
      172: out3 <= 16'h3dc9;
      173: out3 <= 16'h3dc2;
      174: out3 <= 16'h3dbc;
      175: out3 <= 16'h3db5;
      176: out3 <= 16'h3daf;
      177: out3 <= 16'h3da8;
      178: out3 <= 16'h3da1;
      179: out3 <= 16'h3d9a;
      180: out3 <= 16'h3d93;
      181: out3 <= 16'h3d8d;
      182: out3 <= 16'h3d86;
      183: out3 <= 16'h3d7f;
      184: out3 <= 16'h3d78;
      185: out3 <= 16'h3d71;
      186: out3 <= 16'h3d6a;
      187: out3 <= 16'h3d63;
      188: out3 <= 16'h3d5b;
      189: out3 <= 16'h3d54;
      190: out3 <= 16'h3d4d;
      191: out3 <= 16'h3d46;
      192: out3 <= 16'h3d3f;
      193: out3 <= 16'h3d37;
      194: out3 <= 16'h3d30;
      195: out3 <= 16'h3d28;
      196: out3 <= 16'h3d21;
      197: out3 <= 16'h3d1a;
      198: out3 <= 16'h3d12;
      199: out3 <= 16'h3d0b;
      200: out3 <= 16'h3d03;
      201: out3 <= 16'h3cfb;
      202: out3 <= 16'h3cf4;
      203: out3 <= 16'h3cec;
      204: out3 <= 16'h3ce4;
      205: out3 <= 16'h3cdd;
      206: out3 <= 16'h3cd5;
      207: out3 <= 16'h3ccd;
      208: out3 <= 16'h3cc5;
      209: out3 <= 16'h3cbd;
      210: out3 <= 16'h3cb5;
      211: out3 <= 16'h3cad;
      212: out3 <= 16'h3ca5;
      213: out3 <= 16'h3c9d;
      214: out3 <= 16'h3c95;
      215: out3 <= 16'h3c8d;
      216: out3 <= 16'h3c85;
      217: out3 <= 16'h3c7d;
      218: out3 <= 16'h3c74;
      219: out3 <= 16'h3c6c;
      220: out3 <= 16'h3c64;
      221: out3 <= 16'h3c5b;
      222: out3 <= 16'h3c53;
      223: out3 <= 16'h3c4b;
      224: out3 <= 16'h3c42;
      225: out3 <= 16'h3c3a;
      226: out3 <= 16'h3c31;
      227: out3 <= 16'h3c29;
      228: out3 <= 16'h3c20;
      229: out3 <= 16'h3c17;
      230: out3 <= 16'h3c0f;
      231: out3 <= 16'h3c06;
      232: out3 <= 16'h3bfd;
      233: out3 <= 16'h3bf5;
      234: out3 <= 16'h3bec;
      235: out3 <= 16'h3be3;
      236: out3 <= 16'h3bda;
      237: out3 <= 16'h3bd1;
      238: out3 <= 16'h3bc8;
      239: out3 <= 16'h3bbf;
      240: out3 <= 16'h3bb6;
      241: out3 <= 16'h3bad;
      242: out3 <= 16'h3ba4;
      243: out3 <= 16'h3b9b;
      244: out3 <= 16'h3b92;
      245: out3 <= 16'h3b88;
      246: out3 <= 16'h3b7f;
      247: out3 <= 16'h3b76;
      248: out3 <= 16'h3b6d;
      249: out3 <= 16'h3b63;
      250: out3 <= 16'h3b5a;
      251: out3 <= 16'h3b50;
      252: out3 <= 16'h3b47;
      253: out3 <= 16'h3b3e;
      254: out3 <= 16'h3b34;
      255: out3 <= 16'h3b2a;
      256: out3 <= 16'h3b21;
      257: out3 <= 16'h3b17;
      258: out3 <= 16'h3b0e;
      259: out3 <= 16'h3b04;
      260: out3 <= 16'h3afa;
      261: out3 <= 16'h3af0;
      262: out3 <= 16'h3ae6;
      263: out3 <= 16'h3add;
      264: out3 <= 16'h3ad3;
      265: out3 <= 16'h3ac9;
      266: out3 <= 16'h3abf;
      267: out3 <= 16'h3ab5;
      268: out3 <= 16'h3aab;
      269: out3 <= 16'h3aa1;
      270: out3 <= 16'h3a97;
      271: out3 <= 16'h3a8d;
      272: out3 <= 16'h3a82;
      273: out3 <= 16'h3a78;
      274: out3 <= 16'h3a6e;
      275: out3 <= 16'h3a64;
      276: out3 <= 16'h3a59;
      277: out3 <= 16'h3a4f;
      278: out3 <= 16'h3a45;
      279: out3 <= 16'h3a3a;
      280: out3 <= 16'h3a30;
      281: out3 <= 16'h3a25;
      282: out3 <= 16'h3a1b;
      283: out3 <= 16'h3a10;
      284: out3 <= 16'h3a06;
      285: out3 <= 16'h39fb;
      286: out3 <= 16'h39f0;
      287: out3 <= 16'h39e6;
      288: out3 <= 16'h39db;
      289: out3 <= 16'h39d0;
      290: out3 <= 16'h39c5;
      291: out3 <= 16'h39bb;
      292: out3 <= 16'h39b0;
      293: out3 <= 16'h39a5;
      294: out3 <= 16'h399a;
      295: out3 <= 16'h398f;
      296: out3 <= 16'h3984;
      297: out3 <= 16'h3979;
      298: out3 <= 16'h396e;
      299: out3 <= 16'h3963;
      300: out3 <= 16'h3958;
      301: out3 <= 16'h394c;
      302: out3 <= 16'h3941;
      303: out3 <= 16'h3936;
      304: out3 <= 16'h392b;
      305: out3 <= 16'h391f;
      306: out3 <= 16'h3914;
      307: out3 <= 16'h3909;
      308: out3 <= 16'h38fd;
      309: out3 <= 16'h38f2;
      310: out3 <= 16'h38e6;
      311: out3 <= 16'h38db;
      312: out3 <= 16'h38cf;
      313: out3 <= 16'h38c3;
      314: out3 <= 16'h38b8;
      315: out3 <= 16'h38ac;
      316: out3 <= 16'h38a1;
      317: out3 <= 16'h3895;
      318: out3 <= 16'h3889;
      319: out3 <= 16'h387d;
      320: out3 <= 16'h3871;
      321: out3 <= 16'h3866;
      322: out3 <= 16'h385a;
      323: out3 <= 16'h384e;
      324: out3 <= 16'h3842;
      325: out3 <= 16'h3836;
      326: out3 <= 16'h382a;
      327: out3 <= 16'h381e;
      328: out3 <= 16'h3812;
      329: out3 <= 16'h3805;
      330: out3 <= 16'h37f9;
      331: out3 <= 16'h37ed;
      332: out3 <= 16'h37e1;
      333: out3 <= 16'h37d5;
      334: out3 <= 16'h37c8;
      335: out3 <= 16'h37bc;
      336: out3 <= 16'h37b0;
      337: out3 <= 16'h37a3;
      338: out3 <= 16'h3797;
      339: out3 <= 16'h378a;
      340: out3 <= 16'h377e;
      341: out3 <= 16'h3771;
      342: out3 <= 16'h3765;
      343: out3 <= 16'h3758;
      344: out3 <= 16'h374b;
      345: out3 <= 16'h373f;
      346: out3 <= 16'h3732;
      347: out3 <= 16'h3725;
      348: out3 <= 16'h3718;
      349: out3 <= 16'h370c;
      350: out3 <= 16'h36ff;
      351: out3 <= 16'h36f2;
      352: out3 <= 16'h36e5;
      353: out3 <= 16'h36d8;
      354: out3 <= 16'h36cb;
      355: out3 <= 16'h36be;
      356: out3 <= 16'h36b1;
      357: out3 <= 16'h36a4;
      358: out3 <= 16'h3697;
      359: out3 <= 16'h368a;
      360: out3 <= 16'h367d;
      361: out3 <= 16'h366f;
      362: out3 <= 16'h3662;
      363: out3 <= 16'h3655;
      364: out3 <= 16'h3648;
      365: out3 <= 16'h363a;
      366: out3 <= 16'h362d;
      367: out3 <= 16'h3620;
      368: out3 <= 16'h3612;
      369: out3 <= 16'h3605;
      370: out3 <= 16'h35f7;
      371: out3 <= 16'h35ea;
      372: out3 <= 16'h35dc;
      373: out3 <= 16'h35ce;
      374: out3 <= 16'h35c1;
      375: out3 <= 16'h35b3;
      376: out3 <= 16'h35a5;
      377: out3 <= 16'h3598;
      378: out3 <= 16'h358a;
      379: out3 <= 16'h357c;
      380: out3 <= 16'h356e;
      381: out3 <= 16'h3561;
      382: out3 <= 16'h3553;
      383: out3 <= 16'h3545;
      384: out3 <= 16'h3537;
      385: out3 <= 16'h3529;
      386: out3 <= 16'h351b;
      387: out3 <= 16'h350d;
      388: out3 <= 16'h34ff;
      389: out3 <= 16'h34f1;
      390: out3 <= 16'h34e2;
      391: out3 <= 16'h34d4;
      392: out3 <= 16'h34c6;
      393: out3 <= 16'h34b8;
      394: out3 <= 16'h34aa;
      395: out3 <= 16'h349b;
      396: out3 <= 16'h348d;
      397: out3 <= 16'h347f;
      398: out3 <= 16'h3470;
      399: out3 <= 16'h3462;
      400: out3 <= 16'h3453;
      401: out3 <= 16'h3445;
      402: out3 <= 16'h3436;
      403: out3 <= 16'h3428;
      404: out3 <= 16'h3419;
      405: out3 <= 16'h340b;
      406: out3 <= 16'h33fc;
      407: out3 <= 16'h33ed;
      408: out3 <= 16'h33df;
      409: out3 <= 16'h33d0;
      410: out3 <= 16'h33c1;
      411: out3 <= 16'h33b2;
      412: out3 <= 16'h33a3;
      413: out3 <= 16'h3395;
      414: out3 <= 16'h3386;
      415: out3 <= 16'h3377;
      416: out3 <= 16'h3368;
      417: out3 <= 16'h3359;
      418: out3 <= 16'h334a;
      419: out3 <= 16'h333b;
      420: out3 <= 16'h332c;
      421: out3 <= 16'h331d;
      422: out3 <= 16'h330d;
      423: out3 <= 16'h32fe;
      424: out3 <= 16'h32ef;
      425: out3 <= 16'h32e0;
      426: out3 <= 16'h32d0;
      427: out3 <= 16'h32c1;
      428: out3 <= 16'h32b2;
      429: out3 <= 16'h32a3;
      430: out3 <= 16'h3293;
      431: out3 <= 16'h3284;
      432: out3 <= 16'h3274;
      433: out3 <= 16'h3265;
      434: out3 <= 16'h3255;
      435: out3 <= 16'h3246;
      436: out3 <= 16'h3236;
      437: out3 <= 16'h3227;
      438: out3 <= 16'h3217;
      439: out3 <= 16'h3207;
      440: out3 <= 16'h31f8;
      441: out3 <= 16'h31e8;
      442: out3 <= 16'h31d8;
      443: out3 <= 16'h31c8;
      444: out3 <= 16'h31b9;
      445: out3 <= 16'h31a9;
      446: out3 <= 16'h3199;
      447: out3 <= 16'h3189;
      448: out3 <= 16'h3179;
      449: out3 <= 16'h3169;
      450: out3 <= 16'h3159;
      451: out3 <= 16'h3149;
      452: out3 <= 16'h3139;
      453: out3 <= 16'h3129;
      454: out3 <= 16'h3119;
      455: out3 <= 16'h3109;
      456: out3 <= 16'h30f9;
      457: out3 <= 16'h30e8;
      458: out3 <= 16'h30d8;
      459: out3 <= 16'h30c8;
      460: out3 <= 16'h30b8;
      461: out3 <= 16'h30a7;
      462: out3 <= 16'h3097;
      463: out3 <= 16'h3087;
      464: out3 <= 16'h3076;
      465: out3 <= 16'h3066;
      466: out3 <= 16'h3055;
      467: out3 <= 16'h3045;
      468: out3 <= 16'h3034;
      469: out3 <= 16'h3024;
      470: out3 <= 16'h3013;
      471: out3 <= 16'h3002;
      472: out3 <= 16'h2ff2;
      473: out3 <= 16'h2fe1;
      474: out3 <= 16'h2fd0;
      475: out3 <= 16'h2fc0;
      476: out3 <= 16'h2faf;
      477: out3 <= 16'h2f9e;
      478: out3 <= 16'h2f8d;
      479: out3 <= 16'h2f7d;
      480: out3 <= 16'h2f6c;
      481: out3 <= 16'h2f5b;
      482: out3 <= 16'h2f4a;
      483: out3 <= 16'h2f39;
      484: out3 <= 16'h2f28;
      485: out3 <= 16'h2f17;
      486: out3 <= 16'h2f06;
      487: out3 <= 16'h2ef5;
      488: out3 <= 16'h2ee4;
      489: out3 <= 16'h2ed3;
      490: out3 <= 16'h2ec2;
      491: out3 <= 16'h2eb0;
      492: out3 <= 16'h2e9f;
      493: out3 <= 16'h2e8e;
      494: out3 <= 16'h2e7d;
      495: out3 <= 16'h2e6b;
      496: out3 <= 16'h2e5a;
      497: out3 <= 16'h2e49;
      498: out3 <= 16'h2e37;
      499: out3 <= 16'h2e26;
      500: out3 <= 16'h2e15;
      501: out3 <= 16'h2e03;
      502: out3 <= 16'h2df2;
      503: out3 <= 16'h2de0;
      504: out3 <= 16'h2dcf;
      505: out3 <= 16'h2dbd;
      506: out3 <= 16'h2dab;
      507: out3 <= 16'h2d9a;
      508: out3 <= 16'h2d88;
      509: out3 <= 16'h2d76;
      510: out3 <= 16'h2d65;
      511: out3 <= 16'h2d53;
      512: out3 <= 16'h2d41;
      513: out3 <= 16'h2d2f;
      514: out3 <= 16'h2d1e;
      515: out3 <= 16'h2d0c;
      516: out3 <= 16'h2cfa;
      517: out3 <= 16'h2ce8;
      518: out3 <= 16'h2cd6;
      519: out3 <= 16'h2cc4;
      520: out3 <= 16'h2cb2;
      521: out3 <= 16'h2ca0;
      522: out3 <= 16'h2c8e;
      523: out3 <= 16'h2c7c;
      524: out3 <= 16'h2c6a;
      525: out3 <= 16'h2c58;
      526: out3 <= 16'h2c46;
      527: out3 <= 16'h2c34;
      528: out3 <= 16'h2c21;
      529: out3 <= 16'h2c0f;
      530: out3 <= 16'h2bfd;
      531: out3 <= 16'h2beb;
      532: out3 <= 16'h2bd8;
      533: out3 <= 16'h2bc6;
      534: out3 <= 16'h2bb4;
      535: out3 <= 16'h2ba1;
      536: out3 <= 16'h2b8f;
      537: out3 <= 16'h2b7d;
      538: out3 <= 16'h2b6a;
      539: out3 <= 16'h2b58;
      540: out3 <= 16'h2b45;
      541: out3 <= 16'h2b33;
      542: out3 <= 16'h2b20;
      543: out3 <= 16'h2b0d;
      544: out3 <= 16'h2afb;
      545: out3 <= 16'h2ae8;
      546: out3 <= 16'h2ad6;
      547: out3 <= 16'h2ac3;
      548: out3 <= 16'h2ab0;
      549: out3 <= 16'h2a9d;
      550: out3 <= 16'h2a8b;
      551: out3 <= 16'h2a78;
      552: out3 <= 16'h2a65;
      553: out3 <= 16'h2a52;
      554: out3 <= 16'h2a3f;
      555: out3 <= 16'h2a2c;
      556: out3 <= 16'h2a1a;
      557: out3 <= 16'h2a07;
      558: out3 <= 16'h29f4;
      559: out3 <= 16'h29e1;
      560: out3 <= 16'h29ce;
      561: out3 <= 16'h29bb;
      562: out3 <= 16'h29a7;
      563: out3 <= 16'h2994;
      564: out3 <= 16'h2981;
      565: out3 <= 16'h296e;
      566: out3 <= 16'h295b;
      567: out3 <= 16'h2948;
      568: out3 <= 16'h2935;
      569: out3 <= 16'h2921;
      570: out3 <= 16'h290e;
      571: out3 <= 16'h28fb;
      572: out3 <= 16'h28e7;
      573: out3 <= 16'h28d4;
      574: out3 <= 16'h28c1;
      575: out3 <= 16'h28ad;
      576: out3 <= 16'h289a;
      577: out3 <= 16'h2886;
      578: out3 <= 16'h2873;
      579: out3 <= 16'h2860;
      580: out3 <= 16'h284c;
      581: out3 <= 16'h2838;
      582: out3 <= 16'h2825;
      583: out3 <= 16'h2811;
      584: out3 <= 16'h27fe;
      585: out3 <= 16'h27ea;
      586: out3 <= 16'h27d6;
      587: out3 <= 16'h27c3;
      588: out3 <= 16'h27af;
      589: out3 <= 16'h279b;
      590: out3 <= 16'h2788;
      591: out3 <= 16'h2774;
      592: out3 <= 16'h2760;
      593: out3 <= 16'h274c;
      594: out3 <= 16'h2738;
      595: out3 <= 16'h2724;
      596: out3 <= 16'h2711;
      597: out3 <= 16'h26fd;
      598: out3 <= 16'h26e9;
      599: out3 <= 16'h26d5;
      600: out3 <= 16'h26c1;
      601: out3 <= 16'h26ad;
      602: out3 <= 16'h2699;
      603: out3 <= 16'h2685;
      604: out3 <= 16'h2671;
      605: out3 <= 16'h265c;
      606: out3 <= 16'h2648;
      607: out3 <= 16'h2634;
      608: out3 <= 16'h2620;
      609: out3 <= 16'h260c;
      610: out3 <= 16'h25f8;
      611: out3 <= 16'h25e3;
      612: out3 <= 16'h25cf;
      613: out3 <= 16'h25bb;
      614: out3 <= 16'h25a6;
      615: out3 <= 16'h2592;
      616: out3 <= 16'h257e;
      617: out3 <= 16'h2569;
      618: out3 <= 16'h2555;
      619: out3 <= 16'h2541;
      620: out3 <= 16'h252c;
      621: out3 <= 16'h2518;
      622: out3 <= 16'h2503;
      623: out3 <= 16'h24ef;
      624: out3 <= 16'h24da;
      625: out3 <= 16'h24c5;
      626: out3 <= 16'h24b1;
      627: out3 <= 16'h249c;
      628: out3 <= 16'h2488;
      629: out3 <= 16'h2473;
      630: out3 <= 16'h245e;
      631: out3 <= 16'h244a;
      632: out3 <= 16'h2435;
      633: out3 <= 16'h2420;
      634: out3 <= 16'h240b;
      635: out3 <= 16'h23f7;
      636: out3 <= 16'h23e2;
      637: out3 <= 16'h23cd;
      638: out3 <= 16'h23b8;
      639: out3 <= 16'h23a3;
      640: out3 <= 16'h238e;
      641: out3 <= 16'h237a;
      642: out3 <= 16'h2365;
      643: out3 <= 16'h2350;
      644: out3 <= 16'h233b;
      645: out3 <= 16'h2326;
      646: out3 <= 16'h2311;
      647: out3 <= 16'h22fc;
      648: out3 <= 16'h22e7;
      649: out3 <= 16'h22d2;
      650: out3 <= 16'h22bc;
      651: out3 <= 16'h22a7;
      652: out3 <= 16'h2292;
      653: out3 <= 16'h227d;
      654: out3 <= 16'h2268;
      655: out3 <= 16'h2253;
      656: out3 <= 16'h223d;
      657: out3 <= 16'h2228;
      658: out3 <= 16'h2213;
      659: out3 <= 16'h21fe;
      660: out3 <= 16'h21e8;
      661: out3 <= 16'h21d3;
      662: out3 <= 16'h21be;
      663: out3 <= 16'h21a8;
      664: out3 <= 16'h2193;
      665: out3 <= 16'h217d;
      666: out3 <= 16'h2168;
      667: out3 <= 16'h2153;
      668: out3 <= 16'h213d;
      669: out3 <= 16'h2128;
      670: out3 <= 16'h2112;
      671: out3 <= 16'h20fd;
      672: out3 <= 16'h20e7;
      673: out3 <= 16'h20d1;
      674: out3 <= 16'h20bc;
      675: out3 <= 16'h20a6;
      676: out3 <= 16'h2091;
      677: out3 <= 16'h207b;
      678: out3 <= 16'h2065;
      679: out3 <= 16'h2050;
      680: out3 <= 16'h203a;
      681: out3 <= 16'h2024;
      682: out3 <= 16'h200f;
      683: out3 <= 16'h1ff9;
      684: out3 <= 16'h1fe3;
      685: out3 <= 16'h1fcd;
      686: out3 <= 16'h1fb7;
      687: out3 <= 16'h1fa2;
      688: out3 <= 16'h1f8c;
      689: out3 <= 16'h1f76;
      690: out3 <= 16'h1f60;
      691: out3 <= 16'h1f4a;
      692: out3 <= 16'h1f34;
      693: out3 <= 16'h1f1e;
      694: out3 <= 16'h1f08;
      695: out3 <= 16'h1ef2;
      696: out3 <= 16'h1edc;
      697: out3 <= 16'h1ec6;
      698: out3 <= 16'h1eb0;
      699: out3 <= 16'h1e9a;
      700: out3 <= 16'h1e84;
      701: out3 <= 16'h1e6e;
      702: out3 <= 16'h1e58;
      703: out3 <= 16'h1e42;
      704: out3 <= 16'h1e2b;
      705: out3 <= 16'h1e15;
      706: out3 <= 16'h1dff;
      707: out3 <= 16'h1de9;
      708: out3 <= 16'h1dd3;
      709: out3 <= 16'h1dbc;
      710: out3 <= 16'h1da6;
      711: out3 <= 16'h1d90;
      712: out3 <= 16'h1d79;
      713: out3 <= 16'h1d63;
      714: out3 <= 16'h1d4d;
      715: out3 <= 16'h1d36;
      716: out3 <= 16'h1d20;
      717: out3 <= 16'h1d0a;
      718: out3 <= 16'h1cf3;
      719: out3 <= 16'h1cdd;
      720: out3 <= 16'h1cc6;
      721: out3 <= 16'h1cb0;
      722: out3 <= 16'h1c99;
      723: out3 <= 16'h1c83;
      724: out3 <= 16'h1c6c;
      725: out3 <= 16'h1c56;
      726: out3 <= 16'h1c3f;
      727: out3 <= 16'h1c29;
      728: out3 <= 16'h1c12;
      729: out3 <= 16'h1bfc;
      730: out3 <= 16'h1be5;
      731: out3 <= 16'h1bce;
      732: out3 <= 16'h1bb8;
      733: out3 <= 16'h1ba1;
      734: out3 <= 16'h1b8a;
      735: out3 <= 16'h1b74;
      736: out3 <= 16'h1b5d;
      737: out3 <= 16'h1b46;
      738: out3 <= 16'h1b30;
      739: out3 <= 16'h1b19;
      740: out3 <= 16'h1b02;
      741: out3 <= 16'h1aeb;
      742: out3 <= 16'h1ad4;
      743: out3 <= 16'h1abe;
      744: out3 <= 16'h1aa7;
      745: out3 <= 16'h1a90;
      746: out3 <= 16'h1a79;
      747: out3 <= 16'h1a62;
      748: out3 <= 16'h1a4b;
      749: out3 <= 16'h1a34;
      750: out3 <= 16'h1a1d;
      751: out3 <= 16'h1a06;
      752: out3 <= 16'h19ef;
      753: out3 <= 16'h19d8;
      754: out3 <= 16'h19c1;
      755: out3 <= 16'h19aa;
      756: out3 <= 16'h1993;
      757: out3 <= 16'h197c;
      758: out3 <= 16'h1965;
      759: out3 <= 16'h194e;
      760: out3 <= 16'h1937;
      761: out3 <= 16'h1920;
      762: out3 <= 16'h1909;
      763: out3 <= 16'h18f2;
      764: out3 <= 16'h18db;
      765: out3 <= 16'h18c3;
      766: out3 <= 16'h18ac;
      767: out3 <= 16'h1895;
      768: out3 <= 16'h187e;
      769: out3 <= 16'h1867;
      770: out3 <= 16'h184f;
      771: out3 <= 16'h1838;
      772: out3 <= 16'h1821;
      773: out3 <= 16'h180a;
      774: out3 <= 16'h17f2;
      775: out3 <= 16'h17db;
      776: out3 <= 16'h17c4;
      777: out3 <= 16'h17ac;
      778: out3 <= 16'h1795;
      779: out3 <= 16'h177e;
      780: out3 <= 16'h1766;
      781: out3 <= 16'h174f;
      782: out3 <= 16'h1737;
      783: out3 <= 16'h1720;
      784: out3 <= 16'h1709;
      785: out3 <= 16'h16f1;
      786: out3 <= 16'h16da;
      787: out3 <= 16'h16c2;
      788: out3 <= 16'h16ab;
      789: out3 <= 16'h1693;
      790: out3 <= 16'h167c;
      791: out3 <= 16'h1664;
      792: out3 <= 16'h164c;
      793: out3 <= 16'h1635;
      794: out3 <= 16'h161d;
      795: out3 <= 16'h1606;
      796: out3 <= 16'h15ee;
      797: out3 <= 16'h15d7;
      798: out3 <= 16'h15bf;
      799: out3 <= 16'h15a7;
      800: out3 <= 16'h1590;
      801: out3 <= 16'h1578;
      802: out3 <= 16'h1560;
      803: out3 <= 16'h1549;
      804: out3 <= 16'h1531;
      805: out3 <= 16'h1519;
      806: out3 <= 16'h1501;
      807: out3 <= 16'h14ea;
      808: out3 <= 16'h14d2;
      809: out3 <= 16'h14ba;
      810: out3 <= 16'h14a2;
      811: out3 <= 16'h148b;
      812: out3 <= 16'h1473;
      813: out3 <= 16'h145b;
      814: out3 <= 16'h1443;
      815: out3 <= 16'h142b;
      816: out3 <= 16'h1413;
      817: out3 <= 16'h13fb;
      818: out3 <= 16'h13e4;
      819: out3 <= 16'h13cc;
      820: out3 <= 16'h13b4;
      821: out3 <= 16'h139c;
      822: out3 <= 16'h1384;
      823: out3 <= 16'h136c;
      824: out3 <= 16'h1354;
      825: out3 <= 16'h133c;
      826: out3 <= 16'h1324;
      827: out3 <= 16'h130c;
      828: out3 <= 16'h12f4;
      829: out3 <= 16'h12dc;
      830: out3 <= 16'h12c4;
      831: out3 <= 16'h12ac;
      832: out3 <= 16'h1294;
      833: out3 <= 16'h127c;
      834: out3 <= 16'h1264;
      835: out3 <= 16'h124c;
      836: out3 <= 16'h1234;
      837: out3 <= 16'h121c;
      838: out3 <= 16'h1204;
      839: out3 <= 16'h11eb;
      840: out3 <= 16'h11d3;
      841: out3 <= 16'h11bb;
      842: out3 <= 16'h11a3;
      843: out3 <= 16'h118b;
      844: out3 <= 16'h1173;
      845: out3 <= 16'h115a;
      846: out3 <= 16'h1142;
      847: out3 <= 16'h112a;
      848: out3 <= 16'h1112;
      849: out3 <= 16'h10fa;
      850: out3 <= 16'h10e1;
      851: out3 <= 16'h10c9;
      852: out3 <= 16'h10b1;
      853: out3 <= 16'h1099;
      854: out3 <= 16'h1080;
      855: out3 <= 16'h1068;
      856: out3 <= 16'h1050;
      857: out3 <= 16'h1037;
      858: out3 <= 16'h101f;
      859: out3 <= 16'h1007;
      860: out3 <= 16'hfee;
      861: out3 <= 16'hfd6;
      862: out3 <= 16'hfbe;
      863: out3 <= 16'hfa5;
      864: out3 <= 16'hf8d;
      865: out3 <= 16'hf75;
      866: out3 <= 16'hf5c;
      867: out3 <= 16'hf44;
      868: out3 <= 16'hf2b;
      869: out3 <= 16'hf13;
      870: out3 <= 16'hefb;
      871: out3 <= 16'hee2;
      872: out3 <= 16'heca;
      873: out3 <= 16'heb1;
      874: out3 <= 16'he99;
      875: out3 <= 16'he80;
      876: out3 <= 16'he68;
      877: out3 <= 16'he4f;
      878: out3 <= 16'he37;
      879: out3 <= 16'he1e;
      880: out3 <= 16'he06;
      881: out3 <= 16'hded;
      882: out3 <= 16'hdd5;
      883: out3 <= 16'hdbc;
      884: out3 <= 16'hda4;
      885: out3 <= 16'hd8b;
      886: out3 <= 16'hd72;
      887: out3 <= 16'hd5a;
      888: out3 <= 16'hd41;
      889: out3 <= 16'hd29;
      890: out3 <= 16'hd10;
      891: out3 <= 16'hcf8;
      892: out3 <= 16'hcdf;
      893: out3 <= 16'hcc6;
      894: out3 <= 16'hcae;
      895: out3 <= 16'hc95;
      896: out3 <= 16'hc7c;
      897: out3 <= 16'hc64;
      898: out3 <= 16'hc4b;
      899: out3 <= 16'hc32;
      900: out3 <= 16'hc1a;
      901: out3 <= 16'hc01;
      902: out3 <= 16'hbe8;
      903: out3 <= 16'hbd0;
      904: out3 <= 16'hbb7;
      905: out3 <= 16'hb9e;
      906: out3 <= 16'hb85;
      907: out3 <= 16'hb6d;
      908: out3 <= 16'hb54;
      909: out3 <= 16'hb3b;
      910: out3 <= 16'hb23;
      911: out3 <= 16'hb0a;
      912: out3 <= 16'haf1;
      913: out3 <= 16'had8;
      914: out3 <= 16'hac0;
      915: out3 <= 16'haa7;
      916: out3 <= 16'ha8e;
      917: out3 <= 16'ha75;
      918: out3 <= 16'ha5c;
      919: out3 <= 16'ha44;
      920: out3 <= 16'ha2b;
      921: out3 <= 16'ha12;
      922: out3 <= 16'h9f9;
      923: out3 <= 16'h9e0;
      924: out3 <= 16'h9c7;
      925: out3 <= 16'h9af;
      926: out3 <= 16'h996;
      927: out3 <= 16'h97d;
      928: out3 <= 16'h964;
      929: out3 <= 16'h94b;
      930: out3 <= 16'h932;
      931: out3 <= 16'h919;
      932: out3 <= 16'h901;
      933: out3 <= 16'h8e8;
      934: out3 <= 16'h8cf;
      935: out3 <= 16'h8b6;
      936: out3 <= 16'h89d;
      937: out3 <= 16'h884;
      938: out3 <= 16'h86b;
      939: out3 <= 16'h852;
      940: out3 <= 16'h839;
      941: out3 <= 16'h820;
      942: out3 <= 16'h807;
      943: out3 <= 16'h7ef;
      944: out3 <= 16'h7d6;
      945: out3 <= 16'h7bd;
      946: out3 <= 16'h7a4;
      947: out3 <= 16'h78b;
      948: out3 <= 16'h772;
      949: out3 <= 16'h759;
      950: out3 <= 16'h740;
      951: out3 <= 16'h727;
      952: out3 <= 16'h70e;
      953: out3 <= 16'h6f5;
      954: out3 <= 16'h6dc;
      955: out3 <= 16'h6c3;
      956: out3 <= 16'h6aa;
      957: out3 <= 16'h691;
      958: out3 <= 16'h678;
      959: out3 <= 16'h65f;
      960: out3 <= 16'h646;
      961: out3 <= 16'h62d;
      962: out3 <= 16'h614;
      963: out3 <= 16'h5fb;
      964: out3 <= 16'h5e2;
      965: out3 <= 16'h5c9;
      966: out3 <= 16'h5b0;
      967: out3 <= 16'h597;
      968: out3 <= 16'h57e;
      969: out3 <= 16'h565;
      970: out3 <= 16'h54c;
      971: out3 <= 16'h533;
      972: out3 <= 16'h51a;
      973: out3 <= 16'h500;
      974: out3 <= 16'h4e7;
      975: out3 <= 16'h4ce;
      976: out3 <= 16'h4b5;
      977: out3 <= 16'h49c;
      978: out3 <= 16'h483;
      979: out3 <= 16'h46a;
      980: out3 <= 16'h451;
      981: out3 <= 16'h438;
      982: out3 <= 16'h41f;
      983: out3 <= 16'h406;
      984: out3 <= 16'h3ed;
      985: out3 <= 16'h3d4;
      986: out3 <= 16'h3bb;
      987: out3 <= 16'h3a1;
      988: out3 <= 16'h388;
      989: out3 <= 16'h36f;
      990: out3 <= 16'h356;
      991: out3 <= 16'h33d;
      992: out3 <= 16'h324;
      993: out3 <= 16'h30b;
      994: out3 <= 16'h2f2;
      995: out3 <= 16'h2d9;
      996: out3 <= 16'h2c0;
      997: out3 <= 16'h2a6;
      998: out3 <= 16'h28d;
      999: out3 <= 16'h274;
      1000: out3 <= 16'h25b;
      1001: out3 <= 16'h242;
      1002: out3 <= 16'h229;
      1003: out3 <= 16'h210;
      1004: out3 <= 16'h1f7;
      1005: out3 <= 16'h1dd;
      1006: out3 <= 16'h1c4;
      1007: out3 <= 16'h1ab;
      1008: out3 <= 16'h192;
      1009: out3 <= 16'h179;
      1010: out3 <= 16'h160;
      1011: out3 <= 16'h147;
      1012: out3 <= 16'h12e;
      1013: out3 <= 16'h114;
      1014: out3 <= 16'hfb;
      1015: out3 <= 16'he2;
      1016: out3 <= 16'hc9;
      1017: out3 <= 16'hb0;
      1018: out3 <= 16'h97;
      1019: out3 <= 16'h7e;
      1020: out3 <= 16'h65;
      1021: out3 <= 16'h4b;
      1022: out3 <= 16'h32;
      1023: out3 <= 16'h19;
      1024: out3 <= 16'h0;
      1025: out3 <= 16'hffe7;
      1026: out3 <= 16'hffce;
      1027: out3 <= 16'hffb5;
      1028: out3 <= 16'hff9b;
      1029: out3 <= 16'hff82;
      1030: out3 <= 16'hff69;
      1031: out3 <= 16'hff50;
      1032: out3 <= 16'hff37;
      1033: out3 <= 16'hff1e;
      1034: out3 <= 16'hff05;
      1035: out3 <= 16'hfeec;
      1036: out3 <= 16'hfed2;
      1037: out3 <= 16'hfeb9;
      1038: out3 <= 16'hfea0;
      1039: out3 <= 16'hfe87;
      1040: out3 <= 16'hfe6e;
      1041: out3 <= 16'hfe55;
      1042: out3 <= 16'hfe3c;
      1043: out3 <= 16'hfe23;
      1044: out3 <= 16'hfe09;
      1045: out3 <= 16'hfdf0;
      1046: out3 <= 16'hfdd7;
      1047: out3 <= 16'hfdbe;
      1048: out3 <= 16'hfda5;
      1049: out3 <= 16'hfd8c;
      1050: out3 <= 16'hfd73;
      1051: out3 <= 16'hfd5a;
      1052: out3 <= 16'hfd40;
      1053: out3 <= 16'hfd27;
      1054: out3 <= 16'hfd0e;
      1055: out3 <= 16'hfcf5;
      1056: out3 <= 16'hfcdc;
      1057: out3 <= 16'hfcc3;
      1058: out3 <= 16'hfcaa;
      1059: out3 <= 16'hfc91;
      1060: out3 <= 16'hfc78;
      1061: out3 <= 16'hfc5f;
      1062: out3 <= 16'hfc45;
      1063: out3 <= 16'hfc2c;
      1064: out3 <= 16'hfc13;
      1065: out3 <= 16'hfbfa;
      1066: out3 <= 16'hfbe1;
      1067: out3 <= 16'hfbc8;
      1068: out3 <= 16'hfbaf;
      1069: out3 <= 16'hfb96;
      1070: out3 <= 16'hfb7d;
      1071: out3 <= 16'hfb64;
      1072: out3 <= 16'hfb4b;
      1073: out3 <= 16'hfb32;
      1074: out3 <= 16'hfb19;
      1075: out3 <= 16'hfb00;
      1076: out3 <= 16'hfae6;
      1077: out3 <= 16'hfacd;
      1078: out3 <= 16'hfab4;
      1079: out3 <= 16'hfa9b;
      1080: out3 <= 16'hfa82;
      1081: out3 <= 16'hfa69;
      1082: out3 <= 16'hfa50;
      1083: out3 <= 16'hfa37;
      1084: out3 <= 16'hfa1e;
      1085: out3 <= 16'hfa05;
      1086: out3 <= 16'hf9ec;
      1087: out3 <= 16'hf9d3;
      1088: out3 <= 16'hf9ba;
      1089: out3 <= 16'hf9a1;
      1090: out3 <= 16'hf988;
      1091: out3 <= 16'hf96f;
      1092: out3 <= 16'hf956;
      1093: out3 <= 16'hf93d;
      1094: out3 <= 16'hf924;
      1095: out3 <= 16'hf90b;
      1096: out3 <= 16'hf8f2;
      1097: out3 <= 16'hf8d9;
      1098: out3 <= 16'hf8c0;
      1099: out3 <= 16'hf8a7;
      1100: out3 <= 16'hf88e;
      1101: out3 <= 16'hf875;
      1102: out3 <= 16'hf85c;
      1103: out3 <= 16'hf843;
      1104: out3 <= 16'hf82a;
      1105: out3 <= 16'hf811;
      1106: out3 <= 16'hf7f9;
      1107: out3 <= 16'hf7e0;
      1108: out3 <= 16'hf7c7;
      1109: out3 <= 16'hf7ae;
      1110: out3 <= 16'hf795;
      1111: out3 <= 16'hf77c;
      1112: out3 <= 16'hf763;
      1113: out3 <= 16'hf74a;
      1114: out3 <= 16'hf731;
      1115: out3 <= 16'hf718;
      1116: out3 <= 16'hf6ff;
      1117: out3 <= 16'hf6e7;
      1118: out3 <= 16'hf6ce;
      1119: out3 <= 16'hf6b5;
      1120: out3 <= 16'hf69c;
      1121: out3 <= 16'hf683;
      1122: out3 <= 16'hf66a;
      1123: out3 <= 16'hf651;
      1124: out3 <= 16'hf639;
      1125: out3 <= 16'hf620;
      1126: out3 <= 16'hf607;
      1127: out3 <= 16'hf5ee;
      1128: out3 <= 16'hf5d5;
      1129: out3 <= 16'hf5bc;
      1130: out3 <= 16'hf5a4;
      1131: out3 <= 16'hf58b;
      1132: out3 <= 16'hf572;
      1133: out3 <= 16'hf559;
      1134: out3 <= 16'hf540;
      1135: out3 <= 16'hf528;
      1136: out3 <= 16'hf50f;
      1137: out3 <= 16'hf4f6;
      1138: out3 <= 16'hf4dd;
      1139: out3 <= 16'hf4c5;
      1140: out3 <= 16'hf4ac;
      1141: out3 <= 16'hf493;
      1142: out3 <= 16'hf47b;
      1143: out3 <= 16'hf462;
      1144: out3 <= 16'hf449;
      1145: out3 <= 16'hf430;
      1146: out3 <= 16'hf418;
      1147: out3 <= 16'hf3ff;
      1148: out3 <= 16'hf3e6;
      1149: out3 <= 16'hf3ce;
      1150: out3 <= 16'hf3b5;
      1151: out3 <= 16'hf39c;
      1152: out3 <= 16'hf384;
      1153: out3 <= 16'hf36b;
      1154: out3 <= 16'hf352;
      1155: out3 <= 16'hf33a;
      1156: out3 <= 16'hf321;
      1157: out3 <= 16'hf308;
      1158: out3 <= 16'hf2f0;
      1159: out3 <= 16'hf2d7;
      1160: out3 <= 16'hf2bf;
      1161: out3 <= 16'hf2a6;
      1162: out3 <= 16'hf28e;
      1163: out3 <= 16'hf275;
      1164: out3 <= 16'hf25c;
      1165: out3 <= 16'hf244;
      1166: out3 <= 16'hf22b;
      1167: out3 <= 16'hf213;
      1168: out3 <= 16'hf1fa;
      1169: out3 <= 16'hf1e2;
      1170: out3 <= 16'hf1c9;
      1171: out3 <= 16'hf1b1;
      1172: out3 <= 16'hf198;
      1173: out3 <= 16'hf180;
      1174: out3 <= 16'hf167;
      1175: out3 <= 16'hf14f;
      1176: out3 <= 16'hf136;
      1177: out3 <= 16'hf11e;
      1178: out3 <= 16'hf105;
      1179: out3 <= 16'hf0ed;
      1180: out3 <= 16'hf0d5;
      1181: out3 <= 16'hf0bc;
      1182: out3 <= 16'hf0a4;
      1183: out3 <= 16'hf08b;
      1184: out3 <= 16'hf073;
      1185: out3 <= 16'hf05b;
      1186: out3 <= 16'hf042;
      1187: out3 <= 16'hf02a;
      1188: out3 <= 16'hf012;
      1189: out3 <= 16'heff9;
      1190: out3 <= 16'hefe1;
      1191: out3 <= 16'hefc9;
      1192: out3 <= 16'hefb0;
      1193: out3 <= 16'hef98;
      1194: out3 <= 16'hef80;
      1195: out3 <= 16'hef67;
      1196: out3 <= 16'hef4f;
      1197: out3 <= 16'hef37;
      1198: out3 <= 16'hef1f;
      1199: out3 <= 16'hef06;
      1200: out3 <= 16'heeee;
      1201: out3 <= 16'heed6;
      1202: out3 <= 16'heebe;
      1203: out3 <= 16'heea6;
      1204: out3 <= 16'hee8d;
      1205: out3 <= 16'hee75;
      1206: out3 <= 16'hee5d;
      1207: out3 <= 16'hee45;
      1208: out3 <= 16'hee2d;
      1209: out3 <= 16'hee15;
      1210: out3 <= 16'hedfc;
      1211: out3 <= 16'hede4;
      1212: out3 <= 16'hedcc;
      1213: out3 <= 16'hedb4;
      1214: out3 <= 16'hed9c;
      1215: out3 <= 16'hed84;
      1216: out3 <= 16'hed6c;
      1217: out3 <= 16'hed54;
      1218: out3 <= 16'hed3c;
      1219: out3 <= 16'hed24;
      1220: out3 <= 16'hed0c;
      1221: out3 <= 16'hecf4;
      1222: out3 <= 16'hecdc;
      1223: out3 <= 16'hecc4;
      1224: out3 <= 16'hecac;
      1225: out3 <= 16'hec94;
      1226: out3 <= 16'hec7c;
      1227: out3 <= 16'hec64;
      1228: out3 <= 16'hec4c;
      1229: out3 <= 16'hec34;
      1230: out3 <= 16'hec1c;
      1231: out3 <= 16'hec05;
      1232: out3 <= 16'hebed;
      1233: out3 <= 16'hebd5;
      1234: out3 <= 16'hebbd;
      1235: out3 <= 16'heba5;
      1236: out3 <= 16'heb8d;
      1237: out3 <= 16'heb75;
      1238: out3 <= 16'heb5e;
      1239: out3 <= 16'heb46;
      1240: out3 <= 16'heb2e;
      1241: out3 <= 16'heb16;
      1242: out3 <= 16'heaff;
      1243: out3 <= 16'heae7;
      1244: out3 <= 16'heacf;
      1245: out3 <= 16'heab7;
      1246: out3 <= 16'heaa0;
      1247: out3 <= 16'hea88;
      1248: out3 <= 16'hea70;
      1249: out3 <= 16'hea59;
      1250: out3 <= 16'hea41;
      1251: out3 <= 16'hea29;
      1252: out3 <= 16'hea12;
      1253: out3 <= 16'he9fa;
      1254: out3 <= 16'he9e3;
      1255: out3 <= 16'he9cb;
      1256: out3 <= 16'he9b4;
      1257: out3 <= 16'he99c;
      1258: out3 <= 16'he984;
      1259: out3 <= 16'he96d;
      1260: out3 <= 16'he955;
      1261: out3 <= 16'he93e;
      1262: out3 <= 16'he926;
      1263: out3 <= 16'he90f;
      1264: out3 <= 16'he8f7;
      1265: out3 <= 16'he8e0;
      1266: out3 <= 16'he8c9;
      1267: out3 <= 16'he8b1;
      1268: out3 <= 16'he89a;
      1269: out3 <= 16'he882;
      1270: out3 <= 16'he86b;
      1271: out3 <= 16'he854;
      1272: out3 <= 16'he83c;
      1273: out3 <= 16'he825;
      1274: out3 <= 16'he80e;
      1275: out3 <= 16'he7f6;
      1276: out3 <= 16'he7df;
      1277: out3 <= 16'he7c8;
      1278: out3 <= 16'he7b1;
      1279: out3 <= 16'he799;
      1280: out3 <= 16'he782;
      1281: out3 <= 16'he76b;
      1282: out3 <= 16'he754;
      1283: out3 <= 16'he73d;
      1284: out3 <= 16'he725;
      1285: out3 <= 16'he70e;
      1286: out3 <= 16'he6f7;
      1287: out3 <= 16'he6e0;
      1288: out3 <= 16'he6c9;
      1289: out3 <= 16'he6b2;
      1290: out3 <= 16'he69b;
      1291: out3 <= 16'he684;
      1292: out3 <= 16'he66d;
      1293: out3 <= 16'he656;
      1294: out3 <= 16'he63f;
      1295: out3 <= 16'he628;
      1296: out3 <= 16'he611;
      1297: out3 <= 16'he5fa;
      1298: out3 <= 16'he5e3;
      1299: out3 <= 16'he5cc;
      1300: out3 <= 16'he5b5;
      1301: out3 <= 16'he59e;
      1302: out3 <= 16'he587;
      1303: out3 <= 16'he570;
      1304: out3 <= 16'he559;
      1305: out3 <= 16'he542;
      1306: out3 <= 16'he52c;
      1307: out3 <= 16'he515;
      1308: out3 <= 16'he4fe;
      1309: out3 <= 16'he4e7;
      1310: out3 <= 16'he4d0;
      1311: out3 <= 16'he4ba;
      1312: out3 <= 16'he4a3;
      1313: out3 <= 16'he48c;
      1314: out3 <= 16'he476;
      1315: out3 <= 16'he45f;
      1316: out3 <= 16'he448;
      1317: out3 <= 16'he432;
      1318: out3 <= 16'he41b;
      1319: out3 <= 16'he404;
      1320: out3 <= 16'he3ee;
      1321: out3 <= 16'he3d7;
      1322: out3 <= 16'he3c1;
      1323: out3 <= 16'he3aa;
      1324: out3 <= 16'he394;
      1325: out3 <= 16'he37d;
      1326: out3 <= 16'he367;
      1327: out3 <= 16'he350;
      1328: out3 <= 16'he33a;
      1329: out3 <= 16'he323;
      1330: out3 <= 16'he30d;
      1331: out3 <= 16'he2f6;
      1332: out3 <= 16'he2e0;
      1333: out3 <= 16'he2ca;
      1334: out3 <= 16'he2b3;
      1335: out3 <= 16'he29d;
      1336: out3 <= 16'he287;
      1337: out3 <= 16'he270;
      1338: out3 <= 16'he25a;
      1339: out3 <= 16'he244;
      1340: out3 <= 16'he22d;
      1341: out3 <= 16'he217;
      1342: out3 <= 16'he201;
      1343: out3 <= 16'he1eb;
      1344: out3 <= 16'he1d5;
      1345: out3 <= 16'he1be;
      1346: out3 <= 16'he1a8;
      1347: out3 <= 16'he192;
      1348: out3 <= 16'he17c;
      1349: out3 <= 16'he166;
      1350: out3 <= 16'he150;
      1351: out3 <= 16'he13a;
      1352: out3 <= 16'he124;
      1353: out3 <= 16'he10e;
      1354: out3 <= 16'he0f8;
      1355: out3 <= 16'he0e2;
      1356: out3 <= 16'he0cc;
      1357: out3 <= 16'he0b6;
      1358: out3 <= 16'he0a0;
      1359: out3 <= 16'he08a;
      1360: out3 <= 16'he074;
      1361: out3 <= 16'he05e;
      1362: out3 <= 16'he049;
      1363: out3 <= 16'he033;
      1364: out3 <= 16'he01d;
      1365: out3 <= 16'he007;
      1366: out3 <= 16'hdff1;
      1367: out3 <= 16'hdfdc;
      1368: out3 <= 16'hdfc6;
      1369: out3 <= 16'hdfb0;
      1370: out3 <= 16'hdf9b;
      1371: out3 <= 16'hdf85;
      1372: out3 <= 16'hdf6f;
      1373: out3 <= 16'hdf5a;
      1374: out3 <= 16'hdf44;
      1375: out3 <= 16'hdf2f;
      1376: out3 <= 16'hdf19;
      1377: out3 <= 16'hdf03;
      1378: out3 <= 16'hdeee;
      1379: out3 <= 16'hded8;
      1380: out3 <= 16'hdec3;
      1381: out3 <= 16'hdead;
      1382: out3 <= 16'hde98;
      1383: out3 <= 16'hde83;
      1384: out3 <= 16'hde6d;
      1385: out3 <= 16'hde58;
      1386: out3 <= 16'hde42;
      1387: out3 <= 16'hde2d;
      1388: out3 <= 16'hde18;
      1389: out3 <= 16'hde02;
      1390: out3 <= 16'hdded;
      1391: out3 <= 16'hddd8;
      1392: out3 <= 16'hddc3;
      1393: out3 <= 16'hddad;
      1394: out3 <= 16'hdd98;
      1395: out3 <= 16'hdd83;
      1396: out3 <= 16'hdd6e;
      1397: out3 <= 16'hdd59;
      1398: out3 <= 16'hdd44;
      1399: out3 <= 16'hdd2e;
      1400: out3 <= 16'hdd19;
      1401: out3 <= 16'hdd04;
      1402: out3 <= 16'hdcef;
      1403: out3 <= 16'hdcda;
      1404: out3 <= 16'hdcc5;
      1405: out3 <= 16'hdcb0;
      1406: out3 <= 16'hdc9b;
      1407: out3 <= 16'hdc86;
      1408: out3 <= 16'hdc72;
      1409: out3 <= 16'hdc5d;
      1410: out3 <= 16'hdc48;
      1411: out3 <= 16'hdc33;
      1412: out3 <= 16'hdc1e;
      1413: out3 <= 16'hdc09;
      1414: out3 <= 16'hdbf5;
      1415: out3 <= 16'hdbe0;
      1416: out3 <= 16'hdbcb;
      1417: out3 <= 16'hdbb6;
      1418: out3 <= 16'hdba2;
      1419: out3 <= 16'hdb8d;
      1420: out3 <= 16'hdb78;
      1421: out3 <= 16'hdb64;
      1422: out3 <= 16'hdb4f;
      1423: out3 <= 16'hdb3b;
      1424: out3 <= 16'hdb26;
      1425: out3 <= 16'hdb11;
      1426: out3 <= 16'hdafd;
      1427: out3 <= 16'hdae8;
      1428: out3 <= 16'hdad4;
      1429: out3 <= 16'hdabf;
      1430: out3 <= 16'hdaab;
      1431: out3 <= 16'hda97;
      1432: out3 <= 16'hda82;
      1433: out3 <= 16'hda6e;
      1434: out3 <= 16'hda5a;
      1435: out3 <= 16'hda45;
      1436: out3 <= 16'hda31;
      1437: out3 <= 16'hda1d;
      1438: out3 <= 16'hda08;
      1439: out3 <= 16'hd9f4;
      1440: out3 <= 16'hd9e0;
      1441: out3 <= 16'hd9cc;
      1442: out3 <= 16'hd9b8;
      1443: out3 <= 16'hd9a4;
      1444: out3 <= 16'hd98f;
      1445: out3 <= 16'hd97b;
      1446: out3 <= 16'hd967;
      1447: out3 <= 16'hd953;
      1448: out3 <= 16'hd93f;
      1449: out3 <= 16'hd92b;
      1450: out3 <= 16'hd917;
      1451: out3 <= 16'hd903;
      1452: out3 <= 16'hd8ef;
      1453: out3 <= 16'hd8dc;
      1454: out3 <= 16'hd8c8;
      1455: out3 <= 16'hd8b4;
      1456: out3 <= 16'hd8a0;
      1457: out3 <= 16'hd88c;
      1458: out3 <= 16'hd878;
      1459: out3 <= 16'hd865;
      1460: out3 <= 16'hd851;
      1461: out3 <= 16'hd83d;
      1462: out3 <= 16'hd82a;
      1463: out3 <= 16'hd816;
      1464: out3 <= 16'hd802;
      1465: out3 <= 16'hd7ef;
      1466: out3 <= 16'hd7db;
      1467: out3 <= 16'hd7c8;
      1468: out3 <= 16'hd7b4;
      1469: out3 <= 16'hd7a0;
      1470: out3 <= 16'hd78d;
      1471: out3 <= 16'hd77a;
      1472: out3 <= 16'hd766;
      1473: out3 <= 16'hd753;
      1474: out3 <= 16'hd73f;
      1475: out3 <= 16'hd72c;
      1476: out3 <= 16'hd719;
      1477: out3 <= 16'hd705;
      1478: out3 <= 16'hd6f2;
      1479: out3 <= 16'hd6df;
      1480: out3 <= 16'hd6cb;
      1481: out3 <= 16'hd6b8;
      1482: out3 <= 16'hd6a5;
      1483: out3 <= 16'hd692;
      1484: out3 <= 16'hd67f;
      1485: out3 <= 16'hd66c;
      1486: out3 <= 16'hd659;
      1487: out3 <= 16'hd645;
      1488: out3 <= 16'hd632;
      1489: out3 <= 16'hd61f;
      1490: out3 <= 16'hd60c;
      1491: out3 <= 16'hd5f9;
      1492: out3 <= 16'hd5e6;
      1493: out3 <= 16'hd5d4;
      1494: out3 <= 16'hd5c1;
      1495: out3 <= 16'hd5ae;
      1496: out3 <= 16'hd59b;
      1497: out3 <= 16'hd588;
      1498: out3 <= 16'hd575;
      1499: out3 <= 16'hd563;
      1500: out3 <= 16'hd550;
      1501: out3 <= 16'hd53d;
      1502: out3 <= 16'hd52a;
      1503: out3 <= 16'hd518;
      1504: out3 <= 16'hd505;
      1505: out3 <= 16'hd4f3;
      1506: out3 <= 16'hd4e0;
      1507: out3 <= 16'hd4cd;
      1508: out3 <= 16'hd4bb;
      1509: out3 <= 16'hd4a8;
      1510: out3 <= 16'hd496;
      1511: out3 <= 16'hd483;
      1512: out3 <= 16'hd471;
      1513: out3 <= 16'hd45f;
      1514: out3 <= 16'hd44c;
      1515: out3 <= 16'hd43a;
      1516: out3 <= 16'hd428;
      1517: out3 <= 16'hd415;
      1518: out3 <= 16'hd403;
      1519: out3 <= 16'hd3f1;
      1520: out3 <= 16'hd3df;
      1521: out3 <= 16'hd3cc;
      1522: out3 <= 16'hd3ba;
      1523: out3 <= 16'hd3a8;
      1524: out3 <= 16'hd396;
      1525: out3 <= 16'hd384;
      1526: out3 <= 16'hd372;
      1527: out3 <= 16'hd360;
      1528: out3 <= 16'hd34e;
      1529: out3 <= 16'hd33c;
      1530: out3 <= 16'hd32a;
      1531: out3 <= 16'hd318;
      1532: out3 <= 16'hd306;
      1533: out3 <= 16'hd2f4;
      1534: out3 <= 16'hd2e2;
      1535: out3 <= 16'hd2d1;
      1536: out3 <= 16'hd2bf;
      1537: out3 <= 16'hd2ad;
      1538: out3 <= 16'hd29b;
      1539: out3 <= 16'hd28a;
      1540: out3 <= 16'hd278;
      1541: out3 <= 16'hd266;
      1542: out3 <= 16'hd255;
      1543: out3 <= 16'hd243;
      1544: out3 <= 16'hd231;
      1545: out3 <= 16'hd220;
      1546: out3 <= 16'hd20e;
      1547: out3 <= 16'hd1fd;
      1548: out3 <= 16'hd1eb;
      1549: out3 <= 16'hd1da;
      1550: out3 <= 16'hd1c9;
      1551: out3 <= 16'hd1b7;
      1552: out3 <= 16'hd1a6;
      1553: out3 <= 16'hd195;
      1554: out3 <= 16'hd183;
      1555: out3 <= 16'hd172;
      1556: out3 <= 16'hd161;
      1557: out3 <= 16'hd150;
      1558: out3 <= 16'hd13e;
      1559: out3 <= 16'hd12d;
      1560: out3 <= 16'hd11c;
      1561: out3 <= 16'hd10b;
      1562: out3 <= 16'hd0fa;
      1563: out3 <= 16'hd0e9;
      1564: out3 <= 16'hd0d8;
      1565: out3 <= 16'hd0c7;
      1566: out3 <= 16'hd0b6;
      1567: out3 <= 16'hd0a5;
      1568: out3 <= 16'hd094;
      1569: out3 <= 16'hd083;
      1570: out3 <= 16'hd073;
      1571: out3 <= 16'hd062;
      1572: out3 <= 16'hd051;
      1573: out3 <= 16'hd040;
      1574: out3 <= 16'hd030;
      1575: out3 <= 16'hd01f;
      1576: out3 <= 16'hd00e;
      1577: out3 <= 16'hcffe;
      1578: out3 <= 16'hcfed;
      1579: out3 <= 16'hcfdc;
      1580: out3 <= 16'hcfcc;
      1581: out3 <= 16'hcfbb;
      1582: out3 <= 16'hcfab;
      1583: out3 <= 16'hcf9a;
      1584: out3 <= 16'hcf8a;
      1585: out3 <= 16'hcf79;
      1586: out3 <= 16'hcf69;
      1587: out3 <= 16'hcf59;
      1588: out3 <= 16'hcf48;
      1589: out3 <= 16'hcf38;
      1590: out3 <= 16'hcf28;
      1591: out3 <= 16'hcf18;
      1592: out3 <= 16'hcf07;
      1593: out3 <= 16'hcef7;
      1594: out3 <= 16'hcee7;
      1595: out3 <= 16'hced7;
      1596: out3 <= 16'hcec7;
      1597: out3 <= 16'hceb7;
      1598: out3 <= 16'hcea7;
      1599: out3 <= 16'hce97;
      1600: out3 <= 16'hce87;
      1601: out3 <= 16'hce77;
      1602: out3 <= 16'hce67;
      1603: out3 <= 16'hce57;
      1604: out3 <= 16'hce47;
      1605: out3 <= 16'hce38;
      1606: out3 <= 16'hce28;
      1607: out3 <= 16'hce18;
      1608: out3 <= 16'hce08;
      1609: out3 <= 16'hcdf9;
      1610: out3 <= 16'hcde9;
      1611: out3 <= 16'hcdd9;
      1612: out3 <= 16'hcdca;
      1613: out3 <= 16'hcdba;
      1614: out3 <= 16'hcdab;
      1615: out3 <= 16'hcd9b;
      1616: out3 <= 16'hcd8c;
      1617: out3 <= 16'hcd7c;
      1618: out3 <= 16'hcd6d;
      1619: out3 <= 16'hcd5d;
      1620: out3 <= 16'hcd4e;
      1621: out3 <= 16'hcd3f;
      1622: out3 <= 16'hcd30;
      1623: out3 <= 16'hcd20;
      1624: out3 <= 16'hcd11;
      1625: out3 <= 16'hcd02;
      1626: out3 <= 16'hccf3;
      1627: out3 <= 16'hcce3;
      1628: out3 <= 16'hccd4;
      1629: out3 <= 16'hccc5;
      1630: out3 <= 16'hccb6;
      1631: out3 <= 16'hcca7;
      1632: out3 <= 16'hcc98;
      1633: out3 <= 16'hcc89;
      1634: out3 <= 16'hcc7a;
      1635: out3 <= 16'hcc6b;
      1636: out3 <= 16'hcc5d;
      1637: out3 <= 16'hcc4e;
      1638: out3 <= 16'hcc3f;
      1639: out3 <= 16'hcc30;
      1640: out3 <= 16'hcc21;
      1641: out3 <= 16'hcc13;
      1642: out3 <= 16'hcc04;
      1643: out3 <= 16'hcbf5;
      1644: out3 <= 16'hcbe7;
      1645: out3 <= 16'hcbd8;
      1646: out3 <= 16'hcbca;
      1647: out3 <= 16'hcbbb;
      1648: out3 <= 16'hcbad;
      1649: out3 <= 16'hcb9e;
      1650: out3 <= 16'hcb90;
      1651: out3 <= 16'hcb81;
      1652: out3 <= 16'hcb73;
      1653: out3 <= 16'hcb65;
      1654: out3 <= 16'hcb56;
      1655: out3 <= 16'hcb48;
      1656: out3 <= 16'hcb3a;
      1657: out3 <= 16'hcb2c;
      1658: out3 <= 16'hcb1e;
      1659: out3 <= 16'hcb0f;
      1660: out3 <= 16'hcb01;
      1661: out3 <= 16'hcaf3;
      1662: out3 <= 16'hcae5;
      1663: out3 <= 16'hcad7;
      1664: out3 <= 16'hcac9;
      1665: out3 <= 16'hcabb;
      1666: out3 <= 16'hcaad;
      1667: out3 <= 16'hca9f;
      1668: out3 <= 16'hca92;
      1669: out3 <= 16'hca84;
      1670: out3 <= 16'hca76;
      1671: out3 <= 16'hca68;
      1672: out3 <= 16'hca5b;
      1673: out3 <= 16'hca4d;
      1674: out3 <= 16'hca3f;
      1675: out3 <= 16'hca32;
      1676: out3 <= 16'hca24;
      1677: out3 <= 16'hca16;
      1678: out3 <= 16'hca09;
      1679: out3 <= 16'hc9fb;
      1680: out3 <= 16'hc9ee;
      1681: out3 <= 16'hc9e0;
      1682: out3 <= 16'hc9d3;
      1683: out3 <= 16'hc9c6;
      1684: out3 <= 16'hc9b8;
      1685: out3 <= 16'hc9ab;
      1686: out3 <= 16'hc99e;
      1687: out3 <= 16'hc991;
      1688: out3 <= 16'hc983;
      1689: out3 <= 16'hc976;
      1690: out3 <= 16'hc969;
      1691: out3 <= 16'hc95c;
      1692: out3 <= 16'hc94f;
      1693: out3 <= 16'hc942;
      1694: out3 <= 16'hc935;
      1695: out3 <= 16'hc928;
      1696: out3 <= 16'hc91b;
      1697: out3 <= 16'hc90e;
      1698: out3 <= 16'hc901;
      1699: out3 <= 16'hc8f4;
      1700: out3 <= 16'hc8e8;
      1701: out3 <= 16'hc8db;
      1702: out3 <= 16'hc8ce;
      1703: out3 <= 16'hc8c1;
      1704: out3 <= 16'hc8b5;
      1705: out3 <= 16'hc8a8;
      1706: out3 <= 16'hc89b;
      1707: out3 <= 16'hc88f;
      1708: out3 <= 16'hc882;
      1709: out3 <= 16'hc876;
      1710: out3 <= 16'hc869;
      1711: out3 <= 16'hc85d;
      1712: out3 <= 16'hc850;
      1713: out3 <= 16'hc844;
      1714: out3 <= 16'hc838;
      1715: out3 <= 16'hc82b;
      1716: out3 <= 16'hc81f;
      1717: out3 <= 16'hc813;
      1718: out3 <= 16'hc807;
      1719: out3 <= 16'hc7fb;
      1720: out3 <= 16'hc7ee;
      1721: out3 <= 16'hc7e2;
      1722: out3 <= 16'hc7d6;
      1723: out3 <= 16'hc7ca;
      1724: out3 <= 16'hc7be;
      1725: out3 <= 16'hc7b2;
      1726: out3 <= 16'hc7a6;
      1727: out3 <= 16'hc79a;
      1728: out3 <= 16'hc78f;
      1729: out3 <= 16'hc783;
      1730: out3 <= 16'hc777;
      1731: out3 <= 16'hc76b;
      1732: out3 <= 16'hc75f;
      1733: out3 <= 16'hc754;
      1734: out3 <= 16'hc748;
      1735: out3 <= 16'hc73d;
      1736: out3 <= 16'hc731;
      1737: out3 <= 16'hc725;
      1738: out3 <= 16'hc71a;
      1739: out3 <= 16'hc70e;
      1740: out3 <= 16'hc703;
      1741: out3 <= 16'hc6f7;
      1742: out3 <= 16'hc6ec;
      1743: out3 <= 16'hc6e1;
      1744: out3 <= 16'hc6d5;
      1745: out3 <= 16'hc6ca;
      1746: out3 <= 16'hc6bf;
      1747: out3 <= 16'hc6b4;
      1748: out3 <= 16'hc6a8;
      1749: out3 <= 16'hc69d;
      1750: out3 <= 16'hc692;
      1751: out3 <= 16'hc687;
      1752: out3 <= 16'hc67c;
      1753: out3 <= 16'hc671;
      1754: out3 <= 16'hc666;
      1755: out3 <= 16'hc65b;
      1756: out3 <= 16'hc650;
      1757: out3 <= 16'hc645;
      1758: out3 <= 16'hc63b;
      1759: out3 <= 16'hc630;
      1760: out3 <= 16'hc625;
      1761: out3 <= 16'hc61a;
      1762: out3 <= 16'hc610;
      1763: out3 <= 16'hc605;
      1764: out3 <= 16'hc5fa;
      1765: out3 <= 16'hc5f0;
      1766: out3 <= 16'hc5e5;
      1767: out3 <= 16'hc5db;
      1768: out3 <= 16'hc5d0;
      1769: out3 <= 16'hc5c6;
      1770: out3 <= 16'hc5bb;
      1771: out3 <= 16'hc5b1;
      1772: out3 <= 16'hc5a7;
      1773: out3 <= 16'hc59c;
      1774: out3 <= 16'hc592;
      1775: out3 <= 16'hc588;
      1776: out3 <= 16'hc57e;
      1777: out3 <= 16'hc573;
      1778: out3 <= 16'hc569;
      1779: out3 <= 16'hc55f;
      1780: out3 <= 16'hc555;
      1781: out3 <= 16'hc54b;
      1782: out3 <= 16'hc541;
      1783: out3 <= 16'hc537;
      1784: out3 <= 16'hc52d;
      1785: out3 <= 16'hc523;
      1786: out3 <= 16'hc51a;
      1787: out3 <= 16'hc510;
      1788: out3 <= 16'hc506;
      1789: out3 <= 16'hc4fc;
      1790: out3 <= 16'hc4f2;
      1791: out3 <= 16'hc4e9;
      1792: out3 <= 16'hc4df;
      1793: out3 <= 16'hc4d6;
      1794: out3 <= 16'hc4cc;
      1795: out3 <= 16'hc4c2;
      1796: out3 <= 16'hc4b9;
      1797: out3 <= 16'hc4b0;
      1798: out3 <= 16'hc4a6;
      1799: out3 <= 16'hc49d;
      1800: out3 <= 16'hc493;
      1801: out3 <= 16'hc48a;
      1802: out3 <= 16'hc481;
      1803: out3 <= 16'hc478;
      1804: out3 <= 16'hc46e;
      1805: out3 <= 16'hc465;
      1806: out3 <= 16'hc45c;
      1807: out3 <= 16'hc453;
      1808: out3 <= 16'hc44a;
      1809: out3 <= 16'hc441;
      1810: out3 <= 16'hc438;
      1811: out3 <= 16'hc42f;
      1812: out3 <= 16'hc426;
      1813: out3 <= 16'hc41d;
      1814: out3 <= 16'hc414;
      1815: out3 <= 16'hc40b;
      1816: out3 <= 16'hc403;
      1817: out3 <= 16'hc3fa;
      1818: out3 <= 16'hc3f1;
      1819: out3 <= 16'hc3e9;
      1820: out3 <= 16'hc3e0;
      1821: out3 <= 16'hc3d7;
      1822: out3 <= 16'hc3cf;
      1823: out3 <= 16'hc3c6;
      1824: out3 <= 16'hc3be;
      1825: out3 <= 16'hc3b5;
      1826: out3 <= 16'hc3ad;
      1827: out3 <= 16'hc3a5;
      1828: out3 <= 16'hc39c;
      1829: out3 <= 16'hc394;
      1830: out3 <= 16'hc38c;
      1831: out3 <= 16'hc383;
      1832: out3 <= 16'hc37b;
      1833: out3 <= 16'hc373;
      1834: out3 <= 16'hc36b;
      1835: out3 <= 16'hc363;
      1836: out3 <= 16'hc35b;
      1837: out3 <= 16'hc353;
      1838: out3 <= 16'hc34b;
      1839: out3 <= 16'hc343;
      1840: out3 <= 16'hc33b;
      1841: out3 <= 16'hc333;
      1842: out3 <= 16'hc32b;
      1843: out3 <= 16'hc323;
      1844: out3 <= 16'hc31c;
      1845: out3 <= 16'hc314;
      1846: out3 <= 16'hc30c;
      1847: out3 <= 16'hc305;
      1848: out3 <= 16'hc2fd;
      1849: out3 <= 16'hc2f5;
      1850: out3 <= 16'hc2ee;
      1851: out3 <= 16'hc2e6;
      1852: out3 <= 16'hc2df;
      1853: out3 <= 16'hc2d8;
      1854: out3 <= 16'hc2d0;
      1855: out3 <= 16'hc2c9;
      1856: out3 <= 16'hc2c1;
      1857: out3 <= 16'hc2ba;
      1858: out3 <= 16'hc2b3;
      1859: out3 <= 16'hc2ac;
      1860: out3 <= 16'hc2a5;
      1861: out3 <= 16'hc29d;
      1862: out3 <= 16'hc296;
      1863: out3 <= 16'hc28f;
      1864: out3 <= 16'hc288;
      1865: out3 <= 16'hc281;
      1866: out3 <= 16'hc27a;
      1867: out3 <= 16'hc273;
      1868: out3 <= 16'hc26d;
      1869: out3 <= 16'hc266;
      1870: out3 <= 16'hc25f;
      1871: out3 <= 16'hc258;
      1872: out3 <= 16'hc251;
      1873: out3 <= 16'hc24b;
      1874: out3 <= 16'hc244;
      1875: out3 <= 16'hc23e;
      1876: out3 <= 16'hc237;
      1877: out3 <= 16'hc230;
      1878: out3 <= 16'hc22a;
      1879: out3 <= 16'hc223;
      1880: out3 <= 16'hc21d;
      1881: out3 <= 16'hc217;
      1882: out3 <= 16'hc210;
      1883: out3 <= 16'hc20a;
      1884: out3 <= 16'hc204;
      1885: out3 <= 16'hc1fd;
      1886: out3 <= 16'hc1f7;
      1887: out3 <= 16'hc1f1;
      1888: out3 <= 16'hc1eb;
      1889: out3 <= 16'hc1e5;
      1890: out3 <= 16'hc1df;
      1891: out3 <= 16'hc1d9;
      1892: out3 <= 16'hc1d3;
      1893: out3 <= 16'hc1cd;
      1894: out3 <= 16'hc1c7;
      1895: out3 <= 16'hc1c1;
      1896: out3 <= 16'hc1bb;
      1897: out3 <= 16'hc1b6;
      1898: out3 <= 16'hc1b0;
      1899: out3 <= 16'hc1aa;
      1900: out3 <= 16'hc1a4;
      1901: out3 <= 16'hc19f;
      1902: out3 <= 16'hc199;
      1903: out3 <= 16'hc194;
      1904: out3 <= 16'hc18e;
      1905: out3 <= 16'hc189;
      1906: out3 <= 16'hc183;
      1907: out3 <= 16'hc17e;
      1908: out3 <= 16'hc178;
      1909: out3 <= 16'hc173;
      1910: out3 <= 16'hc16e;
      1911: out3 <= 16'hc168;
      1912: out3 <= 16'hc163;
      1913: out3 <= 16'hc15e;
      1914: out3 <= 16'hc159;
      1915: out3 <= 16'hc154;
      1916: out3 <= 16'hc14f;
      1917: out3 <= 16'hc14a;
      1918: out3 <= 16'hc145;
      1919: out3 <= 16'hc140;
      1920: out3 <= 16'hc13b;
      1921: out3 <= 16'hc136;
      1922: out3 <= 16'hc131;
      1923: out3 <= 16'hc12c;
      1924: out3 <= 16'hc128;
      1925: out3 <= 16'hc123;
      1926: out3 <= 16'hc11e;
      1927: out3 <= 16'hc119;
      1928: out3 <= 16'hc115;
      1929: out3 <= 16'hc110;
      1930: out3 <= 16'hc10c;
      1931: out3 <= 16'hc107;
      1932: out3 <= 16'hc103;
      1933: out3 <= 16'hc0fe;
      1934: out3 <= 16'hc0fa;
      1935: out3 <= 16'hc0f6;
      1936: out3 <= 16'hc0f1;
      1937: out3 <= 16'hc0ed;
      1938: out3 <= 16'hc0e9;
      1939: out3 <= 16'hc0e4;
      1940: out3 <= 16'hc0e0;
      1941: out3 <= 16'hc0dc;
      1942: out3 <= 16'hc0d8;
      1943: out3 <= 16'hc0d4;
      1944: out3 <= 16'hc0d0;
      1945: out3 <= 16'hc0cc;
      1946: out3 <= 16'hc0c8;
      1947: out3 <= 16'hc0c4;
      1948: out3 <= 16'hc0c0;
      1949: out3 <= 16'hc0bd;
      1950: out3 <= 16'hc0b9;
      1951: out3 <= 16'hc0b5;
      1952: out3 <= 16'hc0b1;
      1953: out3 <= 16'hc0ae;
      1954: out3 <= 16'hc0aa;
      1955: out3 <= 16'hc0a6;
      1956: out3 <= 16'hc0a3;
      1957: out3 <= 16'hc09f;
      1958: out3 <= 16'hc09c;
      1959: out3 <= 16'hc098;
      1960: out3 <= 16'hc095;
      1961: out3 <= 16'hc092;
      1962: out3 <= 16'hc08e;
      1963: out3 <= 16'hc08b;
      1964: out3 <= 16'hc088;
      1965: out3 <= 16'hc085;
      1966: out3 <= 16'hc081;
      1967: out3 <= 16'hc07e;
      1968: out3 <= 16'hc07b;
      1969: out3 <= 16'hc078;
      1970: out3 <= 16'hc075;
      1971: out3 <= 16'hc072;
      1972: out3 <= 16'hc06f;
      1973: out3 <= 16'hc06c;
      1974: out3 <= 16'hc069;
      1975: out3 <= 16'hc067;
      1976: out3 <= 16'hc064;
      1977: out3 <= 16'hc061;
      1978: out3 <= 16'hc05e;
      1979: out3 <= 16'hc05c;
      1980: out3 <= 16'hc059;
      1981: out3 <= 16'hc056;
      1982: out3 <= 16'hc054;
      1983: out3 <= 16'hc051;
      1984: out3 <= 16'hc04f;
      1985: out3 <= 16'hc04c;
      1986: out3 <= 16'hc04a;
      1987: out3 <= 16'hc048;
      1988: out3 <= 16'hc045;
      1989: out3 <= 16'hc043;
      1990: out3 <= 16'hc041;
      1991: out3 <= 16'hc03f;
      1992: out3 <= 16'hc03c;
      1993: out3 <= 16'hc03a;
      1994: out3 <= 16'hc038;
      1995: out3 <= 16'hc036;
      1996: out3 <= 16'hc034;
      1997: out3 <= 16'hc032;
      1998: out3 <= 16'hc030;
      1999: out3 <= 16'hc02e;
      2000: out3 <= 16'hc02c;
      2001: out3 <= 16'hc02b;
      2002: out3 <= 16'hc029;
      2003: out3 <= 16'hc027;
      2004: out3 <= 16'hc025;
      2005: out3 <= 16'hc024;
      2006: out3 <= 16'hc022;
      2007: out3 <= 16'hc020;
      2008: out3 <= 16'hc01f;
      2009: out3 <= 16'hc01d;
      2010: out3 <= 16'hc01c;
      2011: out3 <= 16'hc01a;
      2012: out3 <= 16'hc019;
      2013: out3 <= 16'hc018;
      2014: out3 <= 16'hc016;
      2015: out3 <= 16'hc015;
      2016: out3 <= 16'hc014;
      2017: out3 <= 16'hc013;
      2018: out3 <= 16'hc011;
      2019: out3 <= 16'hc010;
      2020: out3 <= 16'hc00f;
      2021: out3 <= 16'hc00e;
      2022: out3 <= 16'hc00d;
      2023: out3 <= 16'hc00c;
      2024: out3 <= 16'hc00b;
      2025: out3 <= 16'hc00a;
      2026: out3 <= 16'hc009;
      2027: out3 <= 16'hc009;
      2028: out3 <= 16'hc008;
      2029: out3 <= 16'hc007;
      2030: out3 <= 16'hc006;
      2031: out3 <= 16'hc006;
      2032: out3 <= 16'hc005;
      2033: out3 <= 16'hc004;
      2034: out3 <= 16'hc004;
      2035: out3 <= 16'hc003;
      2036: out3 <= 16'hc003;
      2037: out3 <= 16'hc002;
      2038: out3 <= 16'hc002;
      2039: out3 <= 16'hc002;
      2040: out3 <= 16'hc001;
      2041: out3 <= 16'hc001;
      2042: out3 <= 16'hc001;
      2043: out3 <= 16'hc000;
      2044: out3 <= 16'hc000;
      2045: out3 <= 16'hc000;
      2046: out3 <= 16'hc000;
      2047: out3 <= 16'hc000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D8_110492(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [10:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfff3;
      1: out3 <= 16'hffda;
      2: out3 <= 16'hffc1;
      3: out3 <= 16'hffa8;
      4: out3 <= 16'hff8f;
      5: out3 <= 16'hff76;
      6: out3 <= 16'hff5d;
      7: out3 <= 16'hff44;
      8: out3 <= 16'hff2a;
      9: out3 <= 16'hff11;
      10: out3 <= 16'hfef8;
      11: out3 <= 16'hfedf;
      12: out3 <= 16'hfec6;
      13: out3 <= 16'hfead;
      14: out3 <= 16'hfe94;
      15: out3 <= 16'hfe7a;
      16: out3 <= 16'hfe61;
      17: out3 <= 16'hfe48;
      18: out3 <= 16'hfe2f;
      19: out3 <= 16'hfe16;
      20: out3 <= 16'hfdfd;
      21: out3 <= 16'hfde4;
      22: out3 <= 16'hfdcb;
      23: out3 <= 16'hfdb2;
      24: out3 <= 16'hfd98;
      25: out3 <= 16'hfd7f;
      26: out3 <= 16'hfd66;
      27: out3 <= 16'hfd4d;
      28: out3 <= 16'hfd34;
      29: out3 <= 16'hfd1b;
      30: out3 <= 16'hfd02;
      31: out3 <= 16'hfce9;
      32: out3 <= 16'hfcd0;
      33: out3 <= 16'hfcb6;
      34: out3 <= 16'hfc9d;
      35: out3 <= 16'hfc84;
      36: out3 <= 16'hfc6b;
      37: out3 <= 16'hfc52;
      38: out3 <= 16'hfc39;
      39: out3 <= 16'hfc20;
      40: out3 <= 16'hfc07;
      41: out3 <= 16'hfbee;
      42: out3 <= 16'hfbd5;
      43: out3 <= 16'hfbbc;
      44: out3 <= 16'hfba2;
      45: out3 <= 16'hfb89;
      46: out3 <= 16'hfb70;
      47: out3 <= 16'hfb57;
      48: out3 <= 16'hfb3e;
      49: out3 <= 16'hfb25;
      50: out3 <= 16'hfb0c;
      51: out3 <= 16'hfaf3;
      52: out3 <= 16'hfada;
      53: out3 <= 16'hfac1;
      54: out3 <= 16'hfaa8;
      55: out3 <= 16'hfa8f;
      56: out3 <= 16'hfa76;
      57: out3 <= 16'hfa5d;
      58: out3 <= 16'hfa44;
      59: out3 <= 16'hfa2b;
      60: out3 <= 16'hfa12;
      61: out3 <= 16'hf9f9;
      62: out3 <= 16'hf9e0;
      63: out3 <= 16'hf9c7;
      64: out3 <= 16'hf9ae;
      65: out3 <= 16'hf995;
      66: out3 <= 16'hf97c;
      67: out3 <= 16'hf963;
      68: out3 <= 16'hf94a;
      69: out3 <= 16'hf931;
      70: out3 <= 16'hf918;
      71: out3 <= 16'hf8ff;
      72: out3 <= 16'hf8e6;
      73: out3 <= 16'hf8cd;
      74: out3 <= 16'hf8b4;
      75: out3 <= 16'hf89b;
      76: out3 <= 16'hf882;
      77: out3 <= 16'hf869;
      78: out3 <= 16'hf850;
      79: out3 <= 16'hf837;
      80: out3 <= 16'hf81e;
      81: out3 <= 16'hf805;
      82: out3 <= 16'hf7ec;
      83: out3 <= 16'hf7d3;
      84: out3 <= 16'hf7ba;
      85: out3 <= 16'hf7a1;
      86: out3 <= 16'hf788;
      87: out3 <= 16'hf76f;
      88: out3 <= 16'hf757;
      89: out3 <= 16'hf73e;
      90: out3 <= 16'hf725;
      91: out3 <= 16'hf70c;
      92: out3 <= 16'hf6f3;
      93: out3 <= 16'hf6da;
      94: out3 <= 16'hf6c1;
      95: out3 <= 16'hf6a8;
      96: out3 <= 16'hf690;
      97: out3 <= 16'hf677;
      98: out3 <= 16'hf65e;
      99: out3 <= 16'hf645;
      100: out3 <= 16'hf62c;
      101: out3 <= 16'hf613;
      102: out3 <= 16'hf5fa;
      103: out3 <= 16'hf5e2;
      104: out3 <= 16'hf5c9;
      105: out3 <= 16'hf5b0;
      106: out3 <= 16'hf597;
      107: out3 <= 16'hf57e;
      108: out3 <= 16'hf566;
      109: out3 <= 16'hf54d;
      110: out3 <= 16'hf534;
      111: out3 <= 16'hf51b;
      112: out3 <= 16'hf503;
      113: out3 <= 16'hf4ea;
      114: out3 <= 16'hf4d1;
      115: out3 <= 16'hf4b8;
      116: out3 <= 16'hf4a0;
      117: out3 <= 16'hf487;
      118: out3 <= 16'hf46e;
      119: out3 <= 16'hf455;
      120: out3 <= 16'hf43d;
      121: out3 <= 16'hf424;
      122: out3 <= 16'hf40b;
      123: out3 <= 16'hf3f3;
      124: out3 <= 16'hf3da;
      125: out3 <= 16'hf3c1;
      126: out3 <= 16'hf3a9;
      127: out3 <= 16'hf390;
      128: out3 <= 16'hf377;
      129: out3 <= 16'hf35f;
      130: out3 <= 16'hf346;
      131: out3 <= 16'hf32d;
      132: out3 <= 16'hf315;
      133: out3 <= 16'hf2fc;
      134: out3 <= 16'hf2e4;
      135: out3 <= 16'hf2cb;
      136: out3 <= 16'hf2b2;
      137: out3 <= 16'hf29a;
      138: out3 <= 16'hf281;
      139: out3 <= 16'hf269;
      140: out3 <= 16'hf250;
      141: out3 <= 16'hf238;
      142: out3 <= 16'hf21f;
      143: out3 <= 16'hf207;
      144: out3 <= 16'hf1ee;
      145: out3 <= 16'hf1d5;
      146: out3 <= 16'hf1bd;
      147: out3 <= 16'hf1a4;
      148: out3 <= 16'hf18c;
      149: out3 <= 16'hf174;
      150: out3 <= 16'hf15b;
      151: out3 <= 16'hf143;
      152: out3 <= 16'hf12a;
      153: out3 <= 16'hf112;
      154: out3 <= 16'hf0f9;
      155: out3 <= 16'hf0e1;
      156: out3 <= 16'hf0c8;
      157: out3 <= 16'hf0b0;
      158: out3 <= 16'hf098;
      159: out3 <= 16'hf07f;
      160: out3 <= 16'hf067;
      161: out3 <= 16'hf04e;
      162: out3 <= 16'hf036;
      163: out3 <= 16'hf01e;
      164: out3 <= 16'hf005;
      165: out3 <= 16'hefed;
      166: out3 <= 16'hefd5;
      167: out3 <= 16'hefbc;
      168: out3 <= 16'hefa4;
      169: out3 <= 16'hef8c;
      170: out3 <= 16'hef74;
      171: out3 <= 16'hef5b;
      172: out3 <= 16'hef43;
      173: out3 <= 16'hef2b;
      174: out3 <= 16'hef13;
      175: out3 <= 16'heefa;
      176: out3 <= 16'heee2;
      177: out3 <= 16'heeca;
      178: out3 <= 16'heeb2;
      179: out3 <= 16'hee99;
      180: out3 <= 16'hee81;
      181: out3 <= 16'hee69;
      182: out3 <= 16'hee51;
      183: out3 <= 16'hee39;
      184: out3 <= 16'hee21;
      185: out3 <= 16'hee09;
      186: out3 <= 16'hedf0;
      187: out3 <= 16'hedd8;
      188: out3 <= 16'hedc0;
      189: out3 <= 16'heda8;
      190: out3 <= 16'hed90;
      191: out3 <= 16'hed78;
      192: out3 <= 16'hed60;
      193: out3 <= 16'hed48;
      194: out3 <= 16'hed30;
      195: out3 <= 16'hed18;
      196: out3 <= 16'hed00;
      197: out3 <= 16'hece8;
      198: out3 <= 16'hecd0;
      199: out3 <= 16'hecb8;
      200: out3 <= 16'heca0;
      201: out3 <= 16'hec88;
      202: out3 <= 16'hec70;
      203: out3 <= 16'hec58;
      204: out3 <= 16'hec40;
      205: out3 <= 16'hec28;
      206: out3 <= 16'hec10;
      207: out3 <= 16'hebf9;
      208: out3 <= 16'hebe1;
      209: out3 <= 16'hebc9;
      210: out3 <= 16'hebb1;
      211: out3 <= 16'heb99;
      212: out3 <= 16'heb81;
      213: out3 <= 16'heb6a;
      214: out3 <= 16'heb52;
      215: out3 <= 16'heb3a;
      216: out3 <= 16'heb22;
      217: out3 <= 16'heb0a;
      218: out3 <= 16'heaf3;
      219: out3 <= 16'headb;
      220: out3 <= 16'heac3;
      221: out3 <= 16'heaac;
      222: out3 <= 16'hea94;
      223: out3 <= 16'hea7c;
      224: out3 <= 16'hea65;
      225: out3 <= 16'hea4d;
      226: out3 <= 16'hea35;
      227: out3 <= 16'hea1e;
      228: out3 <= 16'hea06;
      229: out3 <= 16'he9ee;
      230: out3 <= 16'he9d7;
      231: out3 <= 16'he9bf;
      232: out3 <= 16'he9a8;
      233: out3 <= 16'he990;
      234: out3 <= 16'he979;
      235: out3 <= 16'he961;
      236: out3 <= 16'he94a;
      237: out3 <= 16'he932;
      238: out3 <= 16'he91b;
      239: out3 <= 16'he903;
      240: out3 <= 16'he8ec;
      241: out3 <= 16'he8d4;
      242: out3 <= 16'he8bd;
      243: out3 <= 16'he8a5;
      244: out3 <= 16'he88e;
      245: out3 <= 16'he877;
      246: out3 <= 16'he85f;
      247: out3 <= 16'he848;
      248: out3 <= 16'he831;
      249: out3 <= 16'he819;
      250: out3 <= 16'he802;
      251: out3 <= 16'he7eb;
      252: out3 <= 16'he7d3;
      253: out3 <= 16'he7bc;
      254: out3 <= 16'he7a5;
      255: out3 <= 16'he78e;
      256: out3 <= 16'he777;
      257: out3 <= 16'he75f;
      258: out3 <= 16'he748;
      259: out3 <= 16'he731;
      260: out3 <= 16'he71a;
      261: out3 <= 16'he703;
      262: out3 <= 16'he6ec;
      263: out3 <= 16'he6d4;
      264: out3 <= 16'he6bd;
      265: out3 <= 16'he6a6;
      266: out3 <= 16'he68f;
      267: out3 <= 16'he678;
      268: out3 <= 16'he661;
      269: out3 <= 16'he64a;
      270: out3 <= 16'he633;
      271: out3 <= 16'he61c;
      272: out3 <= 16'he605;
      273: out3 <= 16'he5ee;
      274: out3 <= 16'he5d7;
      275: out3 <= 16'he5c0;
      276: out3 <= 16'he5a9;
      277: out3 <= 16'he592;
      278: out3 <= 16'he57c;
      279: out3 <= 16'he565;
      280: out3 <= 16'he54e;
      281: out3 <= 16'he537;
      282: out3 <= 16'he520;
      283: out3 <= 16'he509;
      284: out3 <= 16'he4f3;
      285: out3 <= 16'he4dc;
      286: out3 <= 16'he4c5;
      287: out3 <= 16'he4ae;
      288: out3 <= 16'he498;
      289: out3 <= 16'he481;
      290: out3 <= 16'he46a;
      291: out3 <= 16'he454;
      292: out3 <= 16'he43d;
      293: out3 <= 16'he426;
      294: out3 <= 16'he410;
      295: out3 <= 16'he3f9;
      296: out3 <= 16'he3e2;
      297: out3 <= 16'he3cc;
      298: out3 <= 16'he3b5;
      299: out3 <= 16'he39f;
      300: out3 <= 16'he388;
      301: out3 <= 16'he372;
      302: out3 <= 16'he35b;
      303: out3 <= 16'he345;
      304: out3 <= 16'he32e;
      305: out3 <= 16'he318;
      306: out3 <= 16'he301;
      307: out3 <= 16'he2eb;
      308: out3 <= 16'he2d5;
      309: out3 <= 16'he2be;
      310: out3 <= 16'he2a8;
      311: out3 <= 16'he292;
      312: out3 <= 16'he27b;
      313: out3 <= 16'he265;
      314: out3 <= 16'he24f;
      315: out3 <= 16'he239;
      316: out3 <= 16'he222;
      317: out3 <= 16'he20c;
      318: out3 <= 16'he1f6;
      319: out3 <= 16'he1e0;
      320: out3 <= 16'he1ca;
      321: out3 <= 16'he1b3;
      322: out3 <= 16'he19d;
      323: out3 <= 16'he187;
      324: out3 <= 16'he171;
      325: out3 <= 16'he15b;
      326: out3 <= 16'he145;
      327: out3 <= 16'he12f;
      328: out3 <= 16'he119;
      329: out3 <= 16'he103;
      330: out3 <= 16'he0ed;
      331: out3 <= 16'he0d7;
      332: out3 <= 16'he0c1;
      333: out3 <= 16'he0ab;
      334: out3 <= 16'he095;
      335: out3 <= 16'he07f;
      336: out3 <= 16'he069;
      337: out3 <= 16'he054;
      338: out3 <= 16'he03e;
      339: out3 <= 16'he028;
      340: out3 <= 16'he012;
      341: out3 <= 16'hdffc;
      342: out3 <= 16'hdfe7;
      343: out3 <= 16'hdfd1;
      344: out3 <= 16'hdfbb;
      345: out3 <= 16'hdfa5;
      346: out3 <= 16'hdf90;
      347: out3 <= 16'hdf7a;
      348: out3 <= 16'hdf65;
      349: out3 <= 16'hdf4f;
      350: out3 <= 16'hdf39;
      351: out3 <= 16'hdf24;
      352: out3 <= 16'hdf0e;
      353: out3 <= 16'hdef9;
      354: out3 <= 16'hdee3;
      355: out3 <= 16'hdece;
      356: out3 <= 16'hdeb8;
      357: out3 <= 16'hdea3;
      358: out3 <= 16'hde8d;
      359: out3 <= 16'hde78;
      360: out3 <= 16'hde62;
      361: out3 <= 16'hde4d;
      362: out3 <= 16'hde38;
      363: out3 <= 16'hde22;
      364: out3 <= 16'hde0d;
      365: out3 <= 16'hddf8;
      366: out3 <= 16'hdde2;
      367: out3 <= 16'hddcd;
      368: out3 <= 16'hddb8;
      369: out3 <= 16'hdda3;
      370: out3 <= 16'hdd8e;
      371: out3 <= 16'hdd78;
      372: out3 <= 16'hdd63;
      373: out3 <= 16'hdd4e;
      374: out3 <= 16'hdd39;
      375: out3 <= 16'hdd24;
      376: out3 <= 16'hdd0f;
      377: out3 <= 16'hdcfa;
      378: out3 <= 16'hdce5;
      379: out3 <= 16'hdcd0;
      380: out3 <= 16'hdcbb;
      381: out3 <= 16'hdca6;
      382: out3 <= 16'hdc91;
      383: out3 <= 16'hdc7c;
      384: out3 <= 16'hdc67;
      385: out3 <= 16'hdc52;
      386: out3 <= 16'hdc3d;
      387: out3 <= 16'hdc29;
      388: out3 <= 16'hdc14;
      389: out3 <= 16'hdbff;
      390: out3 <= 16'hdbea;
      391: out3 <= 16'hdbd5;
      392: out3 <= 16'hdbc1;
      393: out3 <= 16'hdbac;
      394: out3 <= 16'hdb97;
      395: out3 <= 16'hdb83;
      396: out3 <= 16'hdb6e;
      397: out3 <= 16'hdb59;
      398: out3 <= 16'hdb45;
      399: out3 <= 16'hdb30;
      400: out3 <= 16'hdb1c;
      401: out3 <= 16'hdb07;
      402: out3 <= 16'hdaf3;
      403: out3 <= 16'hdade;
      404: out3 <= 16'hdaca;
      405: out3 <= 16'hdab5;
      406: out3 <= 16'hdaa1;
      407: out3 <= 16'hda8c;
      408: out3 <= 16'hda78;
      409: out3 <= 16'hda64;
      410: out3 <= 16'hda4f;
      411: out3 <= 16'hda3b;
      412: out3 <= 16'hda27;
      413: out3 <= 16'hda13;
      414: out3 <= 16'hd9fe;
      415: out3 <= 16'hd9ea;
      416: out3 <= 16'hd9d6;
      417: out3 <= 16'hd9c2;
      418: out3 <= 16'hd9ae;
      419: out3 <= 16'hd99a;
      420: out3 <= 16'hd985;
      421: out3 <= 16'hd971;
      422: out3 <= 16'hd95d;
      423: out3 <= 16'hd949;
      424: out3 <= 16'hd935;
      425: out3 <= 16'hd921;
      426: out3 <= 16'hd90d;
      427: out3 <= 16'hd8f9;
      428: out3 <= 16'hd8e6;
      429: out3 <= 16'hd8d2;
      430: out3 <= 16'hd8be;
      431: out3 <= 16'hd8aa;
      432: out3 <= 16'hd896;
      433: out3 <= 16'hd882;
      434: out3 <= 16'hd86f;
      435: out3 <= 16'hd85b;
      436: out3 <= 16'hd847;
      437: out3 <= 16'hd833;
      438: out3 <= 16'hd820;
      439: out3 <= 16'hd80c;
      440: out3 <= 16'hd7f8;
      441: out3 <= 16'hd7e5;
      442: out3 <= 16'hd7d1;
      443: out3 <= 16'hd7be;
      444: out3 <= 16'hd7aa;
      445: out3 <= 16'hd797;
      446: out3 <= 16'hd783;
      447: out3 <= 16'hd770;
      448: out3 <= 16'hd75c;
      449: out3 <= 16'hd749;
      450: out3 <= 16'hd736;
      451: out3 <= 16'hd722;
      452: out3 <= 16'hd70f;
      453: out3 <= 16'hd6fc;
      454: out3 <= 16'hd6e8;
      455: out3 <= 16'hd6d5;
      456: out3 <= 16'hd6c2;
      457: out3 <= 16'hd6af;
      458: out3 <= 16'hd69b;
      459: out3 <= 16'hd688;
      460: out3 <= 16'hd675;
      461: out3 <= 16'hd662;
      462: out3 <= 16'hd64f;
      463: out3 <= 16'hd63c;
      464: out3 <= 16'hd629;
      465: out3 <= 16'hd616;
      466: out3 <= 16'hd603;
      467: out3 <= 16'hd5f0;
      468: out3 <= 16'hd5dd;
      469: out3 <= 16'hd5ca;
      470: out3 <= 16'hd5b7;
      471: out3 <= 16'hd5a4;
      472: out3 <= 16'hd592;
      473: out3 <= 16'hd57f;
      474: out3 <= 16'hd56c;
      475: out3 <= 16'hd559;
      476: out3 <= 16'hd547;
      477: out3 <= 16'hd534;
      478: out3 <= 16'hd521;
      479: out3 <= 16'hd50e;
      480: out3 <= 16'hd4fc;
      481: out3 <= 16'hd4e9;
      482: out3 <= 16'hd4d7;
      483: out3 <= 16'hd4c4;
      484: out3 <= 16'hd4b2;
      485: out3 <= 16'hd49f;
      486: out3 <= 16'hd48d;
      487: out3 <= 16'hd47a;
      488: out3 <= 16'hd468;
      489: out3 <= 16'hd455;
      490: out3 <= 16'hd443;
      491: out3 <= 16'hd431;
      492: out3 <= 16'hd41e;
      493: out3 <= 16'hd40c;
      494: out3 <= 16'hd3fa;
      495: out3 <= 16'hd3e8;
      496: out3 <= 16'hd3d5;
      497: out3 <= 16'hd3c3;
      498: out3 <= 16'hd3b1;
      499: out3 <= 16'hd39f;
      500: out3 <= 16'hd38d;
      501: out3 <= 16'hd37b;
      502: out3 <= 16'hd369;
      503: out3 <= 16'hd357;
      504: out3 <= 16'hd345;
      505: out3 <= 16'hd333;
      506: out3 <= 16'hd321;
      507: out3 <= 16'hd30f;
      508: out3 <= 16'hd2fd;
      509: out3 <= 16'hd2eb;
      510: out3 <= 16'hd2d9;
      511: out3 <= 16'hd2c8;
      512: out3 <= 16'hd2b6;
      513: out3 <= 16'hd2a4;
      514: out3 <= 16'hd292;
      515: out3 <= 16'hd281;
      516: out3 <= 16'hd26f;
      517: out3 <= 16'hd25d;
      518: out3 <= 16'hd24c;
      519: out3 <= 16'hd23a;
      520: out3 <= 16'hd229;
      521: out3 <= 16'hd217;
      522: out3 <= 16'hd206;
      523: out3 <= 16'hd1f4;
      524: out3 <= 16'hd1e3;
      525: out3 <= 16'hd1d1;
      526: out3 <= 16'hd1c0;
      527: out3 <= 16'hd1af;
      528: out3 <= 16'hd19d;
      529: out3 <= 16'hd18c;
      530: out3 <= 16'hd17b;
      531: out3 <= 16'hd169;
      532: out3 <= 16'hd158;
      533: out3 <= 16'hd147;
      534: out3 <= 16'hd136;
      535: out3 <= 16'hd125;
      536: out3 <= 16'hd114;
      537: out3 <= 16'hd103;
      538: out3 <= 16'hd0f2;
      539: out3 <= 16'hd0e0;
      540: out3 <= 16'hd0d0;
      541: out3 <= 16'hd0bf;
      542: out3 <= 16'hd0ae;
      543: out3 <= 16'hd09d;
      544: out3 <= 16'hd08c;
      545: out3 <= 16'hd07b;
      546: out3 <= 16'hd06a;
      547: out3 <= 16'hd059;
      548: out3 <= 16'hd049;
      549: out3 <= 16'hd038;
      550: out3 <= 16'hd027;
      551: out3 <= 16'hd016;
      552: out3 <= 16'hd006;
      553: out3 <= 16'hcff5;
      554: out3 <= 16'hcfe5;
      555: out3 <= 16'hcfd4;
      556: out3 <= 16'hcfc4;
      557: out3 <= 16'hcfb3;
      558: out3 <= 16'hcfa3;
      559: out3 <= 16'hcf92;
      560: out3 <= 16'hcf82;
      561: out3 <= 16'hcf71;
      562: out3 <= 16'hcf61;
      563: out3 <= 16'hcf51;
      564: out3 <= 16'hcf40;
      565: out3 <= 16'hcf30;
      566: out3 <= 16'hcf20;
      567: out3 <= 16'hcf10;
      568: out3 <= 16'hceff;
      569: out3 <= 16'hceef;
      570: out3 <= 16'hcedf;
      571: out3 <= 16'hcecf;
      572: out3 <= 16'hcebf;
      573: out3 <= 16'hceaf;
      574: out3 <= 16'hce9f;
      575: out3 <= 16'hce8f;
      576: out3 <= 16'hce7f;
      577: out3 <= 16'hce6f;
      578: out3 <= 16'hce5f;
      579: out3 <= 16'hce4f;
      580: out3 <= 16'hce40;
      581: out3 <= 16'hce30;
      582: out3 <= 16'hce20;
      583: out3 <= 16'hce10;
      584: out3 <= 16'hce01;
      585: out3 <= 16'hcdf1;
      586: out3 <= 16'hcde1;
      587: out3 <= 16'hcdd2;
      588: out3 <= 16'hcdc2;
      589: out3 <= 16'hcdb2;
      590: out3 <= 16'hcda3;
      591: out3 <= 16'hcd93;
      592: out3 <= 16'hcd84;
      593: out3 <= 16'hcd75;
      594: out3 <= 16'hcd65;
      595: out3 <= 16'hcd56;
      596: out3 <= 16'hcd46;
      597: out3 <= 16'hcd37;
      598: out3 <= 16'hcd28;
      599: out3 <= 16'hcd19;
      600: out3 <= 16'hcd09;
      601: out3 <= 16'hccfa;
      602: out3 <= 16'hcceb;
      603: out3 <= 16'hccdc;
      604: out3 <= 16'hcccd;
      605: out3 <= 16'hccbe;
      606: out3 <= 16'hccaf;
      607: out3 <= 16'hcca0;
      608: out3 <= 16'hcc91;
      609: out3 <= 16'hcc82;
      610: out3 <= 16'hcc73;
      611: out3 <= 16'hcc64;
      612: out3 <= 16'hcc55;
      613: out3 <= 16'hcc46;
      614: out3 <= 16'hcc38;
      615: out3 <= 16'hcc29;
      616: out3 <= 16'hcc1a;
      617: out3 <= 16'hcc0b;
      618: out3 <= 16'hcbfd;
      619: out3 <= 16'hcbee;
      620: out3 <= 16'hcbe0;
      621: out3 <= 16'hcbd1;
      622: out3 <= 16'hcbc2;
      623: out3 <= 16'hcbb4;
      624: out3 <= 16'hcba5;
      625: out3 <= 16'hcb97;
      626: out3 <= 16'hcb89;
      627: out3 <= 16'hcb7a;
      628: out3 <= 16'hcb6c;
      629: out3 <= 16'hcb5e;
      630: out3 <= 16'hcb4f;
      631: out3 <= 16'hcb41;
      632: out3 <= 16'hcb33;
      633: out3 <= 16'hcb25;
      634: out3 <= 16'hcb16;
      635: out3 <= 16'hcb08;
      636: out3 <= 16'hcafa;
      637: out3 <= 16'hcaec;
      638: out3 <= 16'hcade;
      639: out3 <= 16'hcad0;
      640: out3 <= 16'hcac2;
      641: out3 <= 16'hcab4;
      642: out3 <= 16'hcaa6;
      643: out3 <= 16'hca99;
      644: out3 <= 16'hca8b;
      645: out3 <= 16'hca7d;
      646: out3 <= 16'hca6f;
      647: out3 <= 16'hca61;
      648: out3 <= 16'hca54;
      649: out3 <= 16'hca46;
      650: out3 <= 16'hca38;
      651: out3 <= 16'hca2b;
      652: out3 <= 16'hca1d;
      653: out3 <= 16'hca10;
      654: out3 <= 16'hca02;
      655: out3 <= 16'hc9f5;
      656: out3 <= 16'hc9e7;
      657: out3 <= 16'hc9da;
      658: out3 <= 16'hc9cc;
      659: out3 <= 16'hc9bf;
      660: out3 <= 16'hc9b2;
      661: out3 <= 16'hc9a4;
      662: out3 <= 16'hc997;
      663: out3 <= 16'hc98a;
      664: out3 <= 16'hc97d;
      665: out3 <= 16'hc970;
      666: out3 <= 16'hc963;
      667: out3 <= 16'hc955;
      668: out3 <= 16'hc948;
      669: out3 <= 16'hc93b;
      670: out3 <= 16'hc92e;
      671: out3 <= 16'hc921;
      672: out3 <= 16'hc915;
      673: out3 <= 16'hc908;
      674: out3 <= 16'hc8fb;
      675: out3 <= 16'hc8ee;
      676: out3 <= 16'hc8e1;
      677: out3 <= 16'hc8d4;
      678: out3 <= 16'hc8c8;
      679: out3 <= 16'hc8bb;
      680: out3 <= 16'hc8ae;
      681: out3 <= 16'hc8a2;
      682: out3 <= 16'hc895;
      683: out3 <= 16'hc889;
      684: out3 <= 16'hc87c;
      685: out3 <= 16'hc870;
      686: out3 <= 16'hc863;
      687: out3 <= 16'hc857;
      688: out3 <= 16'hc84a;
      689: out3 <= 16'hc83e;
      690: out3 <= 16'hc832;
      691: out3 <= 16'hc825;
      692: out3 <= 16'hc819;
      693: out3 <= 16'hc80d;
      694: out3 <= 16'hc801;
      695: out3 <= 16'hc7f5;
      696: out3 <= 16'hc7e8;
      697: out3 <= 16'hc7dc;
      698: out3 <= 16'hc7d0;
      699: out3 <= 16'hc7c4;
      700: out3 <= 16'hc7b8;
      701: out3 <= 16'hc7ac;
      702: out3 <= 16'hc7a0;
      703: out3 <= 16'hc795;
      704: out3 <= 16'hc789;
      705: out3 <= 16'hc77d;
      706: out3 <= 16'hc771;
      707: out3 <= 16'hc765;
      708: out3 <= 16'hc75a;
      709: out3 <= 16'hc74e;
      710: out3 <= 16'hc742;
      711: out3 <= 16'hc737;
      712: out3 <= 16'hc72b;
      713: out3 <= 16'hc720;
      714: out3 <= 16'hc714;
      715: out3 <= 16'hc709;
      716: out3 <= 16'hc6fd;
      717: out3 <= 16'hc6f2;
      718: out3 <= 16'hc6e6;
      719: out3 <= 16'hc6db;
      720: out3 <= 16'hc6d0;
      721: out3 <= 16'hc6c5;
      722: out3 <= 16'hc6b9;
      723: out3 <= 16'hc6ae;
      724: out3 <= 16'hc6a3;
      725: out3 <= 16'hc698;
      726: out3 <= 16'hc68d;
      727: out3 <= 16'hc682;
      728: out3 <= 16'hc677;
      729: out3 <= 16'hc66c;
      730: out3 <= 16'hc661;
      731: out3 <= 16'hc656;
      732: out3 <= 16'hc64b;
      733: out3 <= 16'hc640;
      734: out3 <= 16'hc635;
      735: out3 <= 16'hc62a;
      736: out3 <= 16'hc620;
      737: out3 <= 16'hc615;
      738: out3 <= 16'hc60a;
      739: out3 <= 16'hc600;
      740: out3 <= 16'hc5f5;
      741: out3 <= 16'hc5ea;
      742: out3 <= 16'hc5e0;
      743: out3 <= 16'hc5d5;
      744: out3 <= 16'hc5cb;
      745: out3 <= 16'hc5c1;
      746: out3 <= 16'hc5b6;
      747: out3 <= 16'hc5ac;
      748: out3 <= 16'hc5a1;
      749: out3 <= 16'hc597;
      750: out3 <= 16'hc58d;
      751: out3 <= 16'hc583;
      752: out3 <= 16'hc578;
      753: out3 <= 16'hc56e;
      754: out3 <= 16'hc564;
      755: out3 <= 16'hc55a;
      756: out3 <= 16'hc550;
      757: out3 <= 16'hc546;
      758: out3 <= 16'hc53c;
      759: out3 <= 16'hc532;
      760: out3 <= 16'hc528;
      761: out3 <= 16'hc51e;
      762: out3 <= 16'hc515;
      763: out3 <= 16'hc50b;
      764: out3 <= 16'hc501;
      765: out3 <= 16'hc4f7;
      766: out3 <= 16'hc4ee;
      767: out3 <= 16'hc4e4;
      768: out3 <= 16'hc4da;
      769: out3 <= 16'hc4d1;
      770: out3 <= 16'hc4c7;
      771: out3 <= 16'hc4be;
      772: out3 <= 16'hc4b4;
      773: out3 <= 16'hc4ab;
      774: out3 <= 16'hc4a1;
      775: out3 <= 16'hc498;
      776: out3 <= 16'hc48f;
      777: out3 <= 16'hc485;
      778: out3 <= 16'hc47c;
      779: out3 <= 16'hc473;
      780: out3 <= 16'hc46a;
      781: out3 <= 16'hc461;
      782: out3 <= 16'hc457;
      783: out3 <= 16'hc44e;
      784: out3 <= 16'hc445;
      785: out3 <= 16'hc43c;
      786: out3 <= 16'hc433;
      787: out3 <= 16'hc42a;
      788: out3 <= 16'hc422;
      789: out3 <= 16'hc419;
      790: out3 <= 16'hc410;
      791: out3 <= 16'hc407;
      792: out3 <= 16'hc3fe;
      793: out3 <= 16'hc3f6;
      794: out3 <= 16'hc3ed;
      795: out3 <= 16'hc3e4;
      796: out3 <= 16'hc3dc;
      797: out3 <= 16'hc3d3;
      798: out3 <= 16'hc3ca;
      799: out3 <= 16'hc3c2;
      800: out3 <= 16'hc3ba;
      801: out3 <= 16'hc3b1;
      802: out3 <= 16'hc3a9;
      803: out3 <= 16'hc3a0;
      804: out3 <= 16'hc398;
      805: out3 <= 16'hc390;
      806: out3 <= 16'hc387;
      807: out3 <= 16'hc37f;
      808: out3 <= 16'hc377;
      809: out3 <= 16'hc36f;
      810: out3 <= 16'hc367;
      811: out3 <= 16'hc35f;
      812: out3 <= 16'hc357;
      813: out3 <= 16'hc34f;
      814: out3 <= 16'hc347;
      815: out3 <= 16'hc33f;
      816: out3 <= 16'hc337;
      817: out3 <= 16'hc32f;
      818: out3 <= 16'hc327;
      819: out3 <= 16'hc320;
      820: out3 <= 16'hc318;
      821: out3 <= 16'hc310;
      822: out3 <= 16'hc308;
      823: out3 <= 16'hc301;
      824: out3 <= 16'hc2f9;
      825: out3 <= 16'hc2f2;
      826: out3 <= 16'hc2ea;
      827: out3 <= 16'hc2e3;
      828: out3 <= 16'hc2db;
      829: out3 <= 16'hc2d4;
      830: out3 <= 16'hc2cc;
      831: out3 <= 16'hc2c5;
      832: out3 <= 16'hc2be;
      833: out3 <= 16'hc2b7;
      834: out3 <= 16'hc2af;
      835: out3 <= 16'hc2a8;
      836: out3 <= 16'hc2a1;
      837: out3 <= 16'hc29a;
      838: out3 <= 16'hc293;
      839: out3 <= 16'hc28c;
      840: out3 <= 16'hc285;
      841: out3 <= 16'hc27e;
      842: out3 <= 16'hc277;
      843: out3 <= 16'hc270;
      844: out3 <= 16'hc269;
      845: out3 <= 16'hc262;
      846: out3 <= 16'hc25c;
      847: out3 <= 16'hc255;
      848: out3 <= 16'hc24e;
      849: out3 <= 16'hc247;
      850: out3 <= 16'hc241;
      851: out3 <= 16'hc23a;
      852: out3 <= 16'hc234;
      853: out3 <= 16'hc22d;
      854: out3 <= 16'hc227;
      855: out3 <= 16'hc220;
      856: out3 <= 16'hc21a;
      857: out3 <= 16'hc213;
      858: out3 <= 16'hc20d;
      859: out3 <= 16'hc207;
      860: out3 <= 16'hc201;
      861: out3 <= 16'hc1fa;
      862: out3 <= 16'hc1f4;
      863: out3 <= 16'hc1ee;
      864: out3 <= 16'hc1e8;
      865: out3 <= 16'hc1e2;
      866: out3 <= 16'hc1dc;
      867: out3 <= 16'hc1d6;
      868: out3 <= 16'hc1d0;
      869: out3 <= 16'hc1ca;
      870: out3 <= 16'hc1c4;
      871: out3 <= 16'hc1be;
      872: out3 <= 16'hc1b8;
      873: out3 <= 16'hc1b3;
      874: out3 <= 16'hc1ad;
      875: out3 <= 16'hc1a7;
      876: out3 <= 16'hc1a2;
      877: out3 <= 16'hc19c;
      878: out3 <= 16'hc196;
      879: out3 <= 16'hc191;
      880: out3 <= 16'hc18b;
      881: out3 <= 16'hc186;
      882: out3 <= 16'hc180;
      883: out3 <= 16'hc17b;
      884: out3 <= 16'hc176;
      885: out3 <= 16'hc170;
      886: out3 <= 16'hc16b;
      887: out3 <= 16'hc166;
      888: out3 <= 16'hc161;
      889: out3 <= 16'hc15b;
      890: out3 <= 16'hc156;
      891: out3 <= 16'hc151;
      892: out3 <= 16'hc14c;
      893: out3 <= 16'hc147;
      894: out3 <= 16'hc142;
      895: out3 <= 16'hc13d;
      896: out3 <= 16'hc138;
      897: out3 <= 16'hc134;
      898: out3 <= 16'hc12f;
      899: out3 <= 16'hc12a;
      900: out3 <= 16'hc125;
      901: out3 <= 16'hc120;
      902: out3 <= 16'hc11c;
      903: out3 <= 16'hc117;
      904: out3 <= 16'hc113;
      905: out3 <= 16'hc10e;
      906: out3 <= 16'hc109;
      907: out3 <= 16'hc105;
      908: out3 <= 16'hc100;
      909: out3 <= 16'hc0fc;
      910: out3 <= 16'hc0f8;
      911: out3 <= 16'hc0f3;
      912: out3 <= 16'hc0ef;
      913: out3 <= 16'hc0eb;
      914: out3 <= 16'hc0e7;
      915: out3 <= 16'hc0e2;
      916: out3 <= 16'hc0de;
      917: out3 <= 16'hc0da;
      918: out3 <= 16'hc0d6;
      919: out3 <= 16'hc0d2;
      920: out3 <= 16'hc0ce;
      921: out3 <= 16'hc0ca;
      922: out3 <= 16'hc0c6;
      923: out3 <= 16'hc0c2;
      924: out3 <= 16'hc0be;
      925: out3 <= 16'hc0bb;
      926: out3 <= 16'hc0b7;
      927: out3 <= 16'hc0b3;
      928: out3 <= 16'hc0af;
      929: out3 <= 16'hc0ac;
      930: out3 <= 16'hc0a8;
      931: out3 <= 16'hc0a5;
      932: out3 <= 16'hc0a1;
      933: out3 <= 16'hc09e;
      934: out3 <= 16'hc09a;
      935: out3 <= 16'hc097;
      936: out3 <= 16'hc093;
      937: out3 <= 16'hc090;
      938: out3 <= 16'hc08d;
      939: out3 <= 16'hc089;
      940: out3 <= 16'hc086;
      941: out3 <= 16'hc083;
      942: out3 <= 16'hc080;
      943: out3 <= 16'hc07d;
      944: out3 <= 16'hc07a;
      945: out3 <= 16'hc077;
      946: out3 <= 16'hc074;
      947: out3 <= 16'hc071;
      948: out3 <= 16'hc06e;
      949: out3 <= 16'hc06b;
      950: out3 <= 16'hc068;
      951: out3 <= 16'hc065;
      952: out3 <= 16'hc062;
      953: out3 <= 16'hc060;
      954: out3 <= 16'hc05d;
      955: out3 <= 16'hc05a;
      956: out3 <= 16'hc058;
      957: out3 <= 16'hc055;
      958: out3 <= 16'hc053;
      959: out3 <= 16'hc050;
      960: out3 <= 16'hc04e;
      961: out3 <= 16'hc04b;
      962: out3 <= 16'hc049;
      963: out3 <= 16'hc047;
      964: out3 <= 16'hc044;
      965: out3 <= 16'hc042;
      966: out3 <= 16'hc040;
      967: out3 <= 16'hc03d;
      968: out3 <= 16'hc03b;
      969: out3 <= 16'hc039;
      970: out3 <= 16'hc037;
      971: out3 <= 16'hc035;
      972: out3 <= 16'hc033;
      973: out3 <= 16'hc031;
      974: out3 <= 16'hc02f;
      975: out3 <= 16'hc02d;
      976: out3 <= 16'hc02b;
      977: out3 <= 16'hc02a;
      978: out3 <= 16'hc028;
      979: out3 <= 16'hc026;
      980: out3 <= 16'hc024;
      981: out3 <= 16'hc023;
      982: out3 <= 16'hc021;
      983: out3 <= 16'hc020;
      984: out3 <= 16'hc01e;
      985: out3 <= 16'hc01d;
      986: out3 <= 16'hc01b;
      987: out3 <= 16'hc01a;
      988: out3 <= 16'hc018;
      989: out3 <= 16'hc017;
      990: out3 <= 16'hc016;
      991: out3 <= 16'hc014;
      992: out3 <= 16'hc013;
      993: out3 <= 16'hc012;
      994: out3 <= 16'hc011;
      995: out3 <= 16'hc010;
      996: out3 <= 16'hc00f;
      997: out3 <= 16'hc00e;
      998: out3 <= 16'hc00d;
      999: out3 <= 16'hc00c;
      1000: out3 <= 16'hc00b;
      1001: out3 <= 16'hc00a;
      1002: out3 <= 16'hc009;
      1003: out3 <= 16'hc008;
      1004: out3 <= 16'hc007;
      1005: out3 <= 16'hc007;
      1006: out3 <= 16'hc006;
      1007: out3 <= 16'hc005;
      1008: out3 <= 16'hc005;
      1009: out3 <= 16'hc004;
      1010: out3 <= 16'hc004;
      1011: out3 <= 16'hc003;
      1012: out3 <= 16'hc003;
      1013: out3 <= 16'hc002;
      1014: out3 <= 16'hc002;
      1015: out3 <= 16'hc001;
      1016: out3 <= 16'hc001;
      1017: out3 <= 16'hc001;
      1018: out3 <= 16'hc001;
      1019: out3 <= 16'hc000;
      1020: out3 <= 16'hc000;
      1021: out3 <= 16'hc000;
      1022: out3 <= 16'hc000;
      1023: out3 <= 16'hc000;
      1024: out3 <= 16'hc000;
      1025: out3 <= 16'hc000;
      1026: out3 <= 16'hc000;
      1027: out3 <= 16'hc000;
      1028: out3 <= 16'hc000;
      1029: out3 <= 16'hc001;
      1030: out3 <= 16'hc001;
      1031: out3 <= 16'hc001;
      1032: out3 <= 16'hc001;
      1033: out3 <= 16'hc002;
      1034: out3 <= 16'hc002;
      1035: out3 <= 16'hc003;
      1036: out3 <= 16'hc003;
      1037: out3 <= 16'hc004;
      1038: out3 <= 16'hc004;
      1039: out3 <= 16'hc005;
      1040: out3 <= 16'hc005;
      1041: out3 <= 16'hc006;
      1042: out3 <= 16'hc007;
      1043: out3 <= 16'hc007;
      1044: out3 <= 16'hc008;
      1045: out3 <= 16'hc009;
      1046: out3 <= 16'hc00a;
      1047: out3 <= 16'hc00b;
      1048: out3 <= 16'hc00c;
      1049: out3 <= 16'hc00d;
      1050: out3 <= 16'hc00e;
      1051: out3 <= 16'hc00f;
      1052: out3 <= 16'hc010;
      1053: out3 <= 16'hc011;
      1054: out3 <= 16'hc012;
      1055: out3 <= 16'hc013;
      1056: out3 <= 16'hc014;
      1057: out3 <= 16'hc016;
      1058: out3 <= 16'hc017;
      1059: out3 <= 16'hc018;
      1060: out3 <= 16'hc01a;
      1061: out3 <= 16'hc01b;
      1062: out3 <= 16'hc01d;
      1063: out3 <= 16'hc01e;
      1064: out3 <= 16'hc020;
      1065: out3 <= 16'hc021;
      1066: out3 <= 16'hc023;
      1067: out3 <= 16'hc024;
      1068: out3 <= 16'hc026;
      1069: out3 <= 16'hc028;
      1070: out3 <= 16'hc02a;
      1071: out3 <= 16'hc02b;
      1072: out3 <= 16'hc02d;
      1073: out3 <= 16'hc02f;
      1074: out3 <= 16'hc031;
      1075: out3 <= 16'hc033;
      1076: out3 <= 16'hc035;
      1077: out3 <= 16'hc037;
      1078: out3 <= 16'hc039;
      1079: out3 <= 16'hc03b;
      1080: out3 <= 16'hc03d;
      1081: out3 <= 16'hc040;
      1082: out3 <= 16'hc042;
      1083: out3 <= 16'hc044;
      1084: out3 <= 16'hc047;
      1085: out3 <= 16'hc049;
      1086: out3 <= 16'hc04b;
      1087: out3 <= 16'hc04e;
      1088: out3 <= 16'hc050;
      1089: out3 <= 16'hc053;
      1090: out3 <= 16'hc055;
      1091: out3 <= 16'hc058;
      1092: out3 <= 16'hc05a;
      1093: out3 <= 16'hc05d;
      1094: out3 <= 16'hc060;
      1095: out3 <= 16'hc062;
      1096: out3 <= 16'hc065;
      1097: out3 <= 16'hc068;
      1098: out3 <= 16'hc06b;
      1099: out3 <= 16'hc06e;
      1100: out3 <= 16'hc071;
      1101: out3 <= 16'hc074;
      1102: out3 <= 16'hc077;
      1103: out3 <= 16'hc07a;
      1104: out3 <= 16'hc07d;
      1105: out3 <= 16'hc080;
      1106: out3 <= 16'hc083;
      1107: out3 <= 16'hc086;
      1108: out3 <= 16'hc089;
      1109: out3 <= 16'hc08d;
      1110: out3 <= 16'hc090;
      1111: out3 <= 16'hc093;
      1112: out3 <= 16'hc097;
      1113: out3 <= 16'hc09a;
      1114: out3 <= 16'hc09e;
      1115: out3 <= 16'hc0a1;
      1116: out3 <= 16'hc0a5;
      1117: out3 <= 16'hc0a8;
      1118: out3 <= 16'hc0ac;
      1119: out3 <= 16'hc0af;
      1120: out3 <= 16'hc0b3;
      1121: out3 <= 16'hc0b7;
      1122: out3 <= 16'hc0bb;
      1123: out3 <= 16'hc0be;
      1124: out3 <= 16'hc0c2;
      1125: out3 <= 16'hc0c6;
      1126: out3 <= 16'hc0ca;
      1127: out3 <= 16'hc0ce;
      1128: out3 <= 16'hc0d2;
      1129: out3 <= 16'hc0d6;
      1130: out3 <= 16'hc0da;
      1131: out3 <= 16'hc0de;
      1132: out3 <= 16'hc0e2;
      1133: out3 <= 16'hc0e7;
      1134: out3 <= 16'hc0eb;
      1135: out3 <= 16'hc0ef;
      1136: out3 <= 16'hc0f3;
      1137: out3 <= 16'hc0f8;
      1138: out3 <= 16'hc0fc;
      1139: out3 <= 16'hc100;
      1140: out3 <= 16'hc105;
      1141: out3 <= 16'hc109;
      1142: out3 <= 16'hc10e;
      1143: out3 <= 16'hc113;
      1144: out3 <= 16'hc117;
      1145: out3 <= 16'hc11c;
      1146: out3 <= 16'hc120;
      1147: out3 <= 16'hc125;
      1148: out3 <= 16'hc12a;
      1149: out3 <= 16'hc12f;
      1150: out3 <= 16'hc134;
      1151: out3 <= 16'hc138;
      1152: out3 <= 16'hc13d;
      1153: out3 <= 16'hc142;
      1154: out3 <= 16'hc147;
      1155: out3 <= 16'hc14c;
      1156: out3 <= 16'hc151;
      1157: out3 <= 16'hc156;
      1158: out3 <= 16'hc15b;
      1159: out3 <= 16'hc161;
      1160: out3 <= 16'hc166;
      1161: out3 <= 16'hc16b;
      1162: out3 <= 16'hc170;
      1163: out3 <= 16'hc176;
      1164: out3 <= 16'hc17b;
      1165: out3 <= 16'hc180;
      1166: out3 <= 16'hc186;
      1167: out3 <= 16'hc18b;
      1168: out3 <= 16'hc191;
      1169: out3 <= 16'hc196;
      1170: out3 <= 16'hc19c;
      1171: out3 <= 16'hc1a2;
      1172: out3 <= 16'hc1a7;
      1173: out3 <= 16'hc1ad;
      1174: out3 <= 16'hc1b3;
      1175: out3 <= 16'hc1b8;
      1176: out3 <= 16'hc1be;
      1177: out3 <= 16'hc1c4;
      1178: out3 <= 16'hc1ca;
      1179: out3 <= 16'hc1d0;
      1180: out3 <= 16'hc1d6;
      1181: out3 <= 16'hc1dc;
      1182: out3 <= 16'hc1e2;
      1183: out3 <= 16'hc1e8;
      1184: out3 <= 16'hc1ee;
      1185: out3 <= 16'hc1f4;
      1186: out3 <= 16'hc1fa;
      1187: out3 <= 16'hc201;
      1188: out3 <= 16'hc207;
      1189: out3 <= 16'hc20d;
      1190: out3 <= 16'hc213;
      1191: out3 <= 16'hc21a;
      1192: out3 <= 16'hc220;
      1193: out3 <= 16'hc227;
      1194: out3 <= 16'hc22d;
      1195: out3 <= 16'hc234;
      1196: out3 <= 16'hc23a;
      1197: out3 <= 16'hc241;
      1198: out3 <= 16'hc247;
      1199: out3 <= 16'hc24e;
      1200: out3 <= 16'hc255;
      1201: out3 <= 16'hc25c;
      1202: out3 <= 16'hc262;
      1203: out3 <= 16'hc269;
      1204: out3 <= 16'hc270;
      1205: out3 <= 16'hc277;
      1206: out3 <= 16'hc27e;
      1207: out3 <= 16'hc285;
      1208: out3 <= 16'hc28c;
      1209: out3 <= 16'hc293;
      1210: out3 <= 16'hc29a;
      1211: out3 <= 16'hc2a1;
      1212: out3 <= 16'hc2a8;
      1213: out3 <= 16'hc2af;
      1214: out3 <= 16'hc2b7;
      1215: out3 <= 16'hc2be;
      1216: out3 <= 16'hc2c5;
      1217: out3 <= 16'hc2cc;
      1218: out3 <= 16'hc2d4;
      1219: out3 <= 16'hc2db;
      1220: out3 <= 16'hc2e3;
      1221: out3 <= 16'hc2ea;
      1222: out3 <= 16'hc2f2;
      1223: out3 <= 16'hc2f9;
      1224: out3 <= 16'hc301;
      1225: out3 <= 16'hc308;
      1226: out3 <= 16'hc310;
      1227: out3 <= 16'hc318;
      1228: out3 <= 16'hc320;
      1229: out3 <= 16'hc327;
      1230: out3 <= 16'hc32f;
      1231: out3 <= 16'hc337;
      1232: out3 <= 16'hc33f;
      1233: out3 <= 16'hc347;
      1234: out3 <= 16'hc34f;
      1235: out3 <= 16'hc357;
      1236: out3 <= 16'hc35f;
      1237: out3 <= 16'hc367;
      1238: out3 <= 16'hc36f;
      1239: out3 <= 16'hc377;
      1240: out3 <= 16'hc37f;
      1241: out3 <= 16'hc387;
      1242: out3 <= 16'hc390;
      1243: out3 <= 16'hc398;
      1244: out3 <= 16'hc3a0;
      1245: out3 <= 16'hc3a9;
      1246: out3 <= 16'hc3b1;
      1247: out3 <= 16'hc3ba;
      1248: out3 <= 16'hc3c2;
      1249: out3 <= 16'hc3ca;
      1250: out3 <= 16'hc3d3;
      1251: out3 <= 16'hc3dc;
      1252: out3 <= 16'hc3e4;
      1253: out3 <= 16'hc3ed;
      1254: out3 <= 16'hc3f6;
      1255: out3 <= 16'hc3fe;
      1256: out3 <= 16'hc407;
      1257: out3 <= 16'hc410;
      1258: out3 <= 16'hc419;
      1259: out3 <= 16'hc422;
      1260: out3 <= 16'hc42a;
      1261: out3 <= 16'hc433;
      1262: out3 <= 16'hc43c;
      1263: out3 <= 16'hc445;
      1264: out3 <= 16'hc44e;
      1265: out3 <= 16'hc457;
      1266: out3 <= 16'hc461;
      1267: out3 <= 16'hc46a;
      1268: out3 <= 16'hc473;
      1269: out3 <= 16'hc47c;
      1270: out3 <= 16'hc485;
      1271: out3 <= 16'hc48f;
      1272: out3 <= 16'hc498;
      1273: out3 <= 16'hc4a1;
      1274: out3 <= 16'hc4ab;
      1275: out3 <= 16'hc4b4;
      1276: out3 <= 16'hc4be;
      1277: out3 <= 16'hc4c7;
      1278: out3 <= 16'hc4d1;
      1279: out3 <= 16'hc4da;
      1280: out3 <= 16'hc4e4;
      1281: out3 <= 16'hc4ee;
      1282: out3 <= 16'hc4f7;
      1283: out3 <= 16'hc501;
      1284: out3 <= 16'hc50b;
      1285: out3 <= 16'hc515;
      1286: out3 <= 16'hc51e;
      1287: out3 <= 16'hc528;
      1288: out3 <= 16'hc532;
      1289: out3 <= 16'hc53c;
      1290: out3 <= 16'hc546;
      1291: out3 <= 16'hc550;
      1292: out3 <= 16'hc55a;
      1293: out3 <= 16'hc564;
      1294: out3 <= 16'hc56e;
      1295: out3 <= 16'hc578;
      1296: out3 <= 16'hc583;
      1297: out3 <= 16'hc58d;
      1298: out3 <= 16'hc597;
      1299: out3 <= 16'hc5a1;
      1300: out3 <= 16'hc5ac;
      1301: out3 <= 16'hc5b6;
      1302: out3 <= 16'hc5c1;
      1303: out3 <= 16'hc5cb;
      1304: out3 <= 16'hc5d5;
      1305: out3 <= 16'hc5e0;
      1306: out3 <= 16'hc5ea;
      1307: out3 <= 16'hc5f5;
      1308: out3 <= 16'hc600;
      1309: out3 <= 16'hc60a;
      1310: out3 <= 16'hc615;
      1311: out3 <= 16'hc620;
      1312: out3 <= 16'hc62a;
      1313: out3 <= 16'hc635;
      1314: out3 <= 16'hc640;
      1315: out3 <= 16'hc64b;
      1316: out3 <= 16'hc656;
      1317: out3 <= 16'hc661;
      1318: out3 <= 16'hc66c;
      1319: out3 <= 16'hc677;
      1320: out3 <= 16'hc682;
      1321: out3 <= 16'hc68d;
      1322: out3 <= 16'hc698;
      1323: out3 <= 16'hc6a3;
      1324: out3 <= 16'hc6ae;
      1325: out3 <= 16'hc6b9;
      1326: out3 <= 16'hc6c5;
      1327: out3 <= 16'hc6d0;
      1328: out3 <= 16'hc6db;
      1329: out3 <= 16'hc6e6;
      1330: out3 <= 16'hc6f2;
      1331: out3 <= 16'hc6fd;
      1332: out3 <= 16'hc709;
      1333: out3 <= 16'hc714;
      1334: out3 <= 16'hc720;
      1335: out3 <= 16'hc72b;
      1336: out3 <= 16'hc737;
      1337: out3 <= 16'hc742;
      1338: out3 <= 16'hc74e;
      1339: out3 <= 16'hc75a;
      1340: out3 <= 16'hc765;
      1341: out3 <= 16'hc771;
      1342: out3 <= 16'hc77d;
      1343: out3 <= 16'hc789;
      1344: out3 <= 16'hc795;
      1345: out3 <= 16'hc7a0;
      1346: out3 <= 16'hc7ac;
      1347: out3 <= 16'hc7b8;
      1348: out3 <= 16'hc7c4;
      1349: out3 <= 16'hc7d0;
      1350: out3 <= 16'hc7dc;
      1351: out3 <= 16'hc7e8;
      1352: out3 <= 16'hc7f5;
      1353: out3 <= 16'hc801;
      1354: out3 <= 16'hc80d;
      1355: out3 <= 16'hc819;
      1356: out3 <= 16'hc825;
      1357: out3 <= 16'hc832;
      1358: out3 <= 16'hc83e;
      1359: out3 <= 16'hc84a;
      1360: out3 <= 16'hc857;
      1361: out3 <= 16'hc863;
      1362: out3 <= 16'hc870;
      1363: out3 <= 16'hc87c;
      1364: out3 <= 16'hc889;
      1365: out3 <= 16'hc895;
      1366: out3 <= 16'hc8a2;
      1367: out3 <= 16'hc8ae;
      1368: out3 <= 16'hc8bb;
      1369: out3 <= 16'hc8c8;
      1370: out3 <= 16'hc8d4;
      1371: out3 <= 16'hc8e1;
      1372: out3 <= 16'hc8ee;
      1373: out3 <= 16'hc8fb;
      1374: out3 <= 16'hc908;
      1375: out3 <= 16'hc915;
      1376: out3 <= 16'hc921;
      1377: out3 <= 16'hc92e;
      1378: out3 <= 16'hc93b;
      1379: out3 <= 16'hc948;
      1380: out3 <= 16'hc955;
      1381: out3 <= 16'hc963;
      1382: out3 <= 16'hc970;
      1383: out3 <= 16'hc97d;
      1384: out3 <= 16'hc98a;
      1385: out3 <= 16'hc997;
      1386: out3 <= 16'hc9a4;
      1387: out3 <= 16'hc9b2;
      1388: out3 <= 16'hc9bf;
      1389: out3 <= 16'hc9cc;
      1390: out3 <= 16'hc9da;
      1391: out3 <= 16'hc9e7;
      1392: out3 <= 16'hc9f5;
      1393: out3 <= 16'hca02;
      1394: out3 <= 16'hca10;
      1395: out3 <= 16'hca1d;
      1396: out3 <= 16'hca2b;
      1397: out3 <= 16'hca38;
      1398: out3 <= 16'hca46;
      1399: out3 <= 16'hca54;
      1400: out3 <= 16'hca61;
      1401: out3 <= 16'hca6f;
      1402: out3 <= 16'hca7d;
      1403: out3 <= 16'hca8b;
      1404: out3 <= 16'hca99;
      1405: out3 <= 16'hcaa6;
      1406: out3 <= 16'hcab4;
      1407: out3 <= 16'hcac2;
      1408: out3 <= 16'hcad0;
      1409: out3 <= 16'hcade;
      1410: out3 <= 16'hcaec;
      1411: out3 <= 16'hcafa;
      1412: out3 <= 16'hcb08;
      1413: out3 <= 16'hcb16;
      1414: out3 <= 16'hcb25;
      1415: out3 <= 16'hcb33;
      1416: out3 <= 16'hcb41;
      1417: out3 <= 16'hcb4f;
      1418: out3 <= 16'hcb5e;
      1419: out3 <= 16'hcb6c;
      1420: out3 <= 16'hcb7a;
      1421: out3 <= 16'hcb89;
      1422: out3 <= 16'hcb97;
      1423: out3 <= 16'hcba5;
      1424: out3 <= 16'hcbb4;
      1425: out3 <= 16'hcbc2;
      1426: out3 <= 16'hcbd1;
      1427: out3 <= 16'hcbe0;
      1428: out3 <= 16'hcbee;
      1429: out3 <= 16'hcbfd;
      1430: out3 <= 16'hcc0b;
      1431: out3 <= 16'hcc1a;
      1432: out3 <= 16'hcc29;
      1433: out3 <= 16'hcc38;
      1434: out3 <= 16'hcc46;
      1435: out3 <= 16'hcc55;
      1436: out3 <= 16'hcc64;
      1437: out3 <= 16'hcc73;
      1438: out3 <= 16'hcc82;
      1439: out3 <= 16'hcc91;
      1440: out3 <= 16'hcca0;
      1441: out3 <= 16'hccaf;
      1442: out3 <= 16'hccbe;
      1443: out3 <= 16'hcccd;
      1444: out3 <= 16'hccdc;
      1445: out3 <= 16'hcceb;
      1446: out3 <= 16'hccfa;
      1447: out3 <= 16'hcd09;
      1448: out3 <= 16'hcd19;
      1449: out3 <= 16'hcd28;
      1450: out3 <= 16'hcd37;
      1451: out3 <= 16'hcd46;
      1452: out3 <= 16'hcd56;
      1453: out3 <= 16'hcd65;
      1454: out3 <= 16'hcd75;
      1455: out3 <= 16'hcd84;
      1456: out3 <= 16'hcd93;
      1457: out3 <= 16'hcda3;
      1458: out3 <= 16'hcdb2;
      1459: out3 <= 16'hcdc2;
      1460: out3 <= 16'hcdd2;
      1461: out3 <= 16'hcde1;
      1462: out3 <= 16'hcdf1;
      1463: out3 <= 16'hce01;
      1464: out3 <= 16'hce10;
      1465: out3 <= 16'hce20;
      1466: out3 <= 16'hce30;
      1467: out3 <= 16'hce40;
      1468: out3 <= 16'hce4f;
      1469: out3 <= 16'hce5f;
      1470: out3 <= 16'hce6f;
      1471: out3 <= 16'hce7f;
      1472: out3 <= 16'hce8f;
      1473: out3 <= 16'hce9f;
      1474: out3 <= 16'hceaf;
      1475: out3 <= 16'hcebf;
      1476: out3 <= 16'hcecf;
      1477: out3 <= 16'hcedf;
      1478: out3 <= 16'hceef;
      1479: out3 <= 16'hceff;
      1480: out3 <= 16'hcf10;
      1481: out3 <= 16'hcf20;
      1482: out3 <= 16'hcf30;
      1483: out3 <= 16'hcf40;
      1484: out3 <= 16'hcf51;
      1485: out3 <= 16'hcf61;
      1486: out3 <= 16'hcf71;
      1487: out3 <= 16'hcf82;
      1488: out3 <= 16'hcf92;
      1489: out3 <= 16'hcfa3;
      1490: out3 <= 16'hcfb3;
      1491: out3 <= 16'hcfc4;
      1492: out3 <= 16'hcfd4;
      1493: out3 <= 16'hcfe5;
      1494: out3 <= 16'hcff5;
      1495: out3 <= 16'hd006;
      1496: out3 <= 16'hd016;
      1497: out3 <= 16'hd027;
      1498: out3 <= 16'hd038;
      1499: out3 <= 16'hd049;
      1500: out3 <= 16'hd059;
      1501: out3 <= 16'hd06a;
      1502: out3 <= 16'hd07b;
      1503: out3 <= 16'hd08c;
      1504: out3 <= 16'hd09d;
      1505: out3 <= 16'hd0ae;
      1506: out3 <= 16'hd0bf;
      1507: out3 <= 16'hd0d0;
      1508: out3 <= 16'hd0e0;
      1509: out3 <= 16'hd0f2;
      1510: out3 <= 16'hd103;
      1511: out3 <= 16'hd114;
      1512: out3 <= 16'hd125;
      1513: out3 <= 16'hd136;
      1514: out3 <= 16'hd147;
      1515: out3 <= 16'hd158;
      1516: out3 <= 16'hd169;
      1517: out3 <= 16'hd17b;
      1518: out3 <= 16'hd18c;
      1519: out3 <= 16'hd19d;
      1520: out3 <= 16'hd1af;
      1521: out3 <= 16'hd1c0;
      1522: out3 <= 16'hd1d1;
      1523: out3 <= 16'hd1e3;
      1524: out3 <= 16'hd1f4;
      1525: out3 <= 16'hd206;
      1526: out3 <= 16'hd217;
      1527: out3 <= 16'hd229;
      1528: out3 <= 16'hd23a;
      1529: out3 <= 16'hd24c;
      1530: out3 <= 16'hd25d;
      1531: out3 <= 16'hd26f;
      1532: out3 <= 16'hd281;
      1533: out3 <= 16'hd292;
      1534: out3 <= 16'hd2a4;
      1535: out3 <= 16'hd2b6;
      1536: out3 <= 16'hd2c8;
      1537: out3 <= 16'hd2d9;
      1538: out3 <= 16'hd2eb;
      1539: out3 <= 16'hd2fd;
      1540: out3 <= 16'hd30f;
      1541: out3 <= 16'hd321;
      1542: out3 <= 16'hd333;
      1543: out3 <= 16'hd345;
      1544: out3 <= 16'hd357;
      1545: out3 <= 16'hd369;
      1546: out3 <= 16'hd37b;
      1547: out3 <= 16'hd38d;
      1548: out3 <= 16'hd39f;
      1549: out3 <= 16'hd3b1;
      1550: out3 <= 16'hd3c3;
      1551: out3 <= 16'hd3d5;
      1552: out3 <= 16'hd3e8;
      1553: out3 <= 16'hd3fa;
      1554: out3 <= 16'hd40c;
      1555: out3 <= 16'hd41e;
      1556: out3 <= 16'hd431;
      1557: out3 <= 16'hd443;
      1558: out3 <= 16'hd455;
      1559: out3 <= 16'hd468;
      1560: out3 <= 16'hd47a;
      1561: out3 <= 16'hd48d;
      1562: out3 <= 16'hd49f;
      1563: out3 <= 16'hd4b2;
      1564: out3 <= 16'hd4c4;
      1565: out3 <= 16'hd4d7;
      1566: out3 <= 16'hd4e9;
      1567: out3 <= 16'hd4fc;
      1568: out3 <= 16'hd50e;
      1569: out3 <= 16'hd521;
      1570: out3 <= 16'hd534;
      1571: out3 <= 16'hd547;
      1572: out3 <= 16'hd559;
      1573: out3 <= 16'hd56c;
      1574: out3 <= 16'hd57f;
      1575: out3 <= 16'hd592;
      1576: out3 <= 16'hd5a4;
      1577: out3 <= 16'hd5b7;
      1578: out3 <= 16'hd5ca;
      1579: out3 <= 16'hd5dd;
      1580: out3 <= 16'hd5f0;
      1581: out3 <= 16'hd603;
      1582: out3 <= 16'hd616;
      1583: out3 <= 16'hd629;
      1584: out3 <= 16'hd63c;
      1585: out3 <= 16'hd64f;
      1586: out3 <= 16'hd662;
      1587: out3 <= 16'hd675;
      1588: out3 <= 16'hd688;
      1589: out3 <= 16'hd69b;
      1590: out3 <= 16'hd6af;
      1591: out3 <= 16'hd6c2;
      1592: out3 <= 16'hd6d5;
      1593: out3 <= 16'hd6e8;
      1594: out3 <= 16'hd6fc;
      1595: out3 <= 16'hd70f;
      1596: out3 <= 16'hd722;
      1597: out3 <= 16'hd736;
      1598: out3 <= 16'hd749;
      1599: out3 <= 16'hd75c;
      1600: out3 <= 16'hd770;
      1601: out3 <= 16'hd783;
      1602: out3 <= 16'hd797;
      1603: out3 <= 16'hd7aa;
      1604: out3 <= 16'hd7be;
      1605: out3 <= 16'hd7d1;
      1606: out3 <= 16'hd7e5;
      1607: out3 <= 16'hd7f8;
      1608: out3 <= 16'hd80c;
      1609: out3 <= 16'hd820;
      1610: out3 <= 16'hd833;
      1611: out3 <= 16'hd847;
      1612: out3 <= 16'hd85b;
      1613: out3 <= 16'hd86f;
      1614: out3 <= 16'hd882;
      1615: out3 <= 16'hd896;
      1616: out3 <= 16'hd8aa;
      1617: out3 <= 16'hd8be;
      1618: out3 <= 16'hd8d2;
      1619: out3 <= 16'hd8e6;
      1620: out3 <= 16'hd8f9;
      1621: out3 <= 16'hd90d;
      1622: out3 <= 16'hd921;
      1623: out3 <= 16'hd935;
      1624: out3 <= 16'hd949;
      1625: out3 <= 16'hd95d;
      1626: out3 <= 16'hd971;
      1627: out3 <= 16'hd985;
      1628: out3 <= 16'hd99a;
      1629: out3 <= 16'hd9ae;
      1630: out3 <= 16'hd9c2;
      1631: out3 <= 16'hd9d6;
      1632: out3 <= 16'hd9ea;
      1633: out3 <= 16'hd9fe;
      1634: out3 <= 16'hda13;
      1635: out3 <= 16'hda27;
      1636: out3 <= 16'hda3b;
      1637: out3 <= 16'hda4f;
      1638: out3 <= 16'hda64;
      1639: out3 <= 16'hda78;
      1640: out3 <= 16'hda8c;
      1641: out3 <= 16'hdaa1;
      1642: out3 <= 16'hdab5;
      1643: out3 <= 16'hdaca;
      1644: out3 <= 16'hdade;
      1645: out3 <= 16'hdaf3;
      1646: out3 <= 16'hdb07;
      1647: out3 <= 16'hdb1c;
      1648: out3 <= 16'hdb30;
      1649: out3 <= 16'hdb45;
      1650: out3 <= 16'hdb59;
      1651: out3 <= 16'hdb6e;
      1652: out3 <= 16'hdb83;
      1653: out3 <= 16'hdb97;
      1654: out3 <= 16'hdbac;
      1655: out3 <= 16'hdbc1;
      1656: out3 <= 16'hdbd5;
      1657: out3 <= 16'hdbea;
      1658: out3 <= 16'hdbff;
      1659: out3 <= 16'hdc14;
      1660: out3 <= 16'hdc29;
      1661: out3 <= 16'hdc3d;
      1662: out3 <= 16'hdc52;
      1663: out3 <= 16'hdc67;
      1664: out3 <= 16'hdc7c;
      1665: out3 <= 16'hdc91;
      1666: out3 <= 16'hdca6;
      1667: out3 <= 16'hdcbb;
      1668: out3 <= 16'hdcd0;
      1669: out3 <= 16'hdce5;
      1670: out3 <= 16'hdcfa;
      1671: out3 <= 16'hdd0f;
      1672: out3 <= 16'hdd24;
      1673: out3 <= 16'hdd39;
      1674: out3 <= 16'hdd4e;
      1675: out3 <= 16'hdd63;
      1676: out3 <= 16'hdd78;
      1677: out3 <= 16'hdd8e;
      1678: out3 <= 16'hdda3;
      1679: out3 <= 16'hddb8;
      1680: out3 <= 16'hddcd;
      1681: out3 <= 16'hdde2;
      1682: out3 <= 16'hddf8;
      1683: out3 <= 16'hde0d;
      1684: out3 <= 16'hde22;
      1685: out3 <= 16'hde38;
      1686: out3 <= 16'hde4d;
      1687: out3 <= 16'hde62;
      1688: out3 <= 16'hde78;
      1689: out3 <= 16'hde8d;
      1690: out3 <= 16'hdea3;
      1691: out3 <= 16'hdeb8;
      1692: out3 <= 16'hdece;
      1693: out3 <= 16'hdee3;
      1694: out3 <= 16'hdef9;
      1695: out3 <= 16'hdf0e;
      1696: out3 <= 16'hdf24;
      1697: out3 <= 16'hdf39;
      1698: out3 <= 16'hdf4f;
      1699: out3 <= 16'hdf65;
      1700: out3 <= 16'hdf7a;
      1701: out3 <= 16'hdf90;
      1702: out3 <= 16'hdfa5;
      1703: out3 <= 16'hdfbb;
      1704: out3 <= 16'hdfd1;
      1705: out3 <= 16'hdfe7;
      1706: out3 <= 16'hdffc;
      1707: out3 <= 16'he012;
      1708: out3 <= 16'he028;
      1709: out3 <= 16'he03e;
      1710: out3 <= 16'he054;
      1711: out3 <= 16'he069;
      1712: out3 <= 16'he07f;
      1713: out3 <= 16'he095;
      1714: out3 <= 16'he0ab;
      1715: out3 <= 16'he0c1;
      1716: out3 <= 16'he0d7;
      1717: out3 <= 16'he0ed;
      1718: out3 <= 16'he103;
      1719: out3 <= 16'he119;
      1720: out3 <= 16'he12f;
      1721: out3 <= 16'he145;
      1722: out3 <= 16'he15b;
      1723: out3 <= 16'he171;
      1724: out3 <= 16'he187;
      1725: out3 <= 16'he19d;
      1726: out3 <= 16'he1b3;
      1727: out3 <= 16'he1ca;
      1728: out3 <= 16'he1e0;
      1729: out3 <= 16'he1f6;
      1730: out3 <= 16'he20c;
      1731: out3 <= 16'he222;
      1732: out3 <= 16'he239;
      1733: out3 <= 16'he24f;
      1734: out3 <= 16'he265;
      1735: out3 <= 16'he27b;
      1736: out3 <= 16'he292;
      1737: out3 <= 16'he2a8;
      1738: out3 <= 16'he2be;
      1739: out3 <= 16'he2d5;
      1740: out3 <= 16'he2eb;
      1741: out3 <= 16'he301;
      1742: out3 <= 16'he318;
      1743: out3 <= 16'he32e;
      1744: out3 <= 16'he345;
      1745: out3 <= 16'he35b;
      1746: out3 <= 16'he372;
      1747: out3 <= 16'he388;
      1748: out3 <= 16'he39f;
      1749: out3 <= 16'he3b5;
      1750: out3 <= 16'he3cc;
      1751: out3 <= 16'he3e2;
      1752: out3 <= 16'he3f9;
      1753: out3 <= 16'he410;
      1754: out3 <= 16'he426;
      1755: out3 <= 16'he43d;
      1756: out3 <= 16'he454;
      1757: out3 <= 16'he46a;
      1758: out3 <= 16'he481;
      1759: out3 <= 16'he498;
      1760: out3 <= 16'he4ae;
      1761: out3 <= 16'he4c5;
      1762: out3 <= 16'he4dc;
      1763: out3 <= 16'he4f3;
      1764: out3 <= 16'he509;
      1765: out3 <= 16'he520;
      1766: out3 <= 16'he537;
      1767: out3 <= 16'he54e;
      1768: out3 <= 16'he565;
      1769: out3 <= 16'he57c;
      1770: out3 <= 16'he592;
      1771: out3 <= 16'he5a9;
      1772: out3 <= 16'he5c0;
      1773: out3 <= 16'he5d7;
      1774: out3 <= 16'he5ee;
      1775: out3 <= 16'he605;
      1776: out3 <= 16'he61c;
      1777: out3 <= 16'he633;
      1778: out3 <= 16'he64a;
      1779: out3 <= 16'he661;
      1780: out3 <= 16'he678;
      1781: out3 <= 16'he68f;
      1782: out3 <= 16'he6a6;
      1783: out3 <= 16'he6bd;
      1784: out3 <= 16'he6d4;
      1785: out3 <= 16'he6ec;
      1786: out3 <= 16'he703;
      1787: out3 <= 16'he71a;
      1788: out3 <= 16'he731;
      1789: out3 <= 16'he748;
      1790: out3 <= 16'he75f;
      1791: out3 <= 16'he777;
      1792: out3 <= 16'he78e;
      1793: out3 <= 16'he7a5;
      1794: out3 <= 16'he7bc;
      1795: out3 <= 16'he7d3;
      1796: out3 <= 16'he7eb;
      1797: out3 <= 16'he802;
      1798: out3 <= 16'he819;
      1799: out3 <= 16'he831;
      1800: out3 <= 16'he848;
      1801: out3 <= 16'he85f;
      1802: out3 <= 16'he877;
      1803: out3 <= 16'he88e;
      1804: out3 <= 16'he8a5;
      1805: out3 <= 16'he8bd;
      1806: out3 <= 16'he8d4;
      1807: out3 <= 16'he8ec;
      1808: out3 <= 16'he903;
      1809: out3 <= 16'he91b;
      1810: out3 <= 16'he932;
      1811: out3 <= 16'he94a;
      1812: out3 <= 16'he961;
      1813: out3 <= 16'he979;
      1814: out3 <= 16'he990;
      1815: out3 <= 16'he9a8;
      1816: out3 <= 16'he9bf;
      1817: out3 <= 16'he9d7;
      1818: out3 <= 16'he9ee;
      1819: out3 <= 16'hea06;
      1820: out3 <= 16'hea1e;
      1821: out3 <= 16'hea35;
      1822: out3 <= 16'hea4d;
      1823: out3 <= 16'hea65;
      1824: out3 <= 16'hea7c;
      1825: out3 <= 16'hea94;
      1826: out3 <= 16'heaac;
      1827: out3 <= 16'heac3;
      1828: out3 <= 16'headb;
      1829: out3 <= 16'heaf3;
      1830: out3 <= 16'heb0a;
      1831: out3 <= 16'heb22;
      1832: out3 <= 16'heb3a;
      1833: out3 <= 16'heb52;
      1834: out3 <= 16'heb6a;
      1835: out3 <= 16'heb81;
      1836: out3 <= 16'heb99;
      1837: out3 <= 16'hebb1;
      1838: out3 <= 16'hebc9;
      1839: out3 <= 16'hebe1;
      1840: out3 <= 16'hebf9;
      1841: out3 <= 16'hec10;
      1842: out3 <= 16'hec28;
      1843: out3 <= 16'hec40;
      1844: out3 <= 16'hec58;
      1845: out3 <= 16'hec70;
      1846: out3 <= 16'hec88;
      1847: out3 <= 16'heca0;
      1848: out3 <= 16'hecb8;
      1849: out3 <= 16'hecd0;
      1850: out3 <= 16'hece8;
      1851: out3 <= 16'hed00;
      1852: out3 <= 16'hed18;
      1853: out3 <= 16'hed30;
      1854: out3 <= 16'hed48;
      1855: out3 <= 16'hed60;
      1856: out3 <= 16'hed78;
      1857: out3 <= 16'hed90;
      1858: out3 <= 16'heda8;
      1859: out3 <= 16'hedc0;
      1860: out3 <= 16'hedd8;
      1861: out3 <= 16'hedf0;
      1862: out3 <= 16'hee09;
      1863: out3 <= 16'hee21;
      1864: out3 <= 16'hee39;
      1865: out3 <= 16'hee51;
      1866: out3 <= 16'hee69;
      1867: out3 <= 16'hee81;
      1868: out3 <= 16'hee99;
      1869: out3 <= 16'heeb2;
      1870: out3 <= 16'heeca;
      1871: out3 <= 16'heee2;
      1872: out3 <= 16'heefa;
      1873: out3 <= 16'hef13;
      1874: out3 <= 16'hef2b;
      1875: out3 <= 16'hef43;
      1876: out3 <= 16'hef5b;
      1877: out3 <= 16'hef74;
      1878: out3 <= 16'hef8c;
      1879: out3 <= 16'hefa4;
      1880: out3 <= 16'hefbc;
      1881: out3 <= 16'hefd5;
      1882: out3 <= 16'hefed;
      1883: out3 <= 16'hf005;
      1884: out3 <= 16'hf01e;
      1885: out3 <= 16'hf036;
      1886: out3 <= 16'hf04e;
      1887: out3 <= 16'hf067;
      1888: out3 <= 16'hf07f;
      1889: out3 <= 16'hf098;
      1890: out3 <= 16'hf0b0;
      1891: out3 <= 16'hf0c8;
      1892: out3 <= 16'hf0e1;
      1893: out3 <= 16'hf0f9;
      1894: out3 <= 16'hf112;
      1895: out3 <= 16'hf12a;
      1896: out3 <= 16'hf143;
      1897: out3 <= 16'hf15b;
      1898: out3 <= 16'hf174;
      1899: out3 <= 16'hf18c;
      1900: out3 <= 16'hf1a4;
      1901: out3 <= 16'hf1bd;
      1902: out3 <= 16'hf1d5;
      1903: out3 <= 16'hf1ee;
      1904: out3 <= 16'hf207;
      1905: out3 <= 16'hf21f;
      1906: out3 <= 16'hf238;
      1907: out3 <= 16'hf250;
      1908: out3 <= 16'hf269;
      1909: out3 <= 16'hf281;
      1910: out3 <= 16'hf29a;
      1911: out3 <= 16'hf2b2;
      1912: out3 <= 16'hf2cb;
      1913: out3 <= 16'hf2e4;
      1914: out3 <= 16'hf2fc;
      1915: out3 <= 16'hf315;
      1916: out3 <= 16'hf32d;
      1917: out3 <= 16'hf346;
      1918: out3 <= 16'hf35f;
      1919: out3 <= 16'hf377;
      1920: out3 <= 16'hf390;
      1921: out3 <= 16'hf3a9;
      1922: out3 <= 16'hf3c1;
      1923: out3 <= 16'hf3da;
      1924: out3 <= 16'hf3f3;
      1925: out3 <= 16'hf40b;
      1926: out3 <= 16'hf424;
      1927: out3 <= 16'hf43d;
      1928: out3 <= 16'hf455;
      1929: out3 <= 16'hf46e;
      1930: out3 <= 16'hf487;
      1931: out3 <= 16'hf4a0;
      1932: out3 <= 16'hf4b8;
      1933: out3 <= 16'hf4d1;
      1934: out3 <= 16'hf4ea;
      1935: out3 <= 16'hf503;
      1936: out3 <= 16'hf51b;
      1937: out3 <= 16'hf534;
      1938: out3 <= 16'hf54d;
      1939: out3 <= 16'hf566;
      1940: out3 <= 16'hf57e;
      1941: out3 <= 16'hf597;
      1942: out3 <= 16'hf5b0;
      1943: out3 <= 16'hf5c9;
      1944: out3 <= 16'hf5e2;
      1945: out3 <= 16'hf5fa;
      1946: out3 <= 16'hf613;
      1947: out3 <= 16'hf62c;
      1948: out3 <= 16'hf645;
      1949: out3 <= 16'hf65e;
      1950: out3 <= 16'hf677;
      1951: out3 <= 16'hf690;
      1952: out3 <= 16'hf6a8;
      1953: out3 <= 16'hf6c1;
      1954: out3 <= 16'hf6da;
      1955: out3 <= 16'hf6f3;
      1956: out3 <= 16'hf70c;
      1957: out3 <= 16'hf725;
      1958: out3 <= 16'hf73e;
      1959: out3 <= 16'hf757;
      1960: out3 <= 16'hf76f;
      1961: out3 <= 16'hf788;
      1962: out3 <= 16'hf7a1;
      1963: out3 <= 16'hf7ba;
      1964: out3 <= 16'hf7d3;
      1965: out3 <= 16'hf7ec;
      1966: out3 <= 16'hf805;
      1967: out3 <= 16'hf81e;
      1968: out3 <= 16'hf837;
      1969: out3 <= 16'hf850;
      1970: out3 <= 16'hf869;
      1971: out3 <= 16'hf882;
      1972: out3 <= 16'hf89b;
      1973: out3 <= 16'hf8b4;
      1974: out3 <= 16'hf8cd;
      1975: out3 <= 16'hf8e6;
      1976: out3 <= 16'hf8ff;
      1977: out3 <= 16'hf918;
      1978: out3 <= 16'hf931;
      1979: out3 <= 16'hf94a;
      1980: out3 <= 16'hf963;
      1981: out3 <= 16'hf97c;
      1982: out3 <= 16'hf995;
      1983: out3 <= 16'hf9ae;
      1984: out3 <= 16'hf9c7;
      1985: out3 <= 16'hf9e0;
      1986: out3 <= 16'hf9f9;
      1987: out3 <= 16'hfa12;
      1988: out3 <= 16'hfa2b;
      1989: out3 <= 16'hfa44;
      1990: out3 <= 16'hfa5d;
      1991: out3 <= 16'hfa76;
      1992: out3 <= 16'hfa8f;
      1993: out3 <= 16'hfaa8;
      1994: out3 <= 16'hfac1;
      1995: out3 <= 16'hfada;
      1996: out3 <= 16'hfaf3;
      1997: out3 <= 16'hfb0c;
      1998: out3 <= 16'hfb25;
      1999: out3 <= 16'hfb3e;
      2000: out3 <= 16'hfb57;
      2001: out3 <= 16'hfb70;
      2002: out3 <= 16'hfb89;
      2003: out3 <= 16'hfba2;
      2004: out3 <= 16'hfbbc;
      2005: out3 <= 16'hfbd5;
      2006: out3 <= 16'hfbee;
      2007: out3 <= 16'hfc07;
      2008: out3 <= 16'hfc20;
      2009: out3 <= 16'hfc39;
      2010: out3 <= 16'hfc52;
      2011: out3 <= 16'hfc6b;
      2012: out3 <= 16'hfc84;
      2013: out3 <= 16'hfc9d;
      2014: out3 <= 16'hfcb6;
      2015: out3 <= 16'hfcd0;
      2016: out3 <= 16'hfce9;
      2017: out3 <= 16'hfd02;
      2018: out3 <= 16'hfd1b;
      2019: out3 <= 16'hfd34;
      2020: out3 <= 16'hfd4d;
      2021: out3 <= 16'hfd66;
      2022: out3 <= 16'hfd7f;
      2023: out3 <= 16'hfd98;
      2024: out3 <= 16'hfdb2;
      2025: out3 <= 16'hfdcb;
      2026: out3 <= 16'hfde4;
      2027: out3 <= 16'hfdfd;
      2028: out3 <= 16'hfe16;
      2029: out3 <= 16'hfe2f;
      2030: out3 <= 16'hfe48;
      2031: out3 <= 16'hfe61;
      2032: out3 <= 16'hfe7a;
      2033: out3 <= 16'hfe94;
      2034: out3 <= 16'hfead;
      2035: out3 <= 16'hfec6;
      2036: out3 <= 16'hfedf;
      2037: out3 <= 16'hfef8;
      2038: out3 <= 16'hff11;
      2039: out3 <= 16'hff2a;
      2040: out3 <= 16'hff44;
      2041: out3 <= 16'hff5d;
      2042: out3 <= 16'hff76;
      2043: out3 <= 16'hff8f;
      2044: out3 <= 16'hffa8;
      2045: out3 <= 16'hffc1;
      2046: out3 <= 16'hffda;
      2047: out3 <= 16'hfff3;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D4_112542(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [10:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h4000;
      2: out3 <= 16'h4000;
      3: out3 <= 16'h4000;
      4: out3 <= 16'h4000;
      5: out3 <= 16'h3fff;
      6: out3 <= 16'h3fff;
      7: out3 <= 16'h3fff;
      8: out3 <= 16'h3fff;
      9: out3 <= 16'h3ffe;
      10: out3 <= 16'h3ffe;
      11: out3 <= 16'h3ffd;
      12: out3 <= 16'h3ffd;
      13: out3 <= 16'h3ffc;
      14: out3 <= 16'h3ffc;
      15: out3 <= 16'h3ffb;
      16: out3 <= 16'h3ffb;
      17: out3 <= 16'h3ffa;
      18: out3 <= 16'h3ff9;
      19: out3 <= 16'h3ff9;
      20: out3 <= 16'h3ff8;
      21: out3 <= 16'h3ff7;
      22: out3 <= 16'h3ff6;
      23: out3 <= 16'h3ff5;
      24: out3 <= 16'h3ff4;
      25: out3 <= 16'h3ff3;
      26: out3 <= 16'h3ff2;
      27: out3 <= 16'h3ff1;
      28: out3 <= 16'h3ff0;
      29: out3 <= 16'h3fef;
      30: out3 <= 16'h3fee;
      31: out3 <= 16'h3fed;
      32: out3 <= 16'h3fec;
      33: out3 <= 16'h3fea;
      34: out3 <= 16'h3fe9;
      35: out3 <= 16'h3fe8;
      36: out3 <= 16'h3fe6;
      37: out3 <= 16'h3fe5;
      38: out3 <= 16'h3fe3;
      39: out3 <= 16'h3fe2;
      40: out3 <= 16'h3fe0;
      41: out3 <= 16'h3fdf;
      42: out3 <= 16'h3fdd;
      43: out3 <= 16'h3fdc;
      44: out3 <= 16'h3fda;
      45: out3 <= 16'h3fd8;
      46: out3 <= 16'h3fd6;
      47: out3 <= 16'h3fd5;
      48: out3 <= 16'h3fd3;
      49: out3 <= 16'h3fd1;
      50: out3 <= 16'h3fcf;
      51: out3 <= 16'h3fcd;
      52: out3 <= 16'h3fcb;
      53: out3 <= 16'h3fc9;
      54: out3 <= 16'h3fc7;
      55: out3 <= 16'h3fc5;
      56: out3 <= 16'h3fc3;
      57: out3 <= 16'h3fc0;
      58: out3 <= 16'h3fbe;
      59: out3 <= 16'h3fbc;
      60: out3 <= 16'h3fb9;
      61: out3 <= 16'h3fb7;
      62: out3 <= 16'h3fb5;
      63: out3 <= 16'h3fb2;
      64: out3 <= 16'h3fb0;
      65: out3 <= 16'h3fad;
      66: out3 <= 16'h3fab;
      67: out3 <= 16'h3fa8;
      68: out3 <= 16'h3fa6;
      69: out3 <= 16'h3fa3;
      70: out3 <= 16'h3fa0;
      71: out3 <= 16'h3f9e;
      72: out3 <= 16'h3f9b;
      73: out3 <= 16'h3f98;
      74: out3 <= 16'h3f95;
      75: out3 <= 16'h3f92;
      76: out3 <= 16'h3f8f;
      77: out3 <= 16'h3f8c;
      78: out3 <= 16'h3f89;
      79: out3 <= 16'h3f86;
      80: out3 <= 16'h3f83;
      81: out3 <= 16'h3f80;
      82: out3 <= 16'h3f7d;
      83: out3 <= 16'h3f7a;
      84: out3 <= 16'h3f77;
      85: out3 <= 16'h3f73;
      86: out3 <= 16'h3f70;
      87: out3 <= 16'h3f6d;
      88: out3 <= 16'h3f69;
      89: out3 <= 16'h3f66;
      90: out3 <= 16'h3f62;
      91: out3 <= 16'h3f5f;
      92: out3 <= 16'h3f5b;
      93: out3 <= 16'h3f58;
      94: out3 <= 16'h3f54;
      95: out3 <= 16'h3f51;
      96: out3 <= 16'h3f4d;
      97: out3 <= 16'h3f49;
      98: out3 <= 16'h3f45;
      99: out3 <= 16'h3f42;
      100: out3 <= 16'h3f3e;
      101: out3 <= 16'h3f3a;
      102: out3 <= 16'h3f36;
      103: out3 <= 16'h3f32;
      104: out3 <= 16'h3f2e;
      105: out3 <= 16'h3f2a;
      106: out3 <= 16'h3f26;
      107: out3 <= 16'h3f22;
      108: out3 <= 16'h3f1e;
      109: out3 <= 16'h3f19;
      110: out3 <= 16'h3f15;
      111: out3 <= 16'h3f11;
      112: out3 <= 16'h3f0d;
      113: out3 <= 16'h3f08;
      114: out3 <= 16'h3f04;
      115: out3 <= 16'h3f00;
      116: out3 <= 16'h3efb;
      117: out3 <= 16'h3ef7;
      118: out3 <= 16'h3ef2;
      119: out3 <= 16'h3eed;
      120: out3 <= 16'h3ee9;
      121: out3 <= 16'h3ee4;
      122: out3 <= 16'h3ee0;
      123: out3 <= 16'h3edb;
      124: out3 <= 16'h3ed6;
      125: out3 <= 16'h3ed1;
      126: out3 <= 16'h3ecc;
      127: out3 <= 16'h3ec8;
      128: out3 <= 16'h3ec3;
      129: out3 <= 16'h3ebe;
      130: out3 <= 16'h3eb9;
      131: out3 <= 16'h3eb4;
      132: out3 <= 16'h3eaf;
      133: out3 <= 16'h3eaa;
      134: out3 <= 16'h3ea5;
      135: out3 <= 16'h3e9f;
      136: out3 <= 16'h3e9a;
      137: out3 <= 16'h3e95;
      138: out3 <= 16'h3e90;
      139: out3 <= 16'h3e8a;
      140: out3 <= 16'h3e85;
      141: out3 <= 16'h3e80;
      142: out3 <= 16'h3e7a;
      143: out3 <= 16'h3e75;
      144: out3 <= 16'h3e6f;
      145: out3 <= 16'h3e6a;
      146: out3 <= 16'h3e64;
      147: out3 <= 16'h3e5e;
      148: out3 <= 16'h3e59;
      149: out3 <= 16'h3e53;
      150: out3 <= 16'h3e4d;
      151: out3 <= 16'h3e48;
      152: out3 <= 16'h3e42;
      153: out3 <= 16'h3e3c;
      154: out3 <= 16'h3e36;
      155: out3 <= 16'h3e30;
      156: out3 <= 16'h3e2a;
      157: out3 <= 16'h3e24;
      158: out3 <= 16'h3e1e;
      159: out3 <= 16'h3e18;
      160: out3 <= 16'h3e12;
      161: out3 <= 16'h3e0c;
      162: out3 <= 16'h3e06;
      163: out3 <= 16'h3dff;
      164: out3 <= 16'h3df9;
      165: out3 <= 16'h3df3;
      166: out3 <= 16'h3ded;
      167: out3 <= 16'h3de6;
      168: out3 <= 16'h3de0;
      169: out3 <= 16'h3dd9;
      170: out3 <= 16'h3dd3;
      171: out3 <= 16'h3dcc;
      172: out3 <= 16'h3dc6;
      173: out3 <= 16'h3dbf;
      174: out3 <= 16'h3db9;
      175: out3 <= 16'h3db2;
      176: out3 <= 16'h3dab;
      177: out3 <= 16'h3da4;
      178: out3 <= 16'h3d9e;
      179: out3 <= 16'h3d97;
      180: out3 <= 16'h3d90;
      181: out3 <= 16'h3d89;
      182: out3 <= 16'h3d82;
      183: out3 <= 16'h3d7b;
      184: out3 <= 16'h3d74;
      185: out3 <= 16'h3d6d;
      186: out3 <= 16'h3d66;
      187: out3 <= 16'h3d5f;
      188: out3 <= 16'h3d58;
      189: out3 <= 16'h3d51;
      190: out3 <= 16'h3d49;
      191: out3 <= 16'h3d42;
      192: out3 <= 16'h3d3b;
      193: out3 <= 16'h3d34;
      194: out3 <= 16'h3d2c;
      195: out3 <= 16'h3d25;
      196: out3 <= 16'h3d1d;
      197: out3 <= 16'h3d16;
      198: out3 <= 16'h3d0e;
      199: out3 <= 16'h3d07;
      200: out3 <= 16'h3cff;
      201: out3 <= 16'h3cf8;
      202: out3 <= 16'h3cf0;
      203: out3 <= 16'h3ce8;
      204: out3 <= 16'h3ce0;
      205: out3 <= 16'h3cd9;
      206: out3 <= 16'h3cd1;
      207: out3 <= 16'h3cc9;
      208: out3 <= 16'h3cc1;
      209: out3 <= 16'h3cb9;
      210: out3 <= 16'h3cb1;
      211: out3 <= 16'h3ca9;
      212: out3 <= 16'h3ca1;
      213: out3 <= 16'h3c99;
      214: out3 <= 16'h3c91;
      215: out3 <= 16'h3c89;
      216: out3 <= 16'h3c81;
      217: out3 <= 16'h3c79;
      218: out3 <= 16'h3c70;
      219: out3 <= 16'h3c68;
      220: out3 <= 16'h3c60;
      221: out3 <= 16'h3c57;
      222: out3 <= 16'h3c4f;
      223: out3 <= 16'h3c46;
      224: out3 <= 16'h3c3e;
      225: out3 <= 16'h3c36;
      226: out3 <= 16'h3c2d;
      227: out3 <= 16'h3c24;
      228: out3 <= 16'h3c1c;
      229: out3 <= 16'h3c13;
      230: out3 <= 16'h3c0a;
      231: out3 <= 16'h3c02;
      232: out3 <= 16'h3bf9;
      233: out3 <= 16'h3bf0;
      234: out3 <= 16'h3be7;
      235: out3 <= 16'h3bde;
      236: out3 <= 16'h3bd6;
      237: out3 <= 16'h3bcd;
      238: out3 <= 16'h3bc4;
      239: out3 <= 16'h3bbb;
      240: out3 <= 16'h3bb2;
      241: out3 <= 16'h3ba9;
      242: out3 <= 16'h3b9f;
      243: out3 <= 16'h3b96;
      244: out3 <= 16'h3b8d;
      245: out3 <= 16'h3b84;
      246: out3 <= 16'h3b7b;
      247: out3 <= 16'h3b71;
      248: out3 <= 16'h3b68;
      249: out3 <= 16'h3b5f;
      250: out3 <= 16'h3b55;
      251: out3 <= 16'h3b4c;
      252: out3 <= 16'h3b42;
      253: out3 <= 16'h3b39;
      254: out3 <= 16'h3b2f;
      255: out3 <= 16'h3b26;
      256: out3 <= 16'h3b1c;
      257: out3 <= 16'h3b12;
      258: out3 <= 16'h3b09;
      259: out3 <= 16'h3aff;
      260: out3 <= 16'h3af5;
      261: out3 <= 16'h3aeb;
      262: out3 <= 16'h3ae2;
      263: out3 <= 16'h3ad8;
      264: out3 <= 16'h3ace;
      265: out3 <= 16'h3ac4;
      266: out3 <= 16'h3aba;
      267: out3 <= 16'h3ab0;
      268: out3 <= 16'h3aa6;
      269: out3 <= 16'h3a9c;
      270: out3 <= 16'h3a92;
      271: out3 <= 16'h3a88;
      272: out3 <= 16'h3a7d;
      273: out3 <= 16'h3a73;
      274: out3 <= 16'h3a69;
      275: out3 <= 16'h3a5f;
      276: out3 <= 16'h3a54;
      277: out3 <= 16'h3a4a;
      278: out3 <= 16'h3a3f;
      279: out3 <= 16'h3a35;
      280: out3 <= 16'h3a2b;
      281: out3 <= 16'h3a20;
      282: out3 <= 16'h3a16;
      283: out3 <= 16'h3a0b;
      284: out3 <= 16'h3a00;
      285: out3 <= 16'h39f6;
      286: out3 <= 16'h39eb;
      287: out3 <= 16'h39e0;
      288: out3 <= 16'h39d6;
      289: out3 <= 16'h39cb;
      290: out3 <= 16'h39c0;
      291: out3 <= 16'h39b5;
      292: out3 <= 16'h39aa;
      293: out3 <= 16'h399f;
      294: out3 <= 16'h3994;
      295: out3 <= 16'h3989;
      296: out3 <= 16'h397e;
      297: out3 <= 16'h3973;
      298: out3 <= 16'h3968;
      299: out3 <= 16'h395d;
      300: out3 <= 16'h3952;
      301: out3 <= 16'h3947;
      302: out3 <= 16'h393b;
      303: out3 <= 16'h3930;
      304: out3 <= 16'h3925;
      305: out3 <= 16'h391a;
      306: out3 <= 16'h390e;
      307: out3 <= 16'h3903;
      308: out3 <= 16'h38f7;
      309: out3 <= 16'h38ec;
      310: out3 <= 16'h38e0;
      311: out3 <= 16'h38d5;
      312: out3 <= 16'h38c9;
      313: out3 <= 16'h38be;
      314: out3 <= 16'h38b2;
      315: out3 <= 16'h38a6;
      316: out3 <= 16'h389b;
      317: out3 <= 16'h388f;
      318: out3 <= 16'h3883;
      319: out3 <= 16'h3877;
      320: out3 <= 16'h386b;
      321: out3 <= 16'h3860;
      322: out3 <= 16'h3854;
      323: out3 <= 16'h3848;
      324: out3 <= 16'h383c;
      325: out3 <= 16'h3830;
      326: out3 <= 16'h3824;
      327: out3 <= 16'h3818;
      328: out3 <= 16'h380b;
      329: out3 <= 16'h37ff;
      330: out3 <= 16'h37f3;
      331: out3 <= 16'h37e7;
      332: out3 <= 16'h37db;
      333: out3 <= 16'h37ce;
      334: out3 <= 16'h37c2;
      335: out3 <= 16'h37b6;
      336: out3 <= 16'h37a9;
      337: out3 <= 16'h379d;
      338: out3 <= 16'h3790;
      339: out3 <= 16'h3784;
      340: out3 <= 16'h3777;
      341: out3 <= 16'h376b;
      342: out3 <= 16'h375e;
      343: out3 <= 16'h3752;
      344: out3 <= 16'h3745;
      345: out3 <= 16'h3738;
      346: out3 <= 16'h372c;
      347: out3 <= 16'h371f;
      348: out3 <= 16'h3712;
      349: out3 <= 16'h3705;
      350: out3 <= 16'h36f8;
      351: out3 <= 16'h36eb;
      352: out3 <= 16'h36df;
      353: out3 <= 16'h36d2;
      354: out3 <= 16'h36c5;
      355: out3 <= 16'h36b8;
      356: out3 <= 16'h36ab;
      357: out3 <= 16'h369d;
      358: out3 <= 16'h3690;
      359: out3 <= 16'h3683;
      360: out3 <= 16'h3676;
      361: out3 <= 16'h3669;
      362: out3 <= 16'h365c;
      363: out3 <= 16'h364e;
      364: out3 <= 16'h3641;
      365: out3 <= 16'h3634;
      366: out3 <= 16'h3626;
      367: out3 <= 16'h3619;
      368: out3 <= 16'h360b;
      369: out3 <= 16'h35fe;
      370: out3 <= 16'h35f0;
      371: out3 <= 16'h35e3;
      372: out3 <= 16'h35d5;
      373: out3 <= 16'h35c8;
      374: out3 <= 16'h35ba;
      375: out3 <= 16'h35ac;
      376: out3 <= 16'h359f;
      377: out3 <= 16'h3591;
      378: out3 <= 16'h3583;
      379: out3 <= 16'h3575;
      380: out3 <= 16'h3567;
      381: out3 <= 16'h355a;
      382: out3 <= 16'h354c;
      383: out3 <= 16'h353e;
      384: out3 <= 16'h3530;
      385: out3 <= 16'h3522;
      386: out3 <= 16'h3514;
      387: out3 <= 16'h3506;
      388: out3 <= 16'h34f8;
      389: out3 <= 16'h34ea;
      390: out3 <= 16'h34db;
      391: out3 <= 16'h34cd;
      392: out3 <= 16'h34bf;
      393: out3 <= 16'h34b1;
      394: out3 <= 16'h34a2;
      395: out3 <= 16'h3494;
      396: out3 <= 16'h3486;
      397: out3 <= 16'h3477;
      398: out3 <= 16'h3469;
      399: out3 <= 16'h345b;
      400: out3 <= 16'h344c;
      401: out3 <= 16'h343e;
      402: out3 <= 16'h342f;
      403: out3 <= 16'h3420;
      404: out3 <= 16'h3412;
      405: out3 <= 16'h3403;
      406: out3 <= 16'h33f5;
      407: out3 <= 16'h33e6;
      408: out3 <= 16'h33d7;
      409: out3 <= 16'h33c8;
      410: out3 <= 16'h33ba;
      411: out3 <= 16'h33ab;
      412: out3 <= 16'h339c;
      413: out3 <= 16'h338d;
      414: out3 <= 16'h337e;
      415: out3 <= 16'h336f;
      416: out3 <= 16'h3360;
      417: out3 <= 16'h3351;
      418: out3 <= 16'h3342;
      419: out3 <= 16'h3333;
      420: out3 <= 16'h3324;
      421: out3 <= 16'h3315;
      422: out3 <= 16'h3306;
      423: out3 <= 16'h32f7;
      424: out3 <= 16'h32e7;
      425: out3 <= 16'h32d8;
      426: out3 <= 16'h32c9;
      427: out3 <= 16'h32ba;
      428: out3 <= 16'h32aa;
      429: out3 <= 16'h329b;
      430: out3 <= 16'h328b;
      431: out3 <= 16'h327c;
      432: out3 <= 16'h326d;
      433: out3 <= 16'h325d;
      434: out3 <= 16'h324e;
      435: out3 <= 16'h323e;
      436: out3 <= 16'h322e;
      437: out3 <= 16'h321f;
      438: out3 <= 16'h320f;
      439: out3 <= 16'h31ff;
      440: out3 <= 16'h31f0;
      441: out3 <= 16'h31e0;
      442: out3 <= 16'h31d0;
      443: out3 <= 16'h31c0;
      444: out3 <= 16'h31b1;
      445: out3 <= 16'h31a1;
      446: out3 <= 16'h3191;
      447: out3 <= 16'h3181;
      448: out3 <= 16'h3171;
      449: out3 <= 16'h3161;
      450: out3 <= 16'h3151;
      451: out3 <= 16'h3141;
      452: out3 <= 16'h3131;
      453: out3 <= 16'h3121;
      454: out3 <= 16'h3111;
      455: out3 <= 16'h3101;
      456: out3 <= 16'h30f0;
      457: out3 <= 16'h30e0;
      458: out3 <= 16'h30d0;
      459: out3 <= 16'h30c0;
      460: out3 <= 16'h30af;
      461: out3 <= 16'h309f;
      462: out3 <= 16'h308f;
      463: out3 <= 16'h307e;
      464: out3 <= 16'h306e;
      465: out3 <= 16'h305d;
      466: out3 <= 16'h304d;
      467: out3 <= 16'h303c;
      468: out3 <= 16'h302c;
      469: out3 <= 16'h301b;
      470: out3 <= 16'h300b;
      471: out3 <= 16'h2ffa;
      472: out3 <= 16'h2fea;
      473: out3 <= 16'h2fd9;
      474: out3 <= 16'h2fc8;
      475: out3 <= 16'h2fb7;
      476: out3 <= 16'h2fa7;
      477: out3 <= 16'h2f96;
      478: out3 <= 16'h2f85;
      479: out3 <= 16'h2f74;
      480: out3 <= 16'h2f63;
      481: out3 <= 16'h2f52;
      482: out3 <= 16'h2f41;
      483: out3 <= 16'h2f30;
      484: out3 <= 16'h2f20;
      485: out3 <= 16'h2f0e;
      486: out3 <= 16'h2efd;
      487: out3 <= 16'h2eec;
      488: out3 <= 16'h2edb;
      489: out3 <= 16'h2eca;
      490: out3 <= 16'h2eb9;
      491: out3 <= 16'h2ea8;
      492: out3 <= 16'h2e97;
      493: out3 <= 16'h2e85;
      494: out3 <= 16'h2e74;
      495: out3 <= 16'h2e63;
      496: out3 <= 16'h2e51;
      497: out3 <= 16'h2e40;
      498: out3 <= 16'h2e2f;
      499: out3 <= 16'h2e1d;
      500: out3 <= 16'h2e0c;
      501: out3 <= 16'h2dfa;
      502: out3 <= 16'h2de9;
      503: out3 <= 16'h2dd7;
      504: out3 <= 16'h2dc6;
      505: out3 <= 16'h2db4;
      506: out3 <= 16'h2da3;
      507: out3 <= 16'h2d91;
      508: out3 <= 16'h2d7f;
      509: out3 <= 16'h2d6e;
      510: out3 <= 16'h2d5c;
      511: out3 <= 16'h2d4a;
      512: out3 <= 16'h2d38;
      513: out3 <= 16'h2d27;
      514: out3 <= 16'h2d15;
      515: out3 <= 16'h2d03;
      516: out3 <= 16'h2cf1;
      517: out3 <= 16'h2cdf;
      518: out3 <= 16'h2ccd;
      519: out3 <= 16'h2cbb;
      520: out3 <= 16'h2ca9;
      521: out3 <= 16'h2c97;
      522: out3 <= 16'h2c85;
      523: out3 <= 16'h2c73;
      524: out3 <= 16'h2c61;
      525: out3 <= 16'h2c4f;
      526: out3 <= 16'h2c3d;
      527: out3 <= 16'h2c2b;
      528: out3 <= 16'h2c18;
      529: out3 <= 16'h2c06;
      530: out3 <= 16'h2bf4;
      531: out3 <= 16'h2be2;
      532: out3 <= 16'h2bcf;
      533: out3 <= 16'h2bbd;
      534: out3 <= 16'h2bab;
      535: out3 <= 16'h2b98;
      536: out3 <= 16'h2b86;
      537: out3 <= 16'h2b73;
      538: out3 <= 16'h2b61;
      539: out3 <= 16'h2b4e;
      540: out3 <= 16'h2b3c;
      541: out3 <= 16'h2b29;
      542: out3 <= 16'h2b17;
      543: out3 <= 16'h2b04;
      544: out3 <= 16'h2af2;
      545: out3 <= 16'h2adf;
      546: out3 <= 16'h2acc;
      547: out3 <= 16'h2ab9;
      548: out3 <= 16'h2aa7;
      549: out3 <= 16'h2a94;
      550: out3 <= 16'h2a81;
      551: out3 <= 16'h2a6e;
      552: out3 <= 16'h2a5c;
      553: out3 <= 16'h2a49;
      554: out3 <= 16'h2a36;
      555: out3 <= 16'h2a23;
      556: out3 <= 16'h2a10;
      557: out3 <= 16'h29fd;
      558: out3 <= 16'h29ea;
      559: out3 <= 16'h29d7;
      560: out3 <= 16'h29c4;
      561: out3 <= 16'h29b1;
      562: out3 <= 16'h299e;
      563: out3 <= 16'h298b;
      564: out3 <= 16'h2978;
      565: out3 <= 16'h2965;
      566: out3 <= 16'h2951;
      567: out3 <= 16'h293e;
      568: out3 <= 16'h292b;
      569: out3 <= 16'h2918;
      570: out3 <= 16'h2904;
      571: out3 <= 16'h28f1;
      572: out3 <= 16'h28de;
      573: out3 <= 16'h28ca;
      574: out3 <= 16'h28b7;
      575: out3 <= 16'h28a4;
      576: out3 <= 16'h2890;
      577: out3 <= 16'h287d;
      578: out3 <= 16'h2869;
      579: out3 <= 16'h2856;
      580: out3 <= 16'h2842;
      581: out3 <= 16'h282f;
      582: out3 <= 16'h281b;
      583: out3 <= 16'h2808;
      584: out3 <= 16'h27f4;
      585: out3 <= 16'h27e0;
      586: out3 <= 16'h27cd;
      587: out3 <= 16'h27b9;
      588: out3 <= 16'h27a5;
      589: out3 <= 16'h2791;
      590: out3 <= 16'h277e;
      591: out3 <= 16'h276a;
      592: out3 <= 16'h2756;
      593: out3 <= 16'h2742;
      594: out3 <= 16'h272e;
      595: out3 <= 16'h271a;
      596: out3 <= 16'h2707;
      597: out3 <= 16'h26f3;
      598: out3 <= 16'h26df;
      599: out3 <= 16'h26cb;
      600: out3 <= 16'h26b7;
      601: out3 <= 16'h26a3;
      602: out3 <= 16'h268f;
      603: out3 <= 16'h267b;
      604: out3 <= 16'h2666;
      605: out3 <= 16'h2652;
      606: out3 <= 16'h263e;
      607: out3 <= 16'h262a;
      608: out3 <= 16'h2616;
      609: out3 <= 16'h2602;
      610: out3 <= 16'h25ed;
      611: out3 <= 16'h25d9;
      612: out3 <= 16'h25c5;
      613: out3 <= 16'h25b1;
      614: out3 <= 16'h259c;
      615: out3 <= 16'h2588;
      616: out3 <= 16'h2574;
      617: out3 <= 16'h255f;
      618: out3 <= 16'h254b;
      619: out3 <= 16'h2536;
      620: out3 <= 16'h2522;
      621: out3 <= 16'h250d;
      622: out3 <= 16'h24f9;
      623: out3 <= 16'h24e4;
      624: out3 <= 16'h24d0;
      625: out3 <= 16'h24bb;
      626: out3 <= 16'h24a7;
      627: out3 <= 16'h2492;
      628: out3 <= 16'h247d;
      629: out3 <= 16'h2469;
      630: out3 <= 16'h2454;
      631: out3 <= 16'h243f;
      632: out3 <= 16'h242b;
      633: out3 <= 16'h2416;
      634: out3 <= 16'h2401;
      635: out3 <= 16'h23ec;
      636: out3 <= 16'h23d7;
      637: out3 <= 16'h23c3;
      638: out3 <= 16'h23ae;
      639: out3 <= 16'h2399;
      640: out3 <= 16'h2384;
      641: out3 <= 16'h236f;
      642: out3 <= 16'h235a;
      643: out3 <= 16'h2345;
      644: out3 <= 16'h2330;
      645: out3 <= 16'h231b;
      646: out3 <= 16'h2306;
      647: out3 <= 16'h22f1;
      648: out3 <= 16'h22dc;
      649: out3 <= 16'h22c7;
      650: out3 <= 16'h22b2;
      651: out3 <= 16'h229d;
      652: out3 <= 16'h2288;
      653: out3 <= 16'h2272;
      654: out3 <= 16'h225d;
      655: out3 <= 16'h2248;
      656: out3 <= 16'h2233;
      657: out3 <= 16'h221e;
      658: out3 <= 16'h2208;
      659: out3 <= 16'h21f3;
      660: out3 <= 16'h21de;
      661: out3 <= 16'h21c8;
      662: out3 <= 16'h21b3;
      663: out3 <= 16'h219e;
      664: out3 <= 16'h2188;
      665: out3 <= 16'h2173;
      666: out3 <= 16'h215d;
      667: out3 <= 16'h2148;
      668: out3 <= 16'h2132;
      669: out3 <= 16'h211d;
      670: out3 <= 16'h2107;
      671: out3 <= 16'h20f2;
      672: out3 <= 16'h20dc;
      673: out3 <= 16'h20c7;
      674: out3 <= 16'h20b1;
      675: out3 <= 16'h209b;
      676: out3 <= 16'h2086;
      677: out3 <= 16'h2070;
      678: out3 <= 16'h205b;
      679: out3 <= 16'h2045;
      680: out3 <= 16'h202f;
      681: out3 <= 16'h2019;
      682: out3 <= 16'h2004;
      683: out3 <= 16'h1fee;
      684: out3 <= 16'h1fd8;
      685: out3 <= 16'h1fc2;
      686: out3 <= 16'h1fac;
      687: out3 <= 16'h1f97;
      688: out3 <= 16'h1f81;
      689: out3 <= 16'h1f6b;
      690: out3 <= 16'h1f55;
      691: out3 <= 16'h1f3f;
      692: out3 <= 16'h1f29;
      693: out3 <= 16'h1f13;
      694: out3 <= 16'h1efd;
      695: out3 <= 16'h1ee7;
      696: out3 <= 16'h1ed1;
      697: out3 <= 16'h1ebb;
      698: out3 <= 16'h1ea5;
      699: out3 <= 16'h1e8f;
      700: out3 <= 16'h1e79;
      701: out3 <= 16'h1e63;
      702: out3 <= 16'h1e4d;
      703: out3 <= 16'h1e36;
      704: out3 <= 16'h1e20;
      705: out3 <= 16'h1e0a;
      706: out3 <= 16'h1df4;
      707: out3 <= 16'h1dde;
      708: out3 <= 16'h1dc7;
      709: out3 <= 16'h1db1;
      710: out3 <= 16'h1d9b;
      711: out3 <= 16'h1d85;
      712: out3 <= 16'h1d6e;
      713: out3 <= 16'h1d58;
      714: out3 <= 16'h1d42;
      715: out3 <= 16'h1d2b;
      716: out3 <= 16'h1d15;
      717: out3 <= 16'h1cff;
      718: out3 <= 16'h1ce8;
      719: out3 <= 16'h1cd2;
      720: out3 <= 16'h1cbb;
      721: out3 <= 16'h1ca5;
      722: out3 <= 16'h1c8e;
      723: out3 <= 16'h1c78;
      724: out3 <= 16'h1c61;
      725: out3 <= 16'h1c4b;
      726: out3 <= 16'h1c34;
      727: out3 <= 16'h1c1e;
      728: out3 <= 16'h1c07;
      729: out3 <= 16'h1bf0;
      730: out3 <= 16'h1bda;
      731: out3 <= 16'h1bc3;
      732: out3 <= 16'h1bac;
      733: out3 <= 16'h1b96;
      734: out3 <= 16'h1b7f;
      735: out3 <= 16'h1b68;
      736: out3 <= 16'h1b52;
      737: out3 <= 16'h1b3b;
      738: out3 <= 16'h1b24;
      739: out3 <= 16'h1b0d;
      740: out3 <= 16'h1af7;
      741: out3 <= 16'h1ae0;
      742: out3 <= 16'h1ac9;
      743: out3 <= 16'h1ab2;
      744: out3 <= 16'h1a9b;
      745: out3 <= 16'h1a84;
      746: out3 <= 16'h1a6e;
      747: out3 <= 16'h1a57;
      748: out3 <= 16'h1a40;
      749: out3 <= 16'h1a29;
      750: out3 <= 16'h1a12;
      751: out3 <= 16'h19fb;
      752: out3 <= 16'h19e4;
      753: out3 <= 16'h19cd;
      754: out3 <= 16'h19b6;
      755: out3 <= 16'h199f;
      756: out3 <= 16'h1988;
      757: out3 <= 16'h1971;
      758: out3 <= 16'h195a;
      759: out3 <= 16'h1943;
      760: out3 <= 16'h192c;
      761: out3 <= 16'h1914;
      762: out3 <= 16'h18fd;
      763: out3 <= 16'h18e6;
      764: out3 <= 16'h18cf;
      765: out3 <= 16'h18b8;
      766: out3 <= 16'h18a1;
      767: out3 <= 16'h1889;
      768: out3 <= 16'h1872;
      769: out3 <= 16'h185b;
      770: out3 <= 16'h1844;
      771: out3 <= 16'h182d;
      772: out3 <= 16'h1815;
      773: out3 <= 16'h17fe;
      774: out3 <= 16'h17e7;
      775: out3 <= 16'h17cf;
      776: out3 <= 16'h17b8;
      777: out3 <= 16'h17a1;
      778: out3 <= 16'h1789;
      779: out3 <= 16'h1772;
      780: out3 <= 16'h175b;
      781: out3 <= 16'h1743;
      782: out3 <= 16'h172c;
      783: out3 <= 16'h1714;
      784: out3 <= 16'h16fd;
      785: out3 <= 16'h16e5;
      786: out3 <= 16'h16ce;
      787: out3 <= 16'h16b6;
      788: out3 <= 16'h169f;
      789: out3 <= 16'h1687;
      790: out3 <= 16'h1670;
      791: out3 <= 16'h1658;
      792: out3 <= 16'h1641;
      793: out3 <= 16'h1629;
      794: out3 <= 16'h1612;
      795: out3 <= 16'h15fa;
      796: out3 <= 16'h15e2;
      797: out3 <= 16'h15cb;
      798: out3 <= 16'h15b3;
      799: out3 <= 16'h159b;
      800: out3 <= 16'h1584;
      801: out3 <= 16'h156c;
      802: out3 <= 16'h1554;
      803: out3 <= 16'h153d;
      804: out3 <= 16'h1525;
      805: out3 <= 16'h150d;
      806: out3 <= 16'h14f6;
      807: out3 <= 16'h14de;
      808: out3 <= 16'h14c6;
      809: out3 <= 16'h14ae;
      810: out3 <= 16'h1496;
      811: out3 <= 16'h147f;
      812: out3 <= 16'h1467;
      813: out3 <= 16'h144f;
      814: out3 <= 16'h1437;
      815: out3 <= 16'h141f;
      816: out3 <= 16'h1407;
      817: out3 <= 16'h13f0;
      818: out3 <= 16'h13d8;
      819: out3 <= 16'h13c0;
      820: out3 <= 16'h13a8;
      821: out3 <= 16'h1390;
      822: out3 <= 16'h1378;
      823: out3 <= 16'h1360;
      824: out3 <= 16'h1348;
      825: out3 <= 16'h1330;
      826: out3 <= 16'h1318;
      827: out3 <= 16'h1300;
      828: out3 <= 16'h12e8;
      829: out3 <= 16'h12d0;
      830: out3 <= 16'h12b8;
      831: out3 <= 16'h12a0;
      832: out3 <= 16'h1288;
      833: out3 <= 16'h1270;
      834: out3 <= 16'h1258;
      835: out3 <= 16'h1240;
      836: out3 <= 16'h1228;
      837: out3 <= 16'h1210;
      838: out3 <= 16'h11f7;
      839: out3 <= 16'h11df;
      840: out3 <= 16'h11c7;
      841: out3 <= 16'h11af;
      842: out3 <= 16'h1197;
      843: out3 <= 16'h117f;
      844: out3 <= 16'h1167;
      845: out3 <= 16'h114e;
      846: out3 <= 16'h1136;
      847: out3 <= 16'h111e;
      848: out3 <= 16'h1106;
      849: out3 <= 16'h10ed;
      850: out3 <= 16'h10d5;
      851: out3 <= 16'h10bd;
      852: out3 <= 16'h10a5;
      853: out3 <= 16'h108c;
      854: out3 <= 16'h1074;
      855: out3 <= 16'h105c;
      856: out3 <= 16'h1044;
      857: out3 <= 16'h102b;
      858: out3 <= 16'h1013;
      859: out3 <= 16'hffb;
      860: out3 <= 16'hfe2;
      861: out3 <= 16'hfca;
      862: out3 <= 16'hfb2;
      863: out3 <= 16'hf99;
      864: out3 <= 16'hf81;
      865: out3 <= 16'hf68;
      866: out3 <= 16'hf50;
      867: out3 <= 16'hf38;
      868: out3 <= 16'hf1f;
      869: out3 <= 16'hf07;
      870: out3 <= 16'heee;
      871: out3 <= 16'hed6;
      872: out3 <= 16'hebd;
      873: out3 <= 16'hea5;
      874: out3 <= 16'he8c;
      875: out3 <= 16'he74;
      876: out3 <= 16'he5c;
      877: out3 <= 16'he43;
      878: out3 <= 16'he2b;
      879: out3 <= 16'he12;
      880: out3 <= 16'hdf9;
      881: out3 <= 16'hde1;
      882: out3 <= 16'hdc8;
      883: out3 <= 16'hdb0;
      884: out3 <= 16'hd97;
      885: out3 <= 16'hd7f;
      886: out3 <= 16'hd66;
      887: out3 <= 16'hd4e;
      888: out3 <= 16'hd35;
      889: out3 <= 16'hd1c;
      890: out3 <= 16'hd04;
      891: out3 <= 16'hceb;
      892: out3 <= 16'hcd3;
      893: out3 <= 16'hcba;
      894: out3 <= 16'hca1;
      895: out3 <= 16'hc89;
      896: out3 <= 16'hc70;
      897: out3 <= 16'hc57;
      898: out3 <= 16'hc3f;
      899: out3 <= 16'hc26;
      900: out3 <= 16'hc0d;
      901: out3 <= 16'hbf5;
      902: out3 <= 16'hbdc;
      903: out3 <= 16'hbc3;
      904: out3 <= 16'hbab;
      905: out3 <= 16'hb92;
      906: out3 <= 16'hb79;
      907: out3 <= 16'hb60;
      908: out3 <= 16'hb48;
      909: out3 <= 16'hb2f;
      910: out3 <= 16'hb16;
      911: out3 <= 16'hafd;
      912: out3 <= 16'hae5;
      913: out3 <= 16'hacc;
      914: out3 <= 16'hab3;
      915: out3 <= 16'ha9a;
      916: out3 <= 16'ha82;
      917: out3 <= 16'ha69;
      918: out3 <= 16'ha50;
      919: out3 <= 16'ha37;
      920: out3 <= 16'ha1e;
      921: out3 <= 16'ha06;
      922: out3 <= 16'h9ed;
      923: out3 <= 16'h9d4;
      924: out3 <= 16'h9bb;
      925: out3 <= 16'h9a2;
      926: out3 <= 16'h989;
      927: out3 <= 16'h970;
      928: out3 <= 16'h958;
      929: out3 <= 16'h93f;
      930: out3 <= 16'h926;
      931: out3 <= 16'h90d;
      932: out3 <= 16'h8f4;
      933: out3 <= 16'h8db;
      934: out3 <= 16'h8c2;
      935: out3 <= 16'h8a9;
      936: out3 <= 16'h891;
      937: out3 <= 16'h878;
      938: out3 <= 16'h85f;
      939: out3 <= 16'h846;
      940: out3 <= 16'h82d;
      941: out3 <= 16'h814;
      942: out3 <= 16'h7fb;
      943: out3 <= 16'h7e2;
      944: out3 <= 16'h7c9;
      945: out3 <= 16'h7b0;
      946: out3 <= 16'h797;
      947: out3 <= 16'h77e;
      948: out3 <= 16'h765;
      949: out3 <= 16'h74c;
      950: out3 <= 16'h733;
      951: out3 <= 16'h71a;
      952: out3 <= 16'h701;
      953: out3 <= 16'h6e8;
      954: out3 <= 16'h6cf;
      955: out3 <= 16'h6b6;
      956: out3 <= 16'h69d;
      957: out3 <= 16'h684;
      958: out3 <= 16'h66b;
      959: out3 <= 16'h652;
      960: out3 <= 16'h639;
      961: out3 <= 16'h620;
      962: out3 <= 16'h607;
      963: out3 <= 16'h5ee;
      964: out3 <= 16'h5d5;
      965: out3 <= 16'h5bc;
      966: out3 <= 16'h5a3;
      967: out3 <= 16'h58a;
      968: out3 <= 16'h571;
      969: out3 <= 16'h558;
      970: out3 <= 16'h53f;
      971: out3 <= 16'h526;
      972: out3 <= 16'h50d;
      973: out3 <= 16'h4f4;
      974: out3 <= 16'h4db;
      975: out3 <= 16'h4c2;
      976: out3 <= 16'h4a9;
      977: out3 <= 16'h490;
      978: out3 <= 16'h477;
      979: out3 <= 16'h45e;
      980: out3 <= 16'h444;
      981: out3 <= 16'h42b;
      982: out3 <= 16'h412;
      983: out3 <= 16'h3f9;
      984: out3 <= 16'h3e0;
      985: out3 <= 16'h3c7;
      986: out3 <= 16'h3ae;
      987: out3 <= 16'h395;
      988: out3 <= 16'h37c;
      989: out3 <= 16'h363;
      990: out3 <= 16'h34a;
      991: out3 <= 16'h330;
      992: out3 <= 16'h317;
      993: out3 <= 16'h2fe;
      994: out3 <= 16'h2e5;
      995: out3 <= 16'h2cc;
      996: out3 <= 16'h2b3;
      997: out3 <= 16'h29a;
      998: out3 <= 16'h281;
      999: out3 <= 16'h268;
      1000: out3 <= 16'h24e;
      1001: out3 <= 16'h235;
      1002: out3 <= 16'h21c;
      1003: out3 <= 16'h203;
      1004: out3 <= 16'h1ea;
      1005: out3 <= 16'h1d1;
      1006: out3 <= 16'h1b8;
      1007: out3 <= 16'h19f;
      1008: out3 <= 16'h186;
      1009: out3 <= 16'h16c;
      1010: out3 <= 16'h153;
      1011: out3 <= 16'h13a;
      1012: out3 <= 16'h121;
      1013: out3 <= 16'h108;
      1014: out3 <= 16'hef;
      1015: out3 <= 16'hd6;
      1016: out3 <= 16'hbc;
      1017: out3 <= 16'ha3;
      1018: out3 <= 16'h8a;
      1019: out3 <= 16'h71;
      1020: out3 <= 16'h58;
      1021: out3 <= 16'h3f;
      1022: out3 <= 16'h26;
      1023: out3 <= 16'hd;
      1024: out3 <= 16'hfff3;
      1025: out3 <= 16'hffda;
      1026: out3 <= 16'hffc1;
      1027: out3 <= 16'hffa8;
      1028: out3 <= 16'hff8f;
      1029: out3 <= 16'hff76;
      1030: out3 <= 16'hff5d;
      1031: out3 <= 16'hff44;
      1032: out3 <= 16'hff2a;
      1033: out3 <= 16'hff11;
      1034: out3 <= 16'hfef8;
      1035: out3 <= 16'hfedf;
      1036: out3 <= 16'hfec6;
      1037: out3 <= 16'hfead;
      1038: out3 <= 16'hfe94;
      1039: out3 <= 16'hfe7a;
      1040: out3 <= 16'hfe61;
      1041: out3 <= 16'hfe48;
      1042: out3 <= 16'hfe2f;
      1043: out3 <= 16'hfe16;
      1044: out3 <= 16'hfdfd;
      1045: out3 <= 16'hfde4;
      1046: out3 <= 16'hfdcb;
      1047: out3 <= 16'hfdb2;
      1048: out3 <= 16'hfd98;
      1049: out3 <= 16'hfd7f;
      1050: out3 <= 16'hfd66;
      1051: out3 <= 16'hfd4d;
      1052: out3 <= 16'hfd34;
      1053: out3 <= 16'hfd1b;
      1054: out3 <= 16'hfd02;
      1055: out3 <= 16'hfce9;
      1056: out3 <= 16'hfcd0;
      1057: out3 <= 16'hfcb6;
      1058: out3 <= 16'hfc9d;
      1059: out3 <= 16'hfc84;
      1060: out3 <= 16'hfc6b;
      1061: out3 <= 16'hfc52;
      1062: out3 <= 16'hfc39;
      1063: out3 <= 16'hfc20;
      1064: out3 <= 16'hfc07;
      1065: out3 <= 16'hfbee;
      1066: out3 <= 16'hfbd5;
      1067: out3 <= 16'hfbbc;
      1068: out3 <= 16'hfba2;
      1069: out3 <= 16'hfb89;
      1070: out3 <= 16'hfb70;
      1071: out3 <= 16'hfb57;
      1072: out3 <= 16'hfb3e;
      1073: out3 <= 16'hfb25;
      1074: out3 <= 16'hfb0c;
      1075: out3 <= 16'hfaf3;
      1076: out3 <= 16'hfada;
      1077: out3 <= 16'hfac1;
      1078: out3 <= 16'hfaa8;
      1079: out3 <= 16'hfa8f;
      1080: out3 <= 16'hfa76;
      1081: out3 <= 16'hfa5d;
      1082: out3 <= 16'hfa44;
      1083: out3 <= 16'hfa2b;
      1084: out3 <= 16'hfa12;
      1085: out3 <= 16'hf9f9;
      1086: out3 <= 16'hf9e0;
      1087: out3 <= 16'hf9c7;
      1088: out3 <= 16'hf9ae;
      1089: out3 <= 16'hf995;
      1090: out3 <= 16'hf97c;
      1091: out3 <= 16'hf963;
      1092: out3 <= 16'hf94a;
      1093: out3 <= 16'hf931;
      1094: out3 <= 16'hf918;
      1095: out3 <= 16'hf8ff;
      1096: out3 <= 16'hf8e6;
      1097: out3 <= 16'hf8cd;
      1098: out3 <= 16'hf8b4;
      1099: out3 <= 16'hf89b;
      1100: out3 <= 16'hf882;
      1101: out3 <= 16'hf869;
      1102: out3 <= 16'hf850;
      1103: out3 <= 16'hf837;
      1104: out3 <= 16'hf81e;
      1105: out3 <= 16'hf805;
      1106: out3 <= 16'hf7ec;
      1107: out3 <= 16'hf7d3;
      1108: out3 <= 16'hf7ba;
      1109: out3 <= 16'hf7a1;
      1110: out3 <= 16'hf788;
      1111: out3 <= 16'hf76f;
      1112: out3 <= 16'hf757;
      1113: out3 <= 16'hf73e;
      1114: out3 <= 16'hf725;
      1115: out3 <= 16'hf70c;
      1116: out3 <= 16'hf6f3;
      1117: out3 <= 16'hf6da;
      1118: out3 <= 16'hf6c1;
      1119: out3 <= 16'hf6a8;
      1120: out3 <= 16'hf690;
      1121: out3 <= 16'hf677;
      1122: out3 <= 16'hf65e;
      1123: out3 <= 16'hf645;
      1124: out3 <= 16'hf62c;
      1125: out3 <= 16'hf613;
      1126: out3 <= 16'hf5fa;
      1127: out3 <= 16'hf5e2;
      1128: out3 <= 16'hf5c9;
      1129: out3 <= 16'hf5b0;
      1130: out3 <= 16'hf597;
      1131: out3 <= 16'hf57e;
      1132: out3 <= 16'hf566;
      1133: out3 <= 16'hf54d;
      1134: out3 <= 16'hf534;
      1135: out3 <= 16'hf51b;
      1136: out3 <= 16'hf503;
      1137: out3 <= 16'hf4ea;
      1138: out3 <= 16'hf4d1;
      1139: out3 <= 16'hf4b8;
      1140: out3 <= 16'hf4a0;
      1141: out3 <= 16'hf487;
      1142: out3 <= 16'hf46e;
      1143: out3 <= 16'hf455;
      1144: out3 <= 16'hf43d;
      1145: out3 <= 16'hf424;
      1146: out3 <= 16'hf40b;
      1147: out3 <= 16'hf3f3;
      1148: out3 <= 16'hf3da;
      1149: out3 <= 16'hf3c1;
      1150: out3 <= 16'hf3a9;
      1151: out3 <= 16'hf390;
      1152: out3 <= 16'hf377;
      1153: out3 <= 16'hf35f;
      1154: out3 <= 16'hf346;
      1155: out3 <= 16'hf32d;
      1156: out3 <= 16'hf315;
      1157: out3 <= 16'hf2fc;
      1158: out3 <= 16'hf2e4;
      1159: out3 <= 16'hf2cb;
      1160: out3 <= 16'hf2b2;
      1161: out3 <= 16'hf29a;
      1162: out3 <= 16'hf281;
      1163: out3 <= 16'hf269;
      1164: out3 <= 16'hf250;
      1165: out3 <= 16'hf238;
      1166: out3 <= 16'hf21f;
      1167: out3 <= 16'hf207;
      1168: out3 <= 16'hf1ee;
      1169: out3 <= 16'hf1d5;
      1170: out3 <= 16'hf1bd;
      1171: out3 <= 16'hf1a4;
      1172: out3 <= 16'hf18c;
      1173: out3 <= 16'hf174;
      1174: out3 <= 16'hf15b;
      1175: out3 <= 16'hf143;
      1176: out3 <= 16'hf12a;
      1177: out3 <= 16'hf112;
      1178: out3 <= 16'hf0f9;
      1179: out3 <= 16'hf0e1;
      1180: out3 <= 16'hf0c8;
      1181: out3 <= 16'hf0b0;
      1182: out3 <= 16'hf098;
      1183: out3 <= 16'hf07f;
      1184: out3 <= 16'hf067;
      1185: out3 <= 16'hf04e;
      1186: out3 <= 16'hf036;
      1187: out3 <= 16'hf01e;
      1188: out3 <= 16'hf005;
      1189: out3 <= 16'hefed;
      1190: out3 <= 16'hefd5;
      1191: out3 <= 16'hefbc;
      1192: out3 <= 16'hefa4;
      1193: out3 <= 16'hef8c;
      1194: out3 <= 16'hef74;
      1195: out3 <= 16'hef5b;
      1196: out3 <= 16'hef43;
      1197: out3 <= 16'hef2b;
      1198: out3 <= 16'hef13;
      1199: out3 <= 16'heefa;
      1200: out3 <= 16'heee2;
      1201: out3 <= 16'heeca;
      1202: out3 <= 16'heeb2;
      1203: out3 <= 16'hee99;
      1204: out3 <= 16'hee81;
      1205: out3 <= 16'hee69;
      1206: out3 <= 16'hee51;
      1207: out3 <= 16'hee39;
      1208: out3 <= 16'hee21;
      1209: out3 <= 16'hee09;
      1210: out3 <= 16'hedf0;
      1211: out3 <= 16'hedd8;
      1212: out3 <= 16'hedc0;
      1213: out3 <= 16'heda8;
      1214: out3 <= 16'hed90;
      1215: out3 <= 16'hed78;
      1216: out3 <= 16'hed60;
      1217: out3 <= 16'hed48;
      1218: out3 <= 16'hed30;
      1219: out3 <= 16'hed18;
      1220: out3 <= 16'hed00;
      1221: out3 <= 16'hece8;
      1222: out3 <= 16'hecd0;
      1223: out3 <= 16'hecb8;
      1224: out3 <= 16'heca0;
      1225: out3 <= 16'hec88;
      1226: out3 <= 16'hec70;
      1227: out3 <= 16'hec58;
      1228: out3 <= 16'hec40;
      1229: out3 <= 16'hec28;
      1230: out3 <= 16'hec10;
      1231: out3 <= 16'hebf9;
      1232: out3 <= 16'hebe1;
      1233: out3 <= 16'hebc9;
      1234: out3 <= 16'hebb1;
      1235: out3 <= 16'heb99;
      1236: out3 <= 16'heb81;
      1237: out3 <= 16'heb6a;
      1238: out3 <= 16'heb52;
      1239: out3 <= 16'heb3a;
      1240: out3 <= 16'heb22;
      1241: out3 <= 16'heb0a;
      1242: out3 <= 16'heaf3;
      1243: out3 <= 16'headb;
      1244: out3 <= 16'heac3;
      1245: out3 <= 16'heaac;
      1246: out3 <= 16'hea94;
      1247: out3 <= 16'hea7c;
      1248: out3 <= 16'hea65;
      1249: out3 <= 16'hea4d;
      1250: out3 <= 16'hea35;
      1251: out3 <= 16'hea1e;
      1252: out3 <= 16'hea06;
      1253: out3 <= 16'he9ee;
      1254: out3 <= 16'he9d7;
      1255: out3 <= 16'he9bf;
      1256: out3 <= 16'he9a8;
      1257: out3 <= 16'he990;
      1258: out3 <= 16'he979;
      1259: out3 <= 16'he961;
      1260: out3 <= 16'he94a;
      1261: out3 <= 16'he932;
      1262: out3 <= 16'he91b;
      1263: out3 <= 16'he903;
      1264: out3 <= 16'he8ec;
      1265: out3 <= 16'he8d4;
      1266: out3 <= 16'he8bd;
      1267: out3 <= 16'he8a5;
      1268: out3 <= 16'he88e;
      1269: out3 <= 16'he877;
      1270: out3 <= 16'he85f;
      1271: out3 <= 16'he848;
      1272: out3 <= 16'he831;
      1273: out3 <= 16'he819;
      1274: out3 <= 16'he802;
      1275: out3 <= 16'he7eb;
      1276: out3 <= 16'he7d3;
      1277: out3 <= 16'he7bc;
      1278: out3 <= 16'he7a5;
      1279: out3 <= 16'he78e;
      1280: out3 <= 16'he777;
      1281: out3 <= 16'he75f;
      1282: out3 <= 16'he748;
      1283: out3 <= 16'he731;
      1284: out3 <= 16'he71a;
      1285: out3 <= 16'he703;
      1286: out3 <= 16'he6ec;
      1287: out3 <= 16'he6d4;
      1288: out3 <= 16'he6bd;
      1289: out3 <= 16'he6a6;
      1290: out3 <= 16'he68f;
      1291: out3 <= 16'he678;
      1292: out3 <= 16'he661;
      1293: out3 <= 16'he64a;
      1294: out3 <= 16'he633;
      1295: out3 <= 16'he61c;
      1296: out3 <= 16'he605;
      1297: out3 <= 16'he5ee;
      1298: out3 <= 16'he5d7;
      1299: out3 <= 16'he5c0;
      1300: out3 <= 16'he5a9;
      1301: out3 <= 16'he592;
      1302: out3 <= 16'he57c;
      1303: out3 <= 16'he565;
      1304: out3 <= 16'he54e;
      1305: out3 <= 16'he537;
      1306: out3 <= 16'he520;
      1307: out3 <= 16'he509;
      1308: out3 <= 16'he4f3;
      1309: out3 <= 16'he4dc;
      1310: out3 <= 16'he4c5;
      1311: out3 <= 16'he4ae;
      1312: out3 <= 16'he498;
      1313: out3 <= 16'he481;
      1314: out3 <= 16'he46a;
      1315: out3 <= 16'he454;
      1316: out3 <= 16'he43d;
      1317: out3 <= 16'he426;
      1318: out3 <= 16'he410;
      1319: out3 <= 16'he3f9;
      1320: out3 <= 16'he3e2;
      1321: out3 <= 16'he3cc;
      1322: out3 <= 16'he3b5;
      1323: out3 <= 16'he39f;
      1324: out3 <= 16'he388;
      1325: out3 <= 16'he372;
      1326: out3 <= 16'he35b;
      1327: out3 <= 16'he345;
      1328: out3 <= 16'he32e;
      1329: out3 <= 16'he318;
      1330: out3 <= 16'he301;
      1331: out3 <= 16'he2eb;
      1332: out3 <= 16'he2d5;
      1333: out3 <= 16'he2be;
      1334: out3 <= 16'he2a8;
      1335: out3 <= 16'he292;
      1336: out3 <= 16'he27b;
      1337: out3 <= 16'he265;
      1338: out3 <= 16'he24f;
      1339: out3 <= 16'he239;
      1340: out3 <= 16'he222;
      1341: out3 <= 16'he20c;
      1342: out3 <= 16'he1f6;
      1343: out3 <= 16'he1e0;
      1344: out3 <= 16'he1ca;
      1345: out3 <= 16'he1b3;
      1346: out3 <= 16'he19d;
      1347: out3 <= 16'he187;
      1348: out3 <= 16'he171;
      1349: out3 <= 16'he15b;
      1350: out3 <= 16'he145;
      1351: out3 <= 16'he12f;
      1352: out3 <= 16'he119;
      1353: out3 <= 16'he103;
      1354: out3 <= 16'he0ed;
      1355: out3 <= 16'he0d7;
      1356: out3 <= 16'he0c1;
      1357: out3 <= 16'he0ab;
      1358: out3 <= 16'he095;
      1359: out3 <= 16'he07f;
      1360: out3 <= 16'he069;
      1361: out3 <= 16'he054;
      1362: out3 <= 16'he03e;
      1363: out3 <= 16'he028;
      1364: out3 <= 16'he012;
      1365: out3 <= 16'hdffc;
      1366: out3 <= 16'hdfe7;
      1367: out3 <= 16'hdfd1;
      1368: out3 <= 16'hdfbb;
      1369: out3 <= 16'hdfa5;
      1370: out3 <= 16'hdf90;
      1371: out3 <= 16'hdf7a;
      1372: out3 <= 16'hdf65;
      1373: out3 <= 16'hdf4f;
      1374: out3 <= 16'hdf39;
      1375: out3 <= 16'hdf24;
      1376: out3 <= 16'hdf0e;
      1377: out3 <= 16'hdef9;
      1378: out3 <= 16'hdee3;
      1379: out3 <= 16'hdece;
      1380: out3 <= 16'hdeb8;
      1381: out3 <= 16'hdea3;
      1382: out3 <= 16'hde8d;
      1383: out3 <= 16'hde78;
      1384: out3 <= 16'hde62;
      1385: out3 <= 16'hde4d;
      1386: out3 <= 16'hde38;
      1387: out3 <= 16'hde22;
      1388: out3 <= 16'hde0d;
      1389: out3 <= 16'hddf8;
      1390: out3 <= 16'hdde2;
      1391: out3 <= 16'hddcd;
      1392: out3 <= 16'hddb8;
      1393: out3 <= 16'hdda3;
      1394: out3 <= 16'hdd8e;
      1395: out3 <= 16'hdd78;
      1396: out3 <= 16'hdd63;
      1397: out3 <= 16'hdd4e;
      1398: out3 <= 16'hdd39;
      1399: out3 <= 16'hdd24;
      1400: out3 <= 16'hdd0f;
      1401: out3 <= 16'hdcfa;
      1402: out3 <= 16'hdce5;
      1403: out3 <= 16'hdcd0;
      1404: out3 <= 16'hdcbb;
      1405: out3 <= 16'hdca6;
      1406: out3 <= 16'hdc91;
      1407: out3 <= 16'hdc7c;
      1408: out3 <= 16'hdc67;
      1409: out3 <= 16'hdc52;
      1410: out3 <= 16'hdc3d;
      1411: out3 <= 16'hdc29;
      1412: out3 <= 16'hdc14;
      1413: out3 <= 16'hdbff;
      1414: out3 <= 16'hdbea;
      1415: out3 <= 16'hdbd5;
      1416: out3 <= 16'hdbc1;
      1417: out3 <= 16'hdbac;
      1418: out3 <= 16'hdb97;
      1419: out3 <= 16'hdb83;
      1420: out3 <= 16'hdb6e;
      1421: out3 <= 16'hdb59;
      1422: out3 <= 16'hdb45;
      1423: out3 <= 16'hdb30;
      1424: out3 <= 16'hdb1c;
      1425: out3 <= 16'hdb07;
      1426: out3 <= 16'hdaf3;
      1427: out3 <= 16'hdade;
      1428: out3 <= 16'hdaca;
      1429: out3 <= 16'hdab5;
      1430: out3 <= 16'hdaa1;
      1431: out3 <= 16'hda8c;
      1432: out3 <= 16'hda78;
      1433: out3 <= 16'hda64;
      1434: out3 <= 16'hda4f;
      1435: out3 <= 16'hda3b;
      1436: out3 <= 16'hda27;
      1437: out3 <= 16'hda13;
      1438: out3 <= 16'hd9fe;
      1439: out3 <= 16'hd9ea;
      1440: out3 <= 16'hd9d6;
      1441: out3 <= 16'hd9c2;
      1442: out3 <= 16'hd9ae;
      1443: out3 <= 16'hd99a;
      1444: out3 <= 16'hd985;
      1445: out3 <= 16'hd971;
      1446: out3 <= 16'hd95d;
      1447: out3 <= 16'hd949;
      1448: out3 <= 16'hd935;
      1449: out3 <= 16'hd921;
      1450: out3 <= 16'hd90d;
      1451: out3 <= 16'hd8f9;
      1452: out3 <= 16'hd8e6;
      1453: out3 <= 16'hd8d2;
      1454: out3 <= 16'hd8be;
      1455: out3 <= 16'hd8aa;
      1456: out3 <= 16'hd896;
      1457: out3 <= 16'hd882;
      1458: out3 <= 16'hd86f;
      1459: out3 <= 16'hd85b;
      1460: out3 <= 16'hd847;
      1461: out3 <= 16'hd833;
      1462: out3 <= 16'hd820;
      1463: out3 <= 16'hd80c;
      1464: out3 <= 16'hd7f8;
      1465: out3 <= 16'hd7e5;
      1466: out3 <= 16'hd7d1;
      1467: out3 <= 16'hd7be;
      1468: out3 <= 16'hd7aa;
      1469: out3 <= 16'hd797;
      1470: out3 <= 16'hd783;
      1471: out3 <= 16'hd770;
      1472: out3 <= 16'hd75c;
      1473: out3 <= 16'hd749;
      1474: out3 <= 16'hd736;
      1475: out3 <= 16'hd722;
      1476: out3 <= 16'hd70f;
      1477: out3 <= 16'hd6fc;
      1478: out3 <= 16'hd6e8;
      1479: out3 <= 16'hd6d5;
      1480: out3 <= 16'hd6c2;
      1481: out3 <= 16'hd6af;
      1482: out3 <= 16'hd69b;
      1483: out3 <= 16'hd688;
      1484: out3 <= 16'hd675;
      1485: out3 <= 16'hd662;
      1486: out3 <= 16'hd64f;
      1487: out3 <= 16'hd63c;
      1488: out3 <= 16'hd629;
      1489: out3 <= 16'hd616;
      1490: out3 <= 16'hd603;
      1491: out3 <= 16'hd5f0;
      1492: out3 <= 16'hd5dd;
      1493: out3 <= 16'hd5ca;
      1494: out3 <= 16'hd5b7;
      1495: out3 <= 16'hd5a4;
      1496: out3 <= 16'hd592;
      1497: out3 <= 16'hd57f;
      1498: out3 <= 16'hd56c;
      1499: out3 <= 16'hd559;
      1500: out3 <= 16'hd547;
      1501: out3 <= 16'hd534;
      1502: out3 <= 16'hd521;
      1503: out3 <= 16'hd50e;
      1504: out3 <= 16'hd4fc;
      1505: out3 <= 16'hd4e9;
      1506: out3 <= 16'hd4d7;
      1507: out3 <= 16'hd4c4;
      1508: out3 <= 16'hd4b2;
      1509: out3 <= 16'hd49f;
      1510: out3 <= 16'hd48d;
      1511: out3 <= 16'hd47a;
      1512: out3 <= 16'hd468;
      1513: out3 <= 16'hd455;
      1514: out3 <= 16'hd443;
      1515: out3 <= 16'hd431;
      1516: out3 <= 16'hd41e;
      1517: out3 <= 16'hd40c;
      1518: out3 <= 16'hd3fa;
      1519: out3 <= 16'hd3e8;
      1520: out3 <= 16'hd3d5;
      1521: out3 <= 16'hd3c3;
      1522: out3 <= 16'hd3b1;
      1523: out3 <= 16'hd39f;
      1524: out3 <= 16'hd38d;
      1525: out3 <= 16'hd37b;
      1526: out3 <= 16'hd369;
      1527: out3 <= 16'hd357;
      1528: out3 <= 16'hd345;
      1529: out3 <= 16'hd333;
      1530: out3 <= 16'hd321;
      1531: out3 <= 16'hd30f;
      1532: out3 <= 16'hd2fd;
      1533: out3 <= 16'hd2eb;
      1534: out3 <= 16'hd2d9;
      1535: out3 <= 16'hd2c8;
      1536: out3 <= 16'hd2b6;
      1537: out3 <= 16'hd2a4;
      1538: out3 <= 16'hd292;
      1539: out3 <= 16'hd281;
      1540: out3 <= 16'hd26f;
      1541: out3 <= 16'hd25d;
      1542: out3 <= 16'hd24c;
      1543: out3 <= 16'hd23a;
      1544: out3 <= 16'hd229;
      1545: out3 <= 16'hd217;
      1546: out3 <= 16'hd206;
      1547: out3 <= 16'hd1f4;
      1548: out3 <= 16'hd1e3;
      1549: out3 <= 16'hd1d1;
      1550: out3 <= 16'hd1c0;
      1551: out3 <= 16'hd1af;
      1552: out3 <= 16'hd19d;
      1553: out3 <= 16'hd18c;
      1554: out3 <= 16'hd17b;
      1555: out3 <= 16'hd169;
      1556: out3 <= 16'hd158;
      1557: out3 <= 16'hd147;
      1558: out3 <= 16'hd136;
      1559: out3 <= 16'hd125;
      1560: out3 <= 16'hd114;
      1561: out3 <= 16'hd103;
      1562: out3 <= 16'hd0f2;
      1563: out3 <= 16'hd0e0;
      1564: out3 <= 16'hd0d0;
      1565: out3 <= 16'hd0bf;
      1566: out3 <= 16'hd0ae;
      1567: out3 <= 16'hd09d;
      1568: out3 <= 16'hd08c;
      1569: out3 <= 16'hd07b;
      1570: out3 <= 16'hd06a;
      1571: out3 <= 16'hd059;
      1572: out3 <= 16'hd049;
      1573: out3 <= 16'hd038;
      1574: out3 <= 16'hd027;
      1575: out3 <= 16'hd016;
      1576: out3 <= 16'hd006;
      1577: out3 <= 16'hcff5;
      1578: out3 <= 16'hcfe5;
      1579: out3 <= 16'hcfd4;
      1580: out3 <= 16'hcfc4;
      1581: out3 <= 16'hcfb3;
      1582: out3 <= 16'hcfa3;
      1583: out3 <= 16'hcf92;
      1584: out3 <= 16'hcf82;
      1585: out3 <= 16'hcf71;
      1586: out3 <= 16'hcf61;
      1587: out3 <= 16'hcf51;
      1588: out3 <= 16'hcf40;
      1589: out3 <= 16'hcf30;
      1590: out3 <= 16'hcf20;
      1591: out3 <= 16'hcf10;
      1592: out3 <= 16'hceff;
      1593: out3 <= 16'hceef;
      1594: out3 <= 16'hcedf;
      1595: out3 <= 16'hcecf;
      1596: out3 <= 16'hcebf;
      1597: out3 <= 16'hceaf;
      1598: out3 <= 16'hce9f;
      1599: out3 <= 16'hce8f;
      1600: out3 <= 16'hce7f;
      1601: out3 <= 16'hce6f;
      1602: out3 <= 16'hce5f;
      1603: out3 <= 16'hce4f;
      1604: out3 <= 16'hce40;
      1605: out3 <= 16'hce30;
      1606: out3 <= 16'hce20;
      1607: out3 <= 16'hce10;
      1608: out3 <= 16'hce01;
      1609: out3 <= 16'hcdf1;
      1610: out3 <= 16'hcde1;
      1611: out3 <= 16'hcdd2;
      1612: out3 <= 16'hcdc2;
      1613: out3 <= 16'hcdb2;
      1614: out3 <= 16'hcda3;
      1615: out3 <= 16'hcd93;
      1616: out3 <= 16'hcd84;
      1617: out3 <= 16'hcd75;
      1618: out3 <= 16'hcd65;
      1619: out3 <= 16'hcd56;
      1620: out3 <= 16'hcd46;
      1621: out3 <= 16'hcd37;
      1622: out3 <= 16'hcd28;
      1623: out3 <= 16'hcd19;
      1624: out3 <= 16'hcd09;
      1625: out3 <= 16'hccfa;
      1626: out3 <= 16'hcceb;
      1627: out3 <= 16'hccdc;
      1628: out3 <= 16'hcccd;
      1629: out3 <= 16'hccbe;
      1630: out3 <= 16'hccaf;
      1631: out3 <= 16'hcca0;
      1632: out3 <= 16'hcc91;
      1633: out3 <= 16'hcc82;
      1634: out3 <= 16'hcc73;
      1635: out3 <= 16'hcc64;
      1636: out3 <= 16'hcc55;
      1637: out3 <= 16'hcc46;
      1638: out3 <= 16'hcc38;
      1639: out3 <= 16'hcc29;
      1640: out3 <= 16'hcc1a;
      1641: out3 <= 16'hcc0b;
      1642: out3 <= 16'hcbfd;
      1643: out3 <= 16'hcbee;
      1644: out3 <= 16'hcbe0;
      1645: out3 <= 16'hcbd1;
      1646: out3 <= 16'hcbc2;
      1647: out3 <= 16'hcbb4;
      1648: out3 <= 16'hcba5;
      1649: out3 <= 16'hcb97;
      1650: out3 <= 16'hcb89;
      1651: out3 <= 16'hcb7a;
      1652: out3 <= 16'hcb6c;
      1653: out3 <= 16'hcb5e;
      1654: out3 <= 16'hcb4f;
      1655: out3 <= 16'hcb41;
      1656: out3 <= 16'hcb33;
      1657: out3 <= 16'hcb25;
      1658: out3 <= 16'hcb16;
      1659: out3 <= 16'hcb08;
      1660: out3 <= 16'hcafa;
      1661: out3 <= 16'hcaec;
      1662: out3 <= 16'hcade;
      1663: out3 <= 16'hcad0;
      1664: out3 <= 16'hcac2;
      1665: out3 <= 16'hcab4;
      1666: out3 <= 16'hcaa6;
      1667: out3 <= 16'hca99;
      1668: out3 <= 16'hca8b;
      1669: out3 <= 16'hca7d;
      1670: out3 <= 16'hca6f;
      1671: out3 <= 16'hca61;
      1672: out3 <= 16'hca54;
      1673: out3 <= 16'hca46;
      1674: out3 <= 16'hca38;
      1675: out3 <= 16'hca2b;
      1676: out3 <= 16'hca1d;
      1677: out3 <= 16'hca10;
      1678: out3 <= 16'hca02;
      1679: out3 <= 16'hc9f5;
      1680: out3 <= 16'hc9e7;
      1681: out3 <= 16'hc9da;
      1682: out3 <= 16'hc9cc;
      1683: out3 <= 16'hc9bf;
      1684: out3 <= 16'hc9b2;
      1685: out3 <= 16'hc9a4;
      1686: out3 <= 16'hc997;
      1687: out3 <= 16'hc98a;
      1688: out3 <= 16'hc97d;
      1689: out3 <= 16'hc970;
      1690: out3 <= 16'hc963;
      1691: out3 <= 16'hc955;
      1692: out3 <= 16'hc948;
      1693: out3 <= 16'hc93b;
      1694: out3 <= 16'hc92e;
      1695: out3 <= 16'hc921;
      1696: out3 <= 16'hc915;
      1697: out3 <= 16'hc908;
      1698: out3 <= 16'hc8fb;
      1699: out3 <= 16'hc8ee;
      1700: out3 <= 16'hc8e1;
      1701: out3 <= 16'hc8d4;
      1702: out3 <= 16'hc8c8;
      1703: out3 <= 16'hc8bb;
      1704: out3 <= 16'hc8ae;
      1705: out3 <= 16'hc8a2;
      1706: out3 <= 16'hc895;
      1707: out3 <= 16'hc889;
      1708: out3 <= 16'hc87c;
      1709: out3 <= 16'hc870;
      1710: out3 <= 16'hc863;
      1711: out3 <= 16'hc857;
      1712: out3 <= 16'hc84a;
      1713: out3 <= 16'hc83e;
      1714: out3 <= 16'hc832;
      1715: out3 <= 16'hc825;
      1716: out3 <= 16'hc819;
      1717: out3 <= 16'hc80d;
      1718: out3 <= 16'hc801;
      1719: out3 <= 16'hc7f5;
      1720: out3 <= 16'hc7e8;
      1721: out3 <= 16'hc7dc;
      1722: out3 <= 16'hc7d0;
      1723: out3 <= 16'hc7c4;
      1724: out3 <= 16'hc7b8;
      1725: out3 <= 16'hc7ac;
      1726: out3 <= 16'hc7a0;
      1727: out3 <= 16'hc795;
      1728: out3 <= 16'hc789;
      1729: out3 <= 16'hc77d;
      1730: out3 <= 16'hc771;
      1731: out3 <= 16'hc765;
      1732: out3 <= 16'hc75a;
      1733: out3 <= 16'hc74e;
      1734: out3 <= 16'hc742;
      1735: out3 <= 16'hc737;
      1736: out3 <= 16'hc72b;
      1737: out3 <= 16'hc720;
      1738: out3 <= 16'hc714;
      1739: out3 <= 16'hc709;
      1740: out3 <= 16'hc6fd;
      1741: out3 <= 16'hc6f2;
      1742: out3 <= 16'hc6e6;
      1743: out3 <= 16'hc6db;
      1744: out3 <= 16'hc6d0;
      1745: out3 <= 16'hc6c5;
      1746: out3 <= 16'hc6b9;
      1747: out3 <= 16'hc6ae;
      1748: out3 <= 16'hc6a3;
      1749: out3 <= 16'hc698;
      1750: out3 <= 16'hc68d;
      1751: out3 <= 16'hc682;
      1752: out3 <= 16'hc677;
      1753: out3 <= 16'hc66c;
      1754: out3 <= 16'hc661;
      1755: out3 <= 16'hc656;
      1756: out3 <= 16'hc64b;
      1757: out3 <= 16'hc640;
      1758: out3 <= 16'hc635;
      1759: out3 <= 16'hc62a;
      1760: out3 <= 16'hc620;
      1761: out3 <= 16'hc615;
      1762: out3 <= 16'hc60a;
      1763: out3 <= 16'hc600;
      1764: out3 <= 16'hc5f5;
      1765: out3 <= 16'hc5ea;
      1766: out3 <= 16'hc5e0;
      1767: out3 <= 16'hc5d5;
      1768: out3 <= 16'hc5cb;
      1769: out3 <= 16'hc5c1;
      1770: out3 <= 16'hc5b6;
      1771: out3 <= 16'hc5ac;
      1772: out3 <= 16'hc5a1;
      1773: out3 <= 16'hc597;
      1774: out3 <= 16'hc58d;
      1775: out3 <= 16'hc583;
      1776: out3 <= 16'hc578;
      1777: out3 <= 16'hc56e;
      1778: out3 <= 16'hc564;
      1779: out3 <= 16'hc55a;
      1780: out3 <= 16'hc550;
      1781: out3 <= 16'hc546;
      1782: out3 <= 16'hc53c;
      1783: out3 <= 16'hc532;
      1784: out3 <= 16'hc528;
      1785: out3 <= 16'hc51e;
      1786: out3 <= 16'hc515;
      1787: out3 <= 16'hc50b;
      1788: out3 <= 16'hc501;
      1789: out3 <= 16'hc4f7;
      1790: out3 <= 16'hc4ee;
      1791: out3 <= 16'hc4e4;
      1792: out3 <= 16'hc4da;
      1793: out3 <= 16'hc4d1;
      1794: out3 <= 16'hc4c7;
      1795: out3 <= 16'hc4be;
      1796: out3 <= 16'hc4b4;
      1797: out3 <= 16'hc4ab;
      1798: out3 <= 16'hc4a1;
      1799: out3 <= 16'hc498;
      1800: out3 <= 16'hc48f;
      1801: out3 <= 16'hc485;
      1802: out3 <= 16'hc47c;
      1803: out3 <= 16'hc473;
      1804: out3 <= 16'hc46a;
      1805: out3 <= 16'hc461;
      1806: out3 <= 16'hc457;
      1807: out3 <= 16'hc44e;
      1808: out3 <= 16'hc445;
      1809: out3 <= 16'hc43c;
      1810: out3 <= 16'hc433;
      1811: out3 <= 16'hc42a;
      1812: out3 <= 16'hc422;
      1813: out3 <= 16'hc419;
      1814: out3 <= 16'hc410;
      1815: out3 <= 16'hc407;
      1816: out3 <= 16'hc3fe;
      1817: out3 <= 16'hc3f6;
      1818: out3 <= 16'hc3ed;
      1819: out3 <= 16'hc3e4;
      1820: out3 <= 16'hc3dc;
      1821: out3 <= 16'hc3d3;
      1822: out3 <= 16'hc3ca;
      1823: out3 <= 16'hc3c2;
      1824: out3 <= 16'hc3ba;
      1825: out3 <= 16'hc3b1;
      1826: out3 <= 16'hc3a9;
      1827: out3 <= 16'hc3a0;
      1828: out3 <= 16'hc398;
      1829: out3 <= 16'hc390;
      1830: out3 <= 16'hc387;
      1831: out3 <= 16'hc37f;
      1832: out3 <= 16'hc377;
      1833: out3 <= 16'hc36f;
      1834: out3 <= 16'hc367;
      1835: out3 <= 16'hc35f;
      1836: out3 <= 16'hc357;
      1837: out3 <= 16'hc34f;
      1838: out3 <= 16'hc347;
      1839: out3 <= 16'hc33f;
      1840: out3 <= 16'hc337;
      1841: out3 <= 16'hc32f;
      1842: out3 <= 16'hc327;
      1843: out3 <= 16'hc320;
      1844: out3 <= 16'hc318;
      1845: out3 <= 16'hc310;
      1846: out3 <= 16'hc308;
      1847: out3 <= 16'hc301;
      1848: out3 <= 16'hc2f9;
      1849: out3 <= 16'hc2f2;
      1850: out3 <= 16'hc2ea;
      1851: out3 <= 16'hc2e3;
      1852: out3 <= 16'hc2db;
      1853: out3 <= 16'hc2d4;
      1854: out3 <= 16'hc2cc;
      1855: out3 <= 16'hc2c5;
      1856: out3 <= 16'hc2be;
      1857: out3 <= 16'hc2b7;
      1858: out3 <= 16'hc2af;
      1859: out3 <= 16'hc2a8;
      1860: out3 <= 16'hc2a1;
      1861: out3 <= 16'hc29a;
      1862: out3 <= 16'hc293;
      1863: out3 <= 16'hc28c;
      1864: out3 <= 16'hc285;
      1865: out3 <= 16'hc27e;
      1866: out3 <= 16'hc277;
      1867: out3 <= 16'hc270;
      1868: out3 <= 16'hc269;
      1869: out3 <= 16'hc262;
      1870: out3 <= 16'hc25c;
      1871: out3 <= 16'hc255;
      1872: out3 <= 16'hc24e;
      1873: out3 <= 16'hc247;
      1874: out3 <= 16'hc241;
      1875: out3 <= 16'hc23a;
      1876: out3 <= 16'hc234;
      1877: out3 <= 16'hc22d;
      1878: out3 <= 16'hc227;
      1879: out3 <= 16'hc220;
      1880: out3 <= 16'hc21a;
      1881: out3 <= 16'hc213;
      1882: out3 <= 16'hc20d;
      1883: out3 <= 16'hc207;
      1884: out3 <= 16'hc201;
      1885: out3 <= 16'hc1fa;
      1886: out3 <= 16'hc1f4;
      1887: out3 <= 16'hc1ee;
      1888: out3 <= 16'hc1e8;
      1889: out3 <= 16'hc1e2;
      1890: out3 <= 16'hc1dc;
      1891: out3 <= 16'hc1d6;
      1892: out3 <= 16'hc1d0;
      1893: out3 <= 16'hc1ca;
      1894: out3 <= 16'hc1c4;
      1895: out3 <= 16'hc1be;
      1896: out3 <= 16'hc1b8;
      1897: out3 <= 16'hc1b3;
      1898: out3 <= 16'hc1ad;
      1899: out3 <= 16'hc1a7;
      1900: out3 <= 16'hc1a2;
      1901: out3 <= 16'hc19c;
      1902: out3 <= 16'hc196;
      1903: out3 <= 16'hc191;
      1904: out3 <= 16'hc18b;
      1905: out3 <= 16'hc186;
      1906: out3 <= 16'hc180;
      1907: out3 <= 16'hc17b;
      1908: out3 <= 16'hc176;
      1909: out3 <= 16'hc170;
      1910: out3 <= 16'hc16b;
      1911: out3 <= 16'hc166;
      1912: out3 <= 16'hc161;
      1913: out3 <= 16'hc15b;
      1914: out3 <= 16'hc156;
      1915: out3 <= 16'hc151;
      1916: out3 <= 16'hc14c;
      1917: out3 <= 16'hc147;
      1918: out3 <= 16'hc142;
      1919: out3 <= 16'hc13d;
      1920: out3 <= 16'hc138;
      1921: out3 <= 16'hc134;
      1922: out3 <= 16'hc12f;
      1923: out3 <= 16'hc12a;
      1924: out3 <= 16'hc125;
      1925: out3 <= 16'hc120;
      1926: out3 <= 16'hc11c;
      1927: out3 <= 16'hc117;
      1928: out3 <= 16'hc113;
      1929: out3 <= 16'hc10e;
      1930: out3 <= 16'hc109;
      1931: out3 <= 16'hc105;
      1932: out3 <= 16'hc100;
      1933: out3 <= 16'hc0fc;
      1934: out3 <= 16'hc0f8;
      1935: out3 <= 16'hc0f3;
      1936: out3 <= 16'hc0ef;
      1937: out3 <= 16'hc0eb;
      1938: out3 <= 16'hc0e7;
      1939: out3 <= 16'hc0e2;
      1940: out3 <= 16'hc0de;
      1941: out3 <= 16'hc0da;
      1942: out3 <= 16'hc0d6;
      1943: out3 <= 16'hc0d2;
      1944: out3 <= 16'hc0ce;
      1945: out3 <= 16'hc0ca;
      1946: out3 <= 16'hc0c6;
      1947: out3 <= 16'hc0c2;
      1948: out3 <= 16'hc0be;
      1949: out3 <= 16'hc0bb;
      1950: out3 <= 16'hc0b7;
      1951: out3 <= 16'hc0b3;
      1952: out3 <= 16'hc0af;
      1953: out3 <= 16'hc0ac;
      1954: out3 <= 16'hc0a8;
      1955: out3 <= 16'hc0a5;
      1956: out3 <= 16'hc0a1;
      1957: out3 <= 16'hc09e;
      1958: out3 <= 16'hc09a;
      1959: out3 <= 16'hc097;
      1960: out3 <= 16'hc093;
      1961: out3 <= 16'hc090;
      1962: out3 <= 16'hc08d;
      1963: out3 <= 16'hc089;
      1964: out3 <= 16'hc086;
      1965: out3 <= 16'hc083;
      1966: out3 <= 16'hc080;
      1967: out3 <= 16'hc07d;
      1968: out3 <= 16'hc07a;
      1969: out3 <= 16'hc077;
      1970: out3 <= 16'hc074;
      1971: out3 <= 16'hc071;
      1972: out3 <= 16'hc06e;
      1973: out3 <= 16'hc06b;
      1974: out3 <= 16'hc068;
      1975: out3 <= 16'hc065;
      1976: out3 <= 16'hc062;
      1977: out3 <= 16'hc060;
      1978: out3 <= 16'hc05d;
      1979: out3 <= 16'hc05a;
      1980: out3 <= 16'hc058;
      1981: out3 <= 16'hc055;
      1982: out3 <= 16'hc053;
      1983: out3 <= 16'hc050;
      1984: out3 <= 16'hc04e;
      1985: out3 <= 16'hc04b;
      1986: out3 <= 16'hc049;
      1987: out3 <= 16'hc047;
      1988: out3 <= 16'hc044;
      1989: out3 <= 16'hc042;
      1990: out3 <= 16'hc040;
      1991: out3 <= 16'hc03d;
      1992: out3 <= 16'hc03b;
      1993: out3 <= 16'hc039;
      1994: out3 <= 16'hc037;
      1995: out3 <= 16'hc035;
      1996: out3 <= 16'hc033;
      1997: out3 <= 16'hc031;
      1998: out3 <= 16'hc02f;
      1999: out3 <= 16'hc02d;
      2000: out3 <= 16'hc02b;
      2001: out3 <= 16'hc02a;
      2002: out3 <= 16'hc028;
      2003: out3 <= 16'hc026;
      2004: out3 <= 16'hc024;
      2005: out3 <= 16'hc023;
      2006: out3 <= 16'hc021;
      2007: out3 <= 16'hc020;
      2008: out3 <= 16'hc01e;
      2009: out3 <= 16'hc01d;
      2010: out3 <= 16'hc01b;
      2011: out3 <= 16'hc01a;
      2012: out3 <= 16'hc018;
      2013: out3 <= 16'hc017;
      2014: out3 <= 16'hc016;
      2015: out3 <= 16'hc014;
      2016: out3 <= 16'hc013;
      2017: out3 <= 16'hc012;
      2018: out3 <= 16'hc011;
      2019: out3 <= 16'hc010;
      2020: out3 <= 16'hc00f;
      2021: out3 <= 16'hc00e;
      2022: out3 <= 16'hc00d;
      2023: out3 <= 16'hc00c;
      2024: out3 <= 16'hc00b;
      2025: out3 <= 16'hc00a;
      2026: out3 <= 16'hc009;
      2027: out3 <= 16'hc008;
      2028: out3 <= 16'hc007;
      2029: out3 <= 16'hc007;
      2030: out3 <= 16'hc006;
      2031: out3 <= 16'hc005;
      2032: out3 <= 16'hc005;
      2033: out3 <= 16'hc004;
      2034: out3 <= 16'hc004;
      2035: out3 <= 16'hc003;
      2036: out3 <= 16'hc003;
      2037: out3 <= 16'hc002;
      2038: out3 <= 16'hc002;
      2039: out3 <= 16'hc001;
      2040: out3 <= 16'hc001;
      2041: out3 <= 16'hc001;
      2042: out3 <= 16'hc001;
      2043: out3 <= 16'hc000;
      2044: out3 <= 16'hc000;
      2045: out3 <= 16'hc000;
      2046: out3 <= 16'hc000;
      2047: out3 <= 16'hc000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock104022(clk, reset, next_in, next_out,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [10:0] i1_in;
   reg [10:0] i1;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(7, 1) shiftFIFO_123403(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a105;
   wire signed [15:0] a82;
   wire signed [15:0] a108;
   wire signed [15:0] a86;
   wire signed [15:0] a109;
   wire signed [15:0] a110;
   wire signed [15:0] a113;
   wire signed [15:0] a94;
   wire signed [15:0] a116;
   wire signed [15:0] a98;
   wire signed [15:0] a117;
   wire signed [15:0] a118;
   reg signed [15:0] tm656;
   reg signed [15:0] tm660;
   reg signed [15:0] tm672;
   reg signed [15:0] tm676;
   reg signed [15:0] tm688;
   reg signed [15:0] tm695;
   reg signed [15:0] tm702;
   reg signed [15:0] tm709;
   reg signed [15:0] tm657;
   reg signed [15:0] tm661;
   reg signed [15:0] tm673;
   reg signed [15:0] tm677;
   reg signed [15:0] tm689;
   reg signed [15:0] tm696;
   reg signed [15:0] tm703;
   reg signed [15:0] tm710;
   wire signed [15:0] tm42;
   wire signed [15:0] a87;
   wire signed [15:0] tm43;
   wire signed [15:0] a89;
   wire signed [15:0] tm46;
   wire signed [15:0] a99;
   wire signed [15:0] tm47;
   wire signed [15:0] a101;
   reg signed [15:0] tm658;
   reg signed [15:0] tm662;
   reg signed [15:0] tm674;
   reg signed [15:0] tm678;
   reg signed [15:0] tm690;
   reg signed [15:0] tm697;
   reg signed [15:0] tm704;
   reg signed [15:0] tm711;
   reg signed [15:0] tm132;
   reg signed [15:0] tm133;
   reg signed [15:0] tm140;
   reg signed [15:0] tm141;
   reg signed [15:0] tm659;
   reg signed [15:0] tm663;
   reg signed [15:0] tm675;
   reg signed [15:0] tm679;
   reg signed [15:0] tm691;
   reg signed [15:0] tm698;
   reg signed [15:0] tm705;
   reg signed [15:0] tm712;
   reg signed [15:0] tm692;
   reg signed [15:0] tm699;
   reg signed [15:0] tm706;
   reg signed [15:0] tm713;
   wire signed [15:0] a88;
   wire signed [15:0] a90;
   wire signed [15:0] a91;
   wire signed [15:0] a92;
   wire signed [15:0] a100;
   wire signed [15:0] a102;
   wire signed [15:0] a103;
   wire signed [15:0] a104;
   reg signed [15:0] tm693;
   reg signed [15:0] tm700;
   reg signed [15:0] tm707;
   reg signed [15:0] tm714;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   reg signed [15:0] tm694;
   reg signed [15:0] tm701;
   reg signed [15:0] tm708;
   reg signed [15:0] tm715;


   assign a105 = X0;
   assign a82 = a105;
   assign a108 = X1;
   assign a86 = a108;
   assign a109 = X2;
   assign a110 = X3;
   assign a113 = X4;
   assign a94 = a113;
   assign a116 = X5;
   assign a98 = a116;
   assign a117 = X6;
   assign a118 = X7;
   assign a87 = tm42;
   assign a89 = tm43;
   assign a99 = tm46;
   assign a101 = tm47;
   assign Y0 = tm694;
   assign Y1 = tm701;
   assign Y4 = tm708;
   assign Y5 = tm715;

   D6_106392 instD6inst0_106392(.addr(i1[10:0]), .out(tm43), .clk(clk));

   D2_108442 instD2inst0_108442(.addr(i1[10:0]), .out(tm42), .clk(clk));

   D8_110492 instD8inst0_110492(.addr(i1[10:0]), .out(tm47), .clk(clk));

   D4_112542 instD4inst0_112542(.addr(i1[10:0]), .out(tm46), .clk(clk));

    multfix #(16, 2) m104121(.a(tm132), .b(tm659), .clk(clk), .q_sc(a88), .q_unsc(), .rst(reset));
    multfix #(16, 2) m104143(.a(tm133), .b(tm663), .clk(clk), .q_sc(a90), .q_unsc(), .rst(reset));
    multfix #(16, 2) m104161(.a(tm133), .b(tm659), .clk(clk), .q_sc(a91), .q_unsc(), .rst(reset));
    multfix #(16, 2) m104172(.a(tm132), .b(tm663), .clk(clk), .q_sc(a92), .q_unsc(), .rst(reset));
    multfix #(16, 2) m104281(.a(tm140), .b(tm675), .clk(clk), .q_sc(a100), .q_unsc(), .rst(reset));
    multfix #(16, 2) m104303(.a(tm141), .b(tm679), .clk(clk), .q_sc(a102), .q_unsc(), .rst(reset));
    multfix #(16, 2) m104321(.a(tm141), .b(tm675), .clk(clk), .q_sc(a103), .q_unsc(), .rst(reset));
    multfix #(16, 2) m104332(.a(tm140), .b(tm679), .clk(clk), .q_sc(a104), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub104150(.a(a88), .b(a90), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add104179(.a(a91), .b(a92), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub104310(.a(a100), .b(a102), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add104339(.a(a103), .b(a104), .clk(clk), .q(Y7));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm132 <= 0;
         tm659 <= 0;
         tm133 <= 0;
         tm663 <= 0;
         tm133 <= 0;
         tm659 <= 0;
         tm132 <= 0;
         tm663 <= 0;
         tm140 <= 0;
         tm675 <= 0;
         tm141 <= 0;
         tm679 <= 0;
         tm141 <= 0;
         tm675 <= 0;
         tm140 <= 0;
         tm679 <= 0;
      end
      else begin
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
         tm656 <= a109;
         tm660 <= a110;
         tm672 <= a117;
         tm676 <= a118;
         tm688 <= a82;
         tm695 <= a86;
         tm702 <= a94;
         tm709 <= a98;
         tm657 <= tm656;
         tm661 <= tm660;
         tm673 <= tm672;
         tm677 <= tm676;
         tm689 <= tm688;
         tm696 <= tm695;
         tm703 <= tm702;
         tm710 <= tm709;
         tm658 <= tm657;
         tm662 <= tm661;
         tm674 <= tm673;
         tm678 <= tm677;
         tm690 <= tm689;
         tm697 <= tm696;
         tm704 <= tm703;
         tm711 <= tm710;
         tm132 <= a87;
         tm133 <= a89;
         tm140 <= a99;
         tm141 <= a101;
         tm659 <= tm658;
         tm663 <= tm662;
         tm675 <= tm674;
         tm679 <= tm678;
         tm691 <= tm690;
         tm698 <= tm697;
         tm705 <= tm704;
         tm712 <= tm711;
         tm692 <= tm691;
         tm699 <= tm698;
         tm706 <= tm705;
         tm713 <= tm712;
         tm693 <= tm692;
         tm700 <= tm699;
         tm707 <= tm706;
         tm714 <= tm713;
         tm694 <= tm693;
         tm701 <= tm700;
         tm708 <= tm707;
         tm715 <= tm714;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock120746(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(1, 1) shiftFIFO_123406(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a17;
   wire signed [15:0] a18;
   wire signed [15:0] a19;
   wire signed [15:0] a20;
   wire signed [15:0] a25;
   wire signed [15:0] a26;
   wire signed [15:0] a27;
   wire signed [15:0] a28;
   wire signed [16:0] tm338;
   wire signed [16:0] tm339;
   wire signed [16:0] tm340;
   wire signed [16:0] tm341;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [16:0] tm342;
   wire signed [16:0] tm343;
   wire signed [16:0] tm344;
   wire signed [16:0] tm345;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t49;
   wire signed [15:0] t50;
   wire signed [15:0] t51;
   wire signed [15:0] t52;
   wire signed [15:0] t53;
   wire signed [15:0] t54;
   wire signed [15:0] t55;
   wire signed [15:0] t56;


   assign a17 = X0;
   assign a18 = X2;
   assign a19 = X1;
   assign a20 = X3;
   assign a25 = X4;
   assign a26 = X6;
   assign a27 = X5;
   assign a28 = X7;
   assign Y0 = t49;
   assign Y1 = t50;
   assign Y2 = t51;
   assign Y3 = t52;
   assign Y4 = t53;
   assign Y5 = t54;
   assign Y6 = t55;
   assign Y7 = t56;
   assign t49 = tm338[16:1];
   assign t50 = tm339[16:1];
   assign t51 = tm340[16:1];
   assign t52 = tm341[16:1];
   assign t53 = tm342[16:1];
   assign t54 = tm343[16:1];
   assign t55 = tm344[16:1];
   assign t56 = tm345[16:1];

    addfxp #(17, 1) add120758(.a({{1{a17[15]}}, a17}), .b({{1{a18[15]}}, a18}), .clk(clk), .q(tm338));    // 0
    addfxp #(17, 1) add120773(.a({{1{a19[15]}}, a19}), .b({{1{a20[15]}}, a20}), .clk(clk), .q(tm339));    // 0
    subfxp #(17, 1) sub120788(.a({{1{a17[15]}}, a17}), .b({{1{a18[15]}}, a18}), .clk(clk), .q(tm340));    // 0
    subfxp #(17, 1) sub120803(.a({{1{a19[15]}}, a19}), .b({{1{a20[15]}}, a20}), .clk(clk), .q(tm341));    // 0
    addfxp #(17, 1) add120834(.a({{1{a25[15]}}, a25}), .b({{1{a26[15]}}, a26}), .clk(clk), .q(tm342));    // 0
    addfxp #(17, 1) add120849(.a({{1{a27[15]}}, a27}), .b({{1{a28[15]}}, a28}), .clk(clk), .q(tm343));    // 0
    subfxp #(17, 1) sub120864(.a({{1{a25[15]}}, a25}), .b({{1{a26[15]}}, a26}), .clk(clk), .q(tm344));    // 0
    subfxp #(17, 1) sub120879(.a({{1{a27[15]}}, a27}), .b({{1{a28[15]}}, a28}), .clk(clk), .q(tm345));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 1027
// Gap: 2048
module rc120903(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];

   perm120901 instPerm123407(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 1027
// Gap: 2048
module perm120901(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 2048;
   parameter logDepth = 11;
   parameter width = 32;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 2'd0};
   assign    addr0b = {outCount, 2'd0};
   assign    addr0c = {outCount_for_rd_addr, 2'd0};
   assign    addr1 = {inCount, 2'd1};
   assign    addr1b = {outCount, 2'd1};
   assign    addr1c = {outCount_for_rd_addr, 2'd1};
   assign    addr2 = {inCount, 2'd2};
   assign    addr2b = {outCount, 2'd2};
   assign    addr2c = {outCount_for_rd_addr, 2'd2};
   assign    addr3 = {inCount, 2'd3};
   assign    addr3b = {outCount, 2'd3};
   assign    addr3c = {outCount_for_rd_addr, 2'd3};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_1_0, w_1_1, w_1_2, w_1_3;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_1_0, u_1_1, u_1_2, u_1_3;

    always @(posedge clk) begin
    end

   assign inBank0[0] = addr0[1];
   assign inBank0[1] = addr0[2] ^ addr0[0];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[6];
   assign inAddr0[4] = addr0[7];
   assign inAddr0[5] = addr0[8];
   assign inAddr0[6] = addr0[9];
   assign inAddr0[7] = addr0[10];
   assign inAddr0[8] = addr0[11];
   assign inAddr0[9] = addr0[12];
   assign inAddr0[10] = addr0[0];
   assign outBank0[0] = addr0b[0];
   assign outBank0[1] = addr0b[12] ^ addr0b[1];
   assign outAddr0[0] = addr0b[2];
   assign outAddr0[1] = addr0b[3];
   assign outAddr0[2] = addr0b[4];
   assign outAddr0[3] = addr0b[5];
   assign outAddr0[4] = addr0b[6];
   assign outAddr0[5] = addr0b[7];
   assign outAddr0[6] = addr0b[8];
   assign outAddr0[7] = addr0b[9];
   assign outAddr0[8] = addr0b[10];
   assign outAddr0[9] = addr0b[11];
   assign outAddr0[10] = addr0b[12];
   assign outBank_a0[0] = addr0c[0];
   assign outBank_a0[1] = addr0c[12] ^ addr0c[1];
   assign outAddr_a0[0] = addr0c[2];
   assign outAddr_a0[1] = addr0c[3];
   assign outAddr_a0[2] = addr0c[4];
   assign outAddr_a0[3] = addr0c[5];
   assign outAddr_a0[4] = addr0c[6];
   assign outAddr_a0[5] = addr0c[7];
   assign outAddr_a0[6] = addr0c[8];
   assign outAddr_a0[7] = addr0c[9];
   assign outAddr_a0[8] = addr0c[10];
   assign outAddr_a0[9] = addr0c[11];
   assign outAddr_a0[10] = addr0c[12];

   assign inBank1[0] = addr1[1];
   assign inBank1[1] = addr1[2] ^ addr1[0];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[6];
   assign inAddr1[4] = addr1[7];
   assign inAddr1[5] = addr1[8];
   assign inAddr1[6] = addr1[9];
   assign inAddr1[7] = addr1[10];
   assign inAddr1[8] = addr1[11];
   assign inAddr1[9] = addr1[12];
   assign inAddr1[10] = addr1[0];
   assign outBank1[0] = addr1b[0];
   assign outBank1[1] = addr1b[12] ^ addr1b[1];
   assign outAddr1[0] = addr1b[2];
   assign outAddr1[1] = addr1b[3];
   assign outAddr1[2] = addr1b[4];
   assign outAddr1[3] = addr1b[5];
   assign outAddr1[4] = addr1b[6];
   assign outAddr1[5] = addr1b[7];
   assign outAddr1[6] = addr1b[8];
   assign outAddr1[7] = addr1b[9];
   assign outAddr1[8] = addr1b[10];
   assign outAddr1[9] = addr1b[11];
   assign outAddr1[10] = addr1b[12];
   assign outBank_a1[0] = addr1c[0];
   assign outBank_a1[1] = addr1c[12] ^ addr1c[1];
   assign outAddr_a1[0] = addr1c[2];
   assign outAddr_a1[1] = addr1c[3];
   assign outAddr_a1[2] = addr1c[4];
   assign outAddr_a1[3] = addr1c[5];
   assign outAddr_a1[4] = addr1c[6];
   assign outAddr_a1[5] = addr1c[7];
   assign outAddr_a1[6] = addr1c[8];
   assign outAddr_a1[7] = addr1c[9];
   assign outAddr_a1[8] = addr1c[10];
   assign outAddr_a1[9] = addr1c[11];
   assign outAddr_a1[10] = addr1c[12];

   assign inBank2[0] = addr2[1];
   assign inBank2[1] = addr2[2] ^ addr2[0];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[5];
   assign inAddr2[3] = addr2[6];
   assign inAddr2[4] = addr2[7];
   assign inAddr2[5] = addr2[8];
   assign inAddr2[6] = addr2[9];
   assign inAddr2[7] = addr2[10];
   assign inAddr2[8] = addr2[11];
   assign inAddr2[9] = addr2[12];
   assign inAddr2[10] = addr2[0];
   assign outBank2[0] = addr2b[0];
   assign outBank2[1] = addr2b[12] ^ addr2b[1];
   assign outAddr2[0] = addr2b[2];
   assign outAddr2[1] = addr2b[3];
   assign outAddr2[2] = addr2b[4];
   assign outAddr2[3] = addr2b[5];
   assign outAddr2[4] = addr2b[6];
   assign outAddr2[5] = addr2b[7];
   assign outAddr2[6] = addr2b[8];
   assign outAddr2[7] = addr2b[9];
   assign outAddr2[8] = addr2b[10];
   assign outAddr2[9] = addr2b[11];
   assign outAddr2[10] = addr2b[12];
   assign outBank_a2[0] = addr2c[0];
   assign outBank_a2[1] = addr2c[12] ^ addr2c[1];
   assign outAddr_a2[0] = addr2c[2];
   assign outAddr_a2[1] = addr2c[3];
   assign outAddr_a2[2] = addr2c[4];
   assign outAddr_a2[3] = addr2c[5];
   assign outAddr_a2[4] = addr2c[6];
   assign outAddr_a2[5] = addr2c[7];
   assign outAddr_a2[6] = addr2c[8];
   assign outAddr_a2[7] = addr2c[9];
   assign outAddr_a2[8] = addr2c[10];
   assign outAddr_a2[9] = addr2c[11];
   assign outAddr_a2[10] = addr2c[12];

   assign inBank3[0] = addr3[1];
   assign inBank3[1] = addr3[2] ^ addr3[0];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[5];
   assign inAddr3[3] = addr3[6];
   assign inAddr3[4] = addr3[7];
   assign inAddr3[5] = addr3[8];
   assign inAddr3[6] = addr3[9];
   assign inAddr3[7] = addr3[10];
   assign inAddr3[8] = addr3[11];
   assign inAddr3[9] = addr3[12];
   assign inAddr3[10] = addr3[0];
   assign outBank3[0] = addr3b[0];
   assign outBank3[1] = addr3b[12] ^ addr3b[1];
   assign outAddr3[0] = addr3b[2];
   assign outAddr3[1] = addr3b[3];
   assign outAddr3[2] = addr3b[4];
   assign outAddr3[3] = addr3b[5];
   assign outAddr3[4] = addr3b[6];
   assign outAddr3[5] = addr3b[7];
   assign outAddr3[6] = addr3b[8];
   assign outAddr3[7] = addr3b[9];
   assign outAddr3[8] = addr3b[10];
   assign outAddr3[9] = addr3b[11];
   assign outAddr3[10] = addr3b[12];
   assign outBank_a3[0] = addr3c[0];
   assign outBank_a3[1] = addr3c[12] ^ addr3c[1];
   assign outAddr_a3[0] = addr3c[2];
   assign outAddr_a3[1] = addr3c[3];
   assign outAddr_a3[2] = addr3c[4];
   assign outAddr_a3[3] = addr3c[5];
   assign outAddr_a3[4] = addr3c[6];
   assign outAddr_a3[5] = addr3c[7];
   assign outAddr_a3[6] = addr3c[8];
   assign outAddr_a3[7] = addr3c[9];
   assign outAddr_a3[8] = addr3c[10];
   assign outAddr_a3[9] = addr3c[11];
   assign outAddr_a3[10] = addr3c[12];

   nextReg #(1025, 11) nextReg_123412(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(2, 1) shiftFIFO_123415(.X(next0), .Y(next_out), .clk(clk));


   memArray8192_120901 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip0), .outFlip(outFlip0), .next(next), .reset(reset),
        .x0(w_1_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_1_0[logDepth-1:0]),
        .outAddr0(u_1_0), 
        .x1(w_1_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_1_1[logDepth-1:0]),
        .outAddr1(u_1_1), 
        .x2(w_1_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_1_2[logDepth-1:0]),
        .outAddr2(u_1_2), 
        .x3(w_1_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_1_3[logDepth-1:0]),
        .outAddr3(u_1_3), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 1024)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 1026)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
         if (inCount == 1024) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 2047) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 1024)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_2 = {x1, inAddr1};
    assign w_0_1 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign y0 = z_1_0;
    assign y1 = z_1_1;
    assign y2 = z_1_2;
    assign y3 = z_1_3;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[0];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_2), .y0(w_1_0), .y1(w_1_2), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_3), .y0(w_1_1), .y1(w_1_3), .ctrl(wr_ctrl_st_0));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[10];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_2), .y0(z_1_0), .y1(z_1_2), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_3), .y0(z_1_1), .y1(z_1_3), .ctrl(rdd_ctrl_st_0));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[10];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_2), .y0(u_1_0), .y1(u_1_2), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_3), .y0(u_1_1), .y1(u_1_3), .ctrl(rda_ctrl_st_0));
endmodule

module memArray8192_120901(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                clk, inFlip, outFlip);

   parameter numBanks = 4;
   parameter logBanks = 2;
   parameter depth = 2048;
   parameter logDepth = 11;
   parameter width = 32;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   nextReg #(2048, 11) nextReg_123420(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
endmodule


						module multfix(clk, rst, a, b, q_sc, q_unsc);
						   parameter WIDTH=35, CYCLES=6;

						   input signed [WIDTH-1:0]    a,b;
						   output [WIDTH-1:0]          q_sc;
						   output [WIDTH-1:0]              q_unsc;

						   input                       clk, rst;
						   
						   reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
						   wire signed [2*WIDTH-1:0]   res;   
						   integer                     i;

						   assign                      res = q[CYCLES-1];   
						   
						   assign                      q_unsc = res[WIDTH-1:0];
						   assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
						      
						   always @(posedge clk) begin
						      q[0] <= a * b;
						      for (i = 1; i < CYCLES; i=i+1) begin
						         q[i] <= q[i-1];
						      end
						   end
						                  
						endmodule 
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule
