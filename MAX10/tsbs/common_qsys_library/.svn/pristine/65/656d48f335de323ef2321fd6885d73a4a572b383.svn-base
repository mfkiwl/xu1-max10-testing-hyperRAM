// tse_w_sfp_tse.v

// Generated using ACDS version 14.1 190 at 2016.05.18.13:46:23

`timescale 1 ps / 1 ps
module tse_w_sfp_tse (
		output wire        avalon_slave_waitrequest,                      //                      avalon_slave.waitrequest
		output wire [31:0] avalon_slave_readdata,                         //                                  .readdata
		output wire        avalon_slave_readdatavalid,                    //                                  .readdatavalid
		input  wire [2:0]  avalon_slave_burstcount,                       //                                  .burstcount
		input  wire [31:0] avalon_slave_writedata,                        //                                  .writedata
		input  wire [12:0] avalon_slave_address,                          //                                  .address
		input  wire        avalon_slave_write,                            //                                  .write
		input  wire        avalon_slave_read,                             //                                  .read
		input  wire [3:0]  avalon_slave_byteenable,                       //                                  .byteenable
		input  wire        avalon_slave_debugaccess,                      //                                  .debugaccess
		input  wire        clk_100_clk,                                   //                           clk_100.clk
		input  wire        clk_50_clk,                                    //                            clk_50.clk
		input  wire        reset_100_reset_n,                             //                         reset_100.reset_n
		input  wire        reset_50_reset_n,                              //                          reset_50.reset_n
		output wire        sgdma_rx_csr_irq_irq,                          //                  sgdma_rx_csr_irq.irq
		input  wire        sgdma_rx_m_write_waitrequest,                  //                  sgdma_rx_m_write.waitrequest
		output wire [31:0] sgdma_rx_m_write_address,                      //                                  .address
		output wire        sgdma_rx_m_write_write,                        //                                  .write
		output wire [31:0] sgdma_rx_m_write_writedata,                    //                                  .writedata
		output wire [3:0]  sgdma_rx_m_write_byteenable,                   //                                  .byteenable
		output wire        sgdma_tx_csr_irq_irq,                          //                  sgdma_tx_csr_irq.irq
		input  wire [31:0] sgdma_tx_m_read_readdata,                      //                   sgdma_tx_m_read.readdata
		input  wire        sgdma_tx_m_read_readdatavalid,                 //                                  .readdatavalid
		input  wire        sgdma_tx_m_read_waitrequest,                   //                                  .waitrequest
		output wire [31:0] sgdma_tx_m_read_address,                       //                                  .address
		output wire        sgdma_tx_m_read_read,                          //                                  .read
		output wire [31:0] sgdma_tx_out_data,                             //                      sgdma_tx_out.data
		output wire        sgdma_tx_out_valid,                            //                                  .valid
		input  wire        sgdma_tx_out_ready,                            //                                  .ready
		output wire        sgdma_tx_out_endofpacket,                      //                                  .endofpacket
		output wire        sgdma_tx_out_startofpacket,                    //                                  .startofpacket
		output wire [1:0]  sgdma_tx_out_empty,                            //                                  .empty
		output wire        tse_mac_mac_mdio_connection_mdc,               //       tse_mac_mac_mdio_connection.mdc
		input  wire        tse_mac_mac_mdio_connection_mdio_in,           //                                  .mdio_in
		output wire        tse_mac_mac_mdio_connection_mdio_out,          //                                  .mdio_out
		output wire        tse_mac_mac_mdio_connection_mdio_oen,          //                                  .mdio_oen
		input  wire        tse_mac_mac_misc_connection_xon_gen,           //       tse_mac_mac_misc_connection.xon_gen
		input  wire        tse_mac_mac_misc_connection_xoff_gen,          //                                  .xoff_gen
		input  wire        tse_mac_mac_misc_connection_ff_tx_crc_fwd,     //                                  .ff_tx_crc_fwd
		output wire        tse_mac_mac_misc_connection_ff_tx_septy,       //                                  .ff_tx_septy
		output wire        tse_mac_mac_misc_connection_tx_ff_uflow,       //                                  .tx_ff_uflow
		output wire        tse_mac_mac_misc_connection_ff_tx_a_full,      //                                  .ff_tx_a_full
		output wire        tse_mac_mac_misc_connection_ff_tx_a_empty,     //                                  .ff_tx_a_empty
		output wire [17:0] tse_mac_mac_misc_connection_rx_err_stat,       //                                  .rx_err_stat
		output wire [3:0]  tse_mac_mac_misc_connection_rx_frm_type,       //                                  .rx_frm_type
		output wire        tse_mac_mac_misc_connection_ff_rx_dsav,        //                                  .ff_rx_dsav
		output wire        tse_mac_mac_misc_connection_ff_rx_a_full,      //                                  .ff_rx_a_full
		output wire        tse_mac_mac_misc_connection_ff_rx_a_empty,     //                                  .ff_rx_a_empty
		output wire        tse_mac_serdes_control_connection_sd_loopback, // tse_mac_serdes_control_connection.sd_loopback
		output wire        tse_mac_serdes_control_connection_powerdown,   //                                  .powerdown
		output wire        tse_mac_status_led_connection_crs,             //     tse_mac_status_led_connection.crs
		output wire        tse_mac_status_led_connection_link,            //                                  .link
		output wire        tse_mac_status_led_connection_panel_link,      //                                  .panel_link
		output wire        tse_mac_status_led_connection_col,             //                                  .col
		output wire        tse_mac_status_led_connection_an,              //                                  .an
		output wire        tse_mac_status_led_connection_char_err,        //                                  .char_err
		output wire        tse_mac_status_led_connection_disp_err,        //                                  .disp_err
		input  wire        tse_mac_tbi_connection_rx_clk,                 //            tse_mac_tbi_connection.rx_clk
		input  wire        tse_mac_tbi_connection_tx_clk,                 //                                  .tx_clk
		input  wire [9:0]  tse_mac_tbi_connection_rx_d,                   //                                  .rx_d
		output wire [9:0]  tse_mac_tbi_connection_tx_d,                   //                                  .tx_d
		input  wire [31:0] tse_mac_transmit_data,                         //                  tse_mac_transmit.data
		input  wire        tse_mac_transmit_endofpacket,                  //                                  .endofpacket
		input  wire        tse_mac_transmit_error,                        //                                  .error
		input  wire [1:0]  tse_mac_transmit_empty,                        //                                  .empty
		output wire        tse_mac_transmit_ready,                        //                                  .ready
		input  wire        tse_mac_transmit_startofpacket,                //                                  .startofpacket
		input  wire        tse_mac_transmit_valid                         //                                  .valid
	);

	wire  [31:0] sgdma_rx_descriptor_read_readdata;                  // mm_interconnect_0:sgdma_rx_descriptor_read_readdata -> sgdma_rx:descriptor_read_readdata
	wire         sgdma_rx_descriptor_read_waitrequest;               // mm_interconnect_0:sgdma_rx_descriptor_read_waitrequest -> sgdma_rx:descriptor_read_waitrequest
	wire  [31:0] sgdma_rx_descriptor_read_address;                   // sgdma_rx:descriptor_read_address -> mm_interconnect_0:sgdma_rx_descriptor_read_address
	wire         sgdma_rx_descriptor_read_read;                      // sgdma_rx:descriptor_read_read -> mm_interconnect_0:sgdma_rx_descriptor_read_read
	wire         sgdma_rx_descriptor_read_readdatavalid;             // mm_interconnect_0:sgdma_rx_descriptor_read_readdatavalid -> sgdma_rx:descriptor_read_readdatavalid
	wire  [31:0] sgdma_tx_descriptor_read_readdata;                  // mm_interconnect_0:sgdma_tx_descriptor_read_readdata -> sgdma_tx:descriptor_read_readdata
	wire         sgdma_tx_descriptor_read_waitrequest;               // mm_interconnect_0:sgdma_tx_descriptor_read_waitrequest -> sgdma_tx:descriptor_read_waitrequest
	wire  [31:0] sgdma_tx_descriptor_read_address;                   // sgdma_tx:descriptor_read_address -> mm_interconnect_0:sgdma_tx_descriptor_read_address
	wire         sgdma_tx_descriptor_read_read;                      // sgdma_tx:descriptor_read_read -> mm_interconnect_0:sgdma_tx_descriptor_read_read
	wire         sgdma_tx_descriptor_read_readdatavalid;             // mm_interconnect_0:sgdma_tx_descriptor_read_readdatavalid -> sgdma_tx:descriptor_read_readdatavalid
	wire         sgdma_rx_descriptor_write_waitrequest;              // mm_interconnect_0:sgdma_rx_descriptor_write_waitrequest -> sgdma_rx:descriptor_write_waitrequest
	wire  [31:0] sgdma_rx_descriptor_write_address;                  // sgdma_rx:descriptor_write_address -> mm_interconnect_0:sgdma_rx_descriptor_write_address
	wire         sgdma_rx_descriptor_write_write;                    // sgdma_rx:descriptor_write_write -> mm_interconnect_0:sgdma_rx_descriptor_write_write
	wire  [31:0] sgdma_rx_descriptor_write_writedata;                // sgdma_rx:descriptor_write_writedata -> mm_interconnect_0:sgdma_rx_descriptor_write_writedata
	wire         sgdma_tx_descriptor_write_waitrequest;              // mm_interconnect_0:sgdma_tx_descriptor_write_waitrequest -> sgdma_tx:descriptor_write_waitrequest
	wire  [31:0] sgdma_tx_descriptor_write_address;                  // sgdma_tx:descriptor_write_address -> mm_interconnect_0:sgdma_tx_descriptor_write_address
	wire         sgdma_tx_descriptor_write_write;                    // sgdma_tx:descriptor_write_write -> mm_interconnect_0:sgdma_tx_descriptor_write_write
	wire  [31:0] sgdma_tx_descriptor_write_writedata;                // sgdma_tx:descriptor_write_writedata -> mm_interconnect_0:sgdma_tx_descriptor_write_writedata
	wire         mm_bridge_to_tse_mac_m0_waitrequest;                // mm_interconnect_0:mm_bridge_to_tse_mac_m0_waitrequest -> mm_bridge_to_tse_mac:m0_waitrequest
	wire  [31:0] mm_bridge_to_tse_mac_m0_readdata;                   // mm_interconnect_0:mm_bridge_to_tse_mac_m0_readdata -> mm_bridge_to_tse_mac:m0_readdata
	wire         mm_bridge_to_tse_mac_m0_debugaccess;                // mm_bridge_to_tse_mac:m0_debugaccess -> mm_interconnect_0:mm_bridge_to_tse_mac_m0_debugaccess
	wire  [12:0] mm_bridge_to_tse_mac_m0_address;                    // mm_bridge_to_tse_mac:m0_address -> mm_interconnect_0:mm_bridge_to_tse_mac_m0_address
	wire         mm_bridge_to_tse_mac_m0_read;                       // mm_bridge_to_tse_mac:m0_read -> mm_interconnect_0:mm_bridge_to_tse_mac_m0_read
	wire   [3:0] mm_bridge_to_tse_mac_m0_byteenable;                 // mm_bridge_to_tse_mac:m0_byteenable -> mm_interconnect_0:mm_bridge_to_tse_mac_m0_byteenable
	wire         mm_bridge_to_tse_mac_m0_readdatavalid;              // mm_interconnect_0:mm_bridge_to_tse_mac_m0_readdatavalid -> mm_bridge_to_tse_mac:m0_readdatavalid
	wire  [31:0] mm_bridge_to_tse_mac_m0_writedata;                  // mm_bridge_to_tse_mac:m0_writedata -> mm_interconnect_0:mm_bridge_to_tse_mac_m0_writedata
	wire         mm_bridge_to_tse_mac_m0_write;                      // mm_bridge_to_tse_mac:m0_write -> mm_interconnect_0:mm_bridge_to_tse_mac_m0_write
	wire   [2:0] mm_bridge_to_tse_mac_m0_burstcount;                 // mm_bridge_to_tse_mac:m0_burstcount -> mm_interconnect_0:mm_bridge_to_tse_mac_m0_burstcount
	wire         mm_interconnect_0_descriptor_memory_s1_chipselect;  // mm_interconnect_0:descriptor_memory_s1_chipselect -> descriptor_memory:chipselect
	wire  [31:0] mm_interconnect_0_descriptor_memory_s1_readdata;    // descriptor_memory:readdata -> mm_interconnect_0:descriptor_memory_s1_readdata
	wire   [9:0] mm_interconnect_0_descriptor_memory_s1_address;     // mm_interconnect_0:descriptor_memory_s1_address -> descriptor_memory:address
	wire   [3:0] mm_interconnect_0_descriptor_memory_s1_byteenable;  // mm_interconnect_0:descriptor_memory_s1_byteenable -> descriptor_memory:byteenable
	wire         mm_interconnect_0_descriptor_memory_s1_write;       // mm_interconnect_0:descriptor_memory_s1_write -> descriptor_memory:write
	wire  [31:0] mm_interconnect_0_descriptor_memory_s1_writedata;   // mm_interconnect_0:descriptor_memory_s1_writedata -> descriptor_memory:writedata
	wire         mm_interconnect_0_descriptor_memory_s1_clken;       // mm_interconnect_0:descriptor_memory_s1_clken -> descriptor_memory:clken
	wire  [31:0] mm_interconnect_0_tse_mac_control_port_readdata;    // tse_mac:reg_data_out -> mm_interconnect_0:tse_mac_control_port_readdata
	wire         mm_interconnect_0_tse_mac_control_port_waitrequest; // tse_mac:reg_busy -> mm_interconnect_0:tse_mac_control_port_waitrequest
	wire   [7:0] mm_interconnect_0_tse_mac_control_port_address;     // mm_interconnect_0:tse_mac_control_port_address -> tse_mac:reg_addr
	wire         mm_interconnect_0_tse_mac_control_port_read;        // mm_interconnect_0:tse_mac_control_port_read -> tse_mac:reg_rd
	wire         mm_interconnect_0_tse_mac_control_port_write;       // mm_interconnect_0:tse_mac_control_port_write -> tse_mac:reg_wr
	wire  [31:0] mm_interconnect_0_tse_mac_control_port_writedata;   // mm_interconnect_0:tse_mac_control_port_writedata -> tse_mac:reg_data_in
	wire         mm_interconnect_0_sgdma_tx_csr_chipselect;          // mm_interconnect_0:sgdma_tx_csr_chipselect -> sgdma_tx:csr_chipselect
	wire  [31:0] mm_interconnect_0_sgdma_tx_csr_readdata;            // sgdma_tx:csr_readdata -> mm_interconnect_0:sgdma_tx_csr_readdata
	wire   [3:0] mm_interconnect_0_sgdma_tx_csr_address;             // mm_interconnect_0:sgdma_tx_csr_address -> sgdma_tx:csr_address
	wire         mm_interconnect_0_sgdma_tx_csr_read;                // mm_interconnect_0:sgdma_tx_csr_read -> sgdma_tx:csr_read
	wire         mm_interconnect_0_sgdma_tx_csr_write;               // mm_interconnect_0:sgdma_tx_csr_write -> sgdma_tx:csr_write
	wire  [31:0] mm_interconnect_0_sgdma_tx_csr_writedata;           // mm_interconnect_0:sgdma_tx_csr_writedata -> sgdma_tx:csr_writedata
	wire         mm_interconnect_0_sgdma_rx_csr_chipselect;          // mm_interconnect_0:sgdma_rx_csr_chipselect -> sgdma_rx:csr_chipselect
	wire  [31:0] mm_interconnect_0_sgdma_rx_csr_readdata;            // sgdma_rx:csr_readdata -> mm_interconnect_0:sgdma_rx_csr_readdata
	wire   [3:0] mm_interconnect_0_sgdma_rx_csr_address;             // mm_interconnect_0:sgdma_rx_csr_address -> sgdma_rx:csr_address
	wire         mm_interconnect_0_sgdma_rx_csr_read;                // mm_interconnect_0:sgdma_rx_csr_read -> sgdma_rx:csr_read
	wire         mm_interconnect_0_sgdma_rx_csr_write;               // mm_interconnect_0:sgdma_rx_csr_write -> sgdma_rx:csr_write
	wire  [31:0] mm_interconnect_0_sgdma_rx_csr_writedata;           // mm_interconnect_0:sgdma_rx_csr_writedata -> sgdma_rx:csr_writedata
	wire         tse_mac_receive_valid;                              // tse_mac:ff_rx_dval -> avalon_st_adapter:in_0_valid
	wire  [31:0] tse_mac_receive_data;                               // tse_mac:ff_rx_data -> avalon_st_adapter:in_0_data
	wire         tse_mac_receive_ready;                              // avalon_st_adapter:in_0_ready -> tse_mac:ff_rx_rdy
	wire         tse_mac_receive_startofpacket;                      // tse_mac:ff_rx_sop -> avalon_st_adapter:in_0_startofpacket
	wire         tse_mac_receive_endofpacket;                        // tse_mac:ff_rx_eop -> avalon_st_adapter:in_0_endofpacket
	wire   [5:0] tse_mac_receive_error;                              // tse_mac:rx_err -> avalon_st_adapter:in_0_error
	wire   [1:0] tse_mac_receive_empty;                              // tse_mac:ff_rx_mod -> avalon_st_adapter:in_0_empty
	wire         avalon_st_adapter_out_0_valid;                      // avalon_st_adapter:out_0_valid -> sgdma_rx:in_valid
	wire  [31:0] avalon_st_adapter_out_0_data;                       // avalon_st_adapter:out_0_data -> sgdma_rx:in_data
	wire         avalon_st_adapter_out_0_ready;                      // sgdma_rx:in_ready -> avalon_st_adapter:out_0_ready
	wire         avalon_st_adapter_out_0_startofpacket;              // avalon_st_adapter:out_0_startofpacket -> sgdma_rx:in_startofpacket
	wire         avalon_st_adapter_out_0_endofpacket;                // avalon_st_adapter:out_0_endofpacket -> sgdma_rx:in_endofpacket
	wire   [5:0] avalon_st_adapter_out_0_error;                      // avalon_st_adapter:out_0_error -> sgdma_rx:in_error
	wire   [1:0] avalon_st_adapter_out_0_empty;                      // avalon_st_adapter:out_0_empty -> sgdma_rx:in_empty
	wire         rst_controller_reset_out_reset;                     // rst_controller:reset_out -> [avalon_st_adapter:in_rst_0_reset, descriptor_memory:reset, mm_interconnect_0:sgdma_rx_reset_reset_bridge_in_reset_reset, rst_translator:in_reset, sgdma_rx:system_reset_n, sgdma_tx:system_reset_n]
	wire         rst_controller_reset_out_reset_req;                 // rst_controller:reset_req -> [descriptor_memory:reset_req, rst_translator:reset_req_in]
	wire         rst_controller_001_reset_out_reset;                 // rst_controller_001:reset_out -> [mm_bridge_to_tse_mac:reset, mm_interconnect_0:mm_bridge_to_tse_mac_reset_reset_bridge_in_reset_reset, tse_mac:reset]

	tse_w_sfp_tse_descriptor_memory descriptor_memory (
		.clk        (clk_100_clk),                                       //   clk1.clk
		.address    (mm_interconnect_0_descriptor_memory_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_descriptor_memory_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_descriptor_memory_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_descriptor_memory_s1_write),      //       .write
		.readdata   (mm_interconnect_0_descriptor_memory_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_descriptor_memory_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_descriptor_memory_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),                    // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req)                 //       .reset_req
	);

	altera_avalon_mm_bridge #(
		.DATA_WIDTH        (32),
		.SYMBOL_WIDTH      (8),
		.HDL_ADDR_WIDTH    (13),
		.BURSTCOUNT_WIDTH  (3),
		.PIPELINE_COMMAND  (1),
		.PIPELINE_RESPONSE (1)
	) mm_bridge_to_tse_mac (
		.clk              (clk_50_clk),                            //   clk.clk
		.reset            (rst_controller_001_reset_out_reset),    // reset.reset
		.s0_waitrequest   (avalon_slave_waitrequest),              //    s0.waitrequest
		.s0_readdata      (avalon_slave_readdata),                 //      .readdata
		.s0_readdatavalid (avalon_slave_readdatavalid),            //      .readdatavalid
		.s0_burstcount    (avalon_slave_burstcount),               //      .burstcount
		.s0_writedata     (avalon_slave_writedata),                //      .writedata
		.s0_address       (avalon_slave_address),                  //      .address
		.s0_write         (avalon_slave_write),                    //      .write
		.s0_read          (avalon_slave_read),                     //      .read
		.s0_byteenable    (avalon_slave_byteenable),               //      .byteenable
		.s0_debugaccess   (avalon_slave_debugaccess),              //      .debugaccess
		.m0_waitrequest   (mm_bridge_to_tse_mac_m0_waitrequest),   //    m0.waitrequest
		.m0_readdata      (mm_bridge_to_tse_mac_m0_readdata),      //      .readdata
		.m0_readdatavalid (mm_bridge_to_tse_mac_m0_readdatavalid), //      .readdatavalid
		.m0_burstcount    (mm_bridge_to_tse_mac_m0_burstcount),    //      .burstcount
		.m0_writedata     (mm_bridge_to_tse_mac_m0_writedata),     //      .writedata
		.m0_address       (mm_bridge_to_tse_mac_m0_address),       //      .address
		.m0_write         (mm_bridge_to_tse_mac_m0_write),         //      .write
		.m0_read          (mm_bridge_to_tse_mac_m0_read),          //      .read
		.m0_byteenable    (mm_bridge_to_tse_mac_m0_byteenable),    //      .byteenable
		.m0_debugaccess   (mm_bridge_to_tse_mac_m0_debugaccess)    //      .debugaccess
	);

	tse_w_sfp_tse_sgdma_rx sgdma_rx (
		.clk                           (clk_100_clk),                               //              clk.clk
		.system_reset_n                (~rst_controller_reset_out_reset),           //            reset.reset_n
		.csr_chipselect                (mm_interconnect_0_sgdma_rx_csr_chipselect), //              csr.chipselect
		.csr_address                   (mm_interconnect_0_sgdma_rx_csr_address),    //                 .address
		.csr_read                      (mm_interconnect_0_sgdma_rx_csr_read),       //                 .read
		.csr_write                     (mm_interconnect_0_sgdma_rx_csr_write),      //                 .write
		.csr_writedata                 (mm_interconnect_0_sgdma_rx_csr_writedata),  //                 .writedata
		.csr_readdata                  (mm_interconnect_0_sgdma_rx_csr_readdata),   //                 .readdata
		.descriptor_read_readdata      (sgdma_rx_descriptor_read_readdata),         //  descriptor_read.readdata
		.descriptor_read_readdatavalid (sgdma_rx_descriptor_read_readdatavalid),    //                 .readdatavalid
		.descriptor_read_waitrequest   (sgdma_rx_descriptor_read_waitrequest),      //                 .waitrequest
		.descriptor_read_address       (sgdma_rx_descriptor_read_address),          //                 .address
		.descriptor_read_read          (sgdma_rx_descriptor_read_read),             //                 .read
		.descriptor_write_waitrequest  (sgdma_rx_descriptor_write_waitrequest),     // descriptor_write.waitrequest
		.descriptor_write_address      (sgdma_rx_descriptor_write_address),         //                 .address
		.descriptor_write_write        (sgdma_rx_descriptor_write_write),           //                 .write
		.descriptor_write_writedata    (sgdma_rx_descriptor_write_writedata),       //                 .writedata
		.csr_irq                       (sgdma_rx_csr_irq_irq),                      //          csr_irq.irq
		.in_startofpacket              (avalon_st_adapter_out_0_startofpacket),     //               in.startofpacket
		.in_endofpacket                (avalon_st_adapter_out_0_endofpacket),       //                 .endofpacket
		.in_data                       (avalon_st_adapter_out_0_data),              //                 .data
		.in_valid                      (avalon_st_adapter_out_0_valid),             //                 .valid
		.in_ready                      (avalon_st_adapter_out_0_ready),             //                 .ready
		.in_empty                      (avalon_st_adapter_out_0_empty),             //                 .empty
		.in_error                      (avalon_st_adapter_out_0_error),             //                 .error
		.m_write_waitrequest           (sgdma_rx_m_write_waitrequest),              //          m_write.waitrequest
		.m_write_address               (sgdma_rx_m_write_address),                  //                 .address
		.m_write_write                 (sgdma_rx_m_write_write),                    //                 .write
		.m_write_writedata             (sgdma_rx_m_write_writedata),                //                 .writedata
		.m_write_byteenable            (sgdma_rx_m_write_byteenable)                //                 .byteenable
	);

	tse_w_sfp_tse_sgdma_tx sgdma_tx (
		.clk                           (clk_100_clk),                               //              clk.clk
		.system_reset_n                (~rst_controller_reset_out_reset),           //            reset.reset_n
		.csr_chipselect                (mm_interconnect_0_sgdma_tx_csr_chipselect), //              csr.chipselect
		.csr_address                   (mm_interconnect_0_sgdma_tx_csr_address),    //                 .address
		.csr_read                      (mm_interconnect_0_sgdma_tx_csr_read),       //                 .read
		.csr_write                     (mm_interconnect_0_sgdma_tx_csr_write),      //                 .write
		.csr_writedata                 (mm_interconnect_0_sgdma_tx_csr_writedata),  //                 .writedata
		.csr_readdata                  (mm_interconnect_0_sgdma_tx_csr_readdata),   //                 .readdata
		.descriptor_read_readdata      (sgdma_tx_descriptor_read_readdata),         //  descriptor_read.readdata
		.descriptor_read_readdatavalid (sgdma_tx_descriptor_read_readdatavalid),    //                 .readdatavalid
		.descriptor_read_waitrequest   (sgdma_tx_descriptor_read_waitrequest),      //                 .waitrequest
		.descriptor_read_address       (sgdma_tx_descriptor_read_address),          //                 .address
		.descriptor_read_read          (sgdma_tx_descriptor_read_read),             //                 .read
		.descriptor_write_waitrequest  (sgdma_tx_descriptor_write_waitrequest),     // descriptor_write.waitrequest
		.descriptor_write_address      (sgdma_tx_descriptor_write_address),         //                 .address
		.descriptor_write_write        (sgdma_tx_descriptor_write_write),           //                 .write
		.descriptor_write_writedata    (sgdma_tx_descriptor_write_writedata),       //                 .writedata
		.csr_irq                       (sgdma_tx_csr_irq_irq),                      //          csr_irq.irq
		.m_read_readdata               (sgdma_tx_m_read_readdata),                  //           m_read.readdata
		.m_read_readdatavalid          (sgdma_tx_m_read_readdatavalid),             //                 .readdatavalid
		.m_read_waitrequest            (sgdma_tx_m_read_waitrequest),               //                 .waitrequest
		.m_read_address                (sgdma_tx_m_read_address),                   //                 .address
		.m_read_read                   (sgdma_tx_m_read_read),                      //                 .read
		.out_data                      (sgdma_tx_out_data),                         //              out.data
		.out_valid                     (sgdma_tx_out_valid),                        //                 .valid
		.out_ready                     (sgdma_tx_out_ready),                        //                 .ready
		.out_endofpacket               (sgdma_tx_out_endofpacket),                  //                 .endofpacket
		.out_startofpacket             (sgdma_tx_out_startofpacket),                //                 .startofpacket
		.out_empty                     (sgdma_tx_out_empty)                         //                 .empty
	);

	tse_w_sfp_tse_tse_mac tse_mac (
		.clk            (clk_50_clk),                                         // control_port_clock_connection.clk
		.reset          (rst_controller_001_reset_out_reset),                 //              reset_connection.reset
		.reg_data_out   (mm_interconnect_0_tse_mac_control_port_readdata),    //                  control_port.readdata
		.reg_rd         (mm_interconnect_0_tse_mac_control_port_read),        //                              .read
		.reg_data_in    (mm_interconnect_0_tse_mac_control_port_writedata),   //                              .writedata
		.reg_wr         (mm_interconnect_0_tse_mac_control_port_write),       //                              .write
		.reg_busy       (mm_interconnect_0_tse_mac_control_port_waitrequest), //                              .waitrequest
		.reg_addr       (mm_interconnect_0_tse_mac_control_port_address),     //                              .address
		.ff_rx_clk      (clk_100_clk),                                        //      receive_clock_connection.clk
		.ff_tx_clk      (clk_100_clk),                                        //     transmit_clock_connection.clk
		.ff_rx_data     (tse_mac_receive_data),                               //                       receive.data
		.ff_rx_eop      (tse_mac_receive_endofpacket),                        //                              .endofpacket
		.rx_err         (tse_mac_receive_error),                              //                              .error
		.ff_rx_mod      (tse_mac_receive_empty),                              //                              .empty
		.ff_rx_rdy      (tse_mac_receive_ready),                              //                              .ready
		.ff_rx_sop      (tse_mac_receive_startofpacket),                      //                              .startofpacket
		.ff_rx_dval     (tse_mac_receive_valid),                              //                              .valid
		.ff_tx_data     (tse_mac_transmit_data),                              //                      transmit.data
		.ff_tx_eop      (tse_mac_transmit_endofpacket),                       //                              .endofpacket
		.ff_tx_err      (tse_mac_transmit_error),                             //                              .error
		.ff_tx_mod      (tse_mac_transmit_empty),                             //                              .empty
		.ff_tx_rdy      (tse_mac_transmit_ready),                             //                              .ready
		.ff_tx_sop      (tse_mac_transmit_startofpacket),                     //                              .startofpacket
		.ff_tx_wren     (tse_mac_transmit_valid),                             //                              .valid
		.mdc            (tse_mac_mac_mdio_connection_mdc),                    //           mac_mdio_connection.mdc
		.mdio_in        (tse_mac_mac_mdio_connection_mdio_in),                //                              .mdio_in
		.mdio_out       (tse_mac_mac_mdio_connection_mdio_out),               //                              .mdio_out
		.mdio_oen       (tse_mac_mac_mdio_connection_mdio_oen),               //                              .mdio_oen
		.xon_gen        (tse_mac_mac_misc_connection_xon_gen),                //           mac_misc_connection.xon_gen
		.xoff_gen       (tse_mac_mac_misc_connection_xoff_gen),               //                              .xoff_gen
		.ff_tx_crc_fwd  (tse_mac_mac_misc_connection_ff_tx_crc_fwd),          //                              .ff_tx_crc_fwd
		.ff_tx_septy    (tse_mac_mac_misc_connection_ff_tx_septy),            //                              .ff_tx_septy
		.tx_ff_uflow    (tse_mac_mac_misc_connection_tx_ff_uflow),            //                              .tx_ff_uflow
		.ff_tx_a_full   (tse_mac_mac_misc_connection_ff_tx_a_full),           //                              .ff_tx_a_full
		.ff_tx_a_empty  (tse_mac_mac_misc_connection_ff_tx_a_empty),          //                              .ff_tx_a_empty
		.rx_err_stat    (tse_mac_mac_misc_connection_rx_err_stat),            //                              .rx_err_stat
		.rx_frm_type    (tse_mac_mac_misc_connection_rx_frm_type),            //                              .rx_frm_type
		.ff_rx_dsav     (tse_mac_mac_misc_connection_ff_rx_dsav),             //                              .ff_rx_dsav
		.ff_rx_a_full   (tse_mac_mac_misc_connection_ff_rx_a_full),           //                              .ff_rx_a_full
		.ff_rx_a_empty  (tse_mac_mac_misc_connection_ff_rx_a_empty),          //                              .ff_rx_a_empty
		.led_crs        (tse_mac_status_led_connection_crs),                  //         status_led_connection.crs
		.led_link       (tse_mac_status_led_connection_link),                 //                              .link
		.led_panel_link (tse_mac_status_led_connection_panel_link),           //                              .panel_link
		.led_col        (tse_mac_status_led_connection_col),                  //                              .col
		.led_an         (tse_mac_status_led_connection_an),                   //                              .an
		.led_char_err   (tse_mac_status_led_connection_char_err),             //                              .char_err
		.led_disp_err   (tse_mac_status_led_connection_disp_err),             //                              .disp_err
		.sd_loopback    (tse_mac_serdes_control_connection_sd_loopback),      //     serdes_control_connection.sd_loopback
		.powerdown      (tse_mac_serdes_control_connection_powerdown),        //                              .powerdown
		.tbi_rx_clk     (tse_mac_tbi_connection_rx_clk),                      //                tbi_connection.rx_clk
		.tbi_tx_clk     (tse_mac_tbi_connection_tx_clk),                      //                              .tx_clk
		.tbi_rx_d       (tse_mac_tbi_connection_rx_d),                        //                              .rx_d
		.tbi_tx_d       (tse_mac_tbi_connection_tx_d)                         //                              .tx_d
	);

	tse_w_sfp_tse_mm_interconnect_0 mm_interconnect_0 (
		.clk_100_clk_clk                                        (clk_100_clk),                                        //                                      clk_100_clk.clk
		.clk_50_clk_clk                                         (clk_50_clk),                                         //                                       clk_50_clk.clk
		.mm_bridge_to_tse_mac_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                 // mm_bridge_to_tse_mac_reset_reset_bridge_in_reset.reset
		.sgdma_rx_reset_reset_bridge_in_reset_reset             (rst_controller_reset_out_reset),                     //             sgdma_rx_reset_reset_bridge_in_reset.reset
		.mm_bridge_to_tse_mac_m0_address                        (mm_bridge_to_tse_mac_m0_address),                    //                          mm_bridge_to_tse_mac_m0.address
		.mm_bridge_to_tse_mac_m0_waitrequest                    (mm_bridge_to_tse_mac_m0_waitrequest),                //                                                 .waitrequest
		.mm_bridge_to_tse_mac_m0_burstcount                     (mm_bridge_to_tse_mac_m0_burstcount),                 //                                                 .burstcount
		.mm_bridge_to_tse_mac_m0_byteenable                     (mm_bridge_to_tse_mac_m0_byteenable),                 //                                                 .byteenable
		.mm_bridge_to_tse_mac_m0_read                           (mm_bridge_to_tse_mac_m0_read),                       //                                                 .read
		.mm_bridge_to_tse_mac_m0_readdata                       (mm_bridge_to_tse_mac_m0_readdata),                   //                                                 .readdata
		.mm_bridge_to_tse_mac_m0_readdatavalid                  (mm_bridge_to_tse_mac_m0_readdatavalid),              //                                                 .readdatavalid
		.mm_bridge_to_tse_mac_m0_write                          (mm_bridge_to_tse_mac_m0_write),                      //                                                 .write
		.mm_bridge_to_tse_mac_m0_writedata                      (mm_bridge_to_tse_mac_m0_writedata),                  //                                                 .writedata
		.mm_bridge_to_tse_mac_m0_debugaccess                    (mm_bridge_to_tse_mac_m0_debugaccess),                //                                                 .debugaccess
		.sgdma_rx_descriptor_read_address                       (sgdma_rx_descriptor_read_address),                   //                         sgdma_rx_descriptor_read.address
		.sgdma_rx_descriptor_read_waitrequest                   (sgdma_rx_descriptor_read_waitrequest),               //                                                 .waitrequest
		.sgdma_rx_descriptor_read_read                          (sgdma_rx_descriptor_read_read),                      //                                                 .read
		.sgdma_rx_descriptor_read_readdata                      (sgdma_rx_descriptor_read_readdata),                  //                                                 .readdata
		.sgdma_rx_descriptor_read_readdatavalid                 (sgdma_rx_descriptor_read_readdatavalid),             //                                                 .readdatavalid
		.sgdma_rx_descriptor_write_address                      (sgdma_rx_descriptor_write_address),                  //                        sgdma_rx_descriptor_write.address
		.sgdma_rx_descriptor_write_waitrequest                  (sgdma_rx_descriptor_write_waitrequest),              //                                                 .waitrequest
		.sgdma_rx_descriptor_write_write                        (sgdma_rx_descriptor_write_write),                    //                                                 .write
		.sgdma_rx_descriptor_write_writedata                    (sgdma_rx_descriptor_write_writedata),                //                                                 .writedata
		.sgdma_tx_descriptor_read_address                       (sgdma_tx_descriptor_read_address),                   //                         sgdma_tx_descriptor_read.address
		.sgdma_tx_descriptor_read_waitrequest                   (sgdma_tx_descriptor_read_waitrequest),               //                                                 .waitrequest
		.sgdma_tx_descriptor_read_read                          (sgdma_tx_descriptor_read_read),                      //                                                 .read
		.sgdma_tx_descriptor_read_readdata                      (sgdma_tx_descriptor_read_readdata),                  //                                                 .readdata
		.sgdma_tx_descriptor_read_readdatavalid                 (sgdma_tx_descriptor_read_readdatavalid),             //                                                 .readdatavalid
		.sgdma_tx_descriptor_write_address                      (sgdma_tx_descriptor_write_address),                  //                        sgdma_tx_descriptor_write.address
		.sgdma_tx_descriptor_write_waitrequest                  (sgdma_tx_descriptor_write_waitrequest),              //                                                 .waitrequest
		.sgdma_tx_descriptor_write_write                        (sgdma_tx_descriptor_write_write),                    //                                                 .write
		.sgdma_tx_descriptor_write_writedata                    (sgdma_tx_descriptor_write_writedata),                //                                                 .writedata
		.descriptor_memory_s1_address                           (mm_interconnect_0_descriptor_memory_s1_address),     //                             descriptor_memory_s1.address
		.descriptor_memory_s1_write                             (mm_interconnect_0_descriptor_memory_s1_write),       //                                                 .write
		.descriptor_memory_s1_readdata                          (mm_interconnect_0_descriptor_memory_s1_readdata),    //                                                 .readdata
		.descriptor_memory_s1_writedata                         (mm_interconnect_0_descriptor_memory_s1_writedata),   //                                                 .writedata
		.descriptor_memory_s1_byteenable                        (mm_interconnect_0_descriptor_memory_s1_byteenable),  //                                                 .byteenable
		.descriptor_memory_s1_chipselect                        (mm_interconnect_0_descriptor_memory_s1_chipselect),  //                                                 .chipselect
		.descriptor_memory_s1_clken                             (mm_interconnect_0_descriptor_memory_s1_clken),       //                                                 .clken
		.sgdma_rx_csr_address                                   (mm_interconnect_0_sgdma_rx_csr_address),             //                                     sgdma_rx_csr.address
		.sgdma_rx_csr_write                                     (mm_interconnect_0_sgdma_rx_csr_write),               //                                                 .write
		.sgdma_rx_csr_read                                      (mm_interconnect_0_sgdma_rx_csr_read),                //                                                 .read
		.sgdma_rx_csr_readdata                                  (mm_interconnect_0_sgdma_rx_csr_readdata),            //                                                 .readdata
		.sgdma_rx_csr_writedata                                 (mm_interconnect_0_sgdma_rx_csr_writedata),           //                                                 .writedata
		.sgdma_rx_csr_chipselect                                (mm_interconnect_0_sgdma_rx_csr_chipselect),          //                                                 .chipselect
		.sgdma_tx_csr_address                                   (mm_interconnect_0_sgdma_tx_csr_address),             //                                     sgdma_tx_csr.address
		.sgdma_tx_csr_write                                     (mm_interconnect_0_sgdma_tx_csr_write),               //                                                 .write
		.sgdma_tx_csr_read                                      (mm_interconnect_0_sgdma_tx_csr_read),                //                                                 .read
		.sgdma_tx_csr_readdata                                  (mm_interconnect_0_sgdma_tx_csr_readdata),            //                                                 .readdata
		.sgdma_tx_csr_writedata                                 (mm_interconnect_0_sgdma_tx_csr_writedata),           //                                                 .writedata
		.sgdma_tx_csr_chipselect                                (mm_interconnect_0_sgdma_tx_csr_chipselect),          //                                                 .chipselect
		.tse_mac_control_port_address                           (mm_interconnect_0_tse_mac_control_port_address),     //                             tse_mac_control_port.address
		.tse_mac_control_port_write                             (mm_interconnect_0_tse_mac_control_port_write),       //                                                 .write
		.tse_mac_control_port_read                              (mm_interconnect_0_tse_mac_control_port_read),        //                                                 .read
		.tse_mac_control_port_readdata                          (mm_interconnect_0_tse_mac_control_port_readdata),    //                                                 .readdata
		.tse_mac_control_port_writedata                         (mm_interconnect_0_tse_mac_control_port_writedata),   //                                                 .writedata
		.tse_mac_control_port_waitrequest                       (mm_interconnect_0_tse_mac_control_port_waitrequest)  //                                                 .waitrequest
	);

	tse_w_sfp_tse_avalon_st_adapter #(
		.inBitsPerSymbol (8),
		.inUsePackets    (1),
		.inDataWidth     (32),
		.inChannelWidth  (0),
		.inErrorWidth    (6),
		.inUseEmptyPort  (1),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (2),
		.outDataWidth    (32),
		.outChannelWidth (0),
		.outErrorWidth   (6),
		.outUseEmptyPort (1),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk        (clk_100_clk),                           // in_clk_0.clk
		.in_rst_0_reset      (rst_controller_reset_out_reset),        // in_rst_0.reset
		.in_0_data           (tse_mac_receive_data),                  //     in_0.data
		.in_0_valid          (tse_mac_receive_valid),                 //         .valid
		.in_0_ready          (tse_mac_receive_ready),                 //         .ready
		.in_0_startofpacket  (tse_mac_receive_startofpacket),         //         .startofpacket
		.in_0_endofpacket    (tse_mac_receive_endofpacket),           //         .endofpacket
		.in_0_empty          (tse_mac_receive_empty),                 //         .empty
		.in_0_error          (tse_mac_receive_error),                 //         .error
		.out_0_data          (avalon_st_adapter_out_0_data),          //    out_0.data
		.out_0_valid         (avalon_st_adapter_out_0_valid),         //         .valid
		.out_0_ready         (avalon_st_adapter_out_0_ready),         //         .ready
		.out_0_startofpacket (avalon_st_adapter_out_0_startofpacket), //         .startofpacket
		.out_0_endofpacket   (avalon_st_adapter_out_0_endofpacket),   //         .endofpacket
		.out_0_empty         (avalon_st_adapter_out_0_empty),         //         .empty
		.out_0_error         (avalon_st_adapter_out_0_error)          //         .error
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_50_reset_n),                  // reset_in0.reset
		.clk            (clk_100_clk),                        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_50_reset_n),                  // reset_in0.reset
		.clk            (clk_50_clk),                         //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
