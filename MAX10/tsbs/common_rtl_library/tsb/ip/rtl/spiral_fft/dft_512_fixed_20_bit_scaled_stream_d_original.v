/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */
 
 /*
 
 DFT Size = 512
direction = forward
data type = 20 bit fixed point, scaled 
architecture = fully streaming
radix = 4
streaming width = 4
data ordering = natural input / natural output
BRAM budget = -1

*/
 

//   Input/output stream: 4 complex words per cycle
//   Throughput: one transform every 128 cycles
//   Latency: 1028 cycles

//   Resources required:
//     44 multipliers (20 x 20 bit)
//     94 adders (20 x 20 bit)
//     8 RAMs (128 words, 40 bits per word)
//     8 RAMs (8 words, 40 bits per word)
//     8 RAMs (32 words, 40 bits per word)
//     24 RAMs (256 words, 40 bits per word)
//     6 ROMs (64 words, 20 bits per word)
//     24 ROMs (128 words, 7 bits per word)
//     8 ROMs (64 words, 6 bits per word)
//     6 ROMs (16 words, 20 bits per word)
//     4 ROMs (128 words, 20 bits per word)

// Generated on Fri Aug 30 01:43:39 EDT 2019

// Latency: 1028 clock cycles
// Throughput: 1 transform every 128 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 128 cycles.  This means that
// 128 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 1028 cycles.  This means that
// the 'next_out' will be asserted 1028 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


// Latency: 1028
// Gap: 128
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [19:0] t0_0;
   wire [19:0] t0_1;
   wire [19:0] t0_2;
   wire [19:0] t0_3;
   wire [19:0] t0_4;
   wire [19:0] t0_5;
   wire [19:0] t0_6;
   wire [19:0] t0_7;
   wire next_0;
   wire [19:0] t1_0;
   wire [19:0] t1_1;
   wire [19:0] t1_2;
   wire [19:0] t1_3;
   wire [19:0] t1_4;
   wire [19:0] t1_5;
   wire [19:0] t1_6;
   wire [19:0] t1_7;
   wire next_1;
   wire [19:0] t2_0;
   wire [19:0] t2_1;
   wire [19:0] t2_2;
   wire [19:0] t2_3;
   wire [19:0] t2_4;
   wire [19:0] t2_5;
   wire [19:0] t2_6;
   wire [19:0] t2_7;
   wire next_2;
   wire [19:0] t3_0;
   wire [19:0] t3_1;
   wire [19:0] t3_2;
   wire [19:0] t3_3;
   wire [19:0] t3_4;
   wire [19:0] t3_5;
   wire [19:0] t3_6;
   wire [19:0] t3_7;
   wire next_3;
   wire [19:0] t4_0;
   wire [19:0] t4_1;
   wire [19:0] t4_2;
   wire [19:0] t4_3;
   wire [19:0] t4_4;
   wire [19:0] t4_5;
   wire [19:0] t4_6;
   wire [19:0] t4_7;
   wire next_4;
   wire [19:0] t5_0;
   wire [19:0] t5_1;
   wire [19:0] t5_2;
   wire [19:0] t5_3;
   wire [19:0] t5_4;
   wire [19:0] t5_5;
   wire [19:0] t5_6;
   wire [19:0] t5_7;
   wire next_5;
   wire [19:0] t6_0;
   wire [19:0] t6_1;
   wire [19:0] t6_2;
   wire [19:0] t6_3;
   wire [19:0] t6_4;
   wire [19:0] t6_5;
   wire [19:0] t6_6;
   wire [19:0] t6_7;
   wire next_6;
   wire [19:0] t7_0;
   wire [19:0] t7_1;
   wire [19:0] t7_2;
   wire [19:0] t7_3;
   wire [19:0] t7_4;
   wire [19:0] t7_5;
   wire [19:0] t7_6;
   wire [19:0] t7_7;
   wire next_7;
   wire [19:0] t8_0;
   wire [19:0] t8_1;
   wire [19:0] t8_2;
   wire [19:0] t8_3;
   wire [19:0] t8_4;
   wire [19:0] t8_5;
   wire [19:0] t8_6;
   wire [19:0] t8_7;
   wire next_8;
   wire [19:0] t9_0;
   wire [19:0] t9_1;
   wire [19:0] t9_2;
   wire [19:0] t9_3;
   wire [19:0] t9_4;
   wire [19:0] t9_5;
   wire [19:0] t9_6;
   wire [19:0] t9_7;
   wire next_9;
   wire [19:0] t10_0;
   wire [19:0] t10_1;
   wire [19:0] t10_2;
   wire [19:0] t10_3;
   wire [19:0] t10_4;
   wire [19:0] t10_5;
   wire [19:0] t10_6;
   wire [19:0] t10_7;
   wire next_10;
   wire [19:0] t11_0;
   wire [19:0] t11_1;
   wire [19:0] t11_2;
   wire [19:0] t11_3;
   wire [19:0] t11_4;
   wire [19:0] t11_5;
   wire [19:0] t11_6;
   wire [19:0] t11_7;
   wire next_11;
   wire [19:0] t12_0;
   wire [19:0] t12_1;
   wire [19:0] t12_2;
   wire [19:0] t12_3;
   wire [19:0] t12_4;
   wire [19:0] t12_5;
   wire [19:0] t12_6;
   wire [19:0] t12_7;
   wire next_12;
   wire [19:0] t13_0;
   wire [19:0] t13_1;
   wire [19:0] t13_2;
   wire [19:0] t13_3;
   wire [19:0] t13_4;
   wire [19:0] t13_5;
   wire [19:0] t13_6;
   wire [19:0] t13_7;
   wire next_13;
   wire [19:0] t14_0;
   wire [19:0] t14_1;
   wire [19:0] t14_2;
   wire [19:0] t14_3;
   wire [19:0] t14_4;
   wire [19:0] t14_5;
   wire [19:0] t14_6;
   wire [19:0] t14_7;
   wire next_14;
   wire [19:0] t15_0;
   wire [19:0] t15_1;
   wire [19:0] t15_2;
   wire [19:0] t15_3;
   wire [19:0] t15_4;
   wire [19:0] t15_5;
   wire [19:0] t15_6;
   wire [19:0] t15_7;
   wire next_15;
   assign t0_0 = X0;
   assign Y0 = t15_0;
   assign t0_1 = X1;
   assign Y1 = t15_1;
   assign t0_2 = X2;
   assign Y2 = t15_2;
   assign t0_3 = X3;
   assign Y3 = t15_3;
   assign t0_4 = X4;
   assign Y4 = t15_4;
   assign t0_5 = X5;
   assign Y5 = t15_5;
   assign t0_6 = X6;
   assign Y6 = t15_6;
   assign t0_7 = X7;
   assign Y7 = t15_7;
   assign next_0 = next;
   assign next_out = next_15;

// latency=261, gap=128
   rc19328 stage0(.clk(clk), .reset(reset), .next(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3),
    .X4(t0_4), .Y4(t1_4),
    .X5(t0_5), .Y5(t1_5),
    .X6(t0_6), .Y6(t1_6),
    .X7(t0_7), .Y7(t1_7));


// latency=3, gap=128
   codeBlock19330 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7));


// latency=13, gap=128
   rc19544 stage2(.clk(clk), .reset(reset), .next(next_2), .next_out(next_3),
    .X0(t2_0), .Y0(t3_0),
    .X1(t2_1), .Y1(t3_1),
    .X2(t2_2), .Y2(t3_2),
    .X3(t2_3), .Y3(t3_3),
    .X4(t2_4), .Y4(t3_4),
    .X5(t2_5), .Y5(t3_5),
    .X6(t2_6), .Y6(t3_6),
    .X7(t2_7), .Y7(t3_7));


// latency=12, gap=128
   DirSum_19917 stage3(.next(next_3), .clk(clk), .reset(reset), .next_out(next_4),
       .X0(t3_0), .Y0(t4_0),
       .X1(t3_1), .Y1(t4_1),
       .X2(t3_2), .Y2(t4_2),
       .X3(t3_3), .Y3(t4_3),
       .X4(t3_4), .Y4(t4_4),
       .X5(t3_5), .Y5(t4_5),
       .X6(t3_6), .Y6(t4_6),
       .X7(t3_7), .Y7(t4_7));


// latency=3, gap=128
   codeBlock19920 stage4(.clk(clk), .reset(reset), .next_in(next_4), .next_out(next_5),
       .X0_in(t4_0), .Y0(t5_0),
       .X1_in(t4_1), .Y1(t5_1),
       .X2_in(t4_2), .Y2(t5_2),
       .X3_in(t4_3), .Y3(t5_3),
       .X4_in(t4_4), .Y4(t5_4),
       .X5_in(t4_5), .Y5(t5_5),
       .X6_in(t4_6), .Y6(t5_6),
       .X7_in(t4_7), .Y7(t5_7));


// latency=37, gap=128
   rc20134 stage5(.clk(clk), .reset(reset), .next(next_5), .next_out(next_6),
    .X0(t5_0), .Y0(t6_0),
    .X1(t5_1), .Y1(t6_1),
    .X2(t5_2), .Y2(t6_2),
    .X3(t5_3), .Y3(t6_3),
    .X4(t5_4), .Y4(t6_4),
    .X5(t5_5), .Y5(t6_5),
    .X6(t5_6), .Y6(t6_6),
    .X7(t5_7), .Y7(t6_7));


// latency=12, gap=128
   DirSum_20603 stage6(.next(next_6), .clk(clk), .reset(reset), .next_out(next_7),
       .X0(t6_0), .Y0(t7_0),
       .X1(t6_1), .Y1(t7_1),
       .X2(t6_2), .Y2(t7_2),
       .X3(t6_3), .Y3(t7_3),
       .X4(t6_4), .Y4(t7_4),
       .X5(t6_5), .Y5(t7_5),
       .X6(t6_6), .Y6(t7_6),
       .X7(t6_7), .Y7(t7_7));


// latency=3, gap=128
   codeBlock20606 stage7(.clk(clk), .reset(reset), .next_in(next_7), .next_out(next_8),
       .X0_in(t7_0), .Y0(t8_0),
       .X1_in(t7_1), .Y1(t8_1),
       .X2_in(t7_2), .Y2(t8_2),
       .X3_in(t7_3), .Y3(t8_3),
       .X4_in(t7_4), .Y4(t8_4),
       .X5_in(t7_5), .Y5(t8_5),
       .X6_in(t7_6), .Y6(t8_6),
       .X7_in(t7_7), .Y7(t8_7));


// latency=133, gap=128
   rc20820 stage8(.clk(clk), .reset(reset), .next(next_8), .next_out(next_9),
    .X0(t8_0), .Y0(t9_0),
    .X1(t8_1), .Y1(t9_1),
    .X2(t8_2), .Y2(t9_2),
    .X3(t8_3), .Y3(t9_3),
    .X4(t8_4), .Y4(t9_4),
    .X5(t8_5), .Y5(t9_5),
    .X6(t8_6), .Y6(t9_6),
    .X7(t8_7), .Y7(t9_7));


// latency=12, gap=128
   DirSum_21673 stage9(.next(next_9), .clk(clk), .reset(reset), .next_out(next_10),
       .X0(t9_0), .Y0(t10_0),
       .X1(t9_1), .Y1(t10_1),
       .X2(t9_2), .Y2(t10_2),
       .X3(t9_3), .Y3(t10_3),
       .X4(t9_4), .Y4(t10_4),
       .X5(t9_5), .Y5(t10_5),
       .X6(t9_6), .Y6(t10_6),
       .X7(t9_7), .Y7(t10_7));


// latency=3, gap=128
   codeBlock21676 stage10(.clk(clk), .reset(reset), .next_in(next_10), .next_out(next_11),
       .X0_in(t10_0), .Y0(t11_0),
       .X1_in(t10_1), .Y1(t11_1),
       .X2_in(t10_2), .Y2(t11_2),
       .X3_in(t10_3), .Y3(t11_3),
       .X4_in(t10_4), .Y4(t11_4),
       .X5_in(t10_5), .Y5(t11_5),
       .X6_in(t10_6), .Y6(t11_6),
       .X7_in(t10_7), .Y7(t11_7));


// latency=261, gap=128
   rc21890 stage11(.clk(clk), .reset(reset), .next(next_11), .next_out(next_12),
    .X0(t11_0), .Y0(t12_0),
    .X1(t11_1), .Y1(t12_1),
    .X2(t11_2), .Y2(t12_2),
    .X3(t11_3), .Y3(t12_3),
    .X4(t11_4), .Y4(t12_4),
    .X5(t11_5), .Y5(t12_5),
    .X6(t11_6), .Y6(t12_6),
    .X7(t11_7), .Y7(t12_7));


// latency=12, gap=128
   DirSum_23254 stage12(.next(next_12), .clk(clk), .reset(reset), .next_out(next_13),
       .X0(t12_0), .Y0(t13_0),
       .X1(t12_1), .Y1(t13_1),
       .X2(t12_2), .Y2(t13_2),
       .X3(t12_3), .Y3(t13_3),
       .X4(t12_4), .Y4(t13_4),
       .X5(t12_5), .Y5(t13_5),
       .X6(t12_6), .Y6(t13_6),
       .X7(t12_7), .Y7(t13_7));


// latency=2, gap=128
   codeBlock23256 stage13(.clk(clk), .reset(reset), .next_in(next_13), .next_out(next_14),
       .X0_in(t13_0), .Y0(t14_0),
       .X1_in(t13_1), .Y1(t14_1),
       .X2_in(t13_2), .Y2(t14_2),
       .X3_in(t13_3), .Y3(t14_3),
       .X4_in(t13_4), .Y4(t14_4),
       .X5_in(t13_5), .Y5(t14_5),
       .X6_in(t13_6), .Y6(t14_6),
       .X7_in(t13_7), .Y7(t14_7));


// latency=261, gap=128
   rc23414 stage14(.clk(clk), .reset(reset), .next(next_14), .next_out(next_15),
    .X0(t14_0), .Y0(t15_0),
    .X1(t14_1), .Y1(t15_1),
    .X2(t14_2), .Y2(t15_2),
    .X3(t14_3), .Y3(t15_3),
    .X4(t14_4), .Y4(t15_4),
    .X5(t14_5), .Y5(t15_5),
    .X6(t14_6), .Y6(t15_6),
    .X7(t14_7), .Y7(t15_7));


endmodule

// Latency: 261
// Gap: 128
module rc19328(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [39:0] t0;
   wire [39:0] s0;
   assign t0 = {X0, X1};
   wire [39:0] t1;
   wire [39:0] s1;
   assign t1 = {X2, X3};
   wire [39:0] t2;
   wire [39:0] s2;
   assign t2 = {X4, X5};
   wire [39:0] t3;
   wire [39:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[39:20];
   assign Y1 = s0[19:0];
   assign Y2 = s1[39:20];
   assign Y3 = s1[19:0];
   assign Y4 = s2[39:20];
   assign Y5 = s2[19:0];
   assign Y6 = s3[39:20];
   assign Y7 = s3[19:0];

   perm19326 instPerm25247(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet19326(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
);

    parameter width = 40;

    input [6:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3;
    reg [width-1:0] t5_0, t5_1, t5_2, t5_3;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        7'd0: control <= 4'b1111;
        7'd1: control <= 4'b1111;
        7'd2: control <= 4'b1111;
        7'd3: control <= 4'b1111;
        7'd4: control <= 4'b1111;
        7'd5: control <= 4'b1111;
        7'd6: control <= 4'b1111;
        7'd7: control <= 4'b1111;
        7'd8: control <= 4'b1111;
        7'd9: control <= 4'b1111;
        7'd10: control <= 4'b1111;
        7'd11: control <= 4'b1111;
        7'd12: control <= 4'b1111;
        7'd13: control <= 4'b1111;
        7'd14: control <= 4'b1111;
        7'd15: control <= 4'b1111;
        7'd16: control <= 4'b1111;
        7'd17: control <= 4'b1111;
        7'd18: control <= 4'b1111;
        7'd19: control <= 4'b1111;
        7'd20: control <= 4'b1111;
        7'd21: control <= 4'b1111;
        7'd22: control <= 4'b1111;
        7'd23: control <= 4'b1111;
        7'd24: control <= 4'b1111;
        7'd25: control <= 4'b1111;
        7'd26: control <= 4'b1111;
        7'd27: control <= 4'b1111;
        7'd28: control <= 4'b1111;
        7'd29: control <= 4'b1111;
        7'd30: control <= 4'b1111;
        7'd31: control <= 4'b1111;
        7'd32: control <= 4'b0011;
        7'd33: control <= 4'b0011;
        7'd34: control <= 4'b0011;
        7'd35: control <= 4'b0011;
        7'd36: control <= 4'b0011;
        7'd37: control <= 4'b0011;
        7'd38: control <= 4'b0011;
        7'd39: control <= 4'b0011;
        7'd40: control <= 4'b0011;
        7'd41: control <= 4'b0011;
        7'd42: control <= 4'b0011;
        7'd43: control <= 4'b0011;
        7'd44: control <= 4'b0011;
        7'd45: control <= 4'b0011;
        7'd46: control <= 4'b0011;
        7'd47: control <= 4'b0011;
        7'd48: control <= 4'b0011;
        7'd49: control <= 4'b0011;
        7'd50: control <= 4'b0011;
        7'd51: control <= 4'b0011;
        7'd52: control <= 4'b0011;
        7'd53: control <= 4'b0011;
        7'd54: control <= 4'b0011;
        7'd55: control <= 4'b0011;
        7'd56: control <= 4'b0011;
        7'd57: control <= 4'b0011;
        7'd58: control <= 4'b0011;
        7'd59: control <= 4'b0011;
        7'd60: control <= 4'b0011;
        7'd61: control <= 4'b0011;
        7'd62: control <= 4'b0011;
        7'd63: control <= 4'b0011;
        7'd64: control <= 4'b1100;
        7'd65: control <= 4'b1100;
        7'd66: control <= 4'b1100;
        7'd67: control <= 4'b1100;
        7'd68: control <= 4'b1100;
        7'd69: control <= 4'b1100;
        7'd70: control <= 4'b1100;
        7'd71: control <= 4'b1100;
        7'd72: control <= 4'b1100;
        7'd73: control <= 4'b1100;
        7'd74: control <= 4'b1100;
        7'd75: control <= 4'b1100;
        7'd76: control <= 4'b1100;
        7'd77: control <= 4'b1100;
        7'd78: control <= 4'b1100;
        7'd79: control <= 4'b1100;
        7'd80: control <= 4'b1100;
        7'd81: control <= 4'b1100;
        7'd82: control <= 4'b1100;
        7'd83: control <= 4'b1100;
        7'd84: control <= 4'b1100;
        7'd85: control <= 4'b1100;
        7'd86: control <= 4'b1100;
        7'd87: control <= 4'b1100;
        7'd88: control <= 4'b1100;
        7'd89: control <= 4'b1100;
        7'd90: control <= 4'b1100;
        7'd91: control <= 4'b1100;
        7'd92: control <= 4'b1100;
        7'd93: control <= 4'b1100;
        7'd94: control <= 4'b1100;
        7'd95: control <= 4'b1100;
        7'd96: control <= 4'b0000;
        7'd97: control <= 4'b0000;
        7'd98: control <= 4'b0000;
        7'd99: control <= 4'b0000;
        7'd100: control <= 4'b0000;
        7'd101: control <= 4'b0000;
        7'd102: control <= 4'b0000;
        7'd103: control <= 4'b0000;
        7'd104: control <= 4'b0000;
        7'd105: control <= 4'b0000;
        7'd106: control <= 4'b0000;
        7'd107: control <= 4'b0000;
        7'd108: control <= 4'b0000;
        7'd109: control <= 4'b0000;
        7'd110: control <= 4'b0000;
        7'd111: control <= 4'b0000;
        7'd112: control <= 4'b0000;
        7'd113: control <= 4'b0000;
        7'd114: control <= 4'b0000;
        7'd115: control <= 4'b0000;
        7'd116: control <= 4'b0000;
        7'd117: control <= 4'b0000;
        7'd118: control <= 4'b0000;
        7'd119: control <= 4'b0000;
        7'd120: control <= 4'b0000;
        7'd121: control <= 4'b0000;
        7'd122: control <= 4'b0000;
        7'd123: control <= 4'b0000;
        7'd124: control <= 4'b0000;
        7'd125: control <= 4'b0000;
        7'd126: control <= 4'b0000;
        7'd127: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
    end
    assign t0_0 = x0;
    assign t0_1 = x2;
    assign t0_2 = x1;
    assign t0_3 = x3;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
    assign t2_0 = t1_0;
    assign t2_1 = t1_2;
    assign t2_2 = t1_1;
    assign t2_3 = t1_3;
   always @(posedge clk) begin
         t3_0 <= (control0[3] == 0) ? t2_0 : t2_1;
         t3_1 <= (control0[3] == 0) ? t2_1 : t2_0;
         t3_2 <= (control0[2] == 0) ? t2_2 : t2_3;
         t3_3 <= (control0[2] == 0) ? t2_3 : t2_2;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_2;
    assign t4_2 = t3_1;
    assign t4_3 = t3_3;
   always @(posedge clk) begin
         t5_0 <= (control1[1] == 0) ? t4_0 : t4_1;
         t5_1 <= (control1[1] == 0) ? t4_1 : t4_0;
         t5_2 <= (control1[0] == 0) ? t4_2 : t4_3;
         t5_3 <= (control1[0] == 0) ? t4_3 : t4_2;
   end
    always @(posedge clk) begin
        y0 <= t5_0;
        y1 <= t5_2;
        y2 <= t5_1;
        y3 <= t5_3;
    end
endmodule

// Latency: 261
// Gap: 128
module perm19326(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter width = 40;

   parameter depth = 128;

   parameter addrbits = 7;

   parameter muxbits = 2;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm0;
   assign tm0 = 0;

shiftRegFIFO #(4, 1) shiftFIFO_25252(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_25253(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);

nextReg #(127, 7) nextReg_25264(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_25265(.X(next2), .Y(next3), .clk(clk));
nextReg #(128, 7) nextReg_25268(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_25269(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(127, 1) shiftFIFO_25272(.X(tm0), .Y(tm0_d), .clk(clk));
shiftRegFIFO #(4, 1) shiftFIFO_25275(.X(tm0_d), .Y(tm0_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(4, 7) shiftFIFO_25280(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(5, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd0 <= 96;
	     {1'd0,  7'd1}: s1rd0 <= 104;
	     {1'd0,  7'd2}: s1rd0 <= 112;
	     {1'd0,  7'd3}: s1rd0 <= 120;
	     {1'd0,  7'd4}: s1rd0 <= 98;
	     {1'd0,  7'd5}: s1rd0 <= 106;
	     {1'd0,  7'd6}: s1rd0 <= 114;
	     {1'd0,  7'd7}: s1rd0 <= 122;
	     {1'd0,  7'd8}: s1rd0 <= 100;
	     {1'd0,  7'd9}: s1rd0 <= 108;
	     {1'd0,  7'd10}: s1rd0 <= 116;
	     {1'd0,  7'd11}: s1rd0 <= 124;
	     {1'd0,  7'd12}: s1rd0 <= 102;
	     {1'd0,  7'd13}: s1rd0 <= 110;
	     {1'd0,  7'd14}: s1rd0 <= 118;
	     {1'd0,  7'd15}: s1rd0 <= 126;
	     {1'd0,  7'd16}: s1rd0 <= 97;
	     {1'd0,  7'd17}: s1rd0 <= 105;
	     {1'd0,  7'd18}: s1rd0 <= 113;
	     {1'd0,  7'd19}: s1rd0 <= 121;
	     {1'd0,  7'd20}: s1rd0 <= 99;
	     {1'd0,  7'd21}: s1rd0 <= 107;
	     {1'd0,  7'd22}: s1rd0 <= 115;
	     {1'd0,  7'd23}: s1rd0 <= 123;
	     {1'd0,  7'd24}: s1rd0 <= 101;
	     {1'd0,  7'd25}: s1rd0 <= 109;
	     {1'd0,  7'd26}: s1rd0 <= 117;
	     {1'd0,  7'd27}: s1rd0 <= 125;
	     {1'd0,  7'd28}: s1rd0 <= 103;
	     {1'd0,  7'd29}: s1rd0 <= 111;
	     {1'd0,  7'd30}: s1rd0 <= 119;
	     {1'd0,  7'd31}: s1rd0 <= 127;
	     {1'd0,  7'd32}: s1rd0 <= 64;
	     {1'd0,  7'd33}: s1rd0 <= 72;
	     {1'd0,  7'd34}: s1rd0 <= 80;
	     {1'd0,  7'd35}: s1rd0 <= 88;
	     {1'd0,  7'd36}: s1rd0 <= 66;
	     {1'd0,  7'd37}: s1rd0 <= 74;
	     {1'd0,  7'd38}: s1rd0 <= 82;
	     {1'd0,  7'd39}: s1rd0 <= 90;
	     {1'd0,  7'd40}: s1rd0 <= 68;
	     {1'd0,  7'd41}: s1rd0 <= 76;
	     {1'd0,  7'd42}: s1rd0 <= 84;
	     {1'd0,  7'd43}: s1rd0 <= 92;
	     {1'd0,  7'd44}: s1rd0 <= 70;
	     {1'd0,  7'd45}: s1rd0 <= 78;
	     {1'd0,  7'd46}: s1rd0 <= 86;
	     {1'd0,  7'd47}: s1rd0 <= 94;
	     {1'd0,  7'd48}: s1rd0 <= 65;
	     {1'd0,  7'd49}: s1rd0 <= 73;
	     {1'd0,  7'd50}: s1rd0 <= 81;
	     {1'd0,  7'd51}: s1rd0 <= 89;
	     {1'd0,  7'd52}: s1rd0 <= 67;
	     {1'd0,  7'd53}: s1rd0 <= 75;
	     {1'd0,  7'd54}: s1rd0 <= 83;
	     {1'd0,  7'd55}: s1rd0 <= 91;
	     {1'd0,  7'd56}: s1rd0 <= 69;
	     {1'd0,  7'd57}: s1rd0 <= 77;
	     {1'd0,  7'd58}: s1rd0 <= 85;
	     {1'd0,  7'd59}: s1rd0 <= 93;
	     {1'd0,  7'd60}: s1rd0 <= 71;
	     {1'd0,  7'd61}: s1rd0 <= 79;
	     {1'd0,  7'd62}: s1rd0 <= 87;
	     {1'd0,  7'd63}: s1rd0 <= 95;
	     {1'd0,  7'd64}: s1rd0 <= 32;
	     {1'd0,  7'd65}: s1rd0 <= 40;
	     {1'd0,  7'd66}: s1rd0 <= 48;
	     {1'd0,  7'd67}: s1rd0 <= 56;
	     {1'd0,  7'd68}: s1rd0 <= 34;
	     {1'd0,  7'd69}: s1rd0 <= 42;
	     {1'd0,  7'd70}: s1rd0 <= 50;
	     {1'd0,  7'd71}: s1rd0 <= 58;
	     {1'd0,  7'd72}: s1rd0 <= 36;
	     {1'd0,  7'd73}: s1rd0 <= 44;
	     {1'd0,  7'd74}: s1rd0 <= 52;
	     {1'd0,  7'd75}: s1rd0 <= 60;
	     {1'd0,  7'd76}: s1rd0 <= 38;
	     {1'd0,  7'd77}: s1rd0 <= 46;
	     {1'd0,  7'd78}: s1rd0 <= 54;
	     {1'd0,  7'd79}: s1rd0 <= 62;
	     {1'd0,  7'd80}: s1rd0 <= 33;
	     {1'd0,  7'd81}: s1rd0 <= 41;
	     {1'd0,  7'd82}: s1rd0 <= 49;
	     {1'd0,  7'd83}: s1rd0 <= 57;
	     {1'd0,  7'd84}: s1rd0 <= 35;
	     {1'd0,  7'd85}: s1rd0 <= 43;
	     {1'd0,  7'd86}: s1rd0 <= 51;
	     {1'd0,  7'd87}: s1rd0 <= 59;
	     {1'd0,  7'd88}: s1rd0 <= 37;
	     {1'd0,  7'd89}: s1rd0 <= 45;
	     {1'd0,  7'd90}: s1rd0 <= 53;
	     {1'd0,  7'd91}: s1rd0 <= 61;
	     {1'd0,  7'd92}: s1rd0 <= 39;
	     {1'd0,  7'd93}: s1rd0 <= 47;
	     {1'd0,  7'd94}: s1rd0 <= 55;
	     {1'd0,  7'd95}: s1rd0 <= 63;
	     {1'd0,  7'd96}: s1rd0 <= 0;
	     {1'd0,  7'd97}: s1rd0 <= 8;
	     {1'd0,  7'd98}: s1rd0 <= 16;
	     {1'd0,  7'd99}: s1rd0 <= 24;
	     {1'd0,  7'd100}: s1rd0 <= 2;
	     {1'd0,  7'd101}: s1rd0 <= 10;
	     {1'd0,  7'd102}: s1rd0 <= 18;
	     {1'd0,  7'd103}: s1rd0 <= 26;
	     {1'd0,  7'd104}: s1rd0 <= 4;
	     {1'd0,  7'd105}: s1rd0 <= 12;
	     {1'd0,  7'd106}: s1rd0 <= 20;
	     {1'd0,  7'd107}: s1rd0 <= 28;
	     {1'd0,  7'd108}: s1rd0 <= 6;
	     {1'd0,  7'd109}: s1rd0 <= 14;
	     {1'd0,  7'd110}: s1rd0 <= 22;
	     {1'd0,  7'd111}: s1rd0 <= 30;
	     {1'd0,  7'd112}: s1rd0 <= 1;
	     {1'd0,  7'd113}: s1rd0 <= 9;
	     {1'd0,  7'd114}: s1rd0 <= 17;
	     {1'd0,  7'd115}: s1rd0 <= 25;
	     {1'd0,  7'd116}: s1rd0 <= 3;
	     {1'd0,  7'd117}: s1rd0 <= 11;
	     {1'd0,  7'd118}: s1rd0 <= 19;
	     {1'd0,  7'd119}: s1rd0 <= 27;
	     {1'd0,  7'd120}: s1rd0 <= 5;
	     {1'd0,  7'd121}: s1rd0 <= 13;
	     {1'd0,  7'd122}: s1rd0 <= 21;
	     {1'd0,  7'd123}: s1rd0 <= 29;
	     {1'd0,  7'd124}: s1rd0 <= 7;
	     {1'd0,  7'd125}: s1rd0 <= 15;
	     {1'd0,  7'd126}: s1rd0 <= 23;
	     {1'd0,  7'd127}: s1rd0 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "distributed"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd1 <= 64;
	     {1'd0,  7'd1}: s1rd1 <= 72;
	     {1'd0,  7'd2}: s1rd1 <= 80;
	     {1'd0,  7'd3}: s1rd1 <= 88;
	     {1'd0,  7'd4}: s1rd1 <= 66;
	     {1'd0,  7'd5}: s1rd1 <= 74;
	     {1'd0,  7'd6}: s1rd1 <= 82;
	     {1'd0,  7'd7}: s1rd1 <= 90;
	     {1'd0,  7'd8}: s1rd1 <= 68;
	     {1'd0,  7'd9}: s1rd1 <= 76;
	     {1'd0,  7'd10}: s1rd1 <= 84;
	     {1'd0,  7'd11}: s1rd1 <= 92;
	     {1'd0,  7'd12}: s1rd1 <= 70;
	     {1'd0,  7'd13}: s1rd1 <= 78;
	     {1'd0,  7'd14}: s1rd1 <= 86;
	     {1'd0,  7'd15}: s1rd1 <= 94;
	     {1'd0,  7'd16}: s1rd1 <= 65;
	     {1'd0,  7'd17}: s1rd1 <= 73;
	     {1'd0,  7'd18}: s1rd1 <= 81;
	     {1'd0,  7'd19}: s1rd1 <= 89;
	     {1'd0,  7'd20}: s1rd1 <= 67;
	     {1'd0,  7'd21}: s1rd1 <= 75;
	     {1'd0,  7'd22}: s1rd1 <= 83;
	     {1'd0,  7'd23}: s1rd1 <= 91;
	     {1'd0,  7'd24}: s1rd1 <= 69;
	     {1'd0,  7'd25}: s1rd1 <= 77;
	     {1'd0,  7'd26}: s1rd1 <= 85;
	     {1'd0,  7'd27}: s1rd1 <= 93;
	     {1'd0,  7'd28}: s1rd1 <= 71;
	     {1'd0,  7'd29}: s1rd1 <= 79;
	     {1'd0,  7'd30}: s1rd1 <= 87;
	     {1'd0,  7'd31}: s1rd1 <= 95;
	     {1'd0,  7'd32}: s1rd1 <= 96;
	     {1'd0,  7'd33}: s1rd1 <= 104;
	     {1'd0,  7'd34}: s1rd1 <= 112;
	     {1'd0,  7'd35}: s1rd1 <= 120;
	     {1'd0,  7'd36}: s1rd1 <= 98;
	     {1'd0,  7'd37}: s1rd1 <= 106;
	     {1'd0,  7'd38}: s1rd1 <= 114;
	     {1'd0,  7'd39}: s1rd1 <= 122;
	     {1'd0,  7'd40}: s1rd1 <= 100;
	     {1'd0,  7'd41}: s1rd1 <= 108;
	     {1'd0,  7'd42}: s1rd1 <= 116;
	     {1'd0,  7'd43}: s1rd1 <= 124;
	     {1'd0,  7'd44}: s1rd1 <= 102;
	     {1'd0,  7'd45}: s1rd1 <= 110;
	     {1'd0,  7'd46}: s1rd1 <= 118;
	     {1'd0,  7'd47}: s1rd1 <= 126;
	     {1'd0,  7'd48}: s1rd1 <= 97;
	     {1'd0,  7'd49}: s1rd1 <= 105;
	     {1'd0,  7'd50}: s1rd1 <= 113;
	     {1'd0,  7'd51}: s1rd1 <= 121;
	     {1'd0,  7'd52}: s1rd1 <= 99;
	     {1'd0,  7'd53}: s1rd1 <= 107;
	     {1'd0,  7'd54}: s1rd1 <= 115;
	     {1'd0,  7'd55}: s1rd1 <= 123;
	     {1'd0,  7'd56}: s1rd1 <= 101;
	     {1'd0,  7'd57}: s1rd1 <= 109;
	     {1'd0,  7'd58}: s1rd1 <= 117;
	     {1'd0,  7'd59}: s1rd1 <= 125;
	     {1'd0,  7'd60}: s1rd1 <= 103;
	     {1'd0,  7'd61}: s1rd1 <= 111;
	     {1'd0,  7'd62}: s1rd1 <= 119;
	     {1'd0,  7'd63}: s1rd1 <= 127;
	     {1'd0,  7'd64}: s1rd1 <= 0;
	     {1'd0,  7'd65}: s1rd1 <= 8;
	     {1'd0,  7'd66}: s1rd1 <= 16;
	     {1'd0,  7'd67}: s1rd1 <= 24;
	     {1'd0,  7'd68}: s1rd1 <= 2;
	     {1'd0,  7'd69}: s1rd1 <= 10;
	     {1'd0,  7'd70}: s1rd1 <= 18;
	     {1'd0,  7'd71}: s1rd1 <= 26;
	     {1'd0,  7'd72}: s1rd1 <= 4;
	     {1'd0,  7'd73}: s1rd1 <= 12;
	     {1'd0,  7'd74}: s1rd1 <= 20;
	     {1'd0,  7'd75}: s1rd1 <= 28;
	     {1'd0,  7'd76}: s1rd1 <= 6;
	     {1'd0,  7'd77}: s1rd1 <= 14;
	     {1'd0,  7'd78}: s1rd1 <= 22;
	     {1'd0,  7'd79}: s1rd1 <= 30;
	     {1'd0,  7'd80}: s1rd1 <= 1;
	     {1'd0,  7'd81}: s1rd1 <= 9;
	     {1'd0,  7'd82}: s1rd1 <= 17;
	     {1'd0,  7'd83}: s1rd1 <= 25;
	     {1'd0,  7'd84}: s1rd1 <= 3;
	     {1'd0,  7'd85}: s1rd1 <= 11;
	     {1'd0,  7'd86}: s1rd1 <= 19;
	     {1'd0,  7'd87}: s1rd1 <= 27;
	     {1'd0,  7'd88}: s1rd1 <= 5;
	     {1'd0,  7'd89}: s1rd1 <= 13;
	     {1'd0,  7'd90}: s1rd1 <= 21;
	     {1'd0,  7'd91}: s1rd1 <= 29;
	     {1'd0,  7'd92}: s1rd1 <= 7;
	     {1'd0,  7'd93}: s1rd1 <= 15;
	     {1'd0,  7'd94}: s1rd1 <= 23;
	     {1'd0,  7'd95}: s1rd1 <= 31;
	     {1'd0,  7'd96}: s1rd1 <= 32;
	     {1'd0,  7'd97}: s1rd1 <= 40;
	     {1'd0,  7'd98}: s1rd1 <= 48;
	     {1'd0,  7'd99}: s1rd1 <= 56;
	     {1'd0,  7'd100}: s1rd1 <= 34;
	     {1'd0,  7'd101}: s1rd1 <= 42;
	     {1'd0,  7'd102}: s1rd1 <= 50;
	     {1'd0,  7'd103}: s1rd1 <= 58;
	     {1'd0,  7'd104}: s1rd1 <= 36;
	     {1'd0,  7'd105}: s1rd1 <= 44;
	     {1'd0,  7'd106}: s1rd1 <= 52;
	     {1'd0,  7'd107}: s1rd1 <= 60;
	     {1'd0,  7'd108}: s1rd1 <= 38;
	     {1'd0,  7'd109}: s1rd1 <= 46;
	     {1'd0,  7'd110}: s1rd1 <= 54;
	     {1'd0,  7'd111}: s1rd1 <= 62;
	     {1'd0,  7'd112}: s1rd1 <= 33;
	     {1'd0,  7'd113}: s1rd1 <= 41;
	     {1'd0,  7'd114}: s1rd1 <= 49;
	     {1'd0,  7'd115}: s1rd1 <= 57;
	     {1'd0,  7'd116}: s1rd1 <= 35;
	     {1'd0,  7'd117}: s1rd1 <= 43;
	     {1'd0,  7'd118}: s1rd1 <= 51;
	     {1'd0,  7'd119}: s1rd1 <= 59;
	     {1'd0,  7'd120}: s1rd1 <= 37;
	     {1'd0,  7'd121}: s1rd1 <= 45;
	     {1'd0,  7'd122}: s1rd1 <= 53;
	     {1'd0,  7'd123}: s1rd1 <= 61;
	     {1'd0,  7'd124}: s1rd1 <= 39;
	     {1'd0,  7'd125}: s1rd1 <= 47;
	     {1'd0,  7'd126}: s1rd1 <= 55;
	     {1'd0,  7'd127}: s1rd1 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "distributed"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd2 <= 32;
	     {1'd0,  7'd1}: s1rd2 <= 40;
	     {1'd0,  7'd2}: s1rd2 <= 48;
	     {1'd0,  7'd3}: s1rd2 <= 56;
	     {1'd0,  7'd4}: s1rd2 <= 34;
	     {1'd0,  7'd5}: s1rd2 <= 42;
	     {1'd0,  7'd6}: s1rd2 <= 50;
	     {1'd0,  7'd7}: s1rd2 <= 58;
	     {1'd0,  7'd8}: s1rd2 <= 36;
	     {1'd0,  7'd9}: s1rd2 <= 44;
	     {1'd0,  7'd10}: s1rd2 <= 52;
	     {1'd0,  7'd11}: s1rd2 <= 60;
	     {1'd0,  7'd12}: s1rd2 <= 38;
	     {1'd0,  7'd13}: s1rd2 <= 46;
	     {1'd0,  7'd14}: s1rd2 <= 54;
	     {1'd0,  7'd15}: s1rd2 <= 62;
	     {1'd0,  7'd16}: s1rd2 <= 33;
	     {1'd0,  7'd17}: s1rd2 <= 41;
	     {1'd0,  7'd18}: s1rd2 <= 49;
	     {1'd0,  7'd19}: s1rd2 <= 57;
	     {1'd0,  7'd20}: s1rd2 <= 35;
	     {1'd0,  7'd21}: s1rd2 <= 43;
	     {1'd0,  7'd22}: s1rd2 <= 51;
	     {1'd0,  7'd23}: s1rd2 <= 59;
	     {1'd0,  7'd24}: s1rd2 <= 37;
	     {1'd0,  7'd25}: s1rd2 <= 45;
	     {1'd0,  7'd26}: s1rd2 <= 53;
	     {1'd0,  7'd27}: s1rd2 <= 61;
	     {1'd0,  7'd28}: s1rd2 <= 39;
	     {1'd0,  7'd29}: s1rd2 <= 47;
	     {1'd0,  7'd30}: s1rd2 <= 55;
	     {1'd0,  7'd31}: s1rd2 <= 63;
	     {1'd0,  7'd32}: s1rd2 <= 0;
	     {1'd0,  7'd33}: s1rd2 <= 8;
	     {1'd0,  7'd34}: s1rd2 <= 16;
	     {1'd0,  7'd35}: s1rd2 <= 24;
	     {1'd0,  7'd36}: s1rd2 <= 2;
	     {1'd0,  7'd37}: s1rd2 <= 10;
	     {1'd0,  7'd38}: s1rd2 <= 18;
	     {1'd0,  7'd39}: s1rd2 <= 26;
	     {1'd0,  7'd40}: s1rd2 <= 4;
	     {1'd0,  7'd41}: s1rd2 <= 12;
	     {1'd0,  7'd42}: s1rd2 <= 20;
	     {1'd0,  7'd43}: s1rd2 <= 28;
	     {1'd0,  7'd44}: s1rd2 <= 6;
	     {1'd0,  7'd45}: s1rd2 <= 14;
	     {1'd0,  7'd46}: s1rd2 <= 22;
	     {1'd0,  7'd47}: s1rd2 <= 30;
	     {1'd0,  7'd48}: s1rd2 <= 1;
	     {1'd0,  7'd49}: s1rd2 <= 9;
	     {1'd0,  7'd50}: s1rd2 <= 17;
	     {1'd0,  7'd51}: s1rd2 <= 25;
	     {1'd0,  7'd52}: s1rd2 <= 3;
	     {1'd0,  7'd53}: s1rd2 <= 11;
	     {1'd0,  7'd54}: s1rd2 <= 19;
	     {1'd0,  7'd55}: s1rd2 <= 27;
	     {1'd0,  7'd56}: s1rd2 <= 5;
	     {1'd0,  7'd57}: s1rd2 <= 13;
	     {1'd0,  7'd58}: s1rd2 <= 21;
	     {1'd0,  7'd59}: s1rd2 <= 29;
	     {1'd0,  7'd60}: s1rd2 <= 7;
	     {1'd0,  7'd61}: s1rd2 <= 15;
	     {1'd0,  7'd62}: s1rd2 <= 23;
	     {1'd0,  7'd63}: s1rd2 <= 31;
	     {1'd0,  7'd64}: s1rd2 <= 96;
	     {1'd0,  7'd65}: s1rd2 <= 104;
	     {1'd0,  7'd66}: s1rd2 <= 112;
	     {1'd0,  7'd67}: s1rd2 <= 120;
	     {1'd0,  7'd68}: s1rd2 <= 98;
	     {1'd0,  7'd69}: s1rd2 <= 106;
	     {1'd0,  7'd70}: s1rd2 <= 114;
	     {1'd0,  7'd71}: s1rd2 <= 122;
	     {1'd0,  7'd72}: s1rd2 <= 100;
	     {1'd0,  7'd73}: s1rd2 <= 108;
	     {1'd0,  7'd74}: s1rd2 <= 116;
	     {1'd0,  7'd75}: s1rd2 <= 124;
	     {1'd0,  7'd76}: s1rd2 <= 102;
	     {1'd0,  7'd77}: s1rd2 <= 110;
	     {1'd0,  7'd78}: s1rd2 <= 118;
	     {1'd0,  7'd79}: s1rd2 <= 126;
	     {1'd0,  7'd80}: s1rd2 <= 97;
	     {1'd0,  7'd81}: s1rd2 <= 105;
	     {1'd0,  7'd82}: s1rd2 <= 113;
	     {1'd0,  7'd83}: s1rd2 <= 121;
	     {1'd0,  7'd84}: s1rd2 <= 99;
	     {1'd0,  7'd85}: s1rd2 <= 107;
	     {1'd0,  7'd86}: s1rd2 <= 115;
	     {1'd0,  7'd87}: s1rd2 <= 123;
	     {1'd0,  7'd88}: s1rd2 <= 101;
	     {1'd0,  7'd89}: s1rd2 <= 109;
	     {1'd0,  7'd90}: s1rd2 <= 117;
	     {1'd0,  7'd91}: s1rd2 <= 125;
	     {1'd0,  7'd92}: s1rd2 <= 103;
	     {1'd0,  7'd93}: s1rd2 <= 111;
	     {1'd0,  7'd94}: s1rd2 <= 119;
	     {1'd0,  7'd95}: s1rd2 <= 127;
	     {1'd0,  7'd96}: s1rd2 <= 64;
	     {1'd0,  7'd97}: s1rd2 <= 72;
	     {1'd0,  7'd98}: s1rd2 <= 80;
	     {1'd0,  7'd99}: s1rd2 <= 88;
	     {1'd0,  7'd100}: s1rd2 <= 66;
	     {1'd0,  7'd101}: s1rd2 <= 74;
	     {1'd0,  7'd102}: s1rd2 <= 82;
	     {1'd0,  7'd103}: s1rd2 <= 90;
	     {1'd0,  7'd104}: s1rd2 <= 68;
	     {1'd0,  7'd105}: s1rd2 <= 76;
	     {1'd0,  7'd106}: s1rd2 <= 84;
	     {1'd0,  7'd107}: s1rd2 <= 92;
	     {1'd0,  7'd108}: s1rd2 <= 70;
	     {1'd0,  7'd109}: s1rd2 <= 78;
	     {1'd0,  7'd110}: s1rd2 <= 86;
	     {1'd0,  7'd111}: s1rd2 <= 94;
	     {1'd0,  7'd112}: s1rd2 <= 65;
	     {1'd0,  7'd113}: s1rd2 <= 73;
	     {1'd0,  7'd114}: s1rd2 <= 81;
	     {1'd0,  7'd115}: s1rd2 <= 89;
	     {1'd0,  7'd116}: s1rd2 <= 67;
	     {1'd0,  7'd117}: s1rd2 <= 75;
	     {1'd0,  7'd118}: s1rd2 <= 83;
	     {1'd0,  7'd119}: s1rd2 <= 91;
	     {1'd0,  7'd120}: s1rd2 <= 69;
	     {1'd0,  7'd121}: s1rd2 <= 77;
	     {1'd0,  7'd122}: s1rd2 <= 85;
	     {1'd0,  7'd123}: s1rd2 <= 93;
	     {1'd0,  7'd124}: s1rd2 <= 71;
	     {1'd0,  7'd125}: s1rd2 <= 79;
	     {1'd0,  7'd126}: s1rd2 <= 87;
	     {1'd0,  7'd127}: s1rd2 <= 95;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "distributed"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd3 <= 0;
	     {1'd0,  7'd1}: s1rd3 <= 8;
	     {1'd0,  7'd2}: s1rd3 <= 16;
	     {1'd0,  7'd3}: s1rd3 <= 24;
	     {1'd0,  7'd4}: s1rd3 <= 2;
	     {1'd0,  7'd5}: s1rd3 <= 10;
	     {1'd0,  7'd6}: s1rd3 <= 18;
	     {1'd0,  7'd7}: s1rd3 <= 26;
	     {1'd0,  7'd8}: s1rd3 <= 4;
	     {1'd0,  7'd9}: s1rd3 <= 12;
	     {1'd0,  7'd10}: s1rd3 <= 20;
	     {1'd0,  7'd11}: s1rd3 <= 28;
	     {1'd0,  7'd12}: s1rd3 <= 6;
	     {1'd0,  7'd13}: s1rd3 <= 14;
	     {1'd0,  7'd14}: s1rd3 <= 22;
	     {1'd0,  7'd15}: s1rd3 <= 30;
	     {1'd0,  7'd16}: s1rd3 <= 1;
	     {1'd0,  7'd17}: s1rd3 <= 9;
	     {1'd0,  7'd18}: s1rd3 <= 17;
	     {1'd0,  7'd19}: s1rd3 <= 25;
	     {1'd0,  7'd20}: s1rd3 <= 3;
	     {1'd0,  7'd21}: s1rd3 <= 11;
	     {1'd0,  7'd22}: s1rd3 <= 19;
	     {1'd0,  7'd23}: s1rd3 <= 27;
	     {1'd0,  7'd24}: s1rd3 <= 5;
	     {1'd0,  7'd25}: s1rd3 <= 13;
	     {1'd0,  7'd26}: s1rd3 <= 21;
	     {1'd0,  7'd27}: s1rd3 <= 29;
	     {1'd0,  7'd28}: s1rd3 <= 7;
	     {1'd0,  7'd29}: s1rd3 <= 15;
	     {1'd0,  7'd30}: s1rd3 <= 23;
	     {1'd0,  7'd31}: s1rd3 <= 31;
	     {1'd0,  7'd32}: s1rd3 <= 32;
	     {1'd0,  7'd33}: s1rd3 <= 40;
	     {1'd0,  7'd34}: s1rd3 <= 48;
	     {1'd0,  7'd35}: s1rd3 <= 56;
	     {1'd0,  7'd36}: s1rd3 <= 34;
	     {1'd0,  7'd37}: s1rd3 <= 42;
	     {1'd0,  7'd38}: s1rd3 <= 50;
	     {1'd0,  7'd39}: s1rd3 <= 58;
	     {1'd0,  7'd40}: s1rd3 <= 36;
	     {1'd0,  7'd41}: s1rd3 <= 44;
	     {1'd0,  7'd42}: s1rd3 <= 52;
	     {1'd0,  7'd43}: s1rd3 <= 60;
	     {1'd0,  7'd44}: s1rd3 <= 38;
	     {1'd0,  7'd45}: s1rd3 <= 46;
	     {1'd0,  7'd46}: s1rd3 <= 54;
	     {1'd0,  7'd47}: s1rd3 <= 62;
	     {1'd0,  7'd48}: s1rd3 <= 33;
	     {1'd0,  7'd49}: s1rd3 <= 41;
	     {1'd0,  7'd50}: s1rd3 <= 49;
	     {1'd0,  7'd51}: s1rd3 <= 57;
	     {1'd0,  7'd52}: s1rd3 <= 35;
	     {1'd0,  7'd53}: s1rd3 <= 43;
	     {1'd0,  7'd54}: s1rd3 <= 51;
	     {1'd0,  7'd55}: s1rd3 <= 59;
	     {1'd0,  7'd56}: s1rd3 <= 37;
	     {1'd0,  7'd57}: s1rd3 <= 45;
	     {1'd0,  7'd58}: s1rd3 <= 53;
	     {1'd0,  7'd59}: s1rd3 <= 61;
	     {1'd0,  7'd60}: s1rd3 <= 39;
	     {1'd0,  7'd61}: s1rd3 <= 47;
	     {1'd0,  7'd62}: s1rd3 <= 55;
	     {1'd0,  7'd63}: s1rd3 <= 63;
	     {1'd0,  7'd64}: s1rd3 <= 64;
	     {1'd0,  7'd65}: s1rd3 <= 72;
	     {1'd0,  7'd66}: s1rd3 <= 80;
	     {1'd0,  7'd67}: s1rd3 <= 88;
	     {1'd0,  7'd68}: s1rd3 <= 66;
	     {1'd0,  7'd69}: s1rd3 <= 74;
	     {1'd0,  7'd70}: s1rd3 <= 82;
	     {1'd0,  7'd71}: s1rd3 <= 90;
	     {1'd0,  7'd72}: s1rd3 <= 68;
	     {1'd0,  7'd73}: s1rd3 <= 76;
	     {1'd0,  7'd74}: s1rd3 <= 84;
	     {1'd0,  7'd75}: s1rd3 <= 92;
	     {1'd0,  7'd76}: s1rd3 <= 70;
	     {1'd0,  7'd77}: s1rd3 <= 78;
	     {1'd0,  7'd78}: s1rd3 <= 86;
	     {1'd0,  7'd79}: s1rd3 <= 94;
	     {1'd0,  7'd80}: s1rd3 <= 65;
	     {1'd0,  7'd81}: s1rd3 <= 73;
	     {1'd0,  7'd82}: s1rd3 <= 81;
	     {1'd0,  7'd83}: s1rd3 <= 89;
	     {1'd0,  7'd84}: s1rd3 <= 67;
	     {1'd0,  7'd85}: s1rd3 <= 75;
	     {1'd0,  7'd86}: s1rd3 <= 83;
	     {1'd0,  7'd87}: s1rd3 <= 91;
	     {1'd0,  7'd88}: s1rd3 <= 69;
	     {1'd0,  7'd89}: s1rd3 <= 77;
	     {1'd0,  7'd90}: s1rd3 <= 85;
	     {1'd0,  7'd91}: s1rd3 <= 93;
	     {1'd0,  7'd92}: s1rd3 <= 71;
	     {1'd0,  7'd93}: s1rd3 <= 79;
	     {1'd0,  7'd94}: s1rd3 <= 87;
	     {1'd0,  7'd95}: s1rd3 <= 95;
	     {1'd0,  7'd96}: s1rd3 <= 96;
	     {1'd0,  7'd97}: s1rd3 <= 104;
	     {1'd0,  7'd98}: s1rd3 <= 112;
	     {1'd0,  7'd99}: s1rd3 <= 120;
	     {1'd0,  7'd100}: s1rd3 <= 98;
	     {1'd0,  7'd101}: s1rd3 <= 106;
	     {1'd0,  7'd102}: s1rd3 <= 114;
	     {1'd0,  7'd103}: s1rd3 <= 122;
	     {1'd0,  7'd104}: s1rd3 <= 100;
	     {1'd0,  7'd105}: s1rd3 <= 108;
	     {1'd0,  7'd106}: s1rd3 <= 116;
	     {1'd0,  7'd107}: s1rd3 <= 124;
	     {1'd0,  7'd108}: s1rd3 <= 102;
	     {1'd0,  7'd109}: s1rd3 <= 110;
	     {1'd0,  7'd110}: s1rd3 <= 118;
	     {1'd0,  7'd111}: s1rd3 <= 126;
	     {1'd0,  7'd112}: s1rd3 <= 97;
	     {1'd0,  7'd113}: s1rd3 <= 105;
	     {1'd0,  7'd114}: s1rd3 <= 113;
	     {1'd0,  7'd115}: s1rd3 <= 121;
	     {1'd0,  7'd116}: s1rd3 <= 99;
	     {1'd0,  7'd117}: s1rd3 <= 107;
	     {1'd0,  7'd118}: s1rd3 <= 115;
	     {1'd0,  7'd119}: s1rd3 <= 123;
	     {1'd0,  7'd120}: s1rd3 <= 101;
	     {1'd0,  7'd121}: s1rd3 <= 109;
	     {1'd0,  7'd122}: s1rd3 <= 117;
	     {1'd0,  7'd123}: s1rd3 <= 125;
	     {1'd0,  7'd124}: s1rd3 <= 103;
	     {1'd0,  7'd125}: s1rd3 <= 111;
	     {1'd0,  7'd126}: s1rd3 <= 119;
	     {1'd0,  7'd127}: s1rd3 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "distributed"
    swNet19326 sw(tm0_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3);

   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr0 <= 80;
	      {1'd0, 7'd1}: s2wr0 <= 81;
	      {1'd0, 7'd2}: s2wr0 <= 82;
	      {1'd0, 7'd3}: s2wr0 <= 83;
	      {1'd0, 7'd4}: s2wr0 <= 84;
	      {1'd0, 7'd5}: s2wr0 <= 85;
	      {1'd0, 7'd6}: s2wr0 <= 86;
	      {1'd0, 7'd7}: s2wr0 <= 87;
	      {1'd0, 7'd8}: s2wr0 <= 88;
	      {1'd0, 7'd9}: s2wr0 <= 89;
	      {1'd0, 7'd10}: s2wr0 <= 90;
	      {1'd0, 7'd11}: s2wr0 <= 91;
	      {1'd0, 7'd12}: s2wr0 <= 92;
	      {1'd0, 7'd13}: s2wr0 <= 93;
	      {1'd0, 7'd14}: s2wr0 <= 94;
	      {1'd0, 7'd15}: s2wr0 <= 95;
	      {1'd0, 7'd16}: s2wr0 <= 112;
	      {1'd0, 7'd17}: s2wr0 <= 113;
	      {1'd0, 7'd18}: s2wr0 <= 114;
	      {1'd0, 7'd19}: s2wr0 <= 115;
	      {1'd0, 7'd20}: s2wr0 <= 116;
	      {1'd0, 7'd21}: s2wr0 <= 117;
	      {1'd0, 7'd22}: s2wr0 <= 118;
	      {1'd0, 7'd23}: s2wr0 <= 119;
	      {1'd0, 7'd24}: s2wr0 <= 120;
	      {1'd0, 7'd25}: s2wr0 <= 121;
	      {1'd0, 7'd26}: s2wr0 <= 122;
	      {1'd0, 7'd27}: s2wr0 <= 123;
	      {1'd0, 7'd28}: s2wr0 <= 124;
	      {1'd0, 7'd29}: s2wr0 <= 125;
	      {1'd0, 7'd30}: s2wr0 <= 126;
	      {1'd0, 7'd31}: s2wr0 <= 127;
	      {1'd0, 7'd32}: s2wr0 <= 16;
	      {1'd0, 7'd33}: s2wr0 <= 17;
	      {1'd0, 7'd34}: s2wr0 <= 18;
	      {1'd0, 7'd35}: s2wr0 <= 19;
	      {1'd0, 7'd36}: s2wr0 <= 20;
	      {1'd0, 7'd37}: s2wr0 <= 21;
	      {1'd0, 7'd38}: s2wr0 <= 22;
	      {1'd0, 7'd39}: s2wr0 <= 23;
	      {1'd0, 7'd40}: s2wr0 <= 24;
	      {1'd0, 7'd41}: s2wr0 <= 25;
	      {1'd0, 7'd42}: s2wr0 <= 26;
	      {1'd0, 7'd43}: s2wr0 <= 27;
	      {1'd0, 7'd44}: s2wr0 <= 28;
	      {1'd0, 7'd45}: s2wr0 <= 29;
	      {1'd0, 7'd46}: s2wr0 <= 30;
	      {1'd0, 7'd47}: s2wr0 <= 31;
	      {1'd0, 7'd48}: s2wr0 <= 48;
	      {1'd0, 7'd49}: s2wr0 <= 49;
	      {1'd0, 7'd50}: s2wr0 <= 50;
	      {1'd0, 7'd51}: s2wr0 <= 51;
	      {1'd0, 7'd52}: s2wr0 <= 52;
	      {1'd0, 7'd53}: s2wr0 <= 53;
	      {1'd0, 7'd54}: s2wr0 <= 54;
	      {1'd0, 7'd55}: s2wr0 <= 55;
	      {1'd0, 7'd56}: s2wr0 <= 56;
	      {1'd0, 7'd57}: s2wr0 <= 57;
	      {1'd0, 7'd58}: s2wr0 <= 58;
	      {1'd0, 7'd59}: s2wr0 <= 59;
	      {1'd0, 7'd60}: s2wr0 <= 60;
	      {1'd0, 7'd61}: s2wr0 <= 61;
	      {1'd0, 7'd62}: s2wr0 <= 62;
	      {1'd0, 7'd63}: s2wr0 <= 63;
	      {1'd0, 7'd64}: s2wr0 <= 64;
	      {1'd0, 7'd65}: s2wr0 <= 65;
	      {1'd0, 7'd66}: s2wr0 <= 66;
	      {1'd0, 7'd67}: s2wr0 <= 67;
	      {1'd0, 7'd68}: s2wr0 <= 68;
	      {1'd0, 7'd69}: s2wr0 <= 69;
	      {1'd0, 7'd70}: s2wr0 <= 70;
	      {1'd0, 7'd71}: s2wr0 <= 71;
	      {1'd0, 7'd72}: s2wr0 <= 72;
	      {1'd0, 7'd73}: s2wr0 <= 73;
	      {1'd0, 7'd74}: s2wr0 <= 74;
	      {1'd0, 7'd75}: s2wr0 <= 75;
	      {1'd0, 7'd76}: s2wr0 <= 76;
	      {1'd0, 7'd77}: s2wr0 <= 77;
	      {1'd0, 7'd78}: s2wr0 <= 78;
	      {1'd0, 7'd79}: s2wr0 <= 79;
	      {1'd0, 7'd80}: s2wr0 <= 96;
	      {1'd0, 7'd81}: s2wr0 <= 97;
	      {1'd0, 7'd82}: s2wr0 <= 98;
	      {1'd0, 7'd83}: s2wr0 <= 99;
	      {1'd0, 7'd84}: s2wr0 <= 100;
	      {1'd0, 7'd85}: s2wr0 <= 101;
	      {1'd0, 7'd86}: s2wr0 <= 102;
	      {1'd0, 7'd87}: s2wr0 <= 103;
	      {1'd0, 7'd88}: s2wr0 <= 104;
	      {1'd0, 7'd89}: s2wr0 <= 105;
	      {1'd0, 7'd90}: s2wr0 <= 106;
	      {1'd0, 7'd91}: s2wr0 <= 107;
	      {1'd0, 7'd92}: s2wr0 <= 108;
	      {1'd0, 7'd93}: s2wr0 <= 109;
	      {1'd0, 7'd94}: s2wr0 <= 110;
	      {1'd0, 7'd95}: s2wr0 <= 111;
	      {1'd0, 7'd96}: s2wr0 <= 0;
	      {1'd0, 7'd97}: s2wr0 <= 1;
	      {1'd0, 7'd98}: s2wr0 <= 2;
	      {1'd0, 7'd99}: s2wr0 <= 3;
	      {1'd0, 7'd100}: s2wr0 <= 4;
	      {1'd0, 7'd101}: s2wr0 <= 5;
	      {1'd0, 7'd102}: s2wr0 <= 6;
	      {1'd0, 7'd103}: s2wr0 <= 7;
	      {1'd0, 7'd104}: s2wr0 <= 8;
	      {1'd0, 7'd105}: s2wr0 <= 9;
	      {1'd0, 7'd106}: s2wr0 <= 10;
	      {1'd0, 7'd107}: s2wr0 <= 11;
	      {1'd0, 7'd108}: s2wr0 <= 12;
	      {1'd0, 7'd109}: s2wr0 <= 13;
	      {1'd0, 7'd110}: s2wr0 <= 14;
	      {1'd0, 7'd111}: s2wr0 <= 15;
	      {1'd0, 7'd112}: s2wr0 <= 32;
	      {1'd0, 7'd113}: s2wr0 <= 33;
	      {1'd0, 7'd114}: s2wr0 <= 34;
	      {1'd0, 7'd115}: s2wr0 <= 35;
	      {1'd0, 7'd116}: s2wr0 <= 36;
	      {1'd0, 7'd117}: s2wr0 <= 37;
	      {1'd0, 7'd118}: s2wr0 <= 38;
	      {1'd0, 7'd119}: s2wr0 <= 39;
	      {1'd0, 7'd120}: s2wr0 <= 40;
	      {1'd0, 7'd121}: s2wr0 <= 41;
	      {1'd0, 7'd122}: s2wr0 <= 42;
	      {1'd0, 7'd123}: s2wr0 <= 43;
	      {1'd0, 7'd124}: s2wr0 <= 44;
	      {1'd0, 7'd125}: s2wr0 <= 45;
	      {1'd0, 7'd126}: s2wr0 <= 46;
	      {1'd0, 7'd127}: s2wr0 <= 47;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "distributed"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr1 <= 16;
	      {1'd0, 7'd1}: s2wr1 <= 17;
	      {1'd0, 7'd2}: s2wr1 <= 18;
	      {1'd0, 7'd3}: s2wr1 <= 19;
	      {1'd0, 7'd4}: s2wr1 <= 20;
	      {1'd0, 7'd5}: s2wr1 <= 21;
	      {1'd0, 7'd6}: s2wr1 <= 22;
	      {1'd0, 7'd7}: s2wr1 <= 23;
	      {1'd0, 7'd8}: s2wr1 <= 24;
	      {1'd0, 7'd9}: s2wr1 <= 25;
	      {1'd0, 7'd10}: s2wr1 <= 26;
	      {1'd0, 7'd11}: s2wr1 <= 27;
	      {1'd0, 7'd12}: s2wr1 <= 28;
	      {1'd0, 7'd13}: s2wr1 <= 29;
	      {1'd0, 7'd14}: s2wr1 <= 30;
	      {1'd0, 7'd15}: s2wr1 <= 31;
	      {1'd0, 7'd16}: s2wr1 <= 48;
	      {1'd0, 7'd17}: s2wr1 <= 49;
	      {1'd0, 7'd18}: s2wr1 <= 50;
	      {1'd0, 7'd19}: s2wr1 <= 51;
	      {1'd0, 7'd20}: s2wr1 <= 52;
	      {1'd0, 7'd21}: s2wr1 <= 53;
	      {1'd0, 7'd22}: s2wr1 <= 54;
	      {1'd0, 7'd23}: s2wr1 <= 55;
	      {1'd0, 7'd24}: s2wr1 <= 56;
	      {1'd0, 7'd25}: s2wr1 <= 57;
	      {1'd0, 7'd26}: s2wr1 <= 58;
	      {1'd0, 7'd27}: s2wr1 <= 59;
	      {1'd0, 7'd28}: s2wr1 <= 60;
	      {1'd0, 7'd29}: s2wr1 <= 61;
	      {1'd0, 7'd30}: s2wr1 <= 62;
	      {1'd0, 7'd31}: s2wr1 <= 63;
	      {1'd0, 7'd32}: s2wr1 <= 80;
	      {1'd0, 7'd33}: s2wr1 <= 81;
	      {1'd0, 7'd34}: s2wr1 <= 82;
	      {1'd0, 7'd35}: s2wr1 <= 83;
	      {1'd0, 7'd36}: s2wr1 <= 84;
	      {1'd0, 7'd37}: s2wr1 <= 85;
	      {1'd0, 7'd38}: s2wr1 <= 86;
	      {1'd0, 7'd39}: s2wr1 <= 87;
	      {1'd0, 7'd40}: s2wr1 <= 88;
	      {1'd0, 7'd41}: s2wr1 <= 89;
	      {1'd0, 7'd42}: s2wr1 <= 90;
	      {1'd0, 7'd43}: s2wr1 <= 91;
	      {1'd0, 7'd44}: s2wr1 <= 92;
	      {1'd0, 7'd45}: s2wr1 <= 93;
	      {1'd0, 7'd46}: s2wr1 <= 94;
	      {1'd0, 7'd47}: s2wr1 <= 95;
	      {1'd0, 7'd48}: s2wr1 <= 112;
	      {1'd0, 7'd49}: s2wr1 <= 113;
	      {1'd0, 7'd50}: s2wr1 <= 114;
	      {1'd0, 7'd51}: s2wr1 <= 115;
	      {1'd0, 7'd52}: s2wr1 <= 116;
	      {1'd0, 7'd53}: s2wr1 <= 117;
	      {1'd0, 7'd54}: s2wr1 <= 118;
	      {1'd0, 7'd55}: s2wr1 <= 119;
	      {1'd0, 7'd56}: s2wr1 <= 120;
	      {1'd0, 7'd57}: s2wr1 <= 121;
	      {1'd0, 7'd58}: s2wr1 <= 122;
	      {1'd0, 7'd59}: s2wr1 <= 123;
	      {1'd0, 7'd60}: s2wr1 <= 124;
	      {1'd0, 7'd61}: s2wr1 <= 125;
	      {1'd0, 7'd62}: s2wr1 <= 126;
	      {1'd0, 7'd63}: s2wr1 <= 127;
	      {1'd0, 7'd64}: s2wr1 <= 0;
	      {1'd0, 7'd65}: s2wr1 <= 1;
	      {1'd0, 7'd66}: s2wr1 <= 2;
	      {1'd0, 7'd67}: s2wr1 <= 3;
	      {1'd0, 7'd68}: s2wr1 <= 4;
	      {1'd0, 7'd69}: s2wr1 <= 5;
	      {1'd0, 7'd70}: s2wr1 <= 6;
	      {1'd0, 7'd71}: s2wr1 <= 7;
	      {1'd0, 7'd72}: s2wr1 <= 8;
	      {1'd0, 7'd73}: s2wr1 <= 9;
	      {1'd0, 7'd74}: s2wr1 <= 10;
	      {1'd0, 7'd75}: s2wr1 <= 11;
	      {1'd0, 7'd76}: s2wr1 <= 12;
	      {1'd0, 7'd77}: s2wr1 <= 13;
	      {1'd0, 7'd78}: s2wr1 <= 14;
	      {1'd0, 7'd79}: s2wr1 <= 15;
	      {1'd0, 7'd80}: s2wr1 <= 32;
	      {1'd0, 7'd81}: s2wr1 <= 33;
	      {1'd0, 7'd82}: s2wr1 <= 34;
	      {1'd0, 7'd83}: s2wr1 <= 35;
	      {1'd0, 7'd84}: s2wr1 <= 36;
	      {1'd0, 7'd85}: s2wr1 <= 37;
	      {1'd0, 7'd86}: s2wr1 <= 38;
	      {1'd0, 7'd87}: s2wr1 <= 39;
	      {1'd0, 7'd88}: s2wr1 <= 40;
	      {1'd0, 7'd89}: s2wr1 <= 41;
	      {1'd0, 7'd90}: s2wr1 <= 42;
	      {1'd0, 7'd91}: s2wr1 <= 43;
	      {1'd0, 7'd92}: s2wr1 <= 44;
	      {1'd0, 7'd93}: s2wr1 <= 45;
	      {1'd0, 7'd94}: s2wr1 <= 46;
	      {1'd0, 7'd95}: s2wr1 <= 47;
	      {1'd0, 7'd96}: s2wr1 <= 64;
	      {1'd0, 7'd97}: s2wr1 <= 65;
	      {1'd0, 7'd98}: s2wr1 <= 66;
	      {1'd0, 7'd99}: s2wr1 <= 67;
	      {1'd0, 7'd100}: s2wr1 <= 68;
	      {1'd0, 7'd101}: s2wr1 <= 69;
	      {1'd0, 7'd102}: s2wr1 <= 70;
	      {1'd0, 7'd103}: s2wr1 <= 71;
	      {1'd0, 7'd104}: s2wr1 <= 72;
	      {1'd0, 7'd105}: s2wr1 <= 73;
	      {1'd0, 7'd106}: s2wr1 <= 74;
	      {1'd0, 7'd107}: s2wr1 <= 75;
	      {1'd0, 7'd108}: s2wr1 <= 76;
	      {1'd0, 7'd109}: s2wr1 <= 77;
	      {1'd0, 7'd110}: s2wr1 <= 78;
	      {1'd0, 7'd111}: s2wr1 <= 79;
	      {1'd0, 7'd112}: s2wr1 <= 96;
	      {1'd0, 7'd113}: s2wr1 <= 97;
	      {1'd0, 7'd114}: s2wr1 <= 98;
	      {1'd0, 7'd115}: s2wr1 <= 99;
	      {1'd0, 7'd116}: s2wr1 <= 100;
	      {1'd0, 7'd117}: s2wr1 <= 101;
	      {1'd0, 7'd118}: s2wr1 <= 102;
	      {1'd0, 7'd119}: s2wr1 <= 103;
	      {1'd0, 7'd120}: s2wr1 <= 104;
	      {1'd0, 7'd121}: s2wr1 <= 105;
	      {1'd0, 7'd122}: s2wr1 <= 106;
	      {1'd0, 7'd123}: s2wr1 <= 107;
	      {1'd0, 7'd124}: s2wr1 <= 108;
	      {1'd0, 7'd125}: s2wr1 <= 109;
	      {1'd0, 7'd126}: s2wr1 <= 110;
	      {1'd0, 7'd127}: s2wr1 <= 111;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "distributed"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr2 <= 64;
	      {1'd0, 7'd1}: s2wr2 <= 65;
	      {1'd0, 7'd2}: s2wr2 <= 66;
	      {1'd0, 7'd3}: s2wr2 <= 67;
	      {1'd0, 7'd4}: s2wr2 <= 68;
	      {1'd0, 7'd5}: s2wr2 <= 69;
	      {1'd0, 7'd6}: s2wr2 <= 70;
	      {1'd0, 7'd7}: s2wr2 <= 71;
	      {1'd0, 7'd8}: s2wr2 <= 72;
	      {1'd0, 7'd9}: s2wr2 <= 73;
	      {1'd0, 7'd10}: s2wr2 <= 74;
	      {1'd0, 7'd11}: s2wr2 <= 75;
	      {1'd0, 7'd12}: s2wr2 <= 76;
	      {1'd0, 7'd13}: s2wr2 <= 77;
	      {1'd0, 7'd14}: s2wr2 <= 78;
	      {1'd0, 7'd15}: s2wr2 <= 79;
	      {1'd0, 7'd16}: s2wr2 <= 96;
	      {1'd0, 7'd17}: s2wr2 <= 97;
	      {1'd0, 7'd18}: s2wr2 <= 98;
	      {1'd0, 7'd19}: s2wr2 <= 99;
	      {1'd0, 7'd20}: s2wr2 <= 100;
	      {1'd0, 7'd21}: s2wr2 <= 101;
	      {1'd0, 7'd22}: s2wr2 <= 102;
	      {1'd0, 7'd23}: s2wr2 <= 103;
	      {1'd0, 7'd24}: s2wr2 <= 104;
	      {1'd0, 7'd25}: s2wr2 <= 105;
	      {1'd0, 7'd26}: s2wr2 <= 106;
	      {1'd0, 7'd27}: s2wr2 <= 107;
	      {1'd0, 7'd28}: s2wr2 <= 108;
	      {1'd0, 7'd29}: s2wr2 <= 109;
	      {1'd0, 7'd30}: s2wr2 <= 110;
	      {1'd0, 7'd31}: s2wr2 <= 111;
	      {1'd0, 7'd32}: s2wr2 <= 0;
	      {1'd0, 7'd33}: s2wr2 <= 1;
	      {1'd0, 7'd34}: s2wr2 <= 2;
	      {1'd0, 7'd35}: s2wr2 <= 3;
	      {1'd0, 7'd36}: s2wr2 <= 4;
	      {1'd0, 7'd37}: s2wr2 <= 5;
	      {1'd0, 7'd38}: s2wr2 <= 6;
	      {1'd0, 7'd39}: s2wr2 <= 7;
	      {1'd0, 7'd40}: s2wr2 <= 8;
	      {1'd0, 7'd41}: s2wr2 <= 9;
	      {1'd0, 7'd42}: s2wr2 <= 10;
	      {1'd0, 7'd43}: s2wr2 <= 11;
	      {1'd0, 7'd44}: s2wr2 <= 12;
	      {1'd0, 7'd45}: s2wr2 <= 13;
	      {1'd0, 7'd46}: s2wr2 <= 14;
	      {1'd0, 7'd47}: s2wr2 <= 15;
	      {1'd0, 7'd48}: s2wr2 <= 32;
	      {1'd0, 7'd49}: s2wr2 <= 33;
	      {1'd0, 7'd50}: s2wr2 <= 34;
	      {1'd0, 7'd51}: s2wr2 <= 35;
	      {1'd0, 7'd52}: s2wr2 <= 36;
	      {1'd0, 7'd53}: s2wr2 <= 37;
	      {1'd0, 7'd54}: s2wr2 <= 38;
	      {1'd0, 7'd55}: s2wr2 <= 39;
	      {1'd0, 7'd56}: s2wr2 <= 40;
	      {1'd0, 7'd57}: s2wr2 <= 41;
	      {1'd0, 7'd58}: s2wr2 <= 42;
	      {1'd0, 7'd59}: s2wr2 <= 43;
	      {1'd0, 7'd60}: s2wr2 <= 44;
	      {1'd0, 7'd61}: s2wr2 <= 45;
	      {1'd0, 7'd62}: s2wr2 <= 46;
	      {1'd0, 7'd63}: s2wr2 <= 47;
	      {1'd0, 7'd64}: s2wr2 <= 80;
	      {1'd0, 7'd65}: s2wr2 <= 81;
	      {1'd0, 7'd66}: s2wr2 <= 82;
	      {1'd0, 7'd67}: s2wr2 <= 83;
	      {1'd0, 7'd68}: s2wr2 <= 84;
	      {1'd0, 7'd69}: s2wr2 <= 85;
	      {1'd0, 7'd70}: s2wr2 <= 86;
	      {1'd0, 7'd71}: s2wr2 <= 87;
	      {1'd0, 7'd72}: s2wr2 <= 88;
	      {1'd0, 7'd73}: s2wr2 <= 89;
	      {1'd0, 7'd74}: s2wr2 <= 90;
	      {1'd0, 7'd75}: s2wr2 <= 91;
	      {1'd0, 7'd76}: s2wr2 <= 92;
	      {1'd0, 7'd77}: s2wr2 <= 93;
	      {1'd0, 7'd78}: s2wr2 <= 94;
	      {1'd0, 7'd79}: s2wr2 <= 95;
	      {1'd0, 7'd80}: s2wr2 <= 112;
	      {1'd0, 7'd81}: s2wr2 <= 113;
	      {1'd0, 7'd82}: s2wr2 <= 114;
	      {1'd0, 7'd83}: s2wr2 <= 115;
	      {1'd0, 7'd84}: s2wr2 <= 116;
	      {1'd0, 7'd85}: s2wr2 <= 117;
	      {1'd0, 7'd86}: s2wr2 <= 118;
	      {1'd0, 7'd87}: s2wr2 <= 119;
	      {1'd0, 7'd88}: s2wr2 <= 120;
	      {1'd0, 7'd89}: s2wr2 <= 121;
	      {1'd0, 7'd90}: s2wr2 <= 122;
	      {1'd0, 7'd91}: s2wr2 <= 123;
	      {1'd0, 7'd92}: s2wr2 <= 124;
	      {1'd0, 7'd93}: s2wr2 <= 125;
	      {1'd0, 7'd94}: s2wr2 <= 126;
	      {1'd0, 7'd95}: s2wr2 <= 127;
	      {1'd0, 7'd96}: s2wr2 <= 16;
	      {1'd0, 7'd97}: s2wr2 <= 17;
	      {1'd0, 7'd98}: s2wr2 <= 18;
	      {1'd0, 7'd99}: s2wr2 <= 19;
	      {1'd0, 7'd100}: s2wr2 <= 20;
	      {1'd0, 7'd101}: s2wr2 <= 21;
	      {1'd0, 7'd102}: s2wr2 <= 22;
	      {1'd0, 7'd103}: s2wr2 <= 23;
	      {1'd0, 7'd104}: s2wr2 <= 24;
	      {1'd0, 7'd105}: s2wr2 <= 25;
	      {1'd0, 7'd106}: s2wr2 <= 26;
	      {1'd0, 7'd107}: s2wr2 <= 27;
	      {1'd0, 7'd108}: s2wr2 <= 28;
	      {1'd0, 7'd109}: s2wr2 <= 29;
	      {1'd0, 7'd110}: s2wr2 <= 30;
	      {1'd0, 7'd111}: s2wr2 <= 31;
	      {1'd0, 7'd112}: s2wr2 <= 48;
	      {1'd0, 7'd113}: s2wr2 <= 49;
	      {1'd0, 7'd114}: s2wr2 <= 50;
	      {1'd0, 7'd115}: s2wr2 <= 51;
	      {1'd0, 7'd116}: s2wr2 <= 52;
	      {1'd0, 7'd117}: s2wr2 <= 53;
	      {1'd0, 7'd118}: s2wr2 <= 54;
	      {1'd0, 7'd119}: s2wr2 <= 55;
	      {1'd0, 7'd120}: s2wr2 <= 56;
	      {1'd0, 7'd121}: s2wr2 <= 57;
	      {1'd0, 7'd122}: s2wr2 <= 58;
	      {1'd0, 7'd123}: s2wr2 <= 59;
	      {1'd0, 7'd124}: s2wr2 <= 60;
	      {1'd0, 7'd125}: s2wr2 <= 61;
	      {1'd0, 7'd126}: s2wr2 <= 62;
	      {1'd0, 7'd127}: s2wr2 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "distributed"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr3 <= 0;
	      {1'd0, 7'd1}: s2wr3 <= 1;
	      {1'd0, 7'd2}: s2wr3 <= 2;
	      {1'd0, 7'd3}: s2wr3 <= 3;
	      {1'd0, 7'd4}: s2wr3 <= 4;
	      {1'd0, 7'd5}: s2wr3 <= 5;
	      {1'd0, 7'd6}: s2wr3 <= 6;
	      {1'd0, 7'd7}: s2wr3 <= 7;
	      {1'd0, 7'd8}: s2wr3 <= 8;
	      {1'd0, 7'd9}: s2wr3 <= 9;
	      {1'd0, 7'd10}: s2wr3 <= 10;
	      {1'd0, 7'd11}: s2wr3 <= 11;
	      {1'd0, 7'd12}: s2wr3 <= 12;
	      {1'd0, 7'd13}: s2wr3 <= 13;
	      {1'd0, 7'd14}: s2wr3 <= 14;
	      {1'd0, 7'd15}: s2wr3 <= 15;
	      {1'd0, 7'd16}: s2wr3 <= 32;
	      {1'd0, 7'd17}: s2wr3 <= 33;
	      {1'd0, 7'd18}: s2wr3 <= 34;
	      {1'd0, 7'd19}: s2wr3 <= 35;
	      {1'd0, 7'd20}: s2wr3 <= 36;
	      {1'd0, 7'd21}: s2wr3 <= 37;
	      {1'd0, 7'd22}: s2wr3 <= 38;
	      {1'd0, 7'd23}: s2wr3 <= 39;
	      {1'd0, 7'd24}: s2wr3 <= 40;
	      {1'd0, 7'd25}: s2wr3 <= 41;
	      {1'd0, 7'd26}: s2wr3 <= 42;
	      {1'd0, 7'd27}: s2wr3 <= 43;
	      {1'd0, 7'd28}: s2wr3 <= 44;
	      {1'd0, 7'd29}: s2wr3 <= 45;
	      {1'd0, 7'd30}: s2wr3 <= 46;
	      {1'd0, 7'd31}: s2wr3 <= 47;
	      {1'd0, 7'd32}: s2wr3 <= 64;
	      {1'd0, 7'd33}: s2wr3 <= 65;
	      {1'd0, 7'd34}: s2wr3 <= 66;
	      {1'd0, 7'd35}: s2wr3 <= 67;
	      {1'd0, 7'd36}: s2wr3 <= 68;
	      {1'd0, 7'd37}: s2wr3 <= 69;
	      {1'd0, 7'd38}: s2wr3 <= 70;
	      {1'd0, 7'd39}: s2wr3 <= 71;
	      {1'd0, 7'd40}: s2wr3 <= 72;
	      {1'd0, 7'd41}: s2wr3 <= 73;
	      {1'd0, 7'd42}: s2wr3 <= 74;
	      {1'd0, 7'd43}: s2wr3 <= 75;
	      {1'd0, 7'd44}: s2wr3 <= 76;
	      {1'd0, 7'd45}: s2wr3 <= 77;
	      {1'd0, 7'd46}: s2wr3 <= 78;
	      {1'd0, 7'd47}: s2wr3 <= 79;
	      {1'd0, 7'd48}: s2wr3 <= 96;
	      {1'd0, 7'd49}: s2wr3 <= 97;
	      {1'd0, 7'd50}: s2wr3 <= 98;
	      {1'd0, 7'd51}: s2wr3 <= 99;
	      {1'd0, 7'd52}: s2wr3 <= 100;
	      {1'd0, 7'd53}: s2wr3 <= 101;
	      {1'd0, 7'd54}: s2wr3 <= 102;
	      {1'd0, 7'd55}: s2wr3 <= 103;
	      {1'd0, 7'd56}: s2wr3 <= 104;
	      {1'd0, 7'd57}: s2wr3 <= 105;
	      {1'd0, 7'd58}: s2wr3 <= 106;
	      {1'd0, 7'd59}: s2wr3 <= 107;
	      {1'd0, 7'd60}: s2wr3 <= 108;
	      {1'd0, 7'd61}: s2wr3 <= 109;
	      {1'd0, 7'd62}: s2wr3 <= 110;
	      {1'd0, 7'd63}: s2wr3 <= 111;
	      {1'd0, 7'd64}: s2wr3 <= 16;
	      {1'd0, 7'd65}: s2wr3 <= 17;
	      {1'd0, 7'd66}: s2wr3 <= 18;
	      {1'd0, 7'd67}: s2wr3 <= 19;
	      {1'd0, 7'd68}: s2wr3 <= 20;
	      {1'd0, 7'd69}: s2wr3 <= 21;
	      {1'd0, 7'd70}: s2wr3 <= 22;
	      {1'd0, 7'd71}: s2wr3 <= 23;
	      {1'd0, 7'd72}: s2wr3 <= 24;
	      {1'd0, 7'd73}: s2wr3 <= 25;
	      {1'd0, 7'd74}: s2wr3 <= 26;
	      {1'd0, 7'd75}: s2wr3 <= 27;
	      {1'd0, 7'd76}: s2wr3 <= 28;
	      {1'd0, 7'd77}: s2wr3 <= 29;
	      {1'd0, 7'd78}: s2wr3 <= 30;
	      {1'd0, 7'd79}: s2wr3 <= 31;
	      {1'd0, 7'd80}: s2wr3 <= 48;
	      {1'd0, 7'd81}: s2wr3 <= 49;
	      {1'd0, 7'd82}: s2wr3 <= 50;
	      {1'd0, 7'd83}: s2wr3 <= 51;
	      {1'd0, 7'd84}: s2wr3 <= 52;
	      {1'd0, 7'd85}: s2wr3 <= 53;
	      {1'd0, 7'd86}: s2wr3 <= 54;
	      {1'd0, 7'd87}: s2wr3 <= 55;
	      {1'd0, 7'd88}: s2wr3 <= 56;
	      {1'd0, 7'd89}: s2wr3 <= 57;
	      {1'd0, 7'd90}: s2wr3 <= 58;
	      {1'd0, 7'd91}: s2wr3 <= 59;
	      {1'd0, 7'd92}: s2wr3 <= 60;
	      {1'd0, 7'd93}: s2wr3 <= 61;
	      {1'd0, 7'd94}: s2wr3 <= 62;
	      {1'd0, 7'd95}: s2wr3 <= 63;
	      {1'd0, 7'd96}: s2wr3 <= 80;
	      {1'd0, 7'd97}: s2wr3 <= 81;
	      {1'd0, 7'd98}: s2wr3 <= 82;
	      {1'd0, 7'd99}: s2wr3 <= 83;
	      {1'd0, 7'd100}: s2wr3 <= 84;
	      {1'd0, 7'd101}: s2wr3 <= 85;
	      {1'd0, 7'd102}: s2wr3 <= 86;
	      {1'd0, 7'd103}: s2wr3 <= 87;
	      {1'd0, 7'd104}: s2wr3 <= 88;
	      {1'd0, 7'd105}: s2wr3 <= 89;
	      {1'd0, 7'd106}: s2wr3 <= 90;
	      {1'd0, 7'd107}: s2wr3 <= 91;
	      {1'd0, 7'd108}: s2wr3 <= 92;
	      {1'd0, 7'd109}: s2wr3 <= 93;
	      {1'd0, 7'd110}: s2wr3 <= 94;
	      {1'd0, 7'd111}: s2wr3 <= 95;
	      {1'd0, 7'd112}: s2wr3 <= 112;
	      {1'd0, 7'd113}: s2wr3 <= 113;
	      {1'd0, 7'd114}: s2wr3 <= 114;
	      {1'd0, 7'd115}: s2wr3 <= 115;
	      {1'd0, 7'd116}: s2wr3 <= 116;
	      {1'd0, 7'd117}: s2wr3 <= 117;
	      {1'd0, 7'd118}: s2wr3 <= 118;
	      {1'd0, 7'd119}: s2wr3 <= 119;
	      {1'd0, 7'd120}: s2wr3 <= 120;
	      {1'd0, 7'd121}: s2wr3 <= 121;
	      {1'd0, 7'd122}: s2wr3 <= 122;
	      {1'd0, 7'd123}: s2wr3 <= 123;
	      {1'd0, 7'd124}: s2wr3 <= 124;
	      {1'd0, 7'd125}: s2wr3 <= 125;
	      {1'd0, 7'd126}: s2wr3 <= 126;
	      {1'd0, 7'd127}: s2wr3 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "distributed"
endmodule




module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

module nextReg(X, Y, reset, clk);
   parameter depth=2, logDepth=1;

   output Y;
   input X;
   input              clk, reset;
   reg [logDepth:0] count;
   reg                active;

   assign Y = (count == depth) ? 1 : 0;

   always @ (posedge clk) begin
      if (reset == 1) begin
         count <= 0;
         active <= 0;
      end
      else if (X == 1) begin
         active <= 1;
         count <= 1;
      end
      else if (count == depth) begin
         count <= 0;
         active <= 0;
      end
      else if (active)
         count <= count+1;
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock19330(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [19:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(2, 1) shiftFIFO_25287(.X(next), .Y(next_out), .clk(clk));


   wire signed [19:0] a498;
   wire signed [19:0] a499;
   wire signed [19:0] a500;
   wire signed [19:0] a501;
   wire signed [19:0] a506;
   wire signed [19:0] a507;
   wire signed [19:0] a508;
   wire signed [19:0] a509;
   wire signed [20:0] tm172;
   wire signed [20:0] tm173;
   wire signed [20:0] tm174;
   wire signed [20:0] tm175;
   wire signed [20:0] tm176;
   wire signed [20:0] tm177;
   wire signed [20:0] tm178;
   wire signed [20:0] tm179;
   wire signed [19:0] t554;
   wire signed [19:0] t555;
   wire signed [19:0] t556;
   wire signed [19:0] t557;
   wire signed [19:0] t558;
   wire signed [19:0] t559;
   wire signed [19:0] t560;
   wire signed [19:0] t561;
   wire signed [20:0] tm180;
   wire signed [20:0] tm181;
   wire signed [20:0] tm182;
   wire signed [20:0] tm183;
   wire signed [19:0] Y0;
   wire signed [19:0] Y1;
   wire signed [19:0] Y4;
   wire signed [19:0] Y5;
   wire signed [20:0] tm184;
   wire signed [20:0] tm185;
   wire signed [20:0] tm186;
   wire signed [20:0] tm187;
   wire signed [19:0] Y2;
   wire signed [19:0] Y3;
   wire signed [19:0] Y6;
   wire signed [19:0] Y7;
   wire signed [19:0] t562;
   wire signed [19:0] t563;
   wire signed [19:0] t564;
   wire signed [19:0] t565;
   wire signed [19:0] t566;
   wire signed [19:0] t567;
   wire signed [19:0] t568;
   wire signed [19:0] t569;


   assign a498 = X0;
   assign a499 = X4;
   assign a500 = X1;
   assign a501 = X5;
   assign a506 = X2;
   assign a507 = X6;
   assign a508 = X3;
   assign a509 = X7;
   assign t554 = tm172[20:1];
   assign t555 = tm173[20:1];
   assign t556 = tm174[20:1];
   assign t557 = tm175[20:1];
   assign t558 = tm176[20:1];
   assign t559 = tm177[20:1];
   assign t560 = tm178[20:1];
   assign t561 = tm179[20:1];
   assign Y0 = t562;
   assign Y1 = t563;
   assign Y4 = t564;
   assign Y5 = t565;
   assign Y2 = t566;
   assign Y3 = t567;
   assign Y6 = t568;
   assign Y7 = t569;
   assign t562 = tm180[20:1];
   assign t563 = tm181[20:1];
   assign t564 = tm182[20:1];
   assign t565 = tm183[20:1];
   assign t566 = tm184[20:1];
   assign t567 = tm185[20:1];
   assign t568 = tm186[20:1];
   assign t569 = tm187[20:1];

    addfxp #(21, 1) add19342(.a({{1{a498[19]}}, a498}), .b({{1{a499[19]}}, a499}), .clk(clk), .q(tm172));    // 0
    addfxp #(21, 1) add19357(.a({{1{a500[19]}}, a500}), .b({{1{a501[19]}}, a501}), .clk(clk), .q(tm173));    // 0
    subfxp #(21, 1) sub19372(.a({{1{a498[19]}}, a498}), .b({{1{a499[19]}}, a499}), .clk(clk), .q(tm174));    // 0
    subfxp #(21, 1) sub19387(.a({{1{a500[19]}}, a500}), .b({{1{a501[19]}}, a501}), .clk(clk), .q(tm175));    // 0
    addfxp #(21, 1) add19402(.a({{1{a506[19]}}, a506}), .b({{1{a507[19]}}, a507}), .clk(clk), .q(tm176));    // 0
    addfxp #(21, 1) add19417(.a({{1{a508[19]}}, a508}), .b({{1{a509[19]}}, a509}), .clk(clk), .q(tm177));    // 0
    subfxp #(21, 1) sub19432(.a({{1{a506[19]}}, a506}), .b({{1{a507[19]}}, a507}), .clk(clk), .q(tm178));    // 0
    subfxp #(21, 1) sub19447(.a({{1{a508[19]}}, a508}), .b({{1{a509[19]}}, a509}), .clk(clk), .q(tm179));    // 0
    addfxp #(21, 1) add19454(.a({{1{t554[19]}}, t554}), .b({{1{t558[19]}}, t558}), .clk(clk), .q(tm180));    // 1
    addfxp #(21, 1) add19461(.a({{1{t555[19]}}, t555}), .b({{1{t559[19]}}, t559}), .clk(clk), .q(tm181));    // 1
    subfxp #(21, 1) sub19468(.a({{1{t554[19]}}, t554}), .b({{1{t558[19]}}, t558}), .clk(clk), .q(tm182));    // 1
    subfxp #(21, 1) sub19475(.a({{1{t555[19]}}, t555}), .b({{1{t559[19]}}, t559}), .clk(clk), .q(tm183));    // 1
    addfxp #(21, 1) add19498(.a({{1{t556[19]}}, t556}), .b({{1{t561[19]}}, t561}), .clk(clk), .q(tm184));    // 1
    subfxp #(21, 1) sub19505(.a({{1{t557[19]}}, t557}), .b({{1{t560[19]}}, t560}), .clk(clk), .q(tm185));    // 1
    subfxp #(21, 1) sub19512(.a({{1{t556[19]}}, t556}), .b({{1{t561[19]}}, t561}), .clk(clk), .q(tm186));    // 1
    addfxp #(21, 1) add19519(.a({{1{t557[19]}}, t557}), .b({{1{t560[19]}}, t560}), .clk(clk), .q(tm187));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 13
// Gap: 4
module rc19544(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [39:0] t0;
   wire [39:0] s0;
   assign t0 = {X0, X1};
   wire [39:0] t1;
   wire [39:0] s1;
   assign t1 = {X2, X3};
   wire [39:0] t2;
   wire [39:0] s2;
   assign t2 = {X4, X5};
   wire [39:0] t3;
   wire [39:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[39:20];
   assign Y1 = s0[19:0];
   assign Y2 = s1[39:20];
   assign Y3 = s1[19:0];
   assign Y4 = s2[39:20];
   assign Y5 = s2[19:0];
   assign Y6 = s3[39:20];
   assign Y7 = s3[19:0];

   perm19542 instPerm25288(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet19542(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
);

    parameter width = 40;

    input [1:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3;
    reg [width-1:0] t5_0, t5_1, t5_2, t5_3;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        2'd0: control <= 4'b1111;
        2'd1: control <= 4'b0011;
        2'd2: control <= 4'b1100;
        2'd3: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
    end
    assign t0_0 = x0;
    assign t0_1 = x2;
    assign t0_2 = x1;
    assign t0_3 = x3;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
    assign t2_0 = t1_0;
    assign t2_1 = t1_2;
    assign t2_2 = t1_1;
    assign t2_3 = t1_3;
   always @(posedge clk) begin
         t3_0 <= (control0[3] == 0) ? t2_0 : t2_1;
         t3_1 <= (control0[3] == 0) ? t2_1 : t2_0;
         t3_2 <= (control0[2] == 0) ? t2_2 : t2_3;
         t3_3 <= (control0[2] == 0) ? t2_3 : t2_2;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_2;
    assign t4_2 = t3_1;
    assign t4_3 = t3_3;
   always @(posedge clk) begin
         t5_0 <= (control1[1] == 0) ? t4_0 : t4_1;
         t5_1 <= (control1[1] == 0) ? t4_1 : t4_0;
         t5_2 <= (control1[0] == 0) ? t4_2 : t4_3;
         t5_3 <= (control1[0] == 0) ? t4_3 : t4_2;
   end
    always @(posedge clk) begin
        y0 <= t5_0;
        y1 <= t5_2;
        y2 <= t5_1;
        y3 <= t5_3;
    end
endmodule

// Latency: 13
// Gap: 4
module perm19542(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter width = 40;

   parameter depth = 4;

   parameter addrbits = 2;

   parameter muxbits = 2;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm1;
   assign tm1 = 0;

shiftRegFIFO #(4, 1) shiftFIFO_25293(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_25294(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);

shiftRegFIFO #(3, 1) shiftFIFO_25303(.X(next), .Y(next2), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_25304(.X(next2), .Y(next3), .clk(clk));
shiftRegFIFO #(4, 1) shiftFIFO_25305(.X(next3), .Y(next4), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_25306(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(3, 1) shiftFIFO_25309(.X(tm1), .Y(tm1_d), .clk(clk));
shiftRegFIFO #(4, 1) shiftFIFO_25312(.X(tm1_d), .Y(tm1_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(4, 2) shiftFIFO_25317(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(5, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd0 <= 3;
	     {1'd0,  2'd1}: s1rd0 <= 2;
	     {1'd0,  2'd2}: s1rd0 <= 1;
	     {1'd0,  2'd3}: s1rd0 <= 0;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "distributed"
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd1 <= 2;
	     {1'd0,  2'd1}: s1rd1 <= 3;
	     {1'd0,  2'd2}: s1rd1 <= 0;
	     {1'd0,  2'd3}: s1rd1 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "distributed"
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd2 <= 1;
	     {1'd0,  2'd1}: s1rd2 <= 0;
	     {1'd0,  2'd2}: s1rd2 <= 3;
	     {1'd0,  2'd3}: s1rd2 <= 2;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "distributed"
   always @(posedge clk) begin
      case({tm1_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd3 <= 0;
	     {1'd0,  2'd1}: s1rd3 <= 1;
	     {1'd0,  2'd2}: s1rd3 <= 2;
	     {1'd0,  2'd3}: s1rd3 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "distributed"
    swNet19542 sw(tm1_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3);

   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr0 <= 3;
	      {1'd0, 2'd1}: s2wr0 <= 2;
	      {1'd0, 2'd2}: s2wr0 <= 1;
	      {1'd0, 2'd3}: s2wr0 <= 0;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "distributed"
   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr1 <= 2;
	      {1'd0, 2'd1}: s2wr1 <= 3;
	      {1'd0, 2'd2}: s2wr1 <= 0;
	      {1'd0, 2'd3}: s2wr1 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "distributed"
   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr2 <= 1;
	      {1'd0, 2'd1}: s2wr2 <= 0;
	      {1'd0, 2'd2}: s2wr2 <= 3;
	      {1'd0, 2'd3}: s2wr2 <= 2;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "distributed"
   always @(posedge clk) begin
      case({tm1_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr3 <= 0;
	      {1'd0, 2'd1}: s2wr3 <= 1;
	      {1'd0, 2'd2}: s2wr3 <= 2;
	      {1'd0, 2'd3}: s2wr3 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "distributed"
endmodule


// Latency: 12
// Gap: 4
module DirSum_19917(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7);

   output next_out;
   input clk, reset, next;

   reg [1:0] i4;

   input [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   always @(posedge clk) begin
      if (reset == 1) begin
         i4 <= 0;
      end
      else begin
         if (next == 1)
            i4 <= 0;
         else if (i4 == 3)
            i4 <= 0;
         else
            i4 <= i4 + 1;
      end
   end

   codeBlock19547 codeBlockIsnt25318(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i4_in(i4),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7));

endmodule

module D32_19879(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h40000;
      1: out3 <= 20'h3b20d;
      2: out3 <= 20'h2d414;
      3: out3 <= 20'h187de;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D33_19885(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h40000;
      1: out3 <= 20'h2d414;
      2: out3 <= 20'h0;
      3: out3 <= 20'hd2bec;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D34_19891(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h40000;
      1: out3 <= 20'h187de;
      2: out3 <= 20'hd2bec;
      3: out3 <= 20'hc4df3;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D36_19903(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h0;
      1: out3 <= 20'he7822;
      2: out3 <= 20'hd2bec;
      3: out3 <= 20'hc4df3;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D37_19909(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h0;
      1: out3 <= 20'hd2bec;
      2: out3 <= 20'hc0000;
      3: out3 <= 20'hd2bec;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D38_19915(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h0;
      1: out3 <= 20'hc4df3;
      2: out3 <= 20'hd2bec;
      3: out3 <= 20'h187de;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 12
// Gap: 1
module codeBlock19547(clk, reset, next_in, next_out,
   i4_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [1:0] i4_in;
   reg [1:0] i4;

   input [19:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(11, 1) shiftFIFO_25321(.X(next), .Y(next_out), .clk(clk));


   wire signed [19:0] a466;
   wire signed [19:0] a443;
   wire signed [19:0] a469;
   wire signed [19:0] a447;
   wire signed [19:0] a470;
   wire signed [19:0] a471;
   wire signed [19:0] a474;
   wire signed [19:0] a475;
   wire signed [19:0] a478;
   wire signed [19:0] a479;
   reg signed [19:0] tm244;
   reg signed [19:0] tm248;
   reg signed [19:0] tm260;
   reg signed [19:0] tm264;
   reg signed [19:0] tm276;
   reg signed [19:0] tm280;
   reg signed [19:0] tm292;
   reg signed [19:0] tm303;
   reg signed [19:0] tm245;
   reg signed [19:0] tm249;
   reg signed [19:0] tm261;
   reg signed [19:0] tm265;
   reg signed [19:0] tm277;
   reg signed [19:0] tm281;
   reg signed [19:0] tm293;
   reg signed [19:0] tm304;
   wire signed [19:0] tm4;
   wire signed [19:0] a448;
   wire signed [19:0] tm5;
   wire signed [19:0] a450;
   wire signed [19:0] tm6;
   wire signed [19:0] a454;
   wire signed [19:0] tm7;
   wire signed [19:0] a456;
   wire signed [19:0] tm8;
   wire signed [19:0] a460;
   wire signed [19:0] tm9;
   wire signed [19:0] a462;
   reg signed [19:0] tm246;
   reg signed [19:0] tm250;
   reg signed [19:0] tm262;
   reg signed [19:0] tm266;
   reg signed [19:0] tm278;
   reg signed [19:0] tm282;
   reg signed [19:0] tm294;
   reg signed [19:0] tm305;
   reg signed [19:0] tm42;
   reg signed [19:0] tm43;
   reg signed [19:0] tm46;
   reg signed [19:0] tm47;
   reg signed [19:0] tm50;
   reg signed [19:0] tm51;
   reg signed [19:0] tm247;
   reg signed [19:0] tm251;
   reg signed [19:0] tm263;
   reg signed [19:0] tm267;
   reg signed [19:0] tm279;
   reg signed [19:0] tm283;
   reg signed [19:0] tm295;
   reg signed [19:0] tm306;
   reg signed [19:0] tm296;
   reg signed [19:0] tm307;
   reg signed [19:0] tm297;
   reg signed [19:0] tm308;
   reg signed [19:0] tm298;
   reg signed [19:0] tm309;
   reg signed [19:0] tm299;
   reg signed [19:0] tm310;
   reg signed [19:0] tm300;
   reg signed [19:0] tm311;
   wire signed [19:0] a449;
   wire signed [19:0] a451;
   wire signed [19:0] a452;
   wire signed [19:0] a453;
   wire signed [19:0] a455;
   wire signed [19:0] a457;
   wire signed [19:0] a458;
   wire signed [19:0] a459;
   wire signed [19:0] a461;
   wire signed [19:0] a463;
   wire signed [19:0] a464;
   wire signed [19:0] a465;
   reg signed [19:0] tm301;
   reg signed [19:0] tm312;
   wire signed [19:0] Y0;
   wire signed [19:0] Y1;
   wire signed [19:0] Y2;
   wire signed [19:0] Y3;
   wire signed [19:0] Y4;
   wire signed [19:0] Y5;
   wire signed [19:0] Y6;
   wire signed [19:0] Y7;
   reg signed [19:0] tm302;
   reg signed [19:0] tm313;


   assign a466 = X0;
   assign a443 = a466;
   assign a469 = X1;
   assign a447 = a469;
   assign a470 = X2;
   assign a471 = X3;
   assign a474 = X4;
   assign a475 = X5;
   assign a478 = X6;
   assign a479 = X7;
   assign a448 = tm4;
   assign a450 = tm5;
   assign a454 = tm6;
   assign a456 = tm7;
   assign a460 = tm8;
   assign a462 = tm9;
   assign Y0 = tm302;
   assign Y1 = tm313;

   D32_19879 instD32inst0_19879(.addr(i4[1:0]), .out(tm4), .clk(clk));

   D33_19885 instD33inst0_19885(.addr(i4[1:0]), .out(tm6), .clk(clk));

   D34_19891 instD34inst0_19891(.addr(i4[1:0]), .out(tm8), .clk(clk));

   D36_19903 instD36inst0_19903(.addr(i4[1:0]), .out(tm5), .clk(clk));

   D37_19909 instD37inst0_19909(.addr(i4[1:0]), .out(tm7), .clk(clk));

   D38_19915 instD38inst0_19915(.addr(i4[1:0]), .out(tm9), .clk(clk));

    multfix #(20, 6) m19646(.a(tm42), .b(tm247), .clk(clk), .q_sc(a449), .q_unsc(), .rst(reset));
    multfix #(20, 6) m19668(.a(tm43), .b(tm251), .clk(clk), .q_sc(a451), .q_unsc(), .rst(reset));
    multfix #(20, 6) m19686(.a(tm43), .b(tm247), .clk(clk), .q_sc(a452), .q_unsc(), .rst(reset));
    multfix #(20, 6) m19697(.a(tm42), .b(tm251), .clk(clk), .q_sc(a453), .q_unsc(), .rst(reset));
    multfix #(20, 6) m19726(.a(tm46), .b(tm263), .clk(clk), .q_sc(a455), .q_unsc(), .rst(reset));
    multfix #(20, 6) m19748(.a(tm47), .b(tm267), .clk(clk), .q_sc(a457), .q_unsc(), .rst(reset));
    multfix #(20, 6) m19766(.a(tm47), .b(tm263), .clk(clk), .q_sc(a458), .q_unsc(), .rst(reset));
    multfix #(20, 6) m19777(.a(tm46), .b(tm267), .clk(clk), .q_sc(a459), .q_unsc(), .rst(reset));
    multfix #(20, 6) m19806(.a(tm50), .b(tm279), .clk(clk), .q_sc(a461), .q_unsc(), .rst(reset));
    multfix #(20, 6) m19828(.a(tm51), .b(tm283), .clk(clk), .q_sc(a463), .q_unsc(), .rst(reset));
    multfix #(20, 6) m19846(.a(tm51), .b(tm279), .clk(clk), .q_sc(a464), .q_unsc(), .rst(reset));
    multfix #(20, 6) m19857(.a(tm50), .b(tm283), .clk(clk), .q_sc(a465), .q_unsc(), .rst(reset));
    subfxp #(20, 1) sub19675(.a(a449), .b(a451), .clk(clk), .q(Y2));    // 10
    addfxp #(20, 1) add19704(.a(a452), .b(a453), .clk(clk), .q(Y3));    // 10
    subfxp #(20, 1) sub19755(.a(a455), .b(a457), .clk(clk), .q(Y4));    // 10
    addfxp #(20, 1) add19784(.a(a458), .b(a459), .clk(clk), .q(Y5));    // 10
    subfxp #(20, 1) sub19835(.a(a461), .b(a463), .clk(clk), .q(Y6));    // 10
    addfxp #(20, 1) add19864(.a(a464), .b(a465), .clk(clk), .q(Y7));    // 10


   always @(posedge clk) begin
      if (reset == 1) begin
         tm42 <= 0;
         tm247 <= 0;
         tm43 <= 0;
         tm251 <= 0;
         tm43 <= 0;
         tm247 <= 0;
         tm42 <= 0;
         tm251 <= 0;
         tm46 <= 0;
         tm263 <= 0;
         tm47 <= 0;
         tm267 <= 0;
         tm47 <= 0;
         tm263 <= 0;
         tm46 <= 0;
         tm267 <= 0;
         tm50 <= 0;
         tm279 <= 0;
         tm51 <= 0;
         tm283 <= 0;
         tm51 <= 0;
         tm279 <= 0;
         tm50 <= 0;
         tm283 <= 0;
      end
      else begin
         i4 <= i4_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
         tm244 <= a470;
         tm248 <= a471;
         tm260 <= a474;
         tm264 <= a475;
         tm276 <= a478;
         tm280 <= a479;
         tm292 <= a443;
         tm303 <= a447;
         tm245 <= tm244;
         tm249 <= tm248;
         tm261 <= tm260;
         tm265 <= tm264;
         tm277 <= tm276;
         tm281 <= tm280;
         tm293 <= tm292;
         tm304 <= tm303;
         tm246 <= tm245;
         tm250 <= tm249;
         tm262 <= tm261;
         tm266 <= tm265;
         tm278 <= tm277;
         tm282 <= tm281;
         tm294 <= tm293;
         tm305 <= tm304;
         tm42 <= a448;
         tm43 <= a450;
         tm46 <= a454;
         tm47 <= a456;
         tm50 <= a460;
         tm51 <= a462;
         tm247 <= tm246;
         tm251 <= tm250;
         tm263 <= tm262;
         tm267 <= tm266;
         tm279 <= tm278;
         tm283 <= tm282;
         tm295 <= tm294;
         tm306 <= tm305;
         tm296 <= tm295;
         tm307 <= tm306;
         tm297 <= tm296;
         tm308 <= tm307;
         tm298 <= tm297;
         tm309 <= tm308;
         tm299 <= tm298;
         tm310 <= tm309;
         tm300 <= tm299;
         tm311 <= tm310;
         tm301 <= tm300;
         tm312 <= tm311;
         tm302 <= tm301;
         tm313 <= tm312;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock19920(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [19:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(2, 1) shiftFIFO_25324(.X(next), .Y(next_out), .clk(clk));


   wire signed [19:0] a377;
   wire signed [19:0] a378;
   wire signed [19:0] a379;
   wire signed [19:0] a380;
   wire signed [19:0] a385;
   wire signed [19:0] a387;
   wire signed [19:0] a388;
   wire signed [19:0] a389;
   wire signed [20:0] tm188;
   wire signed [20:0] tm189;
   wire signed [20:0] tm190;
   wire signed [20:0] tm191;
   wire signed [20:0] tm192;
   wire signed [20:0] tm193;
   wire signed [20:0] tm194;
   wire signed [20:0] tm195;
   wire signed [19:0] t426;
   wire signed [19:0] t427;
   wire signed [19:0] t428;
   wire signed [19:0] t429;
   wire signed [19:0] t430;
   wire signed [19:0] t431;
   wire signed [19:0] t432;
   wire signed [19:0] t433;
   wire signed [20:0] tm196;
   wire signed [20:0] tm197;
   wire signed [20:0] tm198;
   wire signed [20:0] tm199;
   wire signed [19:0] Y0;
   wire signed [19:0] Y1;
   wire signed [19:0] Y4;
   wire signed [19:0] Y5;
   wire signed [20:0] tm200;
   wire signed [20:0] tm201;
   wire signed [20:0] tm202;
   wire signed [20:0] tm203;
   wire signed [19:0] Y2;
   wire signed [19:0] Y3;
   wire signed [19:0] Y6;
   wire signed [19:0] Y7;
   wire signed [19:0] t434;
   wire signed [19:0] t435;
   wire signed [19:0] t436;
   wire signed [19:0] t437;
   wire signed [19:0] t438;
   wire signed [19:0] t439;
   wire signed [19:0] t440;
   wire signed [19:0] t441;


   assign a377 = X0;
   assign a378 = X4;
   assign a379 = X1;
   assign a380 = X5;
   assign a385 = X2;
   assign a387 = X6;
   assign a388 = X3;
   assign a389 = X7;
   assign t426 = tm188[20:1];
   assign t427 = tm189[20:1];
   assign t428 = tm190[20:1];
   assign t429 = tm191[20:1];
   assign t430 = tm192[20:1];
   assign t431 = tm193[20:1];
   assign t432 = tm194[20:1];
   assign t433 = tm195[20:1];
   assign Y0 = t434;
   assign Y1 = t435;
   assign Y4 = t436;
   assign Y5 = t437;
   assign Y2 = t438;
   assign Y3 = t439;
   assign Y6 = t440;
   assign Y7 = t441;
   assign t434 = tm196[20:1];
   assign t435 = tm197[20:1];
   assign t436 = tm198[20:1];
   assign t437 = tm199[20:1];
   assign t438 = tm200[20:1];
   assign t439 = tm201[20:1];
   assign t440 = tm202[20:1];
   assign t441 = tm203[20:1];

    addfxp #(21, 1) add19932(.a({{1{a377[19]}}, a377}), .b({{1{a378[19]}}, a378}), .clk(clk), .q(tm188));    // 0
    addfxp #(21, 1) add19947(.a({{1{a379[19]}}, a379}), .b({{1{a380[19]}}, a380}), .clk(clk), .q(tm189));    // 0
    subfxp #(21, 1) sub19962(.a({{1{a377[19]}}, a377}), .b({{1{a378[19]}}, a378}), .clk(clk), .q(tm190));    // 0
    subfxp #(21, 1) sub19977(.a({{1{a379[19]}}, a379}), .b({{1{a380[19]}}, a380}), .clk(clk), .q(tm191));    // 0
    addfxp #(21, 1) add19992(.a({{1{a385[19]}}, a385}), .b({{1{a387[19]}}, a387}), .clk(clk), .q(tm192));    // 0
    addfxp #(21, 1) add20007(.a({{1{a388[19]}}, a388}), .b({{1{a389[19]}}, a389}), .clk(clk), .q(tm193));    // 0
    subfxp #(21, 1) sub20022(.a({{1{a385[19]}}, a385}), .b({{1{a387[19]}}, a387}), .clk(clk), .q(tm194));    // 0
    subfxp #(21, 1) sub20037(.a({{1{a388[19]}}, a388}), .b({{1{a389[19]}}, a389}), .clk(clk), .q(tm195));    // 0
    addfxp #(21, 1) add20044(.a({{1{t426[19]}}, t426}), .b({{1{t430[19]}}, t430}), .clk(clk), .q(tm196));    // 1
    addfxp #(21, 1) add20051(.a({{1{t427[19]}}, t427}), .b({{1{t431[19]}}, t431}), .clk(clk), .q(tm197));    // 1
    subfxp #(21, 1) sub20058(.a({{1{t426[19]}}, t426}), .b({{1{t430[19]}}, t430}), .clk(clk), .q(tm198));    // 1
    subfxp #(21, 1) sub20065(.a({{1{t427[19]}}, t427}), .b({{1{t431[19]}}, t431}), .clk(clk), .q(tm199));    // 1
    addfxp #(21, 1) add20088(.a({{1{t428[19]}}, t428}), .b({{1{t433[19]}}, t433}), .clk(clk), .q(tm200));    // 1
    subfxp #(21, 1) sub20095(.a({{1{t429[19]}}, t429}), .b({{1{t432[19]}}, t432}), .clk(clk), .q(tm201));    // 1
    subfxp #(21, 1) sub20102(.a({{1{t428[19]}}, t428}), .b({{1{t433[19]}}, t433}), .clk(clk), .q(tm202));    // 1
    addfxp #(21, 1) add20109(.a({{1{t429[19]}}, t429}), .b({{1{t432[19]}}, t432}), .clk(clk), .q(tm203));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 37
// Gap: 16
module rc20134(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [39:0] t0;
   wire [39:0] s0;
   assign t0 = {X0, X1};
   wire [39:0] t1;
   wire [39:0] s1;
   assign t1 = {X2, X3};
   wire [39:0] t2;
   wire [39:0] s2;
   assign t2 = {X4, X5};
   wire [39:0] t3;
   wire [39:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[39:20];
   assign Y1 = s0[19:0];
   assign Y2 = s1[39:20];
   assign Y3 = s1[19:0];
   assign Y4 = s2[39:20];
   assign Y5 = s2[19:0];
   assign Y6 = s3[39:20];
   assign Y7 = s3[19:0];

   perm20132 instPerm25325(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet20132(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
);

    parameter width = 40;

    input [3:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3;
    reg [width-1:0] t5_0, t5_1, t5_2, t5_3;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        4'd0: control <= 4'b1111;
        4'd1: control <= 4'b1111;
        4'd2: control <= 4'b1111;
        4'd3: control <= 4'b1111;
        4'd4: control <= 4'b0011;
        4'd5: control <= 4'b0011;
        4'd6: control <= 4'b0011;
        4'd7: control <= 4'b0011;
        4'd8: control <= 4'b1100;
        4'd9: control <= 4'b1100;
        4'd10: control <= 4'b1100;
        4'd11: control <= 4'b1100;
        4'd12: control <= 4'b0000;
        4'd13: control <= 4'b0000;
        4'd14: control <= 4'b0000;
        4'd15: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
    end
    assign t0_0 = x0;
    assign t0_1 = x2;
    assign t0_2 = x1;
    assign t0_3 = x3;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
    assign t2_0 = t1_0;
    assign t2_1 = t1_2;
    assign t2_2 = t1_1;
    assign t2_3 = t1_3;
   always @(posedge clk) begin
         t3_0 <= (control0[3] == 0) ? t2_0 : t2_1;
         t3_1 <= (control0[3] == 0) ? t2_1 : t2_0;
         t3_2 <= (control0[2] == 0) ? t2_2 : t2_3;
         t3_3 <= (control0[2] == 0) ? t2_3 : t2_2;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_2;
    assign t4_2 = t3_1;
    assign t4_3 = t3_3;
   always @(posedge clk) begin
         t5_0 <= (control1[1] == 0) ? t4_0 : t4_1;
         t5_1 <= (control1[1] == 0) ? t4_1 : t4_0;
         t5_2 <= (control1[0] == 0) ? t4_2 : t4_3;
         t5_3 <= (control1[0] == 0) ? t4_3 : t4_2;
   end
    always @(posedge clk) begin
        y0 <= t5_0;
        y1 <= t5_2;
        y2 <= t5_1;
        y3 <= t5_3;
    end
endmodule

// Latency: 37
// Gap: 16
module perm20132(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter width = 40;

   parameter depth = 16;

   parameter addrbits = 4;

   parameter muxbits = 2;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm10;
   assign tm10 = 0;

shiftRegFIFO #(4, 1) shiftFIFO_25330(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_25331(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);

nextReg #(15, 4) nextReg_25342(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_25343(.X(next2), .Y(next3), .clk(clk));
nextReg #(16, 4) nextReg_25346(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_25347(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(15, 1) shiftFIFO_25350(.X(tm10), .Y(tm10_d), .clk(clk));
shiftRegFIFO #(4, 1) shiftFIFO_25353(.X(tm10_d), .Y(tm10_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(4, 4) shiftFIFO_25358(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(5, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm10_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd0 <= 12;
	     {1'd0,  4'd1}: s1rd0 <= 13;
	     {1'd0,  4'd2}: s1rd0 <= 14;
	     {1'd0,  4'd3}: s1rd0 <= 15;
	     {1'd0,  4'd4}: s1rd0 <= 8;
	     {1'd0,  4'd5}: s1rd0 <= 9;
	     {1'd0,  4'd6}: s1rd0 <= 10;
	     {1'd0,  4'd7}: s1rd0 <= 11;
	     {1'd0,  4'd8}: s1rd0 <= 4;
	     {1'd0,  4'd9}: s1rd0 <= 5;
	     {1'd0,  4'd10}: s1rd0 <= 6;
	     {1'd0,  4'd11}: s1rd0 <= 7;
	     {1'd0,  4'd12}: s1rd0 <= 0;
	     {1'd0,  4'd13}: s1rd0 <= 1;
	     {1'd0,  4'd14}: s1rd0 <= 2;
	     {1'd0,  4'd15}: s1rd0 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "distributed"
   always @(posedge clk) begin
      case({tm10_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd1 <= 8;
	     {1'd0,  4'd1}: s1rd1 <= 9;
	     {1'd0,  4'd2}: s1rd1 <= 10;
	     {1'd0,  4'd3}: s1rd1 <= 11;
	     {1'd0,  4'd4}: s1rd1 <= 12;
	     {1'd0,  4'd5}: s1rd1 <= 13;
	     {1'd0,  4'd6}: s1rd1 <= 14;
	     {1'd0,  4'd7}: s1rd1 <= 15;
	     {1'd0,  4'd8}: s1rd1 <= 0;
	     {1'd0,  4'd9}: s1rd1 <= 1;
	     {1'd0,  4'd10}: s1rd1 <= 2;
	     {1'd0,  4'd11}: s1rd1 <= 3;
	     {1'd0,  4'd12}: s1rd1 <= 4;
	     {1'd0,  4'd13}: s1rd1 <= 5;
	     {1'd0,  4'd14}: s1rd1 <= 6;
	     {1'd0,  4'd15}: s1rd1 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "distributed"
   always @(posedge clk) begin
      case({tm10_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd2 <= 4;
	     {1'd0,  4'd1}: s1rd2 <= 5;
	     {1'd0,  4'd2}: s1rd2 <= 6;
	     {1'd0,  4'd3}: s1rd2 <= 7;
	     {1'd0,  4'd4}: s1rd2 <= 0;
	     {1'd0,  4'd5}: s1rd2 <= 1;
	     {1'd0,  4'd6}: s1rd2 <= 2;
	     {1'd0,  4'd7}: s1rd2 <= 3;
	     {1'd0,  4'd8}: s1rd2 <= 12;
	     {1'd0,  4'd9}: s1rd2 <= 13;
	     {1'd0,  4'd10}: s1rd2 <= 14;
	     {1'd0,  4'd11}: s1rd2 <= 15;
	     {1'd0,  4'd12}: s1rd2 <= 8;
	     {1'd0,  4'd13}: s1rd2 <= 9;
	     {1'd0,  4'd14}: s1rd2 <= 10;
	     {1'd0,  4'd15}: s1rd2 <= 11;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "distributed"
   always @(posedge clk) begin
      case({tm10_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd3 <= 0;
	     {1'd0,  4'd1}: s1rd3 <= 1;
	     {1'd0,  4'd2}: s1rd3 <= 2;
	     {1'd0,  4'd3}: s1rd3 <= 3;
	     {1'd0,  4'd4}: s1rd3 <= 4;
	     {1'd0,  4'd5}: s1rd3 <= 5;
	     {1'd0,  4'd6}: s1rd3 <= 6;
	     {1'd0,  4'd7}: s1rd3 <= 7;
	     {1'd0,  4'd8}: s1rd3 <= 8;
	     {1'd0,  4'd9}: s1rd3 <= 9;
	     {1'd0,  4'd10}: s1rd3 <= 10;
	     {1'd0,  4'd11}: s1rd3 <= 11;
	     {1'd0,  4'd12}: s1rd3 <= 12;
	     {1'd0,  4'd13}: s1rd3 <= 13;
	     {1'd0,  4'd14}: s1rd3 <= 14;
	     {1'd0,  4'd15}: s1rd3 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "distributed"
    swNet20132 sw(tm10_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3);

   always @(posedge clk) begin
      case({tm10_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr0 <= 12;
	      {1'd0, 4'd1}: s2wr0 <= 13;
	      {1'd0, 4'd2}: s2wr0 <= 14;
	      {1'd0, 4'd3}: s2wr0 <= 15;
	      {1'd0, 4'd4}: s2wr0 <= 8;
	      {1'd0, 4'd5}: s2wr0 <= 9;
	      {1'd0, 4'd6}: s2wr0 <= 10;
	      {1'd0, 4'd7}: s2wr0 <= 11;
	      {1'd0, 4'd8}: s2wr0 <= 4;
	      {1'd0, 4'd9}: s2wr0 <= 5;
	      {1'd0, 4'd10}: s2wr0 <= 6;
	      {1'd0, 4'd11}: s2wr0 <= 7;
	      {1'd0, 4'd12}: s2wr0 <= 0;
	      {1'd0, 4'd13}: s2wr0 <= 1;
	      {1'd0, 4'd14}: s2wr0 <= 2;
	      {1'd0, 4'd15}: s2wr0 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "distributed"
   always @(posedge clk) begin
      case({tm10_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr1 <= 8;
	      {1'd0, 4'd1}: s2wr1 <= 9;
	      {1'd0, 4'd2}: s2wr1 <= 10;
	      {1'd0, 4'd3}: s2wr1 <= 11;
	      {1'd0, 4'd4}: s2wr1 <= 12;
	      {1'd0, 4'd5}: s2wr1 <= 13;
	      {1'd0, 4'd6}: s2wr1 <= 14;
	      {1'd0, 4'd7}: s2wr1 <= 15;
	      {1'd0, 4'd8}: s2wr1 <= 0;
	      {1'd0, 4'd9}: s2wr1 <= 1;
	      {1'd0, 4'd10}: s2wr1 <= 2;
	      {1'd0, 4'd11}: s2wr1 <= 3;
	      {1'd0, 4'd12}: s2wr1 <= 4;
	      {1'd0, 4'd13}: s2wr1 <= 5;
	      {1'd0, 4'd14}: s2wr1 <= 6;
	      {1'd0, 4'd15}: s2wr1 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "distributed"
   always @(posedge clk) begin
      case({tm10_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr2 <= 4;
	      {1'd0, 4'd1}: s2wr2 <= 5;
	      {1'd0, 4'd2}: s2wr2 <= 6;
	      {1'd0, 4'd3}: s2wr2 <= 7;
	      {1'd0, 4'd4}: s2wr2 <= 0;
	      {1'd0, 4'd5}: s2wr2 <= 1;
	      {1'd0, 4'd6}: s2wr2 <= 2;
	      {1'd0, 4'd7}: s2wr2 <= 3;
	      {1'd0, 4'd8}: s2wr2 <= 12;
	      {1'd0, 4'd9}: s2wr2 <= 13;
	      {1'd0, 4'd10}: s2wr2 <= 14;
	      {1'd0, 4'd11}: s2wr2 <= 15;
	      {1'd0, 4'd12}: s2wr2 <= 8;
	      {1'd0, 4'd13}: s2wr2 <= 9;
	      {1'd0, 4'd14}: s2wr2 <= 10;
	      {1'd0, 4'd15}: s2wr2 <= 11;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "distributed"
   always @(posedge clk) begin
      case({tm10_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr3 <= 0;
	      {1'd0, 4'd1}: s2wr3 <= 1;
	      {1'd0, 4'd2}: s2wr3 <= 2;
	      {1'd0, 4'd3}: s2wr3 <= 3;
	      {1'd0, 4'd4}: s2wr3 <= 4;
	      {1'd0, 4'd5}: s2wr3 <= 5;
	      {1'd0, 4'd6}: s2wr3 <= 6;
	      {1'd0, 4'd7}: s2wr3 <= 7;
	      {1'd0, 4'd8}: s2wr3 <= 8;
	      {1'd0, 4'd9}: s2wr3 <= 9;
	      {1'd0, 4'd10}: s2wr3 <= 10;
	      {1'd0, 4'd11}: s2wr3 <= 11;
	      {1'd0, 4'd12}: s2wr3 <= 12;
	      {1'd0, 4'd13}: s2wr3 <= 13;
	      {1'd0, 4'd14}: s2wr3 <= 14;
	      {1'd0, 4'd15}: s2wr3 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "distributed"
endmodule


// Latency: 12
// Gap: 16
module DirSum_20603(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7);

   output next_out;
   input clk, reset, next;

   reg [3:0] i3;

   input [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   always @(posedge clk) begin
      if (reset == 1) begin
         i3 <= 0;
      end
      else begin
         if (next == 1)
            i3 <= 0;
         else if (i3 == 15)
            i3 <= 0;
         else
            i3 <= i3 + 1;
      end
   end

   codeBlock20137 codeBlockIsnt25363(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i3_in(i3),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7));

endmodule

module D22_20493(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h40000;
      1: out3 <= 20'h3fb12;
      2: out3 <= 20'h3ec53;
      3: out3 <= 20'h3d3e8;
      4: out3 <= 20'h3b20d;
      5: out3 <= 20'h38716;
      6: out3 <= 20'h3536d;
      7: out3 <= 20'h31790;
      8: out3 <= 20'h2d414;
      9: out3 <= 20'h2899e;
      10: out3 <= 20'h238e7;
      11: out3 <= 20'h1e2b6;
      12: out3 <= 20'h187de;
      13: out3 <= 20'h12940;
      14: out3 <= 20'hc7c6;
      15: out3 <= 20'h645f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D23_20511(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h40000;
      1: out3 <= 20'h3ec53;
      2: out3 <= 20'h3b20d;
      3: out3 <= 20'h3536d;
      4: out3 <= 20'h2d414;
      5: out3 <= 20'h238e7;
      6: out3 <= 20'h187de;
      7: out3 <= 20'hc7c6;
      8: out3 <= 20'h0;
      9: out3 <= 20'hf383a;
      10: out3 <= 20'he7822;
      11: out3 <= 20'hdc719;
      12: out3 <= 20'hd2bec;
      13: out3 <= 20'hcac93;
      14: out3 <= 20'hc4df3;
      15: out3 <= 20'hc13ad;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D24_20529(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h40000;
      1: out3 <= 20'h3d3e8;
      2: out3 <= 20'h3536d;
      3: out3 <= 20'h2899e;
      4: out3 <= 20'h187de;
      5: out3 <= 20'h645f;
      6: out3 <= 20'hf383a;
      7: out3 <= 20'he1d4a;
      8: out3 <= 20'hd2bec;
      9: out3 <= 20'hc78ea;
      10: out3 <= 20'hc13ad;
      11: out3 <= 20'hc04ee;
      12: out3 <= 20'hc4df3;
      13: out3 <= 20'hce870;
      14: out3 <= 20'hdc719;
      15: out3 <= 20'hed6c0;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D26_20565(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h0;
      1: out3 <= 20'hf9ba1;
      2: out3 <= 20'hf383a;
      3: out3 <= 20'hed6c0;
      4: out3 <= 20'he7822;
      5: out3 <= 20'he1d4a;
      6: out3 <= 20'hdc719;
      7: out3 <= 20'hd7662;
      8: out3 <= 20'hd2bec;
      9: out3 <= 20'hce870;
      10: out3 <= 20'hcac93;
      11: out3 <= 20'hc78ea;
      12: out3 <= 20'hc4df3;
      13: out3 <= 20'hc2c18;
      14: out3 <= 20'hc13ad;
      15: out3 <= 20'hc04ee;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D27_20583(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h0;
      1: out3 <= 20'hf383a;
      2: out3 <= 20'he7822;
      3: out3 <= 20'hdc719;
      4: out3 <= 20'hd2bec;
      5: out3 <= 20'hcac93;
      6: out3 <= 20'hc4df3;
      7: out3 <= 20'hc13ad;
      8: out3 <= 20'hc0000;
      9: out3 <= 20'hc13ad;
      10: out3 <= 20'hc4df3;
      11: out3 <= 20'hcac93;
      12: out3 <= 20'hd2bec;
      13: out3 <= 20'hdc719;
      14: out3 <= 20'he7822;
      15: out3 <= 20'hf383a;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D28_20601(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h0;
      1: out3 <= 20'hed6c0;
      2: out3 <= 20'hdc719;
      3: out3 <= 20'hce870;
      4: out3 <= 20'hc4df3;
      5: out3 <= 20'hc04ee;
      6: out3 <= 20'hc13ad;
      7: out3 <= 20'hc78ea;
      8: out3 <= 20'hd2bec;
      9: out3 <= 20'he1d4a;
      10: out3 <= 20'hf383a;
      11: out3 <= 20'h645f;
      12: out3 <= 20'h187de;
      13: out3 <= 20'h2899e;
      14: out3 <= 20'h3536d;
      15: out3 <= 20'h3d3e8;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 12
// Gap: 1
module codeBlock20137(clk, reset, next_in, next_out,
   i3_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [3:0] i3_in;
   reg [3:0] i3;

   input [19:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(11, 1) shiftFIFO_25366(.X(next), .Y(next_out), .clk(clk));


   wire signed [19:0] a345;
   wire signed [19:0] a322;
   wire signed [19:0] a348;
   wire signed [19:0] a326;
   wire signed [19:0] a349;
   wire signed [19:0] a350;
   wire signed [19:0] a353;
   wire signed [19:0] a354;
   wire signed [19:0] a357;
   wire signed [19:0] a358;
   reg signed [19:0] tm314;
   reg signed [19:0] tm318;
   reg signed [19:0] tm330;
   reg signed [19:0] tm334;
   reg signed [19:0] tm346;
   reg signed [19:0] tm350;
   reg signed [19:0] tm362;
   reg signed [19:0] tm373;
   reg signed [19:0] tm315;
   reg signed [19:0] tm319;
   reg signed [19:0] tm331;
   reg signed [19:0] tm335;
   reg signed [19:0] tm347;
   reg signed [19:0] tm351;
   reg signed [19:0] tm363;
   reg signed [19:0] tm374;
   wire signed [19:0] tm13;
   wire signed [19:0] a327;
   wire signed [19:0] tm14;
   wire signed [19:0] a329;
   wire signed [19:0] tm15;
   wire signed [19:0] a333;
   wire signed [19:0] tm16;
   wire signed [19:0] a335;
   wire signed [19:0] tm17;
   wire signed [19:0] a339;
   wire signed [19:0] tm18;
   wire signed [19:0] a341;
   reg signed [19:0] tm316;
   reg signed [19:0] tm320;
   reg signed [19:0] tm332;
   reg signed [19:0] tm336;
   reg signed [19:0] tm348;
   reg signed [19:0] tm352;
   reg signed [19:0] tm364;
   reg signed [19:0] tm375;
   reg signed [19:0] tm58;
   reg signed [19:0] tm59;
   reg signed [19:0] tm62;
   reg signed [19:0] tm63;
   reg signed [19:0] tm66;
   reg signed [19:0] tm67;
   reg signed [19:0] tm317;
   reg signed [19:0] tm321;
   reg signed [19:0] tm333;
   reg signed [19:0] tm337;
   reg signed [19:0] tm349;
   reg signed [19:0] tm353;
   reg signed [19:0] tm365;
   reg signed [19:0] tm376;
   reg signed [19:0] tm366;
   reg signed [19:0] tm377;
   reg signed [19:0] tm367;
   reg signed [19:0] tm378;
   reg signed [19:0] tm368;
   reg signed [19:0] tm379;
   reg signed [19:0] tm369;
   reg signed [19:0] tm380;
   reg signed [19:0] tm370;
   reg signed [19:0] tm381;
   wire signed [19:0] a328;
   wire signed [19:0] a330;
   wire signed [19:0] a331;
   wire signed [19:0] a332;
   wire signed [19:0] a334;
   wire signed [19:0] a336;
   wire signed [19:0] a337;
   wire signed [19:0] a338;
   wire signed [19:0] a340;
   wire signed [19:0] a342;
   wire signed [19:0] a343;
   wire signed [19:0] a344;
   reg signed [19:0] tm371;
   reg signed [19:0] tm382;
   wire signed [19:0] Y0;
   wire signed [19:0] Y1;
   wire signed [19:0] Y2;
   wire signed [19:0] Y3;
   wire signed [19:0] Y4;
   wire signed [19:0] Y5;
   wire signed [19:0] Y6;
   wire signed [19:0] Y7;
   reg signed [19:0] tm372;
   reg signed [19:0] tm383;


   assign a345 = X0;
   assign a322 = a345;
   assign a348 = X1;
   assign a326 = a348;
   assign a349 = X2;
   assign a350 = X3;
   assign a353 = X4;
   assign a354 = X5;
   assign a357 = X6;
   assign a358 = X7;
   assign a327 = tm13;
   assign a329 = tm14;
   assign a333 = tm15;
   assign a335 = tm16;
   assign a339 = tm17;
   assign a341 = tm18;
   assign Y0 = tm372;
   assign Y1 = tm383;

   D22_20493 instD22inst0_20493(.addr(i3[3:0]), .out(tm13), .clk(clk));

   D23_20511 instD23inst0_20511(.addr(i3[3:0]), .out(tm15), .clk(clk));

   D24_20529 instD24inst0_20529(.addr(i3[3:0]), .out(tm17), .clk(clk));

   D26_20565 instD26inst0_20565(.addr(i3[3:0]), .out(tm14), .clk(clk));

   D27_20583 instD27inst0_20583(.addr(i3[3:0]), .out(tm16), .clk(clk));

   D28_20601 instD28inst0_20601(.addr(i3[3:0]), .out(tm18), .clk(clk));

    multfix #(20, 6) m20236(.a(tm58), .b(tm317), .clk(clk), .q_sc(a328), .q_unsc(), .rst(reset));
    multfix #(20, 6) m20258(.a(tm59), .b(tm321), .clk(clk), .q_sc(a330), .q_unsc(), .rst(reset));
    multfix #(20, 6) m20276(.a(tm59), .b(tm317), .clk(clk), .q_sc(a331), .q_unsc(), .rst(reset));
    multfix #(20, 6) m20287(.a(tm58), .b(tm321), .clk(clk), .q_sc(a332), .q_unsc(), .rst(reset));
    multfix #(20, 6) m20316(.a(tm62), .b(tm333), .clk(clk), .q_sc(a334), .q_unsc(), .rst(reset));
    multfix #(20, 6) m20338(.a(tm63), .b(tm337), .clk(clk), .q_sc(a336), .q_unsc(), .rst(reset));
    multfix #(20, 6) m20356(.a(tm63), .b(tm333), .clk(clk), .q_sc(a337), .q_unsc(), .rst(reset));
    multfix #(20, 6) m20367(.a(tm62), .b(tm337), .clk(clk), .q_sc(a338), .q_unsc(), .rst(reset));
    multfix #(20, 6) m20396(.a(tm66), .b(tm349), .clk(clk), .q_sc(a340), .q_unsc(), .rst(reset));
    multfix #(20, 6) m20418(.a(tm67), .b(tm353), .clk(clk), .q_sc(a342), .q_unsc(), .rst(reset));
    multfix #(20, 6) m20436(.a(tm67), .b(tm349), .clk(clk), .q_sc(a343), .q_unsc(), .rst(reset));
    multfix #(20, 6) m20447(.a(tm66), .b(tm353), .clk(clk), .q_sc(a344), .q_unsc(), .rst(reset));
    subfxp #(20, 1) sub20265(.a(a328), .b(a330), .clk(clk), .q(Y2));    // 10
    addfxp #(20, 1) add20294(.a(a331), .b(a332), .clk(clk), .q(Y3));    // 10
    subfxp #(20, 1) sub20345(.a(a334), .b(a336), .clk(clk), .q(Y4));    // 10
    addfxp #(20, 1) add20374(.a(a337), .b(a338), .clk(clk), .q(Y5));    // 10
    subfxp #(20, 1) sub20425(.a(a340), .b(a342), .clk(clk), .q(Y6));    // 10
    addfxp #(20, 1) add20454(.a(a343), .b(a344), .clk(clk), .q(Y7));    // 10


   always @(posedge clk) begin
      if (reset == 1) begin
         tm58 <= 0;
         tm317 <= 0;
         tm59 <= 0;
         tm321 <= 0;
         tm59 <= 0;
         tm317 <= 0;
         tm58 <= 0;
         tm321 <= 0;
         tm62 <= 0;
         tm333 <= 0;
         tm63 <= 0;
         tm337 <= 0;
         tm63 <= 0;
         tm333 <= 0;
         tm62 <= 0;
         tm337 <= 0;
         tm66 <= 0;
         tm349 <= 0;
         tm67 <= 0;
         tm353 <= 0;
         tm67 <= 0;
         tm349 <= 0;
         tm66 <= 0;
         tm353 <= 0;
      end
      else begin
         i3 <= i3_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
         tm314 <= a349;
         tm318 <= a350;
         tm330 <= a353;
         tm334 <= a354;
         tm346 <= a357;
         tm350 <= a358;
         tm362 <= a322;
         tm373 <= a326;
         tm315 <= tm314;
         tm319 <= tm318;
         tm331 <= tm330;
         tm335 <= tm334;
         tm347 <= tm346;
         tm351 <= tm350;
         tm363 <= tm362;
         tm374 <= tm373;
         tm316 <= tm315;
         tm320 <= tm319;
         tm332 <= tm331;
         tm336 <= tm335;
         tm348 <= tm347;
         tm352 <= tm351;
         tm364 <= tm363;
         tm375 <= tm374;
         tm58 <= a327;
         tm59 <= a329;
         tm62 <= a333;
         tm63 <= a335;
         tm66 <= a339;
         tm67 <= a341;
         tm317 <= tm316;
         tm321 <= tm320;
         tm333 <= tm332;
         tm337 <= tm336;
         tm349 <= tm348;
         tm353 <= tm352;
         tm365 <= tm364;
         tm376 <= tm375;
         tm366 <= tm365;
         tm377 <= tm376;
         tm367 <= tm366;
         tm378 <= tm377;
         tm368 <= tm367;
         tm379 <= tm378;
         tm369 <= tm368;
         tm380 <= tm379;
         tm370 <= tm369;
         tm381 <= tm380;
         tm371 <= tm370;
         tm382 <= tm381;
         tm372 <= tm371;
         tm383 <= tm382;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock20606(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [19:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(2, 1) shiftFIFO_25369(.X(next), .Y(next_out), .clk(clk));


   wire signed [19:0] a257;
   wire signed [19:0] a258;
   wire signed [19:0] a259;
   wire signed [19:0] a260;
   wire signed [19:0] a265;
   wire signed [19:0] a266;
   wire signed [19:0] a267;
   wire signed [19:0] a268;
   wire signed [20:0] tm204;
   wire signed [20:0] tm205;
   wire signed [20:0] tm206;
   wire signed [20:0] tm207;
   wire signed [20:0] tm208;
   wire signed [20:0] tm209;
   wire signed [20:0] tm210;
   wire signed [20:0] tm211;
   wire signed [19:0] t297;
   wire signed [19:0] t298;
   wire signed [19:0] t299;
   wire signed [19:0] t300;
   wire signed [19:0] t301;
   wire signed [19:0] t302;
   wire signed [19:0] t303;
   wire signed [19:0] t304;
   wire signed [20:0] tm212;
   wire signed [20:0] tm213;
   wire signed [20:0] tm214;
   wire signed [20:0] tm215;
   wire signed [19:0] Y0;
   wire signed [19:0] Y1;
   wire signed [19:0] Y4;
   wire signed [19:0] Y5;
   wire signed [20:0] tm216;
   wire signed [20:0] tm217;
   wire signed [20:0] tm218;
   wire signed [20:0] tm219;
   wire signed [19:0] Y2;
   wire signed [19:0] Y3;
   wire signed [19:0] Y6;
   wire signed [19:0] Y7;
   wire signed [19:0] t305;
   wire signed [19:0] t306;
   wire signed [19:0] t307;
   wire signed [19:0] t308;
   wire signed [19:0] t309;
   wire signed [19:0] t310;
   wire signed [19:0] t311;
   wire signed [19:0] t312;


   assign a257 = X0;
   assign a258 = X4;
   assign a259 = X1;
   assign a260 = X5;
   assign a265 = X2;
   assign a266 = X6;
   assign a267 = X3;
   assign a268 = X7;
   assign t297 = tm204[20:1];
   assign t298 = tm205[20:1];
   assign t299 = tm206[20:1];
   assign t300 = tm207[20:1];
   assign t301 = tm208[20:1];
   assign t302 = tm209[20:1];
   assign t303 = tm210[20:1];
   assign t304 = tm211[20:1];
   assign Y0 = t305;
   assign Y1 = t306;
   assign Y4 = t307;
   assign Y5 = t308;
   assign Y2 = t309;
   assign Y3 = t310;
   assign Y6 = t311;
   assign Y7 = t312;
   assign t305 = tm212[20:1];
   assign t306 = tm213[20:1];
   assign t307 = tm214[20:1];
   assign t308 = tm215[20:1];
   assign t309 = tm216[20:1];
   assign t310 = tm217[20:1];
   assign t311 = tm218[20:1];
   assign t312 = tm219[20:1];

    addfxp #(21, 1) add20618(.a({{1{a257[19]}}, a257}), .b({{1{a258[19]}}, a258}), .clk(clk), .q(tm204));    // 0
    addfxp #(21, 1) add20633(.a({{1{a259[19]}}, a259}), .b({{1{a260[19]}}, a260}), .clk(clk), .q(tm205));    // 0
    subfxp #(21, 1) sub20648(.a({{1{a257[19]}}, a257}), .b({{1{a258[19]}}, a258}), .clk(clk), .q(tm206));    // 0
    subfxp #(21, 1) sub20663(.a({{1{a259[19]}}, a259}), .b({{1{a260[19]}}, a260}), .clk(clk), .q(tm207));    // 0
    addfxp #(21, 1) add20678(.a({{1{a265[19]}}, a265}), .b({{1{a266[19]}}, a266}), .clk(clk), .q(tm208));    // 0
    addfxp #(21, 1) add20693(.a({{1{a267[19]}}, a267}), .b({{1{a268[19]}}, a268}), .clk(clk), .q(tm209));    // 0
    subfxp #(21, 1) sub20708(.a({{1{a265[19]}}, a265}), .b({{1{a266[19]}}, a266}), .clk(clk), .q(tm210));    // 0
    subfxp #(21, 1) sub20723(.a({{1{a267[19]}}, a267}), .b({{1{a268[19]}}, a268}), .clk(clk), .q(tm211));    // 0
    addfxp #(21, 1) add20730(.a({{1{t297[19]}}, t297}), .b({{1{t301[19]}}, t301}), .clk(clk), .q(tm212));    // 1
    addfxp #(21, 1) add20737(.a({{1{t298[19]}}, t298}), .b({{1{t302[19]}}, t302}), .clk(clk), .q(tm213));    // 1
    subfxp #(21, 1) sub20744(.a({{1{t297[19]}}, t297}), .b({{1{t301[19]}}, t301}), .clk(clk), .q(tm214));    // 1
    subfxp #(21, 1) sub20751(.a({{1{t298[19]}}, t298}), .b({{1{t302[19]}}, t302}), .clk(clk), .q(tm215));    // 1
    addfxp #(21, 1) add20774(.a({{1{t299[19]}}, t299}), .b({{1{t304[19]}}, t304}), .clk(clk), .q(tm216));    // 1
    subfxp #(21, 1) sub20781(.a({{1{t300[19]}}, t300}), .b({{1{t303[19]}}, t303}), .clk(clk), .q(tm217));    // 1
    subfxp #(21, 1) sub20788(.a({{1{t299[19]}}, t299}), .b({{1{t304[19]}}, t304}), .clk(clk), .q(tm218));    // 1
    addfxp #(21, 1) add20795(.a({{1{t300[19]}}, t300}), .b({{1{t303[19]}}, t303}), .clk(clk), .q(tm219));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 133
// Gap: 64
module rc20820(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [39:0] t0;
   wire [39:0] s0;
   assign t0 = {X0, X1};
   wire [39:0] t1;
   wire [39:0] s1;
   assign t1 = {X2, X3};
   wire [39:0] t2;
   wire [39:0] s2;
   assign t2 = {X4, X5};
   wire [39:0] t3;
   wire [39:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[39:20];
   assign Y1 = s0[19:0];
   assign Y2 = s1[39:20];
   assign Y3 = s1[19:0];
   assign Y4 = s2[39:20];
   assign Y5 = s2[19:0];
   assign Y6 = s3[39:20];
   assign Y7 = s3[19:0];

   perm20818 instPerm25370(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet20818(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
);

    parameter width = 40;

    input [5:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3;
    reg [width-1:0] t5_0, t5_1, t5_2, t5_3;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        6'd0: control <= 4'b1111;
        6'd1: control <= 4'b1111;
        6'd2: control <= 4'b1111;
        6'd3: control <= 4'b1111;
        6'd4: control <= 4'b1111;
        6'd5: control <= 4'b1111;
        6'd6: control <= 4'b1111;
        6'd7: control <= 4'b1111;
        6'd8: control <= 4'b1111;
        6'd9: control <= 4'b1111;
        6'd10: control <= 4'b1111;
        6'd11: control <= 4'b1111;
        6'd12: control <= 4'b1111;
        6'd13: control <= 4'b1111;
        6'd14: control <= 4'b1111;
        6'd15: control <= 4'b1111;
        6'd16: control <= 4'b0011;
        6'd17: control <= 4'b0011;
        6'd18: control <= 4'b0011;
        6'd19: control <= 4'b0011;
        6'd20: control <= 4'b0011;
        6'd21: control <= 4'b0011;
        6'd22: control <= 4'b0011;
        6'd23: control <= 4'b0011;
        6'd24: control <= 4'b0011;
        6'd25: control <= 4'b0011;
        6'd26: control <= 4'b0011;
        6'd27: control <= 4'b0011;
        6'd28: control <= 4'b0011;
        6'd29: control <= 4'b0011;
        6'd30: control <= 4'b0011;
        6'd31: control <= 4'b0011;
        6'd32: control <= 4'b1100;
        6'd33: control <= 4'b1100;
        6'd34: control <= 4'b1100;
        6'd35: control <= 4'b1100;
        6'd36: control <= 4'b1100;
        6'd37: control <= 4'b1100;
        6'd38: control <= 4'b1100;
        6'd39: control <= 4'b1100;
        6'd40: control <= 4'b1100;
        6'd41: control <= 4'b1100;
        6'd42: control <= 4'b1100;
        6'd43: control <= 4'b1100;
        6'd44: control <= 4'b1100;
        6'd45: control <= 4'b1100;
        6'd46: control <= 4'b1100;
        6'd47: control <= 4'b1100;
        6'd48: control <= 4'b0000;
        6'd49: control <= 4'b0000;
        6'd50: control <= 4'b0000;
        6'd51: control <= 4'b0000;
        6'd52: control <= 4'b0000;
        6'd53: control <= 4'b0000;
        6'd54: control <= 4'b0000;
        6'd55: control <= 4'b0000;
        6'd56: control <= 4'b0000;
        6'd57: control <= 4'b0000;
        6'd58: control <= 4'b0000;
        6'd59: control <= 4'b0000;
        6'd60: control <= 4'b0000;
        6'd61: control <= 4'b0000;
        6'd62: control <= 4'b0000;
        6'd63: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
    end
    assign t0_0 = x0;
    assign t0_1 = x2;
    assign t0_2 = x1;
    assign t0_3 = x3;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
    assign t2_0 = t1_0;
    assign t2_1 = t1_2;
    assign t2_2 = t1_1;
    assign t2_3 = t1_3;
   always @(posedge clk) begin
         t3_0 <= (control0[3] == 0) ? t2_0 : t2_1;
         t3_1 <= (control0[3] == 0) ? t2_1 : t2_0;
         t3_2 <= (control0[2] == 0) ? t2_2 : t2_3;
         t3_3 <= (control0[2] == 0) ? t2_3 : t2_2;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_2;
    assign t4_2 = t3_1;
    assign t4_3 = t3_3;
   always @(posedge clk) begin
         t5_0 <= (control1[1] == 0) ? t4_0 : t4_1;
         t5_1 <= (control1[1] == 0) ? t4_1 : t4_0;
         t5_2 <= (control1[0] == 0) ? t4_2 : t4_3;
         t5_3 <= (control1[0] == 0) ? t4_3 : t4_2;
   end
    always @(posedge clk) begin
        y0 <= t5_0;
        y1 <= t5_2;
        y2 <= t5_1;
        y3 <= t5_3;
    end
endmodule

// Latency: 133
// Gap: 64
module perm20818(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter width = 40;

   parameter depth = 64;

   parameter addrbits = 6;

   parameter muxbits = 2;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm19;
   assign tm19 = 0;

shiftRegFIFO #(4, 1) shiftFIFO_25375(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_25376(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);

nextReg #(63, 6) nextReg_25387(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_25388(.X(next2), .Y(next3), .clk(clk));
nextReg #(64, 6) nextReg_25391(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_25392(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(63, 1) shiftFIFO_25395(.X(tm19), .Y(tm19_d), .clk(clk));
shiftRegFIFO #(4, 1) shiftFIFO_25398(.X(tm19_d), .Y(tm19_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(4, 6) shiftFIFO_25403(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(5, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm19_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd0 <= 48;
	     {1'd0,  6'd1}: s1rd0 <= 49;
	     {1'd0,  6'd2}: s1rd0 <= 50;
	     {1'd0,  6'd3}: s1rd0 <= 51;
	     {1'd0,  6'd4}: s1rd0 <= 52;
	     {1'd0,  6'd5}: s1rd0 <= 53;
	     {1'd0,  6'd6}: s1rd0 <= 54;
	     {1'd0,  6'd7}: s1rd0 <= 55;
	     {1'd0,  6'd8}: s1rd0 <= 56;
	     {1'd0,  6'd9}: s1rd0 <= 57;
	     {1'd0,  6'd10}: s1rd0 <= 58;
	     {1'd0,  6'd11}: s1rd0 <= 59;
	     {1'd0,  6'd12}: s1rd0 <= 60;
	     {1'd0,  6'd13}: s1rd0 <= 61;
	     {1'd0,  6'd14}: s1rd0 <= 62;
	     {1'd0,  6'd15}: s1rd0 <= 63;
	     {1'd0,  6'd16}: s1rd0 <= 32;
	     {1'd0,  6'd17}: s1rd0 <= 33;
	     {1'd0,  6'd18}: s1rd0 <= 34;
	     {1'd0,  6'd19}: s1rd0 <= 35;
	     {1'd0,  6'd20}: s1rd0 <= 36;
	     {1'd0,  6'd21}: s1rd0 <= 37;
	     {1'd0,  6'd22}: s1rd0 <= 38;
	     {1'd0,  6'd23}: s1rd0 <= 39;
	     {1'd0,  6'd24}: s1rd0 <= 40;
	     {1'd0,  6'd25}: s1rd0 <= 41;
	     {1'd0,  6'd26}: s1rd0 <= 42;
	     {1'd0,  6'd27}: s1rd0 <= 43;
	     {1'd0,  6'd28}: s1rd0 <= 44;
	     {1'd0,  6'd29}: s1rd0 <= 45;
	     {1'd0,  6'd30}: s1rd0 <= 46;
	     {1'd0,  6'd31}: s1rd0 <= 47;
	     {1'd0,  6'd32}: s1rd0 <= 16;
	     {1'd0,  6'd33}: s1rd0 <= 17;
	     {1'd0,  6'd34}: s1rd0 <= 18;
	     {1'd0,  6'd35}: s1rd0 <= 19;
	     {1'd0,  6'd36}: s1rd0 <= 20;
	     {1'd0,  6'd37}: s1rd0 <= 21;
	     {1'd0,  6'd38}: s1rd0 <= 22;
	     {1'd0,  6'd39}: s1rd0 <= 23;
	     {1'd0,  6'd40}: s1rd0 <= 24;
	     {1'd0,  6'd41}: s1rd0 <= 25;
	     {1'd0,  6'd42}: s1rd0 <= 26;
	     {1'd0,  6'd43}: s1rd0 <= 27;
	     {1'd0,  6'd44}: s1rd0 <= 28;
	     {1'd0,  6'd45}: s1rd0 <= 29;
	     {1'd0,  6'd46}: s1rd0 <= 30;
	     {1'd0,  6'd47}: s1rd0 <= 31;
	     {1'd0,  6'd48}: s1rd0 <= 0;
	     {1'd0,  6'd49}: s1rd0 <= 1;
	     {1'd0,  6'd50}: s1rd0 <= 2;
	     {1'd0,  6'd51}: s1rd0 <= 3;
	     {1'd0,  6'd52}: s1rd0 <= 4;
	     {1'd0,  6'd53}: s1rd0 <= 5;
	     {1'd0,  6'd54}: s1rd0 <= 6;
	     {1'd0,  6'd55}: s1rd0 <= 7;
	     {1'd0,  6'd56}: s1rd0 <= 8;
	     {1'd0,  6'd57}: s1rd0 <= 9;
	     {1'd0,  6'd58}: s1rd0 <= 10;
	     {1'd0,  6'd59}: s1rd0 <= 11;
	     {1'd0,  6'd60}: s1rd0 <= 12;
	     {1'd0,  6'd61}: s1rd0 <= 13;
	     {1'd0,  6'd62}: s1rd0 <= 14;
	     {1'd0,  6'd63}: s1rd0 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "distributed"
   always @(posedge clk) begin
      case({tm19_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd1 <= 32;
	     {1'd0,  6'd1}: s1rd1 <= 33;
	     {1'd0,  6'd2}: s1rd1 <= 34;
	     {1'd0,  6'd3}: s1rd1 <= 35;
	     {1'd0,  6'd4}: s1rd1 <= 36;
	     {1'd0,  6'd5}: s1rd1 <= 37;
	     {1'd0,  6'd6}: s1rd1 <= 38;
	     {1'd0,  6'd7}: s1rd1 <= 39;
	     {1'd0,  6'd8}: s1rd1 <= 40;
	     {1'd0,  6'd9}: s1rd1 <= 41;
	     {1'd0,  6'd10}: s1rd1 <= 42;
	     {1'd0,  6'd11}: s1rd1 <= 43;
	     {1'd0,  6'd12}: s1rd1 <= 44;
	     {1'd0,  6'd13}: s1rd1 <= 45;
	     {1'd0,  6'd14}: s1rd1 <= 46;
	     {1'd0,  6'd15}: s1rd1 <= 47;
	     {1'd0,  6'd16}: s1rd1 <= 48;
	     {1'd0,  6'd17}: s1rd1 <= 49;
	     {1'd0,  6'd18}: s1rd1 <= 50;
	     {1'd0,  6'd19}: s1rd1 <= 51;
	     {1'd0,  6'd20}: s1rd1 <= 52;
	     {1'd0,  6'd21}: s1rd1 <= 53;
	     {1'd0,  6'd22}: s1rd1 <= 54;
	     {1'd0,  6'd23}: s1rd1 <= 55;
	     {1'd0,  6'd24}: s1rd1 <= 56;
	     {1'd0,  6'd25}: s1rd1 <= 57;
	     {1'd0,  6'd26}: s1rd1 <= 58;
	     {1'd0,  6'd27}: s1rd1 <= 59;
	     {1'd0,  6'd28}: s1rd1 <= 60;
	     {1'd0,  6'd29}: s1rd1 <= 61;
	     {1'd0,  6'd30}: s1rd1 <= 62;
	     {1'd0,  6'd31}: s1rd1 <= 63;
	     {1'd0,  6'd32}: s1rd1 <= 0;
	     {1'd0,  6'd33}: s1rd1 <= 1;
	     {1'd0,  6'd34}: s1rd1 <= 2;
	     {1'd0,  6'd35}: s1rd1 <= 3;
	     {1'd0,  6'd36}: s1rd1 <= 4;
	     {1'd0,  6'd37}: s1rd1 <= 5;
	     {1'd0,  6'd38}: s1rd1 <= 6;
	     {1'd0,  6'd39}: s1rd1 <= 7;
	     {1'd0,  6'd40}: s1rd1 <= 8;
	     {1'd0,  6'd41}: s1rd1 <= 9;
	     {1'd0,  6'd42}: s1rd1 <= 10;
	     {1'd0,  6'd43}: s1rd1 <= 11;
	     {1'd0,  6'd44}: s1rd1 <= 12;
	     {1'd0,  6'd45}: s1rd1 <= 13;
	     {1'd0,  6'd46}: s1rd1 <= 14;
	     {1'd0,  6'd47}: s1rd1 <= 15;
	     {1'd0,  6'd48}: s1rd1 <= 16;
	     {1'd0,  6'd49}: s1rd1 <= 17;
	     {1'd0,  6'd50}: s1rd1 <= 18;
	     {1'd0,  6'd51}: s1rd1 <= 19;
	     {1'd0,  6'd52}: s1rd1 <= 20;
	     {1'd0,  6'd53}: s1rd1 <= 21;
	     {1'd0,  6'd54}: s1rd1 <= 22;
	     {1'd0,  6'd55}: s1rd1 <= 23;
	     {1'd0,  6'd56}: s1rd1 <= 24;
	     {1'd0,  6'd57}: s1rd1 <= 25;
	     {1'd0,  6'd58}: s1rd1 <= 26;
	     {1'd0,  6'd59}: s1rd1 <= 27;
	     {1'd0,  6'd60}: s1rd1 <= 28;
	     {1'd0,  6'd61}: s1rd1 <= 29;
	     {1'd0,  6'd62}: s1rd1 <= 30;
	     {1'd0,  6'd63}: s1rd1 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "distributed"
   always @(posedge clk) begin
      case({tm19_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd2 <= 16;
	     {1'd0,  6'd1}: s1rd2 <= 17;
	     {1'd0,  6'd2}: s1rd2 <= 18;
	     {1'd0,  6'd3}: s1rd2 <= 19;
	     {1'd0,  6'd4}: s1rd2 <= 20;
	     {1'd0,  6'd5}: s1rd2 <= 21;
	     {1'd0,  6'd6}: s1rd2 <= 22;
	     {1'd0,  6'd7}: s1rd2 <= 23;
	     {1'd0,  6'd8}: s1rd2 <= 24;
	     {1'd0,  6'd9}: s1rd2 <= 25;
	     {1'd0,  6'd10}: s1rd2 <= 26;
	     {1'd0,  6'd11}: s1rd2 <= 27;
	     {1'd0,  6'd12}: s1rd2 <= 28;
	     {1'd0,  6'd13}: s1rd2 <= 29;
	     {1'd0,  6'd14}: s1rd2 <= 30;
	     {1'd0,  6'd15}: s1rd2 <= 31;
	     {1'd0,  6'd16}: s1rd2 <= 0;
	     {1'd0,  6'd17}: s1rd2 <= 1;
	     {1'd0,  6'd18}: s1rd2 <= 2;
	     {1'd0,  6'd19}: s1rd2 <= 3;
	     {1'd0,  6'd20}: s1rd2 <= 4;
	     {1'd0,  6'd21}: s1rd2 <= 5;
	     {1'd0,  6'd22}: s1rd2 <= 6;
	     {1'd0,  6'd23}: s1rd2 <= 7;
	     {1'd0,  6'd24}: s1rd2 <= 8;
	     {1'd0,  6'd25}: s1rd2 <= 9;
	     {1'd0,  6'd26}: s1rd2 <= 10;
	     {1'd0,  6'd27}: s1rd2 <= 11;
	     {1'd0,  6'd28}: s1rd2 <= 12;
	     {1'd0,  6'd29}: s1rd2 <= 13;
	     {1'd0,  6'd30}: s1rd2 <= 14;
	     {1'd0,  6'd31}: s1rd2 <= 15;
	     {1'd0,  6'd32}: s1rd2 <= 48;
	     {1'd0,  6'd33}: s1rd2 <= 49;
	     {1'd0,  6'd34}: s1rd2 <= 50;
	     {1'd0,  6'd35}: s1rd2 <= 51;
	     {1'd0,  6'd36}: s1rd2 <= 52;
	     {1'd0,  6'd37}: s1rd2 <= 53;
	     {1'd0,  6'd38}: s1rd2 <= 54;
	     {1'd0,  6'd39}: s1rd2 <= 55;
	     {1'd0,  6'd40}: s1rd2 <= 56;
	     {1'd0,  6'd41}: s1rd2 <= 57;
	     {1'd0,  6'd42}: s1rd2 <= 58;
	     {1'd0,  6'd43}: s1rd2 <= 59;
	     {1'd0,  6'd44}: s1rd2 <= 60;
	     {1'd0,  6'd45}: s1rd2 <= 61;
	     {1'd0,  6'd46}: s1rd2 <= 62;
	     {1'd0,  6'd47}: s1rd2 <= 63;
	     {1'd0,  6'd48}: s1rd2 <= 32;
	     {1'd0,  6'd49}: s1rd2 <= 33;
	     {1'd0,  6'd50}: s1rd2 <= 34;
	     {1'd0,  6'd51}: s1rd2 <= 35;
	     {1'd0,  6'd52}: s1rd2 <= 36;
	     {1'd0,  6'd53}: s1rd2 <= 37;
	     {1'd0,  6'd54}: s1rd2 <= 38;
	     {1'd0,  6'd55}: s1rd2 <= 39;
	     {1'd0,  6'd56}: s1rd2 <= 40;
	     {1'd0,  6'd57}: s1rd2 <= 41;
	     {1'd0,  6'd58}: s1rd2 <= 42;
	     {1'd0,  6'd59}: s1rd2 <= 43;
	     {1'd0,  6'd60}: s1rd2 <= 44;
	     {1'd0,  6'd61}: s1rd2 <= 45;
	     {1'd0,  6'd62}: s1rd2 <= 46;
	     {1'd0,  6'd63}: s1rd2 <= 47;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "distributed"
   always @(posedge clk) begin
      case({tm19_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd3 <= 0;
	     {1'd0,  6'd1}: s1rd3 <= 1;
	     {1'd0,  6'd2}: s1rd3 <= 2;
	     {1'd0,  6'd3}: s1rd3 <= 3;
	     {1'd0,  6'd4}: s1rd3 <= 4;
	     {1'd0,  6'd5}: s1rd3 <= 5;
	     {1'd0,  6'd6}: s1rd3 <= 6;
	     {1'd0,  6'd7}: s1rd3 <= 7;
	     {1'd0,  6'd8}: s1rd3 <= 8;
	     {1'd0,  6'd9}: s1rd3 <= 9;
	     {1'd0,  6'd10}: s1rd3 <= 10;
	     {1'd0,  6'd11}: s1rd3 <= 11;
	     {1'd0,  6'd12}: s1rd3 <= 12;
	     {1'd0,  6'd13}: s1rd3 <= 13;
	     {1'd0,  6'd14}: s1rd3 <= 14;
	     {1'd0,  6'd15}: s1rd3 <= 15;
	     {1'd0,  6'd16}: s1rd3 <= 16;
	     {1'd0,  6'd17}: s1rd3 <= 17;
	     {1'd0,  6'd18}: s1rd3 <= 18;
	     {1'd0,  6'd19}: s1rd3 <= 19;
	     {1'd0,  6'd20}: s1rd3 <= 20;
	     {1'd0,  6'd21}: s1rd3 <= 21;
	     {1'd0,  6'd22}: s1rd3 <= 22;
	     {1'd0,  6'd23}: s1rd3 <= 23;
	     {1'd0,  6'd24}: s1rd3 <= 24;
	     {1'd0,  6'd25}: s1rd3 <= 25;
	     {1'd0,  6'd26}: s1rd3 <= 26;
	     {1'd0,  6'd27}: s1rd3 <= 27;
	     {1'd0,  6'd28}: s1rd3 <= 28;
	     {1'd0,  6'd29}: s1rd3 <= 29;
	     {1'd0,  6'd30}: s1rd3 <= 30;
	     {1'd0,  6'd31}: s1rd3 <= 31;
	     {1'd0,  6'd32}: s1rd3 <= 32;
	     {1'd0,  6'd33}: s1rd3 <= 33;
	     {1'd0,  6'd34}: s1rd3 <= 34;
	     {1'd0,  6'd35}: s1rd3 <= 35;
	     {1'd0,  6'd36}: s1rd3 <= 36;
	     {1'd0,  6'd37}: s1rd3 <= 37;
	     {1'd0,  6'd38}: s1rd3 <= 38;
	     {1'd0,  6'd39}: s1rd3 <= 39;
	     {1'd0,  6'd40}: s1rd3 <= 40;
	     {1'd0,  6'd41}: s1rd3 <= 41;
	     {1'd0,  6'd42}: s1rd3 <= 42;
	     {1'd0,  6'd43}: s1rd3 <= 43;
	     {1'd0,  6'd44}: s1rd3 <= 44;
	     {1'd0,  6'd45}: s1rd3 <= 45;
	     {1'd0,  6'd46}: s1rd3 <= 46;
	     {1'd0,  6'd47}: s1rd3 <= 47;
	     {1'd0,  6'd48}: s1rd3 <= 48;
	     {1'd0,  6'd49}: s1rd3 <= 49;
	     {1'd0,  6'd50}: s1rd3 <= 50;
	     {1'd0,  6'd51}: s1rd3 <= 51;
	     {1'd0,  6'd52}: s1rd3 <= 52;
	     {1'd0,  6'd53}: s1rd3 <= 53;
	     {1'd0,  6'd54}: s1rd3 <= 54;
	     {1'd0,  6'd55}: s1rd3 <= 55;
	     {1'd0,  6'd56}: s1rd3 <= 56;
	     {1'd0,  6'd57}: s1rd3 <= 57;
	     {1'd0,  6'd58}: s1rd3 <= 58;
	     {1'd0,  6'd59}: s1rd3 <= 59;
	     {1'd0,  6'd60}: s1rd3 <= 60;
	     {1'd0,  6'd61}: s1rd3 <= 61;
	     {1'd0,  6'd62}: s1rd3 <= 62;
	     {1'd0,  6'd63}: s1rd3 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "distributed"
    swNet20818 sw(tm19_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3);

   always @(posedge clk) begin
      case({tm19_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr0 <= 48;
	      {1'd0, 6'd1}: s2wr0 <= 49;
	      {1'd0, 6'd2}: s2wr0 <= 50;
	      {1'd0, 6'd3}: s2wr0 <= 51;
	      {1'd0, 6'd4}: s2wr0 <= 52;
	      {1'd0, 6'd5}: s2wr0 <= 53;
	      {1'd0, 6'd6}: s2wr0 <= 54;
	      {1'd0, 6'd7}: s2wr0 <= 55;
	      {1'd0, 6'd8}: s2wr0 <= 56;
	      {1'd0, 6'd9}: s2wr0 <= 57;
	      {1'd0, 6'd10}: s2wr0 <= 58;
	      {1'd0, 6'd11}: s2wr0 <= 59;
	      {1'd0, 6'd12}: s2wr0 <= 60;
	      {1'd0, 6'd13}: s2wr0 <= 61;
	      {1'd0, 6'd14}: s2wr0 <= 62;
	      {1'd0, 6'd15}: s2wr0 <= 63;
	      {1'd0, 6'd16}: s2wr0 <= 32;
	      {1'd0, 6'd17}: s2wr0 <= 33;
	      {1'd0, 6'd18}: s2wr0 <= 34;
	      {1'd0, 6'd19}: s2wr0 <= 35;
	      {1'd0, 6'd20}: s2wr0 <= 36;
	      {1'd0, 6'd21}: s2wr0 <= 37;
	      {1'd0, 6'd22}: s2wr0 <= 38;
	      {1'd0, 6'd23}: s2wr0 <= 39;
	      {1'd0, 6'd24}: s2wr0 <= 40;
	      {1'd0, 6'd25}: s2wr0 <= 41;
	      {1'd0, 6'd26}: s2wr0 <= 42;
	      {1'd0, 6'd27}: s2wr0 <= 43;
	      {1'd0, 6'd28}: s2wr0 <= 44;
	      {1'd0, 6'd29}: s2wr0 <= 45;
	      {1'd0, 6'd30}: s2wr0 <= 46;
	      {1'd0, 6'd31}: s2wr0 <= 47;
	      {1'd0, 6'd32}: s2wr0 <= 16;
	      {1'd0, 6'd33}: s2wr0 <= 17;
	      {1'd0, 6'd34}: s2wr0 <= 18;
	      {1'd0, 6'd35}: s2wr0 <= 19;
	      {1'd0, 6'd36}: s2wr0 <= 20;
	      {1'd0, 6'd37}: s2wr0 <= 21;
	      {1'd0, 6'd38}: s2wr0 <= 22;
	      {1'd0, 6'd39}: s2wr0 <= 23;
	      {1'd0, 6'd40}: s2wr0 <= 24;
	      {1'd0, 6'd41}: s2wr0 <= 25;
	      {1'd0, 6'd42}: s2wr0 <= 26;
	      {1'd0, 6'd43}: s2wr0 <= 27;
	      {1'd0, 6'd44}: s2wr0 <= 28;
	      {1'd0, 6'd45}: s2wr0 <= 29;
	      {1'd0, 6'd46}: s2wr0 <= 30;
	      {1'd0, 6'd47}: s2wr0 <= 31;
	      {1'd0, 6'd48}: s2wr0 <= 0;
	      {1'd0, 6'd49}: s2wr0 <= 1;
	      {1'd0, 6'd50}: s2wr0 <= 2;
	      {1'd0, 6'd51}: s2wr0 <= 3;
	      {1'd0, 6'd52}: s2wr0 <= 4;
	      {1'd0, 6'd53}: s2wr0 <= 5;
	      {1'd0, 6'd54}: s2wr0 <= 6;
	      {1'd0, 6'd55}: s2wr0 <= 7;
	      {1'd0, 6'd56}: s2wr0 <= 8;
	      {1'd0, 6'd57}: s2wr0 <= 9;
	      {1'd0, 6'd58}: s2wr0 <= 10;
	      {1'd0, 6'd59}: s2wr0 <= 11;
	      {1'd0, 6'd60}: s2wr0 <= 12;
	      {1'd0, 6'd61}: s2wr0 <= 13;
	      {1'd0, 6'd62}: s2wr0 <= 14;
	      {1'd0, 6'd63}: s2wr0 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "distributed"
   always @(posedge clk) begin
      case({tm19_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr1 <= 32;
	      {1'd0, 6'd1}: s2wr1 <= 33;
	      {1'd0, 6'd2}: s2wr1 <= 34;
	      {1'd0, 6'd3}: s2wr1 <= 35;
	      {1'd0, 6'd4}: s2wr1 <= 36;
	      {1'd0, 6'd5}: s2wr1 <= 37;
	      {1'd0, 6'd6}: s2wr1 <= 38;
	      {1'd0, 6'd7}: s2wr1 <= 39;
	      {1'd0, 6'd8}: s2wr1 <= 40;
	      {1'd0, 6'd9}: s2wr1 <= 41;
	      {1'd0, 6'd10}: s2wr1 <= 42;
	      {1'd0, 6'd11}: s2wr1 <= 43;
	      {1'd0, 6'd12}: s2wr1 <= 44;
	      {1'd0, 6'd13}: s2wr1 <= 45;
	      {1'd0, 6'd14}: s2wr1 <= 46;
	      {1'd0, 6'd15}: s2wr1 <= 47;
	      {1'd0, 6'd16}: s2wr1 <= 48;
	      {1'd0, 6'd17}: s2wr1 <= 49;
	      {1'd0, 6'd18}: s2wr1 <= 50;
	      {1'd0, 6'd19}: s2wr1 <= 51;
	      {1'd0, 6'd20}: s2wr1 <= 52;
	      {1'd0, 6'd21}: s2wr1 <= 53;
	      {1'd0, 6'd22}: s2wr1 <= 54;
	      {1'd0, 6'd23}: s2wr1 <= 55;
	      {1'd0, 6'd24}: s2wr1 <= 56;
	      {1'd0, 6'd25}: s2wr1 <= 57;
	      {1'd0, 6'd26}: s2wr1 <= 58;
	      {1'd0, 6'd27}: s2wr1 <= 59;
	      {1'd0, 6'd28}: s2wr1 <= 60;
	      {1'd0, 6'd29}: s2wr1 <= 61;
	      {1'd0, 6'd30}: s2wr1 <= 62;
	      {1'd0, 6'd31}: s2wr1 <= 63;
	      {1'd0, 6'd32}: s2wr1 <= 0;
	      {1'd0, 6'd33}: s2wr1 <= 1;
	      {1'd0, 6'd34}: s2wr1 <= 2;
	      {1'd0, 6'd35}: s2wr1 <= 3;
	      {1'd0, 6'd36}: s2wr1 <= 4;
	      {1'd0, 6'd37}: s2wr1 <= 5;
	      {1'd0, 6'd38}: s2wr1 <= 6;
	      {1'd0, 6'd39}: s2wr1 <= 7;
	      {1'd0, 6'd40}: s2wr1 <= 8;
	      {1'd0, 6'd41}: s2wr1 <= 9;
	      {1'd0, 6'd42}: s2wr1 <= 10;
	      {1'd0, 6'd43}: s2wr1 <= 11;
	      {1'd0, 6'd44}: s2wr1 <= 12;
	      {1'd0, 6'd45}: s2wr1 <= 13;
	      {1'd0, 6'd46}: s2wr1 <= 14;
	      {1'd0, 6'd47}: s2wr1 <= 15;
	      {1'd0, 6'd48}: s2wr1 <= 16;
	      {1'd0, 6'd49}: s2wr1 <= 17;
	      {1'd0, 6'd50}: s2wr1 <= 18;
	      {1'd0, 6'd51}: s2wr1 <= 19;
	      {1'd0, 6'd52}: s2wr1 <= 20;
	      {1'd0, 6'd53}: s2wr1 <= 21;
	      {1'd0, 6'd54}: s2wr1 <= 22;
	      {1'd0, 6'd55}: s2wr1 <= 23;
	      {1'd0, 6'd56}: s2wr1 <= 24;
	      {1'd0, 6'd57}: s2wr1 <= 25;
	      {1'd0, 6'd58}: s2wr1 <= 26;
	      {1'd0, 6'd59}: s2wr1 <= 27;
	      {1'd0, 6'd60}: s2wr1 <= 28;
	      {1'd0, 6'd61}: s2wr1 <= 29;
	      {1'd0, 6'd62}: s2wr1 <= 30;
	      {1'd0, 6'd63}: s2wr1 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "distributed"
   always @(posedge clk) begin
      case({tm19_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr2 <= 16;
	      {1'd0, 6'd1}: s2wr2 <= 17;
	      {1'd0, 6'd2}: s2wr2 <= 18;
	      {1'd0, 6'd3}: s2wr2 <= 19;
	      {1'd0, 6'd4}: s2wr2 <= 20;
	      {1'd0, 6'd5}: s2wr2 <= 21;
	      {1'd0, 6'd6}: s2wr2 <= 22;
	      {1'd0, 6'd7}: s2wr2 <= 23;
	      {1'd0, 6'd8}: s2wr2 <= 24;
	      {1'd0, 6'd9}: s2wr2 <= 25;
	      {1'd0, 6'd10}: s2wr2 <= 26;
	      {1'd0, 6'd11}: s2wr2 <= 27;
	      {1'd0, 6'd12}: s2wr2 <= 28;
	      {1'd0, 6'd13}: s2wr2 <= 29;
	      {1'd0, 6'd14}: s2wr2 <= 30;
	      {1'd0, 6'd15}: s2wr2 <= 31;
	      {1'd0, 6'd16}: s2wr2 <= 0;
	      {1'd0, 6'd17}: s2wr2 <= 1;
	      {1'd0, 6'd18}: s2wr2 <= 2;
	      {1'd0, 6'd19}: s2wr2 <= 3;
	      {1'd0, 6'd20}: s2wr2 <= 4;
	      {1'd0, 6'd21}: s2wr2 <= 5;
	      {1'd0, 6'd22}: s2wr2 <= 6;
	      {1'd0, 6'd23}: s2wr2 <= 7;
	      {1'd0, 6'd24}: s2wr2 <= 8;
	      {1'd0, 6'd25}: s2wr2 <= 9;
	      {1'd0, 6'd26}: s2wr2 <= 10;
	      {1'd0, 6'd27}: s2wr2 <= 11;
	      {1'd0, 6'd28}: s2wr2 <= 12;
	      {1'd0, 6'd29}: s2wr2 <= 13;
	      {1'd0, 6'd30}: s2wr2 <= 14;
	      {1'd0, 6'd31}: s2wr2 <= 15;
	      {1'd0, 6'd32}: s2wr2 <= 48;
	      {1'd0, 6'd33}: s2wr2 <= 49;
	      {1'd0, 6'd34}: s2wr2 <= 50;
	      {1'd0, 6'd35}: s2wr2 <= 51;
	      {1'd0, 6'd36}: s2wr2 <= 52;
	      {1'd0, 6'd37}: s2wr2 <= 53;
	      {1'd0, 6'd38}: s2wr2 <= 54;
	      {1'd0, 6'd39}: s2wr2 <= 55;
	      {1'd0, 6'd40}: s2wr2 <= 56;
	      {1'd0, 6'd41}: s2wr2 <= 57;
	      {1'd0, 6'd42}: s2wr2 <= 58;
	      {1'd0, 6'd43}: s2wr2 <= 59;
	      {1'd0, 6'd44}: s2wr2 <= 60;
	      {1'd0, 6'd45}: s2wr2 <= 61;
	      {1'd0, 6'd46}: s2wr2 <= 62;
	      {1'd0, 6'd47}: s2wr2 <= 63;
	      {1'd0, 6'd48}: s2wr2 <= 32;
	      {1'd0, 6'd49}: s2wr2 <= 33;
	      {1'd0, 6'd50}: s2wr2 <= 34;
	      {1'd0, 6'd51}: s2wr2 <= 35;
	      {1'd0, 6'd52}: s2wr2 <= 36;
	      {1'd0, 6'd53}: s2wr2 <= 37;
	      {1'd0, 6'd54}: s2wr2 <= 38;
	      {1'd0, 6'd55}: s2wr2 <= 39;
	      {1'd0, 6'd56}: s2wr2 <= 40;
	      {1'd0, 6'd57}: s2wr2 <= 41;
	      {1'd0, 6'd58}: s2wr2 <= 42;
	      {1'd0, 6'd59}: s2wr2 <= 43;
	      {1'd0, 6'd60}: s2wr2 <= 44;
	      {1'd0, 6'd61}: s2wr2 <= 45;
	      {1'd0, 6'd62}: s2wr2 <= 46;
	      {1'd0, 6'd63}: s2wr2 <= 47;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "distributed"
   always @(posedge clk) begin
      case({tm19_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr3 <= 0;
	      {1'd0, 6'd1}: s2wr3 <= 1;
	      {1'd0, 6'd2}: s2wr3 <= 2;
	      {1'd0, 6'd3}: s2wr3 <= 3;
	      {1'd0, 6'd4}: s2wr3 <= 4;
	      {1'd0, 6'd5}: s2wr3 <= 5;
	      {1'd0, 6'd6}: s2wr3 <= 6;
	      {1'd0, 6'd7}: s2wr3 <= 7;
	      {1'd0, 6'd8}: s2wr3 <= 8;
	      {1'd0, 6'd9}: s2wr3 <= 9;
	      {1'd0, 6'd10}: s2wr3 <= 10;
	      {1'd0, 6'd11}: s2wr3 <= 11;
	      {1'd0, 6'd12}: s2wr3 <= 12;
	      {1'd0, 6'd13}: s2wr3 <= 13;
	      {1'd0, 6'd14}: s2wr3 <= 14;
	      {1'd0, 6'd15}: s2wr3 <= 15;
	      {1'd0, 6'd16}: s2wr3 <= 16;
	      {1'd0, 6'd17}: s2wr3 <= 17;
	      {1'd0, 6'd18}: s2wr3 <= 18;
	      {1'd0, 6'd19}: s2wr3 <= 19;
	      {1'd0, 6'd20}: s2wr3 <= 20;
	      {1'd0, 6'd21}: s2wr3 <= 21;
	      {1'd0, 6'd22}: s2wr3 <= 22;
	      {1'd0, 6'd23}: s2wr3 <= 23;
	      {1'd0, 6'd24}: s2wr3 <= 24;
	      {1'd0, 6'd25}: s2wr3 <= 25;
	      {1'd0, 6'd26}: s2wr3 <= 26;
	      {1'd0, 6'd27}: s2wr3 <= 27;
	      {1'd0, 6'd28}: s2wr3 <= 28;
	      {1'd0, 6'd29}: s2wr3 <= 29;
	      {1'd0, 6'd30}: s2wr3 <= 30;
	      {1'd0, 6'd31}: s2wr3 <= 31;
	      {1'd0, 6'd32}: s2wr3 <= 32;
	      {1'd0, 6'd33}: s2wr3 <= 33;
	      {1'd0, 6'd34}: s2wr3 <= 34;
	      {1'd0, 6'd35}: s2wr3 <= 35;
	      {1'd0, 6'd36}: s2wr3 <= 36;
	      {1'd0, 6'd37}: s2wr3 <= 37;
	      {1'd0, 6'd38}: s2wr3 <= 38;
	      {1'd0, 6'd39}: s2wr3 <= 39;
	      {1'd0, 6'd40}: s2wr3 <= 40;
	      {1'd0, 6'd41}: s2wr3 <= 41;
	      {1'd0, 6'd42}: s2wr3 <= 42;
	      {1'd0, 6'd43}: s2wr3 <= 43;
	      {1'd0, 6'd44}: s2wr3 <= 44;
	      {1'd0, 6'd45}: s2wr3 <= 45;
	      {1'd0, 6'd46}: s2wr3 <= 46;
	      {1'd0, 6'd47}: s2wr3 <= 47;
	      {1'd0, 6'd48}: s2wr3 <= 48;
	      {1'd0, 6'd49}: s2wr3 <= 49;
	      {1'd0, 6'd50}: s2wr3 <= 50;
	      {1'd0, 6'd51}: s2wr3 <= 51;
	      {1'd0, 6'd52}: s2wr3 <= 52;
	      {1'd0, 6'd53}: s2wr3 <= 53;
	      {1'd0, 6'd54}: s2wr3 <= 54;
	      {1'd0, 6'd55}: s2wr3 <= 55;
	      {1'd0, 6'd56}: s2wr3 <= 56;
	      {1'd0, 6'd57}: s2wr3 <= 57;
	      {1'd0, 6'd58}: s2wr3 <= 58;
	      {1'd0, 6'd59}: s2wr3 <= 59;
	      {1'd0, 6'd60}: s2wr3 <= 60;
	      {1'd0, 6'd61}: s2wr3 <= 61;
	      {1'd0, 6'd62}: s2wr3 <= 62;
	      {1'd0, 6'd63}: s2wr3 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "distributed"
endmodule


// Latency: 12
// Gap: 64
module DirSum_21673(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7);

   output next_out;
   input clk, reset, next;

   reg [5:0] i2;

   input [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   always @(posedge clk) begin
      if (reset == 1) begin
         i2 <= 0;
      end
      else begin
         if (next == 1)
            i2 <= 0;
         else if (i2 == 63)
            i2 <= 0;
         else
            i2 <= i2 + 1;
      end
   end

   codeBlock20823 codeBlockIsnt25408(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i2_in(i2),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7));

endmodule

module D18_21209(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h0;
      1: out3 <= 20'hfb4ab;
      2: out3 <= 20'hf69bf;
      3: out3 <= 20'hf1fa4;
      4: out3 <= 20'hed6c0;
      5: out3 <= 20'he8f78;
      6: out3 <= 20'he4a2f;
      7: out3 <= 20'he0746;
      8: out3 <= 20'hdc719;
      9: out3 <= 20'hd8a01;
      10: out3 <= 20'hd5053;
      11: out3 <= 20'hd1a5f;
      12: out3 <= 20'hce870;
      13: out3 <= 20'hcbacb;
      14: out3 <= 20'hc91b0;
      15: out3 <= 20'hc6d57;
      16: out3 <= 20'hc4df3;
      17: out3 <= 20'hc33af;
      18: out3 <= 20'hc1eb0;
      19: out3 <= 20'hc0f13;
      20: out3 <= 20'hc04ee;
      21: out3 <= 20'hc004f;
      22: out3 <= 20'hc013c;
      23: out3 <= 20'hc07b3;
      24: out3 <= 20'hc13ad;
      25: out3 <= 20'hc2518;
      26: out3 <= 20'hc3bdc;
      27: out3 <= 20'hc57d9;
      28: out3 <= 20'hc78ea;
      29: out3 <= 20'hc9edf;
      30: out3 <= 20'hcc984;
      31: out3 <= 20'hcf89e;
      32: out3 <= 20'hd2bec;
      33: out3 <= 20'hd6327;
      34: out3 <= 20'hd9e01;
      35: out3 <= 20'hddc2a;
      36: out3 <= 20'he1d4a;
      37: out3 <= 20'he6108;
      38: out3 <= 20'hea706;
      39: out3 <= 20'heeee3;
      40: out3 <= 20'hf383a;
      41: out3 <= 20'hf82a7;
      42: out3 <= 20'hfcdc1;
      43: out3 <= 20'h1921;
      44: out3 <= 20'h645f;
      45: out3 <= 20'haf11;
      46: out3 <= 20'hf8d0;
      47: out3 <= 20'h14136;
      48: out3 <= 20'h187de;
      49: out3 <= 20'h1cc67;
      50: out3 <= 20'h20e71;
      51: out3 <= 20'h24da1;
      52: out3 <= 20'h2899e;
      53: out3 <= 20'h2c217;
      54: out3 <= 20'h2f6bc;
      55: out3 <= 20'h32744;
      56: out3 <= 20'h3536d;
      57: out3 <= 20'h37af8;
      58: out3 <= 20'h39daf;
      59: out3 <= 20'h3bb62;
      60: out3 <= 20'h3d3e8;
      61: out3 <= 20'h3e71e;
      62: out3 <= 20'h3f4eb;
      63: out3 <= 20'h3fd3a;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D17_21275(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h0;
      1: out3 <= 20'hfcdc1;
      2: out3 <= 20'hf9ba1;
      3: out3 <= 20'hf69bf;
      4: out3 <= 20'hf383a;
      5: out3 <= 20'hf0730;
      6: out3 <= 20'hed6c0;
      7: out3 <= 20'hea706;
      8: out3 <= 20'he7822;
      9: out3 <= 20'he4a2f;
      10: out3 <= 20'he1d4a;
      11: out3 <= 20'hdf18f;
      12: out3 <= 20'hdc719;
      13: out3 <= 20'hd9e01;
      14: out3 <= 20'hd7662;
      15: out3 <= 20'hd5053;
      16: out3 <= 20'hd2bec;
      17: out3 <= 20'hd0944;
      18: out3 <= 20'hce870;
      19: out3 <= 20'hcc984;
      20: out3 <= 20'hcac93;
      21: out3 <= 20'hc91b0;
      22: out3 <= 20'hc78ea;
      23: out3 <= 20'hc6251;
      24: out3 <= 20'hc4df3;
      25: out3 <= 20'hc3bdc;
      26: out3 <= 20'hc2c18;
      27: out3 <= 20'hc1eb0;
      28: out3 <= 20'hc13ad;
      29: out3 <= 20'hc0b15;
      30: out3 <= 20'hc04ee;
      31: out3 <= 20'hc013c;
      32: out3 <= 20'hc0000;
      33: out3 <= 20'hc013c;
      34: out3 <= 20'hc04ee;
      35: out3 <= 20'hc0b15;
      36: out3 <= 20'hc13ad;
      37: out3 <= 20'hc1eb0;
      38: out3 <= 20'hc2c18;
      39: out3 <= 20'hc3bdc;
      40: out3 <= 20'hc4df3;
      41: out3 <= 20'hc6251;
      42: out3 <= 20'hc78ea;
      43: out3 <= 20'hc91b0;
      44: out3 <= 20'hcac93;
      45: out3 <= 20'hcc984;
      46: out3 <= 20'hce870;
      47: out3 <= 20'hd0944;
      48: out3 <= 20'hd2bec;
      49: out3 <= 20'hd5053;
      50: out3 <= 20'hd7662;
      51: out3 <= 20'hd9e01;
      52: out3 <= 20'hdc719;
      53: out3 <= 20'hdf18f;
      54: out3 <= 20'he1d4a;
      55: out3 <= 20'he4a2f;
      56: out3 <= 20'he7822;
      57: out3 <= 20'hea706;
      58: out3 <= 20'hed6c0;
      59: out3 <= 20'hf0730;
      60: out3 <= 20'hf383a;
      61: out3 <= 20'hf69bf;
      62: out3 <= 20'hf9ba1;
      63: out3 <= 20'hfcdc1;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D16_21341(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h0;
      1: out3 <= 20'hfe6df;
      2: out3 <= 20'hfcdc1;
      3: out3 <= 20'hfb4ab;
      4: out3 <= 20'hf9ba1;
      5: out3 <= 20'hf82a7;
      6: out3 <= 20'hf69bf;
      7: out3 <= 20'hf50ef;
      8: out3 <= 20'hf383a;
      9: out3 <= 20'hf1fa4;
      10: out3 <= 20'hf0730;
      11: out3 <= 20'heeee3;
      12: out3 <= 20'hed6c0;
      13: out3 <= 20'hebeca;
      14: out3 <= 20'hea706;
      15: out3 <= 20'he8f78;
      16: out3 <= 20'he7822;
      17: out3 <= 20'he6108;
      18: out3 <= 20'he4a2f;
      19: out3 <= 20'he3399;
      20: out3 <= 20'he1d4a;
      21: out3 <= 20'he0746;
      22: out3 <= 20'hdf18f;
      23: out3 <= 20'hddc2a;
      24: out3 <= 20'hdc719;
      25: out3 <= 20'hdb25f;
      26: out3 <= 20'hd9e01;
      27: out3 <= 20'hd8a01;
      28: out3 <= 20'hd7662;
      29: out3 <= 20'hd6327;
      30: out3 <= 20'hd5053;
      31: out3 <= 20'hd3de9;
      32: out3 <= 20'hd2bec;
      33: out3 <= 20'hd1a5f;
      34: out3 <= 20'hd0944;
      35: out3 <= 20'hcf89e;
      36: out3 <= 20'hce870;
      37: out3 <= 20'hcd8bc;
      38: out3 <= 20'hcc984;
      39: out3 <= 20'hcbacb;
      40: out3 <= 20'hcac93;
      41: out3 <= 20'hc9edf;
      42: out3 <= 20'hc91b0;
      43: out3 <= 20'hc8508;
      44: out3 <= 20'hc78ea;
      45: out3 <= 20'hc6d57;
      46: out3 <= 20'hc6251;
      47: out3 <= 20'hc57d9;
      48: out3 <= 20'hc4df3;
      49: out3 <= 20'hc449e;
      50: out3 <= 20'hc3bdc;
      51: out3 <= 20'hc33af;
      52: out3 <= 20'hc2c18;
      53: out3 <= 20'hc2518;
      54: out3 <= 20'hc1eb0;
      55: out3 <= 20'hc18e2;
      56: out3 <= 20'hc13ad;
      57: out3 <= 20'hc0f13;
      58: out3 <= 20'hc0b15;
      59: out3 <= 20'hc07b3;
      60: out3 <= 20'hc04ee;
      61: out3 <= 20'hc02c6;
      62: out3 <= 20'hc013c;
      63: out3 <= 20'hc004f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D14_21473(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h40000;
      1: out3 <= 20'h3fd3a;
      2: out3 <= 20'h3f4eb;
      3: out3 <= 20'h3e71e;
      4: out3 <= 20'h3d3e8;
      5: out3 <= 20'h3bb62;
      6: out3 <= 20'h39daf;
      7: out3 <= 20'h37af8;
      8: out3 <= 20'h3536d;
      9: out3 <= 20'h32744;
      10: out3 <= 20'h2f6bc;
      11: out3 <= 20'h2c217;
      12: out3 <= 20'h2899e;
      13: out3 <= 20'h24da1;
      14: out3 <= 20'h20e71;
      15: out3 <= 20'h1cc67;
      16: out3 <= 20'h187de;
      17: out3 <= 20'h14136;
      18: out3 <= 20'hf8d0;
      19: out3 <= 20'haf11;
      20: out3 <= 20'h645f;
      21: out3 <= 20'h1921;
      22: out3 <= 20'hfcdc1;
      23: out3 <= 20'hf82a7;
      24: out3 <= 20'hf383a;
      25: out3 <= 20'heeee3;
      26: out3 <= 20'hea706;
      27: out3 <= 20'he6108;
      28: out3 <= 20'he1d4a;
      29: out3 <= 20'hddc2a;
      30: out3 <= 20'hd9e01;
      31: out3 <= 20'hd6327;
      32: out3 <= 20'hd2bec;
      33: out3 <= 20'hcf89e;
      34: out3 <= 20'hcc984;
      35: out3 <= 20'hc9edf;
      36: out3 <= 20'hc78ea;
      37: out3 <= 20'hc57d9;
      38: out3 <= 20'hc3bdc;
      39: out3 <= 20'hc2518;
      40: out3 <= 20'hc13ad;
      41: out3 <= 20'hc07b3;
      42: out3 <= 20'hc013c;
      43: out3 <= 20'hc004f;
      44: out3 <= 20'hc04ee;
      45: out3 <= 20'hc0f13;
      46: out3 <= 20'hc1eb0;
      47: out3 <= 20'hc33af;
      48: out3 <= 20'hc4df3;
      49: out3 <= 20'hc6d57;
      50: out3 <= 20'hc91b0;
      51: out3 <= 20'hcbacb;
      52: out3 <= 20'hce870;
      53: out3 <= 20'hd1a5f;
      54: out3 <= 20'hd5053;
      55: out3 <= 20'hd8a01;
      56: out3 <= 20'hdc719;
      57: out3 <= 20'he0746;
      58: out3 <= 20'he4a2f;
      59: out3 <= 20'he8f78;
      60: out3 <= 20'hed6c0;
      61: out3 <= 20'hf1fa4;
      62: out3 <= 20'hf69bf;
      63: out3 <= 20'hfb4ab;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D13_21539(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h40000;
      1: out3 <= 20'h3fec4;
      2: out3 <= 20'h3fb12;
      3: out3 <= 20'h3f4eb;
      4: out3 <= 20'h3ec53;
      5: out3 <= 20'h3e150;
      6: out3 <= 20'h3d3e8;
      7: out3 <= 20'h3c424;
      8: out3 <= 20'h3b20d;
      9: out3 <= 20'h39daf;
      10: out3 <= 20'h38716;
      11: out3 <= 20'h36e50;
      12: out3 <= 20'h3536d;
      13: out3 <= 20'h3367c;
      14: out3 <= 20'h31790;
      15: out3 <= 20'h2f6bc;
      16: out3 <= 20'h2d414;
      17: out3 <= 20'h2afad;
      18: out3 <= 20'h2899e;
      19: out3 <= 20'h261ff;
      20: out3 <= 20'h238e7;
      21: out3 <= 20'h20e71;
      22: out3 <= 20'h1e2b6;
      23: out3 <= 20'h1b5d1;
      24: out3 <= 20'h187de;
      25: out3 <= 20'h158fa;
      26: out3 <= 20'h12940;
      27: out3 <= 20'hf8d0;
      28: out3 <= 20'hc7c6;
      29: out3 <= 20'h9641;
      30: out3 <= 20'h645f;
      31: out3 <= 20'h323f;
      32: out3 <= 20'h0;
      33: out3 <= 20'hfcdc1;
      34: out3 <= 20'hf9ba1;
      35: out3 <= 20'hf69bf;
      36: out3 <= 20'hf383a;
      37: out3 <= 20'hf0730;
      38: out3 <= 20'hed6c0;
      39: out3 <= 20'hea706;
      40: out3 <= 20'he7822;
      41: out3 <= 20'he4a2f;
      42: out3 <= 20'he1d4a;
      43: out3 <= 20'hdf18f;
      44: out3 <= 20'hdc719;
      45: out3 <= 20'hd9e01;
      46: out3 <= 20'hd7662;
      47: out3 <= 20'hd5053;
      48: out3 <= 20'hd2bec;
      49: out3 <= 20'hd0944;
      50: out3 <= 20'hce870;
      51: out3 <= 20'hcc984;
      52: out3 <= 20'hcac93;
      53: out3 <= 20'hc91b0;
      54: out3 <= 20'hc78ea;
      55: out3 <= 20'hc6251;
      56: out3 <= 20'hc4df3;
      57: out3 <= 20'hc3bdc;
      58: out3 <= 20'hc2c18;
      59: out3 <= 20'hc1eb0;
      60: out3 <= 20'hc13ad;
      61: out3 <= 20'hc0b15;
      62: out3 <= 20'hc04ee;
      63: out3 <= 20'hc013c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D12_21605(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h40000;
      1: out3 <= 20'h3ffb1;
      2: out3 <= 20'h3fec4;
      3: out3 <= 20'h3fd3a;
      4: out3 <= 20'h3fb12;
      5: out3 <= 20'h3f84d;
      6: out3 <= 20'h3f4eb;
      7: out3 <= 20'h3f0ed;
      8: out3 <= 20'h3ec53;
      9: out3 <= 20'h3e71e;
      10: out3 <= 20'h3e150;
      11: out3 <= 20'h3dae8;
      12: out3 <= 20'h3d3e8;
      13: out3 <= 20'h3cc51;
      14: out3 <= 20'h3c424;
      15: out3 <= 20'h3bb62;
      16: out3 <= 20'h3b20d;
      17: out3 <= 20'h3a827;
      18: out3 <= 20'h39daf;
      19: out3 <= 20'h392a9;
      20: out3 <= 20'h38716;
      21: out3 <= 20'h37af8;
      22: out3 <= 20'h36e50;
      23: out3 <= 20'h36121;
      24: out3 <= 20'h3536d;
      25: out3 <= 20'h34535;
      26: out3 <= 20'h3367c;
      27: out3 <= 20'h32744;
      28: out3 <= 20'h31790;
      29: out3 <= 20'h30762;
      30: out3 <= 20'h2f6bc;
      31: out3 <= 20'h2e5a1;
      32: out3 <= 20'h2d414;
      33: out3 <= 20'h2c217;
      34: out3 <= 20'h2afad;
      35: out3 <= 20'h29cd9;
      36: out3 <= 20'h2899e;
      37: out3 <= 20'h275ff;
      38: out3 <= 20'h261ff;
      39: out3 <= 20'h24da1;
      40: out3 <= 20'h238e7;
      41: out3 <= 20'h223d6;
      42: out3 <= 20'h20e71;
      43: out3 <= 20'h1f8ba;
      44: out3 <= 20'h1e2b6;
      45: out3 <= 20'h1cc67;
      46: out3 <= 20'h1b5d1;
      47: out3 <= 20'h19ef8;
      48: out3 <= 20'h187de;
      49: out3 <= 20'h17088;
      50: out3 <= 20'h158fa;
      51: out3 <= 20'h14136;
      52: out3 <= 20'h12940;
      53: out3 <= 20'h1111d;
      54: out3 <= 20'hf8d0;
      55: out3 <= 20'he05c;
      56: out3 <= 20'hc7c6;
      57: out3 <= 20'haf11;
      58: out3 <= 20'h9641;
      59: out3 <= 20'h7d59;
      60: out3 <= 20'h645f;
      61: out3 <= 20'h4b55;
      62: out3 <= 20'h323f;
      63: out3 <= 20'h1921;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 12
// Gap: 1
module codeBlock20823(clk, reset, next_in, next_out,
   i2_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [5:0] i2_in;
   reg [5:0] i2;

   input [19:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(11, 1) shiftFIFO_25411(.X(next), .Y(next_out), .clk(clk));


   wire signed [19:0] a225;
   wire signed [19:0] a202;
   wire signed [19:0] a228;
   wire signed [19:0] a206;
   wire signed [19:0] a229;
   wire signed [19:0] a230;
   wire signed [19:0] a233;
   wire signed [19:0] a234;
   wire signed [19:0] a237;
   wire signed [19:0] a238;
   reg signed [19:0] tm384;
   reg signed [19:0] tm388;
   reg signed [19:0] tm400;
   reg signed [19:0] tm404;
   reg signed [19:0] tm416;
   reg signed [19:0] tm420;
   reg signed [19:0] tm432;
   reg signed [19:0] tm443;
   reg signed [19:0] tm385;
   reg signed [19:0] tm389;
   reg signed [19:0] tm401;
   reg signed [19:0] tm405;
   reg signed [19:0] tm417;
   reg signed [19:0] tm421;
   reg signed [19:0] tm433;
   reg signed [19:0] tm444;
   wire signed [19:0] tm22;
   wire signed [19:0] a207;
   wire signed [19:0] tm23;
   wire signed [19:0] a209;
   wire signed [19:0] tm24;
   wire signed [19:0] a213;
   wire signed [19:0] tm25;
   wire signed [19:0] a215;
   wire signed [19:0] tm26;
   wire signed [19:0] a219;
   wire signed [19:0] tm27;
   wire signed [19:0] a221;
   reg signed [19:0] tm386;
   reg signed [19:0] tm390;
   reg signed [19:0] tm402;
   reg signed [19:0] tm406;
   reg signed [19:0] tm418;
   reg signed [19:0] tm422;
   reg signed [19:0] tm434;
   reg signed [19:0] tm445;
   reg signed [19:0] tm74;
   reg signed [19:0] tm75;
   reg signed [19:0] tm78;
   reg signed [19:0] tm79;
   reg signed [19:0] tm82;
   reg signed [19:0] tm83;
   reg signed [19:0] tm387;
   reg signed [19:0] tm391;
   reg signed [19:0] tm403;
   reg signed [19:0] tm407;
   reg signed [19:0] tm419;
   reg signed [19:0] tm423;
   reg signed [19:0] tm435;
   reg signed [19:0] tm446;
   reg signed [19:0] tm436;
   reg signed [19:0] tm447;
   reg signed [19:0] tm437;
   reg signed [19:0] tm448;
   reg signed [19:0] tm438;
   reg signed [19:0] tm449;
   reg signed [19:0] tm439;
   reg signed [19:0] tm450;
   reg signed [19:0] tm440;
   reg signed [19:0] tm451;
   wire signed [19:0] a208;
   wire signed [19:0] a210;
   wire signed [19:0] a211;
   wire signed [19:0] a212;
   wire signed [19:0] a214;
   wire signed [19:0] a216;
   wire signed [19:0] a217;
   wire signed [19:0] a218;
   wire signed [19:0] a220;
   wire signed [19:0] a222;
   wire signed [19:0] a223;
   wire signed [19:0] a224;
   reg signed [19:0] tm441;
   reg signed [19:0] tm452;
   wire signed [19:0] Y0;
   wire signed [19:0] Y1;
   wire signed [19:0] Y2;
   wire signed [19:0] Y3;
   wire signed [19:0] Y4;
   wire signed [19:0] Y5;
   wire signed [19:0] Y6;
   wire signed [19:0] Y7;
   reg signed [19:0] tm442;
   reg signed [19:0] tm453;


   assign a225 = X0;
   assign a202 = a225;
   assign a228 = X1;
   assign a206 = a228;
   assign a229 = X2;
   assign a230 = X3;
   assign a233 = X4;
   assign a234 = X5;
   assign a237 = X6;
   assign a238 = X7;
   assign a207 = tm22;
   assign a209 = tm23;
   assign a213 = tm24;
   assign a215 = tm25;
   assign a219 = tm26;
   assign a221 = tm27;
   assign Y0 = tm442;
   assign Y1 = tm453;

   D18_21209 instD18inst0_21209(.addr(i2[5:0]), .out(tm27), .clk(clk));

   D17_21275 instD17inst0_21275(.addr(i2[5:0]), .out(tm25), .clk(clk));

   D16_21341 instD16inst0_21341(.addr(i2[5:0]), .out(tm23), .clk(clk));

   D14_21473 instD14inst0_21473(.addr(i2[5:0]), .out(tm26), .clk(clk));

   D13_21539 instD13inst0_21539(.addr(i2[5:0]), .out(tm24), .clk(clk));

   D12_21605 instD12inst0_21605(.addr(i2[5:0]), .out(tm22), .clk(clk));

    multfix #(20, 6) m20922(.a(tm74), .b(tm387), .clk(clk), .q_sc(a208), .q_unsc(), .rst(reset));
    multfix #(20, 6) m20944(.a(tm75), .b(tm391), .clk(clk), .q_sc(a210), .q_unsc(), .rst(reset));
    multfix #(20, 6) m20962(.a(tm75), .b(tm387), .clk(clk), .q_sc(a211), .q_unsc(), .rst(reset));
    multfix #(20, 6) m20973(.a(tm74), .b(tm391), .clk(clk), .q_sc(a212), .q_unsc(), .rst(reset));
    multfix #(20, 6) m21002(.a(tm78), .b(tm403), .clk(clk), .q_sc(a214), .q_unsc(), .rst(reset));
    multfix #(20, 6) m21024(.a(tm79), .b(tm407), .clk(clk), .q_sc(a216), .q_unsc(), .rst(reset));
    multfix #(20, 6) m21042(.a(tm79), .b(tm403), .clk(clk), .q_sc(a217), .q_unsc(), .rst(reset));
    multfix #(20, 6) m21053(.a(tm78), .b(tm407), .clk(clk), .q_sc(a218), .q_unsc(), .rst(reset));
    multfix #(20, 6) m21082(.a(tm82), .b(tm419), .clk(clk), .q_sc(a220), .q_unsc(), .rst(reset));
    multfix #(20, 6) m21104(.a(tm83), .b(tm423), .clk(clk), .q_sc(a222), .q_unsc(), .rst(reset));
    multfix #(20, 6) m21122(.a(tm83), .b(tm419), .clk(clk), .q_sc(a223), .q_unsc(), .rst(reset));
    multfix #(20, 6) m21133(.a(tm82), .b(tm423), .clk(clk), .q_sc(a224), .q_unsc(), .rst(reset));
    subfxp #(20, 1) sub20951(.a(a208), .b(a210), .clk(clk), .q(Y2));    // 10
    addfxp #(20, 1) add20980(.a(a211), .b(a212), .clk(clk), .q(Y3));    // 10
    subfxp #(20, 1) sub21031(.a(a214), .b(a216), .clk(clk), .q(Y4));    // 10
    addfxp #(20, 1) add21060(.a(a217), .b(a218), .clk(clk), .q(Y5));    // 10
    subfxp #(20, 1) sub21111(.a(a220), .b(a222), .clk(clk), .q(Y6));    // 10
    addfxp #(20, 1) add21140(.a(a223), .b(a224), .clk(clk), .q(Y7));    // 10


   always @(posedge clk) begin
      if (reset == 1) begin
         tm74 <= 0;
         tm387 <= 0;
         tm75 <= 0;
         tm391 <= 0;
         tm75 <= 0;
         tm387 <= 0;
         tm74 <= 0;
         tm391 <= 0;
         tm78 <= 0;
         tm403 <= 0;
         tm79 <= 0;
         tm407 <= 0;
         tm79 <= 0;
         tm403 <= 0;
         tm78 <= 0;
         tm407 <= 0;
         tm82 <= 0;
         tm419 <= 0;
         tm83 <= 0;
         tm423 <= 0;
         tm83 <= 0;
         tm419 <= 0;
         tm82 <= 0;
         tm423 <= 0;
      end
      else begin
         i2 <= i2_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
         tm384 <= a229;
         tm388 <= a230;
         tm400 <= a233;
         tm404 <= a234;
         tm416 <= a237;
         tm420 <= a238;
         tm432 <= a202;
         tm443 <= a206;
         tm385 <= tm384;
         tm389 <= tm388;
         tm401 <= tm400;
         tm405 <= tm404;
         tm417 <= tm416;
         tm421 <= tm420;
         tm433 <= tm432;
         tm444 <= tm443;
         tm386 <= tm385;
         tm390 <= tm389;
         tm402 <= tm401;
         tm406 <= tm405;
         tm418 <= tm417;
         tm422 <= tm421;
         tm434 <= tm433;
         tm445 <= tm444;
         tm74 <= a207;
         tm75 <= a209;
         tm78 <= a213;
         tm79 <= a215;
         tm82 <= a219;
         tm83 <= a221;
         tm387 <= tm386;
         tm391 <= tm390;
         tm403 <= tm402;
         tm407 <= tm406;
         tm419 <= tm418;
         tm423 <= tm422;
         tm435 <= tm434;
         tm446 <= tm445;
         tm436 <= tm435;
         tm447 <= tm446;
         tm437 <= tm436;
         tm448 <= tm447;
         tm438 <= tm437;
         tm449 <= tm448;
         tm439 <= tm438;
         tm450 <= tm449;
         tm440 <= tm439;
         tm451 <= tm450;
         tm441 <= tm440;
         tm452 <= tm451;
         tm442 <= tm441;
         tm453 <= tm452;
      end
   end
endmodule

// Latency: 3
// Gap: 1
module codeBlock21676(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [19:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(2, 1) shiftFIFO_25414(.X(next), .Y(next_out), .clk(clk));


   wire signed [19:0] a137;
   wire signed [19:0] a138;
   wire signed [19:0] a139;
   wire signed [19:0] a140;
   wire signed [19:0] a145;
   wire signed [19:0] a146;
   wire signed [19:0] a147;
   wire signed [19:0] a148;
   wire signed [20:0] tm220;
   wire signed [20:0] tm221;
   wire signed [20:0] tm222;
   wire signed [20:0] tm223;
   wire signed [20:0] tm224;
   wire signed [20:0] tm225;
   wire signed [20:0] tm226;
   wire signed [20:0] tm227;
   wire signed [19:0] t169;
   wire signed [19:0] t170;
   wire signed [19:0] t171;
   wire signed [19:0] t172;
   wire signed [19:0] t173;
   wire signed [19:0] t174;
   wire signed [19:0] t175;
   wire signed [19:0] t176;
   wire signed [20:0] tm228;
   wire signed [20:0] tm229;
   wire signed [20:0] tm230;
   wire signed [20:0] tm231;
   wire signed [19:0] Y0;
   wire signed [19:0] Y1;
   wire signed [19:0] Y4;
   wire signed [19:0] Y5;
   wire signed [20:0] tm232;
   wire signed [20:0] tm233;
   wire signed [20:0] tm234;
   wire signed [20:0] tm235;
   wire signed [19:0] Y2;
   wire signed [19:0] Y3;
   wire signed [19:0] Y6;
   wire signed [19:0] Y7;
   wire signed [19:0] t177;
   wire signed [19:0] t178;
   wire signed [19:0] t179;
   wire signed [19:0] t180;
   wire signed [19:0] t181;
   wire signed [19:0] t182;
   wire signed [19:0] t183;
   wire signed [19:0] t184;


   assign a137 = X0;
   assign a138 = X4;
   assign a139 = X1;
   assign a140 = X5;
   assign a145 = X2;
   assign a146 = X6;
   assign a147 = X3;
   assign a148 = X7;
   assign t169 = tm220[20:1];
   assign t170 = tm221[20:1];
   assign t171 = tm222[20:1];
   assign t172 = tm223[20:1];
   assign t173 = tm224[20:1];
   assign t174 = tm225[20:1];
   assign t175 = tm226[20:1];
   assign t176 = tm227[20:1];
   assign Y0 = t177;
   assign Y1 = t178;
   assign Y4 = t179;
   assign Y5 = t180;
   assign Y2 = t181;
   assign Y3 = t182;
   assign Y6 = t183;
   assign Y7 = t184;
   assign t177 = tm228[20:1];
   assign t178 = tm229[20:1];
   assign t179 = tm230[20:1];
   assign t180 = tm231[20:1];
   assign t181 = tm232[20:1];
   assign t182 = tm233[20:1];
   assign t183 = tm234[20:1];
   assign t184 = tm235[20:1];

    addfxp #(21, 1) add21688(.a({{1{a137[19]}}, a137}), .b({{1{a138[19]}}, a138}), .clk(clk), .q(tm220));    // 0
    addfxp #(21, 1) add21703(.a({{1{a139[19]}}, a139}), .b({{1{a140[19]}}, a140}), .clk(clk), .q(tm221));    // 0
    subfxp #(21, 1) sub21718(.a({{1{a137[19]}}, a137}), .b({{1{a138[19]}}, a138}), .clk(clk), .q(tm222));    // 0
    subfxp #(21, 1) sub21733(.a({{1{a139[19]}}, a139}), .b({{1{a140[19]}}, a140}), .clk(clk), .q(tm223));    // 0
    addfxp #(21, 1) add21748(.a({{1{a145[19]}}, a145}), .b({{1{a146[19]}}, a146}), .clk(clk), .q(tm224));    // 0
    addfxp #(21, 1) add21763(.a({{1{a147[19]}}, a147}), .b({{1{a148[19]}}, a148}), .clk(clk), .q(tm225));    // 0
    subfxp #(21, 1) sub21778(.a({{1{a145[19]}}, a145}), .b({{1{a146[19]}}, a146}), .clk(clk), .q(tm226));    // 0
    subfxp #(21, 1) sub21793(.a({{1{a147[19]}}, a147}), .b({{1{a148[19]}}, a148}), .clk(clk), .q(tm227));    // 0
    addfxp #(21, 1) add21800(.a({{1{t169[19]}}, t169}), .b({{1{t173[19]}}, t173}), .clk(clk), .q(tm228));    // 1
    addfxp #(21, 1) add21807(.a({{1{t170[19]}}, t170}), .b({{1{t174[19]}}, t174}), .clk(clk), .q(tm229));    // 1
    subfxp #(21, 1) sub21814(.a({{1{t169[19]}}, t169}), .b({{1{t173[19]}}, t173}), .clk(clk), .q(tm230));    // 1
    subfxp #(21, 1) sub21821(.a({{1{t170[19]}}, t170}), .b({{1{t174[19]}}, t174}), .clk(clk), .q(tm231));    // 1
    addfxp #(21, 1) add21844(.a({{1{t171[19]}}, t171}), .b({{1{t176[19]}}, t176}), .clk(clk), .q(tm232));    // 1
    subfxp #(21, 1) sub21851(.a({{1{t172[19]}}, t172}), .b({{1{t175[19]}}, t175}), .clk(clk), .q(tm233));    // 1
    subfxp #(21, 1) sub21858(.a({{1{t171[19]}}, t171}), .b({{1{t176[19]}}, t176}), .clk(clk), .q(tm234));    // 1
    addfxp #(21, 1) add21865(.a({{1{t172[19]}}, t172}), .b({{1{t175[19]}}, t175}), .clk(clk), .q(tm235));    // 1


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 261
// Gap: 128
module rc21890(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [39:0] t0;
   wire [39:0] s0;
   assign t0 = {X0, X1};
   wire [39:0] t1;
   wire [39:0] s1;
   assign t1 = {X2, X3};
   wire [39:0] t2;
   wire [39:0] s2;
   assign t2 = {X4, X5};
   wire [39:0] t3;
   wire [39:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[39:20];
   assign Y1 = s0[19:0];
   assign Y2 = s1[39:20];
   assign Y3 = s1[19:0];
   assign Y4 = s2[39:20];
   assign Y5 = s2[19:0];
   assign Y6 = s3[39:20];
   assign Y7 = s3[19:0];

   perm21888 instPerm25415(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet21888(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
);

    parameter width = 40;

    input [6:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3;
    reg [width-1:0] t5_0, t5_1, t5_2, t5_3;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        7'd0: control <= 4'b1111;
        7'd1: control <= 4'b1111;
        7'd2: control <= 4'b1111;
        7'd3: control <= 4'b1111;
        7'd4: control <= 4'b1111;
        7'd5: control <= 4'b1111;
        7'd6: control <= 4'b1111;
        7'd7: control <= 4'b1111;
        7'd8: control <= 4'b1111;
        7'd9: control <= 4'b1111;
        7'd10: control <= 4'b1111;
        7'd11: control <= 4'b1111;
        7'd12: control <= 4'b1111;
        7'd13: control <= 4'b1111;
        7'd14: control <= 4'b1111;
        7'd15: control <= 4'b1111;
        7'd16: control <= 4'b1111;
        7'd17: control <= 4'b1111;
        7'd18: control <= 4'b1111;
        7'd19: control <= 4'b1111;
        7'd20: control <= 4'b1111;
        7'd21: control <= 4'b1111;
        7'd22: control <= 4'b1111;
        7'd23: control <= 4'b1111;
        7'd24: control <= 4'b1111;
        7'd25: control <= 4'b1111;
        7'd26: control <= 4'b1111;
        7'd27: control <= 4'b1111;
        7'd28: control <= 4'b1111;
        7'd29: control <= 4'b1111;
        7'd30: control <= 4'b1111;
        7'd31: control <= 4'b1111;
        7'd32: control <= 4'b0011;
        7'd33: control <= 4'b0011;
        7'd34: control <= 4'b0011;
        7'd35: control <= 4'b0011;
        7'd36: control <= 4'b0011;
        7'd37: control <= 4'b0011;
        7'd38: control <= 4'b0011;
        7'd39: control <= 4'b0011;
        7'd40: control <= 4'b0011;
        7'd41: control <= 4'b0011;
        7'd42: control <= 4'b0011;
        7'd43: control <= 4'b0011;
        7'd44: control <= 4'b0011;
        7'd45: control <= 4'b0011;
        7'd46: control <= 4'b0011;
        7'd47: control <= 4'b0011;
        7'd48: control <= 4'b0011;
        7'd49: control <= 4'b0011;
        7'd50: control <= 4'b0011;
        7'd51: control <= 4'b0011;
        7'd52: control <= 4'b0011;
        7'd53: control <= 4'b0011;
        7'd54: control <= 4'b0011;
        7'd55: control <= 4'b0011;
        7'd56: control <= 4'b0011;
        7'd57: control <= 4'b0011;
        7'd58: control <= 4'b0011;
        7'd59: control <= 4'b0011;
        7'd60: control <= 4'b0011;
        7'd61: control <= 4'b0011;
        7'd62: control <= 4'b0011;
        7'd63: control <= 4'b0011;
        7'd64: control <= 4'b1100;
        7'd65: control <= 4'b1100;
        7'd66: control <= 4'b1100;
        7'd67: control <= 4'b1100;
        7'd68: control <= 4'b1100;
        7'd69: control <= 4'b1100;
        7'd70: control <= 4'b1100;
        7'd71: control <= 4'b1100;
        7'd72: control <= 4'b1100;
        7'd73: control <= 4'b1100;
        7'd74: control <= 4'b1100;
        7'd75: control <= 4'b1100;
        7'd76: control <= 4'b1100;
        7'd77: control <= 4'b1100;
        7'd78: control <= 4'b1100;
        7'd79: control <= 4'b1100;
        7'd80: control <= 4'b1100;
        7'd81: control <= 4'b1100;
        7'd82: control <= 4'b1100;
        7'd83: control <= 4'b1100;
        7'd84: control <= 4'b1100;
        7'd85: control <= 4'b1100;
        7'd86: control <= 4'b1100;
        7'd87: control <= 4'b1100;
        7'd88: control <= 4'b1100;
        7'd89: control <= 4'b1100;
        7'd90: control <= 4'b1100;
        7'd91: control <= 4'b1100;
        7'd92: control <= 4'b1100;
        7'd93: control <= 4'b1100;
        7'd94: control <= 4'b1100;
        7'd95: control <= 4'b1100;
        7'd96: control <= 4'b0000;
        7'd97: control <= 4'b0000;
        7'd98: control <= 4'b0000;
        7'd99: control <= 4'b0000;
        7'd100: control <= 4'b0000;
        7'd101: control <= 4'b0000;
        7'd102: control <= 4'b0000;
        7'd103: control <= 4'b0000;
        7'd104: control <= 4'b0000;
        7'd105: control <= 4'b0000;
        7'd106: control <= 4'b0000;
        7'd107: control <= 4'b0000;
        7'd108: control <= 4'b0000;
        7'd109: control <= 4'b0000;
        7'd110: control <= 4'b0000;
        7'd111: control <= 4'b0000;
        7'd112: control <= 4'b0000;
        7'd113: control <= 4'b0000;
        7'd114: control <= 4'b0000;
        7'd115: control <= 4'b0000;
        7'd116: control <= 4'b0000;
        7'd117: control <= 4'b0000;
        7'd118: control <= 4'b0000;
        7'd119: control <= 4'b0000;
        7'd120: control <= 4'b0000;
        7'd121: control <= 4'b0000;
        7'd122: control <= 4'b0000;
        7'd123: control <= 4'b0000;
        7'd124: control <= 4'b0000;
        7'd125: control <= 4'b0000;
        7'd126: control <= 4'b0000;
        7'd127: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
    end
    assign t0_0 = x0;
    assign t0_1 = x2;
    assign t0_2 = x1;
    assign t0_3 = x3;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
    assign t2_0 = t1_0;
    assign t2_1 = t1_2;
    assign t2_2 = t1_1;
    assign t2_3 = t1_3;
   always @(posedge clk) begin
         t3_0 <= (control0[3] == 0) ? t2_0 : t2_1;
         t3_1 <= (control0[3] == 0) ? t2_1 : t2_0;
         t3_2 <= (control0[2] == 0) ? t2_2 : t2_3;
         t3_3 <= (control0[2] == 0) ? t2_3 : t2_2;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_2;
    assign t4_2 = t3_1;
    assign t4_3 = t3_3;
   always @(posedge clk) begin
         t5_0 <= (control1[1] == 0) ? t4_0 : t4_1;
         t5_1 <= (control1[1] == 0) ? t4_1 : t4_0;
         t5_2 <= (control1[0] == 0) ? t4_2 : t4_3;
         t5_3 <= (control1[0] == 0) ? t4_3 : t4_2;
   end
    always @(posedge clk) begin
        y0 <= t5_0;
        y1 <= t5_2;
        y2 <= t5_1;
        y3 <= t5_3;
    end
endmodule

// Latency: 261
// Gap: 128
module perm21888(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter width = 40;

   parameter depth = 128;

   parameter addrbits = 7;

   parameter muxbits = 2;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm28;
   assign tm28 = 0;

shiftRegFIFO #(4, 1) shiftFIFO_25420(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_25421(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);

nextReg #(127, 7) nextReg_25432(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_25433(.X(next2), .Y(next3), .clk(clk));
nextReg #(128, 7) nextReg_25436(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_25437(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(127, 1) shiftFIFO_25440(.X(tm28), .Y(tm28_d), .clk(clk));
shiftRegFIFO #(4, 1) shiftFIFO_25443(.X(tm28_d), .Y(tm28_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(4, 7) shiftFIFO_25448(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(5, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm28_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd0 <= 65;
	     {1'd0,  7'd1}: s1rd0 <= 67;
	     {1'd0,  7'd2}: s1rd0 <= 69;
	     {1'd0,  7'd3}: s1rd0 <= 71;
	     {1'd0,  7'd4}: s1rd0 <= 73;
	     {1'd0,  7'd5}: s1rd0 <= 75;
	     {1'd0,  7'd6}: s1rd0 <= 77;
	     {1'd0,  7'd7}: s1rd0 <= 79;
	     {1'd0,  7'd8}: s1rd0 <= 81;
	     {1'd0,  7'd9}: s1rd0 <= 83;
	     {1'd0,  7'd10}: s1rd0 <= 85;
	     {1'd0,  7'd11}: s1rd0 <= 87;
	     {1'd0,  7'd12}: s1rd0 <= 89;
	     {1'd0,  7'd13}: s1rd0 <= 91;
	     {1'd0,  7'd14}: s1rd0 <= 93;
	     {1'd0,  7'd15}: s1rd0 <= 95;
	     {1'd0,  7'd16}: s1rd0 <= 97;
	     {1'd0,  7'd17}: s1rd0 <= 99;
	     {1'd0,  7'd18}: s1rd0 <= 101;
	     {1'd0,  7'd19}: s1rd0 <= 103;
	     {1'd0,  7'd20}: s1rd0 <= 105;
	     {1'd0,  7'd21}: s1rd0 <= 107;
	     {1'd0,  7'd22}: s1rd0 <= 109;
	     {1'd0,  7'd23}: s1rd0 <= 111;
	     {1'd0,  7'd24}: s1rd0 <= 113;
	     {1'd0,  7'd25}: s1rd0 <= 115;
	     {1'd0,  7'd26}: s1rd0 <= 117;
	     {1'd0,  7'd27}: s1rd0 <= 119;
	     {1'd0,  7'd28}: s1rd0 <= 121;
	     {1'd0,  7'd29}: s1rd0 <= 123;
	     {1'd0,  7'd30}: s1rd0 <= 125;
	     {1'd0,  7'd31}: s1rd0 <= 127;
	     {1'd0,  7'd32}: s1rd0 <= 1;
	     {1'd0,  7'd33}: s1rd0 <= 3;
	     {1'd0,  7'd34}: s1rd0 <= 5;
	     {1'd0,  7'd35}: s1rd0 <= 7;
	     {1'd0,  7'd36}: s1rd0 <= 9;
	     {1'd0,  7'd37}: s1rd0 <= 11;
	     {1'd0,  7'd38}: s1rd0 <= 13;
	     {1'd0,  7'd39}: s1rd0 <= 15;
	     {1'd0,  7'd40}: s1rd0 <= 17;
	     {1'd0,  7'd41}: s1rd0 <= 19;
	     {1'd0,  7'd42}: s1rd0 <= 21;
	     {1'd0,  7'd43}: s1rd0 <= 23;
	     {1'd0,  7'd44}: s1rd0 <= 25;
	     {1'd0,  7'd45}: s1rd0 <= 27;
	     {1'd0,  7'd46}: s1rd0 <= 29;
	     {1'd0,  7'd47}: s1rd0 <= 31;
	     {1'd0,  7'd48}: s1rd0 <= 33;
	     {1'd0,  7'd49}: s1rd0 <= 35;
	     {1'd0,  7'd50}: s1rd0 <= 37;
	     {1'd0,  7'd51}: s1rd0 <= 39;
	     {1'd0,  7'd52}: s1rd0 <= 41;
	     {1'd0,  7'd53}: s1rd0 <= 43;
	     {1'd0,  7'd54}: s1rd0 <= 45;
	     {1'd0,  7'd55}: s1rd0 <= 47;
	     {1'd0,  7'd56}: s1rd0 <= 49;
	     {1'd0,  7'd57}: s1rd0 <= 51;
	     {1'd0,  7'd58}: s1rd0 <= 53;
	     {1'd0,  7'd59}: s1rd0 <= 55;
	     {1'd0,  7'd60}: s1rd0 <= 57;
	     {1'd0,  7'd61}: s1rd0 <= 59;
	     {1'd0,  7'd62}: s1rd0 <= 61;
	     {1'd0,  7'd63}: s1rd0 <= 63;
	     {1'd0,  7'd64}: s1rd0 <= 64;
	     {1'd0,  7'd65}: s1rd0 <= 66;
	     {1'd0,  7'd66}: s1rd0 <= 68;
	     {1'd0,  7'd67}: s1rd0 <= 70;
	     {1'd0,  7'd68}: s1rd0 <= 72;
	     {1'd0,  7'd69}: s1rd0 <= 74;
	     {1'd0,  7'd70}: s1rd0 <= 76;
	     {1'd0,  7'd71}: s1rd0 <= 78;
	     {1'd0,  7'd72}: s1rd0 <= 80;
	     {1'd0,  7'd73}: s1rd0 <= 82;
	     {1'd0,  7'd74}: s1rd0 <= 84;
	     {1'd0,  7'd75}: s1rd0 <= 86;
	     {1'd0,  7'd76}: s1rd0 <= 88;
	     {1'd0,  7'd77}: s1rd0 <= 90;
	     {1'd0,  7'd78}: s1rd0 <= 92;
	     {1'd0,  7'd79}: s1rd0 <= 94;
	     {1'd0,  7'd80}: s1rd0 <= 96;
	     {1'd0,  7'd81}: s1rd0 <= 98;
	     {1'd0,  7'd82}: s1rd0 <= 100;
	     {1'd0,  7'd83}: s1rd0 <= 102;
	     {1'd0,  7'd84}: s1rd0 <= 104;
	     {1'd0,  7'd85}: s1rd0 <= 106;
	     {1'd0,  7'd86}: s1rd0 <= 108;
	     {1'd0,  7'd87}: s1rd0 <= 110;
	     {1'd0,  7'd88}: s1rd0 <= 112;
	     {1'd0,  7'd89}: s1rd0 <= 114;
	     {1'd0,  7'd90}: s1rd0 <= 116;
	     {1'd0,  7'd91}: s1rd0 <= 118;
	     {1'd0,  7'd92}: s1rd0 <= 120;
	     {1'd0,  7'd93}: s1rd0 <= 122;
	     {1'd0,  7'd94}: s1rd0 <= 124;
	     {1'd0,  7'd95}: s1rd0 <= 126;
	     {1'd0,  7'd96}: s1rd0 <= 0;
	     {1'd0,  7'd97}: s1rd0 <= 2;
	     {1'd0,  7'd98}: s1rd0 <= 4;
	     {1'd0,  7'd99}: s1rd0 <= 6;
	     {1'd0,  7'd100}: s1rd0 <= 8;
	     {1'd0,  7'd101}: s1rd0 <= 10;
	     {1'd0,  7'd102}: s1rd0 <= 12;
	     {1'd0,  7'd103}: s1rd0 <= 14;
	     {1'd0,  7'd104}: s1rd0 <= 16;
	     {1'd0,  7'd105}: s1rd0 <= 18;
	     {1'd0,  7'd106}: s1rd0 <= 20;
	     {1'd0,  7'd107}: s1rd0 <= 22;
	     {1'd0,  7'd108}: s1rd0 <= 24;
	     {1'd0,  7'd109}: s1rd0 <= 26;
	     {1'd0,  7'd110}: s1rd0 <= 28;
	     {1'd0,  7'd111}: s1rd0 <= 30;
	     {1'd0,  7'd112}: s1rd0 <= 32;
	     {1'd0,  7'd113}: s1rd0 <= 34;
	     {1'd0,  7'd114}: s1rd0 <= 36;
	     {1'd0,  7'd115}: s1rd0 <= 38;
	     {1'd0,  7'd116}: s1rd0 <= 40;
	     {1'd0,  7'd117}: s1rd0 <= 42;
	     {1'd0,  7'd118}: s1rd0 <= 44;
	     {1'd0,  7'd119}: s1rd0 <= 46;
	     {1'd0,  7'd120}: s1rd0 <= 48;
	     {1'd0,  7'd121}: s1rd0 <= 50;
	     {1'd0,  7'd122}: s1rd0 <= 52;
	     {1'd0,  7'd123}: s1rd0 <= 54;
	     {1'd0,  7'd124}: s1rd0 <= 56;
	     {1'd0,  7'd125}: s1rd0 <= 58;
	     {1'd0,  7'd126}: s1rd0 <= 60;
	     {1'd0,  7'd127}: s1rd0 <= 62;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "distributed"
   always @(posedge clk) begin
      case({tm28_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd1 <= 1;
	     {1'd0,  7'd1}: s1rd1 <= 3;
	     {1'd0,  7'd2}: s1rd1 <= 5;
	     {1'd0,  7'd3}: s1rd1 <= 7;
	     {1'd0,  7'd4}: s1rd1 <= 9;
	     {1'd0,  7'd5}: s1rd1 <= 11;
	     {1'd0,  7'd6}: s1rd1 <= 13;
	     {1'd0,  7'd7}: s1rd1 <= 15;
	     {1'd0,  7'd8}: s1rd1 <= 17;
	     {1'd0,  7'd9}: s1rd1 <= 19;
	     {1'd0,  7'd10}: s1rd1 <= 21;
	     {1'd0,  7'd11}: s1rd1 <= 23;
	     {1'd0,  7'd12}: s1rd1 <= 25;
	     {1'd0,  7'd13}: s1rd1 <= 27;
	     {1'd0,  7'd14}: s1rd1 <= 29;
	     {1'd0,  7'd15}: s1rd1 <= 31;
	     {1'd0,  7'd16}: s1rd1 <= 33;
	     {1'd0,  7'd17}: s1rd1 <= 35;
	     {1'd0,  7'd18}: s1rd1 <= 37;
	     {1'd0,  7'd19}: s1rd1 <= 39;
	     {1'd0,  7'd20}: s1rd1 <= 41;
	     {1'd0,  7'd21}: s1rd1 <= 43;
	     {1'd0,  7'd22}: s1rd1 <= 45;
	     {1'd0,  7'd23}: s1rd1 <= 47;
	     {1'd0,  7'd24}: s1rd1 <= 49;
	     {1'd0,  7'd25}: s1rd1 <= 51;
	     {1'd0,  7'd26}: s1rd1 <= 53;
	     {1'd0,  7'd27}: s1rd1 <= 55;
	     {1'd0,  7'd28}: s1rd1 <= 57;
	     {1'd0,  7'd29}: s1rd1 <= 59;
	     {1'd0,  7'd30}: s1rd1 <= 61;
	     {1'd0,  7'd31}: s1rd1 <= 63;
	     {1'd0,  7'd32}: s1rd1 <= 65;
	     {1'd0,  7'd33}: s1rd1 <= 67;
	     {1'd0,  7'd34}: s1rd1 <= 69;
	     {1'd0,  7'd35}: s1rd1 <= 71;
	     {1'd0,  7'd36}: s1rd1 <= 73;
	     {1'd0,  7'd37}: s1rd1 <= 75;
	     {1'd0,  7'd38}: s1rd1 <= 77;
	     {1'd0,  7'd39}: s1rd1 <= 79;
	     {1'd0,  7'd40}: s1rd1 <= 81;
	     {1'd0,  7'd41}: s1rd1 <= 83;
	     {1'd0,  7'd42}: s1rd1 <= 85;
	     {1'd0,  7'd43}: s1rd1 <= 87;
	     {1'd0,  7'd44}: s1rd1 <= 89;
	     {1'd0,  7'd45}: s1rd1 <= 91;
	     {1'd0,  7'd46}: s1rd1 <= 93;
	     {1'd0,  7'd47}: s1rd1 <= 95;
	     {1'd0,  7'd48}: s1rd1 <= 97;
	     {1'd0,  7'd49}: s1rd1 <= 99;
	     {1'd0,  7'd50}: s1rd1 <= 101;
	     {1'd0,  7'd51}: s1rd1 <= 103;
	     {1'd0,  7'd52}: s1rd1 <= 105;
	     {1'd0,  7'd53}: s1rd1 <= 107;
	     {1'd0,  7'd54}: s1rd1 <= 109;
	     {1'd0,  7'd55}: s1rd1 <= 111;
	     {1'd0,  7'd56}: s1rd1 <= 113;
	     {1'd0,  7'd57}: s1rd1 <= 115;
	     {1'd0,  7'd58}: s1rd1 <= 117;
	     {1'd0,  7'd59}: s1rd1 <= 119;
	     {1'd0,  7'd60}: s1rd1 <= 121;
	     {1'd0,  7'd61}: s1rd1 <= 123;
	     {1'd0,  7'd62}: s1rd1 <= 125;
	     {1'd0,  7'd63}: s1rd1 <= 127;
	     {1'd0,  7'd64}: s1rd1 <= 0;
	     {1'd0,  7'd65}: s1rd1 <= 2;
	     {1'd0,  7'd66}: s1rd1 <= 4;
	     {1'd0,  7'd67}: s1rd1 <= 6;
	     {1'd0,  7'd68}: s1rd1 <= 8;
	     {1'd0,  7'd69}: s1rd1 <= 10;
	     {1'd0,  7'd70}: s1rd1 <= 12;
	     {1'd0,  7'd71}: s1rd1 <= 14;
	     {1'd0,  7'd72}: s1rd1 <= 16;
	     {1'd0,  7'd73}: s1rd1 <= 18;
	     {1'd0,  7'd74}: s1rd1 <= 20;
	     {1'd0,  7'd75}: s1rd1 <= 22;
	     {1'd0,  7'd76}: s1rd1 <= 24;
	     {1'd0,  7'd77}: s1rd1 <= 26;
	     {1'd0,  7'd78}: s1rd1 <= 28;
	     {1'd0,  7'd79}: s1rd1 <= 30;
	     {1'd0,  7'd80}: s1rd1 <= 32;
	     {1'd0,  7'd81}: s1rd1 <= 34;
	     {1'd0,  7'd82}: s1rd1 <= 36;
	     {1'd0,  7'd83}: s1rd1 <= 38;
	     {1'd0,  7'd84}: s1rd1 <= 40;
	     {1'd0,  7'd85}: s1rd1 <= 42;
	     {1'd0,  7'd86}: s1rd1 <= 44;
	     {1'd0,  7'd87}: s1rd1 <= 46;
	     {1'd0,  7'd88}: s1rd1 <= 48;
	     {1'd0,  7'd89}: s1rd1 <= 50;
	     {1'd0,  7'd90}: s1rd1 <= 52;
	     {1'd0,  7'd91}: s1rd1 <= 54;
	     {1'd0,  7'd92}: s1rd1 <= 56;
	     {1'd0,  7'd93}: s1rd1 <= 58;
	     {1'd0,  7'd94}: s1rd1 <= 60;
	     {1'd0,  7'd95}: s1rd1 <= 62;
	     {1'd0,  7'd96}: s1rd1 <= 64;
	     {1'd0,  7'd97}: s1rd1 <= 66;
	     {1'd0,  7'd98}: s1rd1 <= 68;
	     {1'd0,  7'd99}: s1rd1 <= 70;
	     {1'd0,  7'd100}: s1rd1 <= 72;
	     {1'd0,  7'd101}: s1rd1 <= 74;
	     {1'd0,  7'd102}: s1rd1 <= 76;
	     {1'd0,  7'd103}: s1rd1 <= 78;
	     {1'd0,  7'd104}: s1rd1 <= 80;
	     {1'd0,  7'd105}: s1rd1 <= 82;
	     {1'd0,  7'd106}: s1rd1 <= 84;
	     {1'd0,  7'd107}: s1rd1 <= 86;
	     {1'd0,  7'd108}: s1rd1 <= 88;
	     {1'd0,  7'd109}: s1rd1 <= 90;
	     {1'd0,  7'd110}: s1rd1 <= 92;
	     {1'd0,  7'd111}: s1rd1 <= 94;
	     {1'd0,  7'd112}: s1rd1 <= 96;
	     {1'd0,  7'd113}: s1rd1 <= 98;
	     {1'd0,  7'd114}: s1rd1 <= 100;
	     {1'd0,  7'd115}: s1rd1 <= 102;
	     {1'd0,  7'd116}: s1rd1 <= 104;
	     {1'd0,  7'd117}: s1rd1 <= 106;
	     {1'd0,  7'd118}: s1rd1 <= 108;
	     {1'd0,  7'd119}: s1rd1 <= 110;
	     {1'd0,  7'd120}: s1rd1 <= 112;
	     {1'd0,  7'd121}: s1rd1 <= 114;
	     {1'd0,  7'd122}: s1rd1 <= 116;
	     {1'd0,  7'd123}: s1rd1 <= 118;
	     {1'd0,  7'd124}: s1rd1 <= 120;
	     {1'd0,  7'd125}: s1rd1 <= 122;
	     {1'd0,  7'd126}: s1rd1 <= 124;
	     {1'd0,  7'd127}: s1rd1 <= 126;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "distributed"
   always @(posedge clk) begin
      case({tm28_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd2 <= 64;
	     {1'd0,  7'd1}: s1rd2 <= 66;
	     {1'd0,  7'd2}: s1rd2 <= 68;
	     {1'd0,  7'd3}: s1rd2 <= 70;
	     {1'd0,  7'd4}: s1rd2 <= 72;
	     {1'd0,  7'd5}: s1rd2 <= 74;
	     {1'd0,  7'd6}: s1rd2 <= 76;
	     {1'd0,  7'd7}: s1rd2 <= 78;
	     {1'd0,  7'd8}: s1rd2 <= 80;
	     {1'd0,  7'd9}: s1rd2 <= 82;
	     {1'd0,  7'd10}: s1rd2 <= 84;
	     {1'd0,  7'd11}: s1rd2 <= 86;
	     {1'd0,  7'd12}: s1rd2 <= 88;
	     {1'd0,  7'd13}: s1rd2 <= 90;
	     {1'd0,  7'd14}: s1rd2 <= 92;
	     {1'd0,  7'd15}: s1rd2 <= 94;
	     {1'd0,  7'd16}: s1rd2 <= 96;
	     {1'd0,  7'd17}: s1rd2 <= 98;
	     {1'd0,  7'd18}: s1rd2 <= 100;
	     {1'd0,  7'd19}: s1rd2 <= 102;
	     {1'd0,  7'd20}: s1rd2 <= 104;
	     {1'd0,  7'd21}: s1rd2 <= 106;
	     {1'd0,  7'd22}: s1rd2 <= 108;
	     {1'd0,  7'd23}: s1rd2 <= 110;
	     {1'd0,  7'd24}: s1rd2 <= 112;
	     {1'd0,  7'd25}: s1rd2 <= 114;
	     {1'd0,  7'd26}: s1rd2 <= 116;
	     {1'd0,  7'd27}: s1rd2 <= 118;
	     {1'd0,  7'd28}: s1rd2 <= 120;
	     {1'd0,  7'd29}: s1rd2 <= 122;
	     {1'd0,  7'd30}: s1rd2 <= 124;
	     {1'd0,  7'd31}: s1rd2 <= 126;
	     {1'd0,  7'd32}: s1rd2 <= 0;
	     {1'd0,  7'd33}: s1rd2 <= 2;
	     {1'd0,  7'd34}: s1rd2 <= 4;
	     {1'd0,  7'd35}: s1rd2 <= 6;
	     {1'd0,  7'd36}: s1rd2 <= 8;
	     {1'd0,  7'd37}: s1rd2 <= 10;
	     {1'd0,  7'd38}: s1rd2 <= 12;
	     {1'd0,  7'd39}: s1rd2 <= 14;
	     {1'd0,  7'd40}: s1rd2 <= 16;
	     {1'd0,  7'd41}: s1rd2 <= 18;
	     {1'd0,  7'd42}: s1rd2 <= 20;
	     {1'd0,  7'd43}: s1rd2 <= 22;
	     {1'd0,  7'd44}: s1rd2 <= 24;
	     {1'd0,  7'd45}: s1rd2 <= 26;
	     {1'd0,  7'd46}: s1rd2 <= 28;
	     {1'd0,  7'd47}: s1rd2 <= 30;
	     {1'd0,  7'd48}: s1rd2 <= 32;
	     {1'd0,  7'd49}: s1rd2 <= 34;
	     {1'd0,  7'd50}: s1rd2 <= 36;
	     {1'd0,  7'd51}: s1rd2 <= 38;
	     {1'd0,  7'd52}: s1rd2 <= 40;
	     {1'd0,  7'd53}: s1rd2 <= 42;
	     {1'd0,  7'd54}: s1rd2 <= 44;
	     {1'd0,  7'd55}: s1rd2 <= 46;
	     {1'd0,  7'd56}: s1rd2 <= 48;
	     {1'd0,  7'd57}: s1rd2 <= 50;
	     {1'd0,  7'd58}: s1rd2 <= 52;
	     {1'd0,  7'd59}: s1rd2 <= 54;
	     {1'd0,  7'd60}: s1rd2 <= 56;
	     {1'd0,  7'd61}: s1rd2 <= 58;
	     {1'd0,  7'd62}: s1rd2 <= 60;
	     {1'd0,  7'd63}: s1rd2 <= 62;
	     {1'd0,  7'd64}: s1rd2 <= 65;
	     {1'd0,  7'd65}: s1rd2 <= 67;
	     {1'd0,  7'd66}: s1rd2 <= 69;
	     {1'd0,  7'd67}: s1rd2 <= 71;
	     {1'd0,  7'd68}: s1rd2 <= 73;
	     {1'd0,  7'd69}: s1rd2 <= 75;
	     {1'd0,  7'd70}: s1rd2 <= 77;
	     {1'd0,  7'd71}: s1rd2 <= 79;
	     {1'd0,  7'd72}: s1rd2 <= 81;
	     {1'd0,  7'd73}: s1rd2 <= 83;
	     {1'd0,  7'd74}: s1rd2 <= 85;
	     {1'd0,  7'd75}: s1rd2 <= 87;
	     {1'd0,  7'd76}: s1rd2 <= 89;
	     {1'd0,  7'd77}: s1rd2 <= 91;
	     {1'd0,  7'd78}: s1rd2 <= 93;
	     {1'd0,  7'd79}: s1rd2 <= 95;
	     {1'd0,  7'd80}: s1rd2 <= 97;
	     {1'd0,  7'd81}: s1rd2 <= 99;
	     {1'd0,  7'd82}: s1rd2 <= 101;
	     {1'd0,  7'd83}: s1rd2 <= 103;
	     {1'd0,  7'd84}: s1rd2 <= 105;
	     {1'd0,  7'd85}: s1rd2 <= 107;
	     {1'd0,  7'd86}: s1rd2 <= 109;
	     {1'd0,  7'd87}: s1rd2 <= 111;
	     {1'd0,  7'd88}: s1rd2 <= 113;
	     {1'd0,  7'd89}: s1rd2 <= 115;
	     {1'd0,  7'd90}: s1rd2 <= 117;
	     {1'd0,  7'd91}: s1rd2 <= 119;
	     {1'd0,  7'd92}: s1rd2 <= 121;
	     {1'd0,  7'd93}: s1rd2 <= 123;
	     {1'd0,  7'd94}: s1rd2 <= 125;
	     {1'd0,  7'd95}: s1rd2 <= 127;
	     {1'd0,  7'd96}: s1rd2 <= 1;
	     {1'd0,  7'd97}: s1rd2 <= 3;
	     {1'd0,  7'd98}: s1rd2 <= 5;
	     {1'd0,  7'd99}: s1rd2 <= 7;
	     {1'd0,  7'd100}: s1rd2 <= 9;
	     {1'd0,  7'd101}: s1rd2 <= 11;
	     {1'd0,  7'd102}: s1rd2 <= 13;
	     {1'd0,  7'd103}: s1rd2 <= 15;
	     {1'd0,  7'd104}: s1rd2 <= 17;
	     {1'd0,  7'd105}: s1rd2 <= 19;
	     {1'd0,  7'd106}: s1rd2 <= 21;
	     {1'd0,  7'd107}: s1rd2 <= 23;
	     {1'd0,  7'd108}: s1rd2 <= 25;
	     {1'd0,  7'd109}: s1rd2 <= 27;
	     {1'd0,  7'd110}: s1rd2 <= 29;
	     {1'd0,  7'd111}: s1rd2 <= 31;
	     {1'd0,  7'd112}: s1rd2 <= 33;
	     {1'd0,  7'd113}: s1rd2 <= 35;
	     {1'd0,  7'd114}: s1rd2 <= 37;
	     {1'd0,  7'd115}: s1rd2 <= 39;
	     {1'd0,  7'd116}: s1rd2 <= 41;
	     {1'd0,  7'd117}: s1rd2 <= 43;
	     {1'd0,  7'd118}: s1rd2 <= 45;
	     {1'd0,  7'd119}: s1rd2 <= 47;
	     {1'd0,  7'd120}: s1rd2 <= 49;
	     {1'd0,  7'd121}: s1rd2 <= 51;
	     {1'd0,  7'd122}: s1rd2 <= 53;
	     {1'd0,  7'd123}: s1rd2 <= 55;
	     {1'd0,  7'd124}: s1rd2 <= 57;
	     {1'd0,  7'd125}: s1rd2 <= 59;
	     {1'd0,  7'd126}: s1rd2 <= 61;
	     {1'd0,  7'd127}: s1rd2 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "distributed"
   always @(posedge clk) begin
      case({tm28_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd3 <= 0;
	     {1'd0,  7'd1}: s1rd3 <= 2;
	     {1'd0,  7'd2}: s1rd3 <= 4;
	     {1'd0,  7'd3}: s1rd3 <= 6;
	     {1'd0,  7'd4}: s1rd3 <= 8;
	     {1'd0,  7'd5}: s1rd3 <= 10;
	     {1'd0,  7'd6}: s1rd3 <= 12;
	     {1'd0,  7'd7}: s1rd3 <= 14;
	     {1'd0,  7'd8}: s1rd3 <= 16;
	     {1'd0,  7'd9}: s1rd3 <= 18;
	     {1'd0,  7'd10}: s1rd3 <= 20;
	     {1'd0,  7'd11}: s1rd3 <= 22;
	     {1'd0,  7'd12}: s1rd3 <= 24;
	     {1'd0,  7'd13}: s1rd3 <= 26;
	     {1'd0,  7'd14}: s1rd3 <= 28;
	     {1'd0,  7'd15}: s1rd3 <= 30;
	     {1'd0,  7'd16}: s1rd3 <= 32;
	     {1'd0,  7'd17}: s1rd3 <= 34;
	     {1'd0,  7'd18}: s1rd3 <= 36;
	     {1'd0,  7'd19}: s1rd3 <= 38;
	     {1'd0,  7'd20}: s1rd3 <= 40;
	     {1'd0,  7'd21}: s1rd3 <= 42;
	     {1'd0,  7'd22}: s1rd3 <= 44;
	     {1'd0,  7'd23}: s1rd3 <= 46;
	     {1'd0,  7'd24}: s1rd3 <= 48;
	     {1'd0,  7'd25}: s1rd3 <= 50;
	     {1'd0,  7'd26}: s1rd3 <= 52;
	     {1'd0,  7'd27}: s1rd3 <= 54;
	     {1'd0,  7'd28}: s1rd3 <= 56;
	     {1'd0,  7'd29}: s1rd3 <= 58;
	     {1'd0,  7'd30}: s1rd3 <= 60;
	     {1'd0,  7'd31}: s1rd3 <= 62;
	     {1'd0,  7'd32}: s1rd3 <= 64;
	     {1'd0,  7'd33}: s1rd3 <= 66;
	     {1'd0,  7'd34}: s1rd3 <= 68;
	     {1'd0,  7'd35}: s1rd3 <= 70;
	     {1'd0,  7'd36}: s1rd3 <= 72;
	     {1'd0,  7'd37}: s1rd3 <= 74;
	     {1'd0,  7'd38}: s1rd3 <= 76;
	     {1'd0,  7'd39}: s1rd3 <= 78;
	     {1'd0,  7'd40}: s1rd3 <= 80;
	     {1'd0,  7'd41}: s1rd3 <= 82;
	     {1'd0,  7'd42}: s1rd3 <= 84;
	     {1'd0,  7'd43}: s1rd3 <= 86;
	     {1'd0,  7'd44}: s1rd3 <= 88;
	     {1'd0,  7'd45}: s1rd3 <= 90;
	     {1'd0,  7'd46}: s1rd3 <= 92;
	     {1'd0,  7'd47}: s1rd3 <= 94;
	     {1'd0,  7'd48}: s1rd3 <= 96;
	     {1'd0,  7'd49}: s1rd3 <= 98;
	     {1'd0,  7'd50}: s1rd3 <= 100;
	     {1'd0,  7'd51}: s1rd3 <= 102;
	     {1'd0,  7'd52}: s1rd3 <= 104;
	     {1'd0,  7'd53}: s1rd3 <= 106;
	     {1'd0,  7'd54}: s1rd3 <= 108;
	     {1'd0,  7'd55}: s1rd3 <= 110;
	     {1'd0,  7'd56}: s1rd3 <= 112;
	     {1'd0,  7'd57}: s1rd3 <= 114;
	     {1'd0,  7'd58}: s1rd3 <= 116;
	     {1'd0,  7'd59}: s1rd3 <= 118;
	     {1'd0,  7'd60}: s1rd3 <= 120;
	     {1'd0,  7'd61}: s1rd3 <= 122;
	     {1'd0,  7'd62}: s1rd3 <= 124;
	     {1'd0,  7'd63}: s1rd3 <= 126;
	     {1'd0,  7'd64}: s1rd3 <= 1;
	     {1'd0,  7'd65}: s1rd3 <= 3;
	     {1'd0,  7'd66}: s1rd3 <= 5;
	     {1'd0,  7'd67}: s1rd3 <= 7;
	     {1'd0,  7'd68}: s1rd3 <= 9;
	     {1'd0,  7'd69}: s1rd3 <= 11;
	     {1'd0,  7'd70}: s1rd3 <= 13;
	     {1'd0,  7'd71}: s1rd3 <= 15;
	     {1'd0,  7'd72}: s1rd3 <= 17;
	     {1'd0,  7'd73}: s1rd3 <= 19;
	     {1'd0,  7'd74}: s1rd3 <= 21;
	     {1'd0,  7'd75}: s1rd3 <= 23;
	     {1'd0,  7'd76}: s1rd3 <= 25;
	     {1'd0,  7'd77}: s1rd3 <= 27;
	     {1'd0,  7'd78}: s1rd3 <= 29;
	     {1'd0,  7'd79}: s1rd3 <= 31;
	     {1'd0,  7'd80}: s1rd3 <= 33;
	     {1'd0,  7'd81}: s1rd3 <= 35;
	     {1'd0,  7'd82}: s1rd3 <= 37;
	     {1'd0,  7'd83}: s1rd3 <= 39;
	     {1'd0,  7'd84}: s1rd3 <= 41;
	     {1'd0,  7'd85}: s1rd3 <= 43;
	     {1'd0,  7'd86}: s1rd3 <= 45;
	     {1'd0,  7'd87}: s1rd3 <= 47;
	     {1'd0,  7'd88}: s1rd3 <= 49;
	     {1'd0,  7'd89}: s1rd3 <= 51;
	     {1'd0,  7'd90}: s1rd3 <= 53;
	     {1'd0,  7'd91}: s1rd3 <= 55;
	     {1'd0,  7'd92}: s1rd3 <= 57;
	     {1'd0,  7'd93}: s1rd3 <= 59;
	     {1'd0,  7'd94}: s1rd3 <= 61;
	     {1'd0,  7'd95}: s1rd3 <= 63;
	     {1'd0,  7'd96}: s1rd3 <= 65;
	     {1'd0,  7'd97}: s1rd3 <= 67;
	     {1'd0,  7'd98}: s1rd3 <= 69;
	     {1'd0,  7'd99}: s1rd3 <= 71;
	     {1'd0,  7'd100}: s1rd3 <= 73;
	     {1'd0,  7'd101}: s1rd3 <= 75;
	     {1'd0,  7'd102}: s1rd3 <= 77;
	     {1'd0,  7'd103}: s1rd3 <= 79;
	     {1'd0,  7'd104}: s1rd3 <= 81;
	     {1'd0,  7'd105}: s1rd3 <= 83;
	     {1'd0,  7'd106}: s1rd3 <= 85;
	     {1'd0,  7'd107}: s1rd3 <= 87;
	     {1'd0,  7'd108}: s1rd3 <= 89;
	     {1'd0,  7'd109}: s1rd3 <= 91;
	     {1'd0,  7'd110}: s1rd3 <= 93;
	     {1'd0,  7'd111}: s1rd3 <= 95;
	     {1'd0,  7'd112}: s1rd3 <= 97;
	     {1'd0,  7'd113}: s1rd3 <= 99;
	     {1'd0,  7'd114}: s1rd3 <= 101;
	     {1'd0,  7'd115}: s1rd3 <= 103;
	     {1'd0,  7'd116}: s1rd3 <= 105;
	     {1'd0,  7'd117}: s1rd3 <= 107;
	     {1'd0,  7'd118}: s1rd3 <= 109;
	     {1'd0,  7'd119}: s1rd3 <= 111;
	     {1'd0,  7'd120}: s1rd3 <= 113;
	     {1'd0,  7'd121}: s1rd3 <= 115;
	     {1'd0,  7'd122}: s1rd3 <= 117;
	     {1'd0,  7'd123}: s1rd3 <= 119;
	     {1'd0,  7'd124}: s1rd3 <= 121;
	     {1'd0,  7'd125}: s1rd3 <= 123;
	     {1'd0,  7'd126}: s1rd3 <= 125;
	     {1'd0,  7'd127}: s1rd3 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "distributed"
    swNet21888 sw(tm28_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3);

   always @(posedge clk) begin
      case({tm28_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr0 <= 96;
	      {1'd0, 7'd1}: s2wr0 <= 97;
	      {1'd0, 7'd2}: s2wr0 <= 98;
	      {1'd0, 7'd3}: s2wr0 <= 99;
	      {1'd0, 7'd4}: s2wr0 <= 100;
	      {1'd0, 7'd5}: s2wr0 <= 101;
	      {1'd0, 7'd6}: s2wr0 <= 102;
	      {1'd0, 7'd7}: s2wr0 <= 103;
	      {1'd0, 7'd8}: s2wr0 <= 104;
	      {1'd0, 7'd9}: s2wr0 <= 105;
	      {1'd0, 7'd10}: s2wr0 <= 106;
	      {1'd0, 7'd11}: s2wr0 <= 107;
	      {1'd0, 7'd12}: s2wr0 <= 108;
	      {1'd0, 7'd13}: s2wr0 <= 109;
	      {1'd0, 7'd14}: s2wr0 <= 110;
	      {1'd0, 7'd15}: s2wr0 <= 111;
	      {1'd0, 7'd16}: s2wr0 <= 112;
	      {1'd0, 7'd17}: s2wr0 <= 113;
	      {1'd0, 7'd18}: s2wr0 <= 114;
	      {1'd0, 7'd19}: s2wr0 <= 115;
	      {1'd0, 7'd20}: s2wr0 <= 116;
	      {1'd0, 7'd21}: s2wr0 <= 117;
	      {1'd0, 7'd22}: s2wr0 <= 118;
	      {1'd0, 7'd23}: s2wr0 <= 119;
	      {1'd0, 7'd24}: s2wr0 <= 120;
	      {1'd0, 7'd25}: s2wr0 <= 121;
	      {1'd0, 7'd26}: s2wr0 <= 122;
	      {1'd0, 7'd27}: s2wr0 <= 123;
	      {1'd0, 7'd28}: s2wr0 <= 124;
	      {1'd0, 7'd29}: s2wr0 <= 125;
	      {1'd0, 7'd30}: s2wr0 <= 126;
	      {1'd0, 7'd31}: s2wr0 <= 127;
	      {1'd0, 7'd32}: s2wr0 <= 64;
	      {1'd0, 7'd33}: s2wr0 <= 65;
	      {1'd0, 7'd34}: s2wr0 <= 66;
	      {1'd0, 7'd35}: s2wr0 <= 67;
	      {1'd0, 7'd36}: s2wr0 <= 68;
	      {1'd0, 7'd37}: s2wr0 <= 69;
	      {1'd0, 7'd38}: s2wr0 <= 70;
	      {1'd0, 7'd39}: s2wr0 <= 71;
	      {1'd0, 7'd40}: s2wr0 <= 72;
	      {1'd0, 7'd41}: s2wr0 <= 73;
	      {1'd0, 7'd42}: s2wr0 <= 74;
	      {1'd0, 7'd43}: s2wr0 <= 75;
	      {1'd0, 7'd44}: s2wr0 <= 76;
	      {1'd0, 7'd45}: s2wr0 <= 77;
	      {1'd0, 7'd46}: s2wr0 <= 78;
	      {1'd0, 7'd47}: s2wr0 <= 79;
	      {1'd0, 7'd48}: s2wr0 <= 80;
	      {1'd0, 7'd49}: s2wr0 <= 81;
	      {1'd0, 7'd50}: s2wr0 <= 82;
	      {1'd0, 7'd51}: s2wr0 <= 83;
	      {1'd0, 7'd52}: s2wr0 <= 84;
	      {1'd0, 7'd53}: s2wr0 <= 85;
	      {1'd0, 7'd54}: s2wr0 <= 86;
	      {1'd0, 7'd55}: s2wr0 <= 87;
	      {1'd0, 7'd56}: s2wr0 <= 88;
	      {1'd0, 7'd57}: s2wr0 <= 89;
	      {1'd0, 7'd58}: s2wr0 <= 90;
	      {1'd0, 7'd59}: s2wr0 <= 91;
	      {1'd0, 7'd60}: s2wr0 <= 92;
	      {1'd0, 7'd61}: s2wr0 <= 93;
	      {1'd0, 7'd62}: s2wr0 <= 94;
	      {1'd0, 7'd63}: s2wr0 <= 95;
	      {1'd0, 7'd64}: s2wr0 <= 32;
	      {1'd0, 7'd65}: s2wr0 <= 33;
	      {1'd0, 7'd66}: s2wr0 <= 34;
	      {1'd0, 7'd67}: s2wr0 <= 35;
	      {1'd0, 7'd68}: s2wr0 <= 36;
	      {1'd0, 7'd69}: s2wr0 <= 37;
	      {1'd0, 7'd70}: s2wr0 <= 38;
	      {1'd0, 7'd71}: s2wr0 <= 39;
	      {1'd0, 7'd72}: s2wr0 <= 40;
	      {1'd0, 7'd73}: s2wr0 <= 41;
	      {1'd0, 7'd74}: s2wr0 <= 42;
	      {1'd0, 7'd75}: s2wr0 <= 43;
	      {1'd0, 7'd76}: s2wr0 <= 44;
	      {1'd0, 7'd77}: s2wr0 <= 45;
	      {1'd0, 7'd78}: s2wr0 <= 46;
	      {1'd0, 7'd79}: s2wr0 <= 47;
	      {1'd0, 7'd80}: s2wr0 <= 48;
	      {1'd0, 7'd81}: s2wr0 <= 49;
	      {1'd0, 7'd82}: s2wr0 <= 50;
	      {1'd0, 7'd83}: s2wr0 <= 51;
	      {1'd0, 7'd84}: s2wr0 <= 52;
	      {1'd0, 7'd85}: s2wr0 <= 53;
	      {1'd0, 7'd86}: s2wr0 <= 54;
	      {1'd0, 7'd87}: s2wr0 <= 55;
	      {1'd0, 7'd88}: s2wr0 <= 56;
	      {1'd0, 7'd89}: s2wr0 <= 57;
	      {1'd0, 7'd90}: s2wr0 <= 58;
	      {1'd0, 7'd91}: s2wr0 <= 59;
	      {1'd0, 7'd92}: s2wr0 <= 60;
	      {1'd0, 7'd93}: s2wr0 <= 61;
	      {1'd0, 7'd94}: s2wr0 <= 62;
	      {1'd0, 7'd95}: s2wr0 <= 63;
	      {1'd0, 7'd96}: s2wr0 <= 0;
	      {1'd0, 7'd97}: s2wr0 <= 1;
	      {1'd0, 7'd98}: s2wr0 <= 2;
	      {1'd0, 7'd99}: s2wr0 <= 3;
	      {1'd0, 7'd100}: s2wr0 <= 4;
	      {1'd0, 7'd101}: s2wr0 <= 5;
	      {1'd0, 7'd102}: s2wr0 <= 6;
	      {1'd0, 7'd103}: s2wr0 <= 7;
	      {1'd0, 7'd104}: s2wr0 <= 8;
	      {1'd0, 7'd105}: s2wr0 <= 9;
	      {1'd0, 7'd106}: s2wr0 <= 10;
	      {1'd0, 7'd107}: s2wr0 <= 11;
	      {1'd0, 7'd108}: s2wr0 <= 12;
	      {1'd0, 7'd109}: s2wr0 <= 13;
	      {1'd0, 7'd110}: s2wr0 <= 14;
	      {1'd0, 7'd111}: s2wr0 <= 15;
	      {1'd0, 7'd112}: s2wr0 <= 16;
	      {1'd0, 7'd113}: s2wr0 <= 17;
	      {1'd0, 7'd114}: s2wr0 <= 18;
	      {1'd0, 7'd115}: s2wr0 <= 19;
	      {1'd0, 7'd116}: s2wr0 <= 20;
	      {1'd0, 7'd117}: s2wr0 <= 21;
	      {1'd0, 7'd118}: s2wr0 <= 22;
	      {1'd0, 7'd119}: s2wr0 <= 23;
	      {1'd0, 7'd120}: s2wr0 <= 24;
	      {1'd0, 7'd121}: s2wr0 <= 25;
	      {1'd0, 7'd122}: s2wr0 <= 26;
	      {1'd0, 7'd123}: s2wr0 <= 27;
	      {1'd0, 7'd124}: s2wr0 <= 28;
	      {1'd0, 7'd125}: s2wr0 <= 29;
	      {1'd0, 7'd126}: s2wr0 <= 30;
	      {1'd0, 7'd127}: s2wr0 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "distributed"
   always @(posedge clk) begin
      case({tm28_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr1 <= 64;
	      {1'd0, 7'd1}: s2wr1 <= 65;
	      {1'd0, 7'd2}: s2wr1 <= 66;
	      {1'd0, 7'd3}: s2wr1 <= 67;
	      {1'd0, 7'd4}: s2wr1 <= 68;
	      {1'd0, 7'd5}: s2wr1 <= 69;
	      {1'd0, 7'd6}: s2wr1 <= 70;
	      {1'd0, 7'd7}: s2wr1 <= 71;
	      {1'd0, 7'd8}: s2wr1 <= 72;
	      {1'd0, 7'd9}: s2wr1 <= 73;
	      {1'd0, 7'd10}: s2wr1 <= 74;
	      {1'd0, 7'd11}: s2wr1 <= 75;
	      {1'd0, 7'd12}: s2wr1 <= 76;
	      {1'd0, 7'd13}: s2wr1 <= 77;
	      {1'd0, 7'd14}: s2wr1 <= 78;
	      {1'd0, 7'd15}: s2wr1 <= 79;
	      {1'd0, 7'd16}: s2wr1 <= 80;
	      {1'd0, 7'd17}: s2wr1 <= 81;
	      {1'd0, 7'd18}: s2wr1 <= 82;
	      {1'd0, 7'd19}: s2wr1 <= 83;
	      {1'd0, 7'd20}: s2wr1 <= 84;
	      {1'd0, 7'd21}: s2wr1 <= 85;
	      {1'd0, 7'd22}: s2wr1 <= 86;
	      {1'd0, 7'd23}: s2wr1 <= 87;
	      {1'd0, 7'd24}: s2wr1 <= 88;
	      {1'd0, 7'd25}: s2wr1 <= 89;
	      {1'd0, 7'd26}: s2wr1 <= 90;
	      {1'd0, 7'd27}: s2wr1 <= 91;
	      {1'd0, 7'd28}: s2wr1 <= 92;
	      {1'd0, 7'd29}: s2wr1 <= 93;
	      {1'd0, 7'd30}: s2wr1 <= 94;
	      {1'd0, 7'd31}: s2wr1 <= 95;
	      {1'd0, 7'd32}: s2wr1 <= 96;
	      {1'd0, 7'd33}: s2wr1 <= 97;
	      {1'd0, 7'd34}: s2wr1 <= 98;
	      {1'd0, 7'd35}: s2wr1 <= 99;
	      {1'd0, 7'd36}: s2wr1 <= 100;
	      {1'd0, 7'd37}: s2wr1 <= 101;
	      {1'd0, 7'd38}: s2wr1 <= 102;
	      {1'd0, 7'd39}: s2wr1 <= 103;
	      {1'd0, 7'd40}: s2wr1 <= 104;
	      {1'd0, 7'd41}: s2wr1 <= 105;
	      {1'd0, 7'd42}: s2wr1 <= 106;
	      {1'd0, 7'd43}: s2wr1 <= 107;
	      {1'd0, 7'd44}: s2wr1 <= 108;
	      {1'd0, 7'd45}: s2wr1 <= 109;
	      {1'd0, 7'd46}: s2wr1 <= 110;
	      {1'd0, 7'd47}: s2wr1 <= 111;
	      {1'd0, 7'd48}: s2wr1 <= 112;
	      {1'd0, 7'd49}: s2wr1 <= 113;
	      {1'd0, 7'd50}: s2wr1 <= 114;
	      {1'd0, 7'd51}: s2wr1 <= 115;
	      {1'd0, 7'd52}: s2wr1 <= 116;
	      {1'd0, 7'd53}: s2wr1 <= 117;
	      {1'd0, 7'd54}: s2wr1 <= 118;
	      {1'd0, 7'd55}: s2wr1 <= 119;
	      {1'd0, 7'd56}: s2wr1 <= 120;
	      {1'd0, 7'd57}: s2wr1 <= 121;
	      {1'd0, 7'd58}: s2wr1 <= 122;
	      {1'd0, 7'd59}: s2wr1 <= 123;
	      {1'd0, 7'd60}: s2wr1 <= 124;
	      {1'd0, 7'd61}: s2wr1 <= 125;
	      {1'd0, 7'd62}: s2wr1 <= 126;
	      {1'd0, 7'd63}: s2wr1 <= 127;
	      {1'd0, 7'd64}: s2wr1 <= 0;
	      {1'd0, 7'd65}: s2wr1 <= 1;
	      {1'd0, 7'd66}: s2wr1 <= 2;
	      {1'd0, 7'd67}: s2wr1 <= 3;
	      {1'd0, 7'd68}: s2wr1 <= 4;
	      {1'd0, 7'd69}: s2wr1 <= 5;
	      {1'd0, 7'd70}: s2wr1 <= 6;
	      {1'd0, 7'd71}: s2wr1 <= 7;
	      {1'd0, 7'd72}: s2wr1 <= 8;
	      {1'd0, 7'd73}: s2wr1 <= 9;
	      {1'd0, 7'd74}: s2wr1 <= 10;
	      {1'd0, 7'd75}: s2wr1 <= 11;
	      {1'd0, 7'd76}: s2wr1 <= 12;
	      {1'd0, 7'd77}: s2wr1 <= 13;
	      {1'd0, 7'd78}: s2wr1 <= 14;
	      {1'd0, 7'd79}: s2wr1 <= 15;
	      {1'd0, 7'd80}: s2wr1 <= 16;
	      {1'd0, 7'd81}: s2wr1 <= 17;
	      {1'd0, 7'd82}: s2wr1 <= 18;
	      {1'd0, 7'd83}: s2wr1 <= 19;
	      {1'd0, 7'd84}: s2wr1 <= 20;
	      {1'd0, 7'd85}: s2wr1 <= 21;
	      {1'd0, 7'd86}: s2wr1 <= 22;
	      {1'd0, 7'd87}: s2wr1 <= 23;
	      {1'd0, 7'd88}: s2wr1 <= 24;
	      {1'd0, 7'd89}: s2wr1 <= 25;
	      {1'd0, 7'd90}: s2wr1 <= 26;
	      {1'd0, 7'd91}: s2wr1 <= 27;
	      {1'd0, 7'd92}: s2wr1 <= 28;
	      {1'd0, 7'd93}: s2wr1 <= 29;
	      {1'd0, 7'd94}: s2wr1 <= 30;
	      {1'd0, 7'd95}: s2wr1 <= 31;
	      {1'd0, 7'd96}: s2wr1 <= 32;
	      {1'd0, 7'd97}: s2wr1 <= 33;
	      {1'd0, 7'd98}: s2wr1 <= 34;
	      {1'd0, 7'd99}: s2wr1 <= 35;
	      {1'd0, 7'd100}: s2wr1 <= 36;
	      {1'd0, 7'd101}: s2wr1 <= 37;
	      {1'd0, 7'd102}: s2wr1 <= 38;
	      {1'd0, 7'd103}: s2wr1 <= 39;
	      {1'd0, 7'd104}: s2wr1 <= 40;
	      {1'd0, 7'd105}: s2wr1 <= 41;
	      {1'd0, 7'd106}: s2wr1 <= 42;
	      {1'd0, 7'd107}: s2wr1 <= 43;
	      {1'd0, 7'd108}: s2wr1 <= 44;
	      {1'd0, 7'd109}: s2wr1 <= 45;
	      {1'd0, 7'd110}: s2wr1 <= 46;
	      {1'd0, 7'd111}: s2wr1 <= 47;
	      {1'd0, 7'd112}: s2wr1 <= 48;
	      {1'd0, 7'd113}: s2wr1 <= 49;
	      {1'd0, 7'd114}: s2wr1 <= 50;
	      {1'd0, 7'd115}: s2wr1 <= 51;
	      {1'd0, 7'd116}: s2wr1 <= 52;
	      {1'd0, 7'd117}: s2wr1 <= 53;
	      {1'd0, 7'd118}: s2wr1 <= 54;
	      {1'd0, 7'd119}: s2wr1 <= 55;
	      {1'd0, 7'd120}: s2wr1 <= 56;
	      {1'd0, 7'd121}: s2wr1 <= 57;
	      {1'd0, 7'd122}: s2wr1 <= 58;
	      {1'd0, 7'd123}: s2wr1 <= 59;
	      {1'd0, 7'd124}: s2wr1 <= 60;
	      {1'd0, 7'd125}: s2wr1 <= 61;
	      {1'd0, 7'd126}: s2wr1 <= 62;
	      {1'd0, 7'd127}: s2wr1 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "distributed"
   always @(posedge clk) begin
      case({tm28_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr2 <= 32;
	      {1'd0, 7'd1}: s2wr2 <= 33;
	      {1'd0, 7'd2}: s2wr2 <= 34;
	      {1'd0, 7'd3}: s2wr2 <= 35;
	      {1'd0, 7'd4}: s2wr2 <= 36;
	      {1'd0, 7'd5}: s2wr2 <= 37;
	      {1'd0, 7'd6}: s2wr2 <= 38;
	      {1'd0, 7'd7}: s2wr2 <= 39;
	      {1'd0, 7'd8}: s2wr2 <= 40;
	      {1'd0, 7'd9}: s2wr2 <= 41;
	      {1'd0, 7'd10}: s2wr2 <= 42;
	      {1'd0, 7'd11}: s2wr2 <= 43;
	      {1'd0, 7'd12}: s2wr2 <= 44;
	      {1'd0, 7'd13}: s2wr2 <= 45;
	      {1'd0, 7'd14}: s2wr2 <= 46;
	      {1'd0, 7'd15}: s2wr2 <= 47;
	      {1'd0, 7'd16}: s2wr2 <= 48;
	      {1'd0, 7'd17}: s2wr2 <= 49;
	      {1'd0, 7'd18}: s2wr2 <= 50;
	      {1'd0, 7'd19}: s2wr2 <= 51;
	      {1'd0, 7'd20}: s2wr2 <= 52;
	      {1'd0, 7'd21}: s2wr2 <= 53;
	      {1'd0, 7'd22}: s2wr2 <= 54;
	      {1'd0, 7'd23}: s2wr2 <= 55;
	      {1'd0, 7'd24}: s2wr2 <= 56;
	      {1'd0, 7'd25}: s2wr2 <= 57;
	      {1'd0, 7'd26}: s2wr2 <= 58;
	      {1'd0, 7'd27}: s2wr2 <= 59;
	      {1'd0, 7'd28}: s2wr2 <= 60;
	      {1'd0, 7'd29}: s2wr2 <= 61;
	      {1'd0, 7'd30}: s2wr2 <= 62;
	      {1'd0, 7'd31}: s2wr2 <= 63;
	      {1'd0, 7'd32}: s2wr2 <= 0;
	      {1'd0, 7'd33}: s2wr2 <= 1;
	      {1'd0, 7'd34}: s2wr2 <= 2;
	      {1'd0, 7'd35}: s2wr2 <= 3;
	      {1'd0, 7'd36}: s2wr2 <= 4;
	      {1'd0, 7'd37}: s2wr2 <= 5;
	      {1'd0, 7'd38}: s2wr2 <= 6;
	      {1'd0, 7'd39}: s2wr2 <= 7;
	      {1'd0, 7'd40}: s2wr2 <= 8;
	      {1'd0, 7'd41}: s2wr2 <= 9;
	      {1'd0, 7'd42}: s2wr2 <= 10;
	      {1'd0, 7'd43}: s2wr2 <= 11;
	      {1'd0, 7'd44}: s2wr2 <= 12;
	      {1'd0, 7'd45}: s2wr2 <= 13;
	      {1'd0, 7'd46}: s2wr2 <= 14;
	      {1'd0, 7'd47}: s2wr2 <= 15;
	      {1'd0, 7'd48}: s2wr2 <= 16;
	      {1'd0, 7'd49}: s2wr2 <= 17;
	      {1'd0, 7'd50}: s2wr2 <= 18;
	      {1'd0, 7'd51}: s2wr2 <= 19;
	      {1'd0, 7'd52}: s2wr2 <= 20;
	      {1'd0, 7'd53}: s2wr2 <= 21;
	      {1'd0, 7'd54}: s2wr2 <= 22;
	      {1'd0, 7'd55}: s2wr2 <= 23;
	      {1'd0, 7'd56}: s2wr2 <= 24;
	      {1'd0, 7'd57}: s2wr2 <= 25;
	      {1'd0, 7'd58}: s2wr2 <= 26;
	      {1'd0, 7'd59}: s2wr2 <= 27;
	      {1'd0, 7'd60}: s2wr2 <= 28;
	      {1'd0, 7'd61}: s2wr2 <= 29;
	      {1'd0, 7'd62}: s2wr2 <= 30;
	      {1'd0, 7'd63}: s2wr2 <= 31;
	      {1'd0, 7'd64}: s2wr2 <= 96;
	      {1'd0, 7'd65}: s2wr2 <= 97;
	      {1'd0, 7'd66}: s2wr2 <= 98;
	      {1'd0, 7'd67}: s2wr2 <= 99;
	      {1'd0, 7'd68}: s2wr2 <= 100;
	      {1'd0, 7'd69}: s2wr2 <= 101;
	      {1'd0, 7'd70}: s2wr2 <= 102;
	      {1'd0, 7'd71}: s2wr2 <= 103;
	      {1'd0, 7'd72}: s2wr2 <= 104;
	      {1'd0, 7'd73}: s2wr2 <= 105;
	      {1'd0, 7'd74}: s2wr2 <= 106;
	      {1'd0, 7'd75}: s2wr2 <= 107;
	      {1'd0, 7'd76}: s2wr2 <= 108;
	      {1'd0, 7'd77}: s2wr2 <= 109;
	      {1'd0, 7'd78}: s2wr2 <= 110;
	      {1'd0, 7'd79}: s2wr2 <= 111;
	      {1'd0, 7'd80}: s2wr2 <= 112;
	      {1'd0, 7'd81}: s2wr2 <= 113;
	      {1'd0, 7'd82}: s2wr2 <= 114;
	      {1'd0, 7'd83}: s2wr2 <= 115;
	      {1'd0, 7'd84}: s2wr2 <= 116;
	      {1'd0, 7'd85}: s2wr2 <= 117;
	      {1'd0, 7'd86}: s2wr2 <= 118;
	      {1'd0, 7'd87}: s2wr2 <= 119;
	      {1'd0, 7'd88}: s2wr2 <= 120;
	      {1'd0, 7'd89}: s2wr2 <= 121;
	      {1'd0, 7'd90}: s2wr2 <= 122;
	      {1'd0, 7'd91}: s2wr2 <= 123;
	      {1'd0, 7'd92}: s2wr2 <= 124;
	      {1'd0, 7'd93}: s2wr2 <= 125;
	      {1'd0, 7'd94}: s2wr2 <= 126;
	      {1'd0, 7'd95}: s2wr2 <= 127;
	      {1'd0, 7'd96}: s2wr2 <= 64;
	      {1'd0, 7'd97}: s2wr2 <= 65;
	      {1'd0, 7'd98}: s2wr2 <= 66;
	      {1'd0, 7'd99}: s2wr2 <= 67;
	      {1'd0, 7'd100}: s2wr2 <= 68;
	      {1'd0, 7'd101}: s2wr2 <= 69;
	      {1'd0, 7'd102}: s2wr2 <= 70;
	      {1'd0, 7'd103}: s2wr2 <= 71;
	      {1'd0, 7'd104}: s2wr2 <= 72;
	      {1'd0, 7'd105}: s2wr2 <= 73;
	      {1'd0, 7'd106}: s2wr2 <= 74;
	      {1'd0, 7'd107}: s2wr2 <= 75;
	      {1'd0, 7'd108}: s2wr2 <= 76;
	      {1'd0, 7'd109}: s2wr2 <= 77;
	      {1'd0, 7'd110}: s2wr2 <= 78;
	      {1'd0, 7'd111}: s2wr2 <= 79;
	      {1'd0, 7'd112}: s2wr2 <= 80;
	      {1'd0, 7'd113}: s2wr2 <= 81;
	      {1'd0, 7'd114}: s2wr2 <= 82;
	      {1'd0, 7'd115}: s2wr2 <= 83;
	      {1'd0, 7'd116}: s2wr2 <= 84;
	      {1'd0, 7'd117}: s2wr2 <= 85;
	      {1'd0, 7'd118}: s2wr2 <= 86;
	      {1'd0, 7'd119}: s2wr2 <= 87;
	      {1'd0, 7'd120}: s2wr2 <= 88;
	      {1'd0, 7'd121}: s2wr2 <= 89;
	      {1'd0, 7'd122}: s2wr2 <= 90;
	      {1'd0, 7'd123}: s2wr2 <= 91;
	      {1'd0, 7'd124}: s2wr2 <= 92;
	      {1'd0, 7'd125}: s2wr2 <= 93;
	      {1'd0, 7'd126}: s2wr2 <= 94;
	      {1'd0, 7'd127}: s2wr2 <= 95;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "distributed"
   always @(posedge clk) begin
      case({tm28_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr3 <= 0;
	      {1'd0, 7'd1}: s2wr3 <= 1;
	      {1'd0, 7'd2}: s2wr3 <= 2;
	      {1'd0, 7'd3}: s2wr3 <= 3;
	      {1'd0, 7'd4}: s2wr3 <= 4;
	      {1'd0, 7'd5}: s2wr3 <= 5;
	      {1'd0, 7'd6}: s2wr3 <= 6;
	      {1'd0, 7'd7}: s2wr3 <= 7;
	      {1'd0, 7'd8}: s2wr3 <= 8;
	      {1'd0, 7'd9}: s2wr3 <= 9;
	      {1'd0, 7'd10}: s2wr3 <= 10;
	      {1'd0, 7'd11}: s2wr3 <= 11;
	      {1'd0, 7'd12}: s2wr3 <= 12;
	      {1'd0, 7'd13}: s2wr3 <= 13;
	      {1'd0, 7'd14}: s2wr3 <= 14;
	      {1'd0, 7'd15}: s2wr3 <= 15;
	      {1'd0, 7'd16}: s2wr3 <= 16;
	      {1'd0, 7'd17}: s2wr3 <= 17;
	      {1'd0, 7'd18}: s2wr3 <= 18;
	      {1'd0, 7'd19}: s2wr3 <= 19;
	      {1'd0, 7'd20}: s2wr3 <= 20;
	      {1'd0, 7'd21}: s2wr3 <= 21;
	      {1'd0, 7'd22}: s2wr3 <= 22;
	      {1'd0, 7'd23}: s2wr3 <= 23;
	      {1'd0, 7'd24}: s2wr3 <= 24;
	      {1'd0, 7'd25}: s2wr3 <= 25;
	      {1'd0, 7'd26}: s2wr3 <= 26;
	      {1'd0, 7'd27}: s2wr3 <= 27;
	      {1'd0, 7'd28}: s2wr3 <= 28;
	      {1'd0, 7'd29}: s2wr3 <= 29;
	      {1'd0, 7'd30}: s2wr3 <= 30;
	      {1'd0, 7'd31}: s2wr3 <= 31;
	      {1'd0, 7'd32}: s2wr3 <= 32;
	      {1'd0, 7'd33}: s2wr3 <= 33;
	      {1'd0, 7'd34}: s2wr3 <= 34;
	      {1'd0, 7'd35}: s2wr3 <= 35;
	      {1'd0, 7'd36}: s2wr3 <= 36;
	      {1'd0, 7'd37}: s2wr3 <= 37;
	      {1'd0, 7'd38}: s2wr3 <= 38;
	      {1'd0, 7'd39}: s2wr3 <= 39;
	      {1'd0, 7'd40}: s2wr3 <= 40;
	      {1'd0, 7'd41}: s2wr3 <= 41;
	      {1'd0, 7'd42}: s2wr3 <= 42;
	      {1'd0, 7'd43}: s2wr3 <= 43;
	      {1'd0, 7'd44}: s2wr3 <= 44;
	      {1'd0, 7'd45}: s2wr3 <= 45;
	      {1'd0, 7'd46}: s2wr3 <= 46;
	      {1'd0, 7'd47}: s2wr3 <= 47;
	      {1'd0, 7'd48}: s2wr3 <= 48;
	      {1'd0, 7'd49}: s2wr3 <= 49;
	      {1'd0, 7'd50}: s2wr3 <= 50;
	      {1'd0, 7'd51}: s2wr3 <= 51;
	      {1'd0, 7'd52}: s2wr3 <= 52;
	      {1'd0, 7'd53}: s2wr3 <= 53;
	      {1'd0, 7'd54}: s2wr3 <= 54;
	      {1'd0, 7'd55}: s2wr3 <= 55;
	      {1'd0, 7'd56}: s2wr3 <= 56;
	      {1'd0, 7'd57}: s2wr3 <= 57;
	      {1'd0, 7'd58}: s2wr3 <= 58;
	      {1'd0, 7'd59}: s2wr3 <= 59;
	      {1'd0, 7'd60}: s2wr3 <= 60;
	      {1'd0, 7'd61}: s2wr3 <= 61;
	      {1'd0, 7'd62}: s2wr3 <= 62;
	      {1'd0, 7'd63}: s2wr3 <= 63;
	      {1'd0, 7'd64}: s2wr3 <= 64;
	      {1'd0, 7'd65}: s2wr3 <= 65;
	      {1'd0, 7'd66}: s2wr3 <= 66;
	      {1'd0, 7'd67}: s2wr3 <= 67;
	      {1'd0, 7'd68}: s2wr3 <= 68;
	      {1'd0, 7'd69}: s2wr3 <= 69;
	      {1'd0, 7'd70}: s2wr3 <= 70;
	      {1'd0, 7'd71}: s2wr3 <= 71;
	      {1'd0, 7'd72}: s2wr3 <= 72;
	      {1'd0, 7'd73}: s2wr3 <= 73;
	      {1'd0, 7'd74}: s2wr3 <= 74;
	      {1'd0, 7'd75}: s2wr3 <= 75;
	      {1'd0, 7'd76}: s2wr3 <= 76;
	      {1'd0, 7'd77}: s2wr3 <= 77;
	      {1'd0, 7'd78}: s2wr3 <= 78;
	      {1'd0, 7'd79}: s2wr3 <= 79;
	      {1'd0, 7'd80}: s2wr3 <= 80;
	      {1'd0, 7'd81}: s2wr3 <= 81;
	      {1'd0, 7'd82}: s2wr3 <= 82;
	      {1'd0, 7'd83}: s2wr3 <= 83;
	      {1'd0, 7'd84}: s2wr3 <= 84;
	      {1'd0, 7'd85}: s2wr3 <= 85;
	      {1'd0, 7'd86}: s2wr3 <= 86;
	      {1'd0, 7'd87}: s2wr3 <= 87;
	      {1'd0, 7'd88}: s2wr3 <= 88;
	      {1'd0, 7'd89}: s2wr3 <= 89;
	      {1'd0, 7'd90}: s2wr3 <= 90;
	      {1'd0, 7'd91}: s2wr3 <= 91;
	      {1'd0, 7'd92}: s2wr3 <= 92;
	      {1'd0, 7'd93}: s2wr3 <= 93;
	      {1'd0, 7'd94}: s2wr3 <= 94;
	      {1'd0, 7'd95}: s2wr3 <= 95;
	      {1'd0, 7'd96}: s2wr3 <= 96;
	      {1'd0, 7'd97}: s2wr3 <= 97;
	      {1'd0, 7'd98}: s2wr3 <= 98;
	      {1'd0, 7'd99}: s2wr3 <= 99;
	      {1'd0, 7'd100}: s2wr3 <= 100;
	      {1'd0, 7'd101}: s2wr3 <= 101;
	      {1'd0, 7'd102}: s2wr3 <= 102;
	      {1'd0, 7'd103}: s2wr3 <= 103;
	      {1'd0, 7'd104}: s2wr3 <= 104;
	      {1'd0, 7'd105}: s2wr3 <= 105;
	      {1'd0, 7'd106}: s2wr3 <= 106;
	      {1'd0, 7'd107}: s2wr3 <= 107;
	      {1'd0, 7'd108}: s2wr3 <= 108;
	      {1'd0, 7'd109}: s2wr3 <= 109;
	      {1'd0, 7'd110}: s2wr3 <= 110;
	      {1'd0, 7'd111}: s2wr3 <= 111;
	      {1'd0, 7'd112}: s2wr3 <= 112;
	      {1'd0, 7'd113}: s2wr3 <= 113;
	      {1'd0, 7'd114}: s2wr3 <= 114;
	      {1'd0, 7'd115}: s2wr3 <= 115;
	      {1'd0, 7'd116}: s2wr3 <= 116;
	      {1'd0, 7'd117}: s2wr3 <= 117;
	      {1'd0, 7'd118}: s2wr3 <= 118;
	      {1'd0, 7'd119}: s2wr3 <= 119;
	      {1'd0, 7'd120}: s2wr3 <= 120;
	      {1'd0, 7'd121}: s2wr3 <= 121;
	      {1'd0, 7'd122}: s2wr3 <= 122;
	      {1'd0, 7'd123}: s2wr3 <= 123;
	      {1'd0, 7'd124}: s2wr3 <= 124;
	      {1'd0, 7'd125}: s2wr3 <= 125;
	      {1'd0, 7'd126}: s2wr3 <= 126;
	      {1'd0, 7'd127}: s2wr3 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "distributed"
endmodule


// Latency: 12
// Gap: 128
module DirSum_23254(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7);

   output next_out;
   input clk, reset, next;

   reg [6:0] i1;

   input [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   always @(posedge clk) begin
      if (reset == 1) begin
         i1 <= 0;
      end
      else begin
         if (next == 1)
            i1 <= 0;
         else if (i1 == 127)
            i1 <= 0;
         else
            i1 <= i1 + 1;
      end
   end

   codeBlock21892 codeBlockIsnt25453(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7));

endmodule

module D2_22472(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h40000;
      1: out3 <= 20'h3ffb1;
      2: out3 <= 20'h3fec4;
      3: out3 <= 20'h3fd3a;
      4: out3 <= 20'h3fb12;
      5: out3 <= 20'h3f84d;
      6: out3 <= 20'h3f4eb;
      7: out3 <= 20'h3f0ed;
      8: out3 <= 20'h3ec53;
      9: out3 <= 20'h3e71e;
      10: out3 <= 20'h3e150;
      11: out3 <= 20'h3dae8;
      12: out3 <= 20'h3d3e8;
      13: out3 <= 20'h3cc51;
      14: out3 <= 20'h3c424;
      15: out3 <= 20'h3bb62;
      16: out3 <= 20'h3b20d;
      17: out3 <= 20'h3a827;
      18: out3 <= 20'h39daf;
      19: out3 <= 20'h392a9;
      20: out3 <= 20'h38716;
      21: out3 <= 20'h37af8;
      22: out3 <= 20'h36e50;
      23: out3 <= 20'h36121;
      24: out3 <= 20'h3536d;
      25: out3 <= 20'h34535;
      26: out3 <= 20'h3367c;
      27: out3 <= 20'h32744;
      28: out3 <= 20'h31790;
      29: out3 <= 20'h30762;
      30: out3 <= 20'h2f6bc;
      31: out3 <= 20'h2e5a1;
      32: out3 <= 20'h2d414;
      33: out3 <= 20'h2c217;
      34: out3 <= 20'h2afad;
      35: out3 <= 20'h29cd9;
      36: out3 <= 20'h2899e;
      37: out3 <= 20'h275ff;
      38: out3 <= 20'h261ff;
      39: out3 <= 20'h24da1;
      40: out3 <= 20'h238e7;
      41: out3 <= 20'h223d6;
      42: out3 <= 20'h20e71;
      43: out3 <= 20'h1f8ba;
      44: out3 <= 20'h1e2b6;
      45: out3 <= 20'h1cc67;
      46: out3 <= 20'h1b5d1;
      47: out3 <= 20'h19ef8;
      48: out3 <= 20'h187de;
      49: out3 <= 20'h17088;
      50: out3 <= 20'h158fa;
      51: out3 <= 20'h14136;
      52: out3 <= 20'h12940;
      53: out3 <= 20'h1111d;
      54: out3 <= 20'hf8d0;
      55: out3 <= 20'he05c;
      56: out3 <= 20'hc7c6;
      57: out3 <= 20'haf11;
      58: out3 <= 20'h9641;
      59: out3 <= 20'h7d59;
      60: out3 <= 20'h645f;
      61: out3 <= 20'h4b55;
      62: out3 <= 20'h323f;
      63: out3 <= 20'h1921;
      64: out3 <= 20'h0;
      65: out3 <= 20'hfe6df;
      66: out3 <= 20'hfcdc1;
      67: out3 <= 20'hfb4ab;
      68: out3 <= 20'hf9ba1;
      69: out3 <= 20'hf82a7;
      70: out3 <= 20'hf69bf;
      71: out3 <= 20'hf50ef;
      72: out3 <= 20'hf383a;
      73: out3 <= 20'hf1fa4;
      74: out3 <= 20'hf0730;
      75: out3 <= 20'heeee3;
      76: out3 <= 20'hed6c0;
      77: out3 <= 20'hebeca;
      78: out3 <= 20'hea706;
      79: out3 <= 20'he8f78;
      80: out3 <= 20'he7822;
      81: out3 <= 20'he6108;
      82: out3 <= 20'he4a2f;
      83: out3 <= 20'he3399;
      84: out3 <= 20'he1d4a;
      85: out3 <= 20'he0746;
      86: out3 <= 20'hdf18f;
      87: out3 <= 20'hddc2a;
      88: out3 <= 20'hdc719;
      89: out3 <= 20'hdb25f;
      90: out3 <= 20'hd9e01;
      91: out3 <= 20'hd8a01;
      92: out3 <= 20'hd7662;
      93: out3 <= 20'hd6327;
      94: out3 <= 20'hd5053;
      95: out3 <= 20'hd3de9;
      96: out3 <= 20'hd2bec;
      97: out3 <= 20'hd1a5f;
      98: out3 <= 20'hd0944;
      99: out3 <= 20'hcf89e;
      100: out3 <= 20'hce870;
      101: out3 <= 20'hcd8bc;
      102: out3 <= 20'hcc984;
      103: out3 <= 20'hcbacb;
      104: out3 <= 20'hcac93;
      105: out3 <= 20'hc9edf;
      106: out3 <= 20'hc91b0;
      107: out3 <= 20'hc8508;
      108: out3 <= 20'hc78ea;
      109: out3 <= 20'hc6d57;
      110: out3 <= 20'hc6251;
      111: out3 <= 20'hc57d9;
      112: out3 <= 20'hc4df3;
      113: out3 <= 20'hc449e;
      114: out3 <= 20'hc3bdc;
      115: out3 <= 20'hc33af;
      116: out3 <= 20'hc2c18;
      117: out3 <= 20'hc2518;
      118: out3 <= 20'hc1eb0;
      119: out3 <= 20'hc18e2;
      120: out3 <= 20'hc13ad;
      121: out3 <= 20'hc0f13;
      122: out3 <= 20'hc0b15;
      123: out3 <= 20'hc07b3;
      124: out3 <= 20'hc04ee;
      125: out3 <= 20'hc02c6;
      126: out3 <= 20'hc013c;
      127: out3 <= 20'hc004f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D4_22602(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h3ffec;
      1: out3 <= 20'h3ff4e;
      2: out3 <= 20'h3fe13;
      3: out3 <= 20'h3fc39;
      4: out3 <= 20'h3f9c3;
      5: out3 <= 20'h3f6af;
      6: out3 <= 20'h3f2ff;
      7: out3 <= 20'h3eeb3;
      8: out3 <= 20'h3e9cc;
      9: out3 <= 20'h3e44a;
      10: out3 <= 20'h3de2f;
      11: out3 <= 20'h3d77b;
      12: out3 <= 20'h3d02f;
      13: out3 <= 20'h3c84d;
      14: out3 <= 20'h3bfd6;
      15: out3 <= 20'h3b6ca;
      16: out3 <= 20'h3ad2c;
      17: out3 <= 20'h3a2fd;
      18: out3 <= 20'h3983e;
      19: out3 <= 20'h38cf1;
      20: out3 <= 20'h38119;
      21: out3 <= 20'h374b5;
      22: out3 <= 20'h367ca;
      23: out3 <= 20'h35a58;
      24: out3 <= 20'h34c61;
      25: out3 <= 20'h33de8;
      26: out3 <= 20'h32ef0;
      27: out3 <= 20'h31f7a;
      28: out3 <= 20'h30f88;
      29: out3 <= 20'h2ff1e;
      30: out3 <= 20'h2ee3d;
      31: out3 <= 20'h2dce9;
      32: out3 <= 20'h2cb23;
      33: out3 <= 20'h2b8ef;
      34: out3 <= 20'h2a650;
      35: out3 <= 20'h29349;
      36: out3 <= 20'h27fdb;
      37: out3 <= 20'h26c0b;
      38: out3 <= 20'h257db;
      39: out3 <= 20'h2434f;
      40: out3 <= 20'h22e6a;
      41: out3 <= 20'h2192e;
      42: out3 <= 20'h203a0;
      43: out3 <= 20'h1edc2;
      44: out3 <= 20'h1d797;
      45: out3 <= 20'h1c125;
      46: out3 <= 20'h1aa6d;
      47: out3 <= 20'h19373;
      48: out3 <= 20'h17c3b;
      49: out3 <= 20'h164c8;
      50: out3 <= 20'h14d1e;
      51: out3 <= 20'h13541;
      52: out3 <= 20'h11d34;
      53: out3 <= 20'h104fc;
      54: out3 <= 20'hec9a;
      55: out3 <= 20'hd415;
      56: out3 <= 20'hbb6f;
      57: out3 <= 20'ha2ac;
      58: out3 <= 20'h89d0;
      59: out3 <= 20'h70de;
      60: out3 <= 20'h57db;
      61: out3 <= 20'h3ecb;
      62: out3 <= 20'h25b1;
      63: out3 <= 20'hc91;
      64: out3 <= 20'hff36f;
      65: out3 <= 20'hfda4f;
      66: out3 <= 20'hfc135;
      67: out3 <= 20'hfa825;
      68: out3 <= 20'hf8f22;
      69: out3 <= 20'hf7630;
      70: out3 <= 20'hf5d54;
      71: out3 <= 20'hf4491;
      72: out3 <= 20'hf2beb;
      73: out3 <= 20'hf1366;
      74: out3 <= 20'hefb04;
      75: out3 <= 20'hee2cc;
      76: out3 <= 20'hecabf;
      77: out3 <= 20'heb2e2;
      78: out3 <= 20'he9b38;
      79: out3 <= 20'he83c5;
      80: out3 <= 20'he6c8d;
      81: out3 <= 20'he5593;
      82: out3 <= 20'he3edb;
      83: out3 <= 20'he2869;
      84: out3 <= 20'he123e;
      85: out3 <= 20'hdfc60;
      86: out3 <= 20'hde6d2;
      87: out3 <= 20'hdd196;
      88: out3 <= 20'hdbcb1;
      89: out3 <= 20'hda825;
      90: out3 <= 20'hd93f5;
      91: out3 <= 20'hd8025;
      92: out3 <= 20'hd6cb7;
      93: out3 <= 20'hd59b0;
      94: out3 <= 20'hd4711;
      95: out3 <= 20'hd34dd;
      96: out3 <= 20'hd2317;
      97: out3 <= 20'hd11c3;
      98: out3 <= 20'hd00e2;
      99: out3 <= 20'hcf078;
      100: out3 <= 20'hce086;
      101: out3 <= 20'hcd110;
      102: out3 <= 20'hcc218;
      103: out3 <= 20'hcb39f;
      104: out3 <= 20'hca5a8;
      105: out3 <= 20'hc9836;
      106: out3 <= 20'hc8b4b;
      107: out3 <= 20'hc7ee7;
      108: out3 <= 20'hc730f;
      109: out3 <= 20'hc67c2;
      110: out3 <= 20'hc5d03;
      111: out3 <= 20'hc52d4;
      112: out3 <= 20'hc4936;
      113: out3 <= 20'hc402a;
      114: out3 <= 20'hc37b3;
      115: out3 <= 20'hc2fd1;
      116: out3 <= 20'hc2885;
      117: out3 <= 20'hc21d1;
      118: out3 <= 20'hc1bb6;
      119: out3 <= 20'hc1634;
      120: out3 <= 20'hc114d;
      121: out3 <= 20'hc0d01;
      122: out3 <= 20'hc0951;
      123: out3 <= 20'hc063d;
      124: out3 <= 20'hc03c7;
      125: out3 <= 20'hc01ed;
      126: out3 <= 20'hc00b2;
      127: out3 <= 20'hc0014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D6_22992(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'h0;
      1: out3 <= 20'hfe6df;
      2: out3 <= 20'hfcdc1;
      3: out3 <= 20'hfb4ab;
      4: out3 <= 20'hf9ba1;
      5: out3 <= 20'hf82a7;
      6: out3 <= 20'hf69bf;
      7: out3 <= 20'hf50ef;
      8: out3 <= 20'hf383a;
      9: out3 <= 20'hf1fa4;
      10: out3 <= 20'hf0730;
      11: out3 <= 20'heeee3;
      12: out3 <= 20'hed6c0;
      13: out3 <= 20'hebeca;
      14: out3 <= 20'hea706;
      15: out3 <= 20'he8f78;
      16: out3 <= 20'he7822;
      17: out3 <= 20'he6108;
      18: out3 <= 20'he4a2f;
      19: out3 <= 20'he3399;
      20: out3 <= 20'he1d4a;
      21: out3 <= 20'he0746;
      22: out3 <= 20'hdf18f;
      23: out3 <= 20'hddc2a;
      24: out3 <= 20'hdc719;
      25: out3 <= 20'hdb25f;
      26: out3 <= 20'hd9e01;
      27: out3 <= 20'hd8a01;
      28: out3 <= 20'hd7662;
      29: out3 <= 20'hd6327;
      30: out3 <= 20'hd5053;
      31: out3 <= 20'hd3de9;
      32: out3 <= 20'hd2bec;
      33: out3 <= 20'hd1a5f;
      34: out3 <= 20'hd0944;
      35: out3 <= 20'hcf89e;
      36: out3 <= 20'hce870;
      37: out3 <= 20'hcd8bc;
      38: out3 <= 20'hcc984;
      39: out3 <= 20'hcbacb;
      40: out3 <= 20'hcac93;
      41: out3 <= 20'hc9edf;
      42: out3 <= 20'hc91b0;
      43: out3 <= 20'hc8508;
      44: out3 <= 20'hc78ea;
      45: out3 <= 20'hc6d57;
      46: out3 <= 20'hc6251;
      47: out3 <= 20'hc57d9;
      48: out3 <= 20'hc4df3;
      49: out3 <= 20'hc449e;
      50: out3 <= 20'hc3bdc;
      51: out3 <= 20'hc33af;
      52: out3 <= 20'hc2c18;
      53: out3 <= 20'hc2518;
      54: out3 <= 20'hc1eb0;
      55: out3 <= 20'hc18e2;
      56: out3 <= 20'hc13ad;
      57: out3 <= 20'hc0f13;
      58: out3 <= 20'hc0b15;
      59: out3 <= 20'hc07b3;
      60: out3 <= 20'hc04ee;
      61: out3 <= 20'hc02c6;
      62: out3 <= 20'hc013c;
      63: out3 <= 20'hc004f;
      64: out3 <= 20'hc0000;
      65: out3 <= 20'hc004f;
      66: out3 <= 20'hc013c;
      67: out3 <= 20'hc02c6;
      68: out3 <= 20'hc04ee;
      69: out3 <= 20'hc07b3;
      70: out3 <= 20'hc0b15;
      71: out3 <= 20'hc0f13;
      72: out3 <= 20'hc13ad;
      73: out3 <= 20'hc18e2;
      74: out3 <= 20'hc1eb0;
      75: out3 <= 20'hc2518;
      76: out3 <= 20'hc2c18;
      77: out3 <= 20'hc33af;
      78: out3 <= 20'hc3bdc;
      79: out3 <= 20'hc449e;
      80: out3 <= 20'hc4df3;
      81: out3 <= 20'hc57d9;
      82: out3 <= 20'hc6251;
      83: out3 <= 20'hc6d57;
      84: out3 <= 20'hc78ea;
      85: out3 <= 20'hc8508;
      86: out3 <= 20'hc91b0;
      87: out3 <= 20'hc9edf;
      88: out3 <= 20'hcac93;
      89: out3 <= 20'hcbacb;
      90: out3 <= 20'hcc984;
      91: out3 <= 20'hcd8bc;
      92: out3 <= 20'hce870;
      93: out3 <= 20'hcf89e;
      94: out3 <= 20'hd0944;
      95: out3 <= 20'hd1a5f;
      96: out3 <= 20'hd2bec;
      97: out3 <= 20'hd3de9;
      98: out3 <= 20'hd5053;
      99: out3 <= 20'hd6327;
      100: out3 <= 20'hd7662;
      101: out3 <= 20'hd8a01;
      102: out3 <= 20'hd9e01;
      103: out3 <= 20'hdb25f;
      104: out3 <= 20'hdc719;
      105: out3 <= 20'hddc2a;
      106: out3 <= 20'hdf18f;
      107: out3 <= 20'he0746;
      108: out3 <= 20'he1d4a;
      109: out3 <= 20'he3399;
      110: out3 <= 20'he4a2f;
      111: out3 <= 20'he6108;
      112: out3 <= 20'he7822;
      113: out3 <= 20'he8f78;
      114: out3 <= 20'hea706;
      115: out3 <= 20'hebeca;
      116: out3 <= 20'hed6c0;
      117: out3 <= 20'heeee3;
      118: out3 <= 20'hf0730;
      119: out3 <= 20'hf1fa4;
      120: out3 <= 20'hf383a;
      121: out3 <= 20'hf50ef;
      122: out3 <= 20'hf69bf;
      123: out3 <= 20'hf82a7;
      124: out3 <= 20'hf9ba1;
      125: out3 <= 20'hfb4ab;
      126: out3 <= 20'hfcdc1;
      127: out3 <= 20'hfe6df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D8_23252(addr, out, clk);
   input clk;
   output [19:0] out;
   reg [19:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 20'hff36f;
      1: out3 <= 20'hfda4f;
      2: out3 <= 20'hfc135;
      3: out3 <= 20'hfa825;
      4: out3 <= 20'hf8f22;
      5: out3 <= 20'hf7630;
      6: out3 <= 20'hf5d54;
      7: out3 <= 20'hf4491;
      8: out3 <= 20'hf2beb;
      9: out3 <= 20'hf1366;
      10: out3 <= 20'hefb04;
      11: out3 <= 20'hee2cc;
      12: out3 <= 20'hecabf;
      13: out3 <= 20'heb2e2;
      14: out3 <= 20'he9b38;
      15: out3 <= 20'he83c5;
      16: out3 <= 20'he6c8d;
      17: out3 <= 20'he5593;
      18: out3 <= 20'he3edb;
      19: out3 <= 20'he2869;
      20: out3 <= 20'he123e;
      21: out3 <= 20'hdfc60;
      22: out3 <= 20'hde6d2;
      23: out3 <= 20'hdd196;
      24: out3 <= 20'hdbcb1;
      25: out3 <= 20'hda825;
      26: out3 <= 20'hd93f5;
      27: out3 <= 20'hd8025;
      28: out3 <= 20'hd6cb7;
      29: out3 <= 20'hd59b0;
      30: out3 <= 20'hd4711;
      31: out3 <= 20'hd34dd;
      32: out3 <= 20'hd2317;
      33: out3 <= 20'hd11c3;
      34: out3 <= 20'hd00e2;
      35: out3 <= 20'hcf078;
      36: out3 <= 20'hce086;
      37: out3 <= 20'hcd110;
      38: out3 <= 20'hcc218;
      39: out3 <= 20'hcb39f;
      40: out3 <= 20'hca5a8;
      41: out3 <= 20'hc9836;
      42: out3 <= 20'hc8b4b;
      43: out3 <= 20'hc7ee7;
      44: out3 <= 20'hc730f;
      45: out3 <= 20'hc67c2;
      46: out3 <= 20'hc5d03;
      47: out3 <= 20'hc52d4;
      48: out3 <= 20'hc4936;
      49: out3 <= 20'hc402a;
      50: out3 <= 20'hc37b3;
      51: out3 <= 20'hc2fd1;
      52: out3 <= 20'hc2885;
      53: out3 <= 20'hc21d1;
      54: out3 <= 20'hc1bb6;
      55: out3 <= 20'hc1634;
      56: out3 <= 20'hc114d;
      57: out3 <= 20'hc0d01;
      58: out3 <= 20'hc0951;
      59: out3 <= 20'hc063d;
      60: out3 <= 20'hc03c7;
      61: out3 <= 20'hc01ed;
      62: out3 <= 20'hc00b2;
      63: out3 <= 20'hc0014;
      64: out3 <= 20'hc0014;
      65: out3 <= 20'hc00b2;
      66: out3 <= 20'hc01ed;
      67: out3 <= 20'hc03c7;
      68: out3 <= 20'hc063d;
      69: out3 <= 20'hc0951;
      70: out3 <= 20'hc0d01;
      71: out3 <= 20'hc114d;
      72: out3 <= 20'hc1634;
      73: out3 <= 20'hc1bb6;
      74: out3 <= 20'hc21d1;
      75: out3 <= 20'hc2885;
      76: out3 <= 20'hc2fd1;
      77: out3 <= 20'hc37b3;
      78: out3 <= 20'hc402a;
      79: out3 <= 20'hc4936;
      80: out3 <= 20'hc52d4;
      81: out3 <= 20'hc5d03;
      82: out3 <= 20'hc67c2;
      83: out3 <= 20'hc730f;
      84: out3 <= 20'hc7ee7;
      85: out3 <= 20'hc8b4b;
      86: out3 <= 20'hc9836;
      87: out3 <= 20'hca5a8;
      88: out3 <= 20'hcb39f;
      89: out3 <= 20'hcc218;
      90: out3 <= 20'hcd110;
      91: out3 <= 20'hce086;
      92: out3 <= 20'hcf078;
      93: out3 <= 20'hd00e2;
      94: out3 <= 20'hd11c3;
      95: out3 <= 20'hd2317;
      96: out3 <= 20'hd34dd;
      97: out3 <= 20'hd4711;
      98: out3 <= 20'hd59b0;
      99: out3 <= 20'hd6cb7;
      100: out3 <= 20'hd8025;
      101: out3 <= 20'hd93f5;
      102: out3 <= 20'hda825;
      103: out3 <= 20'hdbcb1;
      104: out3 <= 20'hdd196;
      105: out3 <= 20'hde6d2;
      106: out3 <= 20'hdfc60;
      107: out3 <= 20'he123e;
      108: out3 <= 20'he2869;
      109: out3 <= 20'he3edb;
      110: out3 <= 20'he5593;
      111: out3 <= 20'he6c8d;
      112: out3 <= 20'he83c5;
      113: out3 <= 20'he9b38;
      114: out3 <= 20'heb2e2;
      115: out3 <= 20'hecabf;
      116: out3 <= 20'hee2cc;
      117: out3 <= 20'hefb04;
      118: out3 <= 20'hf1366;
      119: out3 <= 20'hf2beb;
      120: out3 <= 20'hf4491;
      121: out3 <= 20'hf5d54;
      122: out3 <= 20'hf7630;
      123: out3 <= 20'hf8f22;
      124: out3 <= 20'hfa825;
      125: out3 <= 20'hfc135;
      126: out3 <= 20'hfda4f;
      127: out3 <= 20'hff36f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 12
// Gap: 1
module codeBlock21892(clk, reset, next_in, next_out,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [6:0] i1_in;
   reg [6:0] i1;

   input [19:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(11, 1) shiftFIFO_25456(.X(next), .Y(next_out), .clk(clk));


   wire signed [19:0] a105;
   wire signed [19:0] a82;
   wire signed [19:0] a108;
   wire signed [19:0] a86;
   wire signed [19:0] a109;
   wire signed [19:0] a110;
   wire signed [19:0] a113;
   wire signed [19:0] a94;
   wire signed [19:0] a116;
   wire signed [19:0] a98;
   wire signed [19:0] a117;
   wire signed [19:0] a118;
   reg signed [19:0] tm454;
   reg signed [19:0] tm458;
   reg signed [19:0] tm470;
   reg signed [19:0] tm474;
   reg signed [19:0] tm486;
   reg signed [19:0] tm497;
   reg signed [19:0] tm508;
   reg signed [19:0] tm519;
   reg signed [19:0] tm455;
   reg signed [19:0] tm459;
   reg signed [19:0] tm471;
   reg signed [19:0] tm475;
   reg signed [19:0] tm487;
   reg signed [19:0] tm498;
   reg signed [19:0] tm509;
   reg signed [19:0] tm520;
   wire signed [19:0] tm31;
   wire signed [19:0] a87;
   wire signed [19:0] tm32;
   wire signed [19:0] a89;
   wire signed [19:0] tm35;
   wire signed [19:0] a99;
   wire signed [19:0] tm36;
   wire signed [19:0] a101;
   reg signed [19:0] tm456;
   reg signed [19:0] tm460;
   reg signed [19:0] tm472;
   reg signed [19:0] tm476;
   reg signed [19:0] tm488;
   reg signed [19:0] tm499;
   reg signed [19:0] tm510;
   reg signed [19:0] tm521;
   reg signed [19:0] tm90;
   reg signed [19:0] tm91;
   reg signed [19:0] tm98;
   reg signed [19:0] tm99;
   reg signed [19:0] tm457;
   reg signed [19:0] tm461;
   reg signed [19:0] tm473;
   reg signed [19:0] tm477;
   reg signed [19:0] tm489;
   reg signed [19:0] tm500;
   reg signed [19:0] tm511;
   reg signed [19:0] tm522;
   reg signed [19:0] tm490;
   reg signed [19:0] tm501;
   reg signed [19:0] tm512;
   reg signed [19:0] tm523;
   reg signed [19:0] tm491;
   reg signed [19:0] tm502;
   reg signed [19:0] tm513;
   reg signed [19:0] tm524;
   reg signed [19:0] tm492;
   reg signed [19:0] tm503;
   reg signed [19:0] tm514;
   reg signed [19:0] tm525;
   reg signed [19:0] tm493;
   reg signed [19:0] tm504;
   reg signed [19:0] tm515;
   reg signed [19:0] tm526;
   reg signed [19:0] tm494;
   reg signed [19:0] tm505;
   reg signed [19:0] tm516;
   reg signed [19:0] tm527;
   wire signed [19:0] a88;
   wire signed [19:0] a90;
   wire signed [19:0] a91;
   wire signed [19:0] a92;
   wire signed [19:0] a100;
   wire signed [19:0] a102;
   wire signed [19:0] a103;
   wire signed [19:0] a104;
   reg signed [19:0] tm495;
   reg signed [19:0] tm506;
   reg signed [19:0] tm517;
   reg signed [19:0] tm528;
   wire signed [19:0] Y0;
   wire signed [19:0] Y1;
   wire signed [19:0] Y2;
   wire signed [19:0] Y3;
   wire signed [19:0] Y4;
   wire signed [19:0] Y5;
   wire signed [19:0] Y6;
   wire signed [19:0] Y7;
   reg signed [19:0] tm496;
   reg signed [19:0] tm507;
   reg signed [19:0] tm518;
   reg signed [19:0] tm529;


   assign a105 = X0;
   assign a82 = a105;
   assign a108 = X1;
   assign a86 = a108;
   assign a109 = X2;
   assign a110 = X3;
   assign a113 = X4;
   assign a94 = a113;
   assign a116 = X5;
   assign a98 = a116;
   assign a117 = X6;
   assign a118 = X7;
   assign a87 = tm31;
   assign a89 = tm32;
   assign a99 = tm35;
   assign a101 = tm36;
   assign Y0 = tm496;
   assign Y1 = tm507;
   assign Y4 = tm518;
   assign Y5 = tm529;

   D2_22472 instD2inst0_22472(.addr(i1[6:0]), .out(tm31), .clk(clk));

   D4_22602 instD4inst0_22602(.addr(i1[6:0]), .out(tm35), .clk(clk));

   D6_22992 instD6inst0_22992(.addr(i1[6:0]), .out(tm32), .clk(clk));

   D8_23252 instD8inst0_23252(.addr(i1[6:0]), .out(tm36), .clk(clk));

    multfix #(20, 6) m21991(.a(tm90), .b(tm457), .clk(clk), .q_sc(a88), .q_unsc(), .rst(reset));
    multfix #(20, 6) m22013(.a(tm91), .b(tm461), .clk(clk), .q_sc(a90), .q_unsc(), .rst(reset));
    multfix #(20, 6) m22031(.a(tm91), .b(tm457), .clk(clk), .q_sc(a91), .q_unsc(), .rst(reset));
    multfix #(20, 6) m22042(.a(tm90), .b(tm461), .clk(clk), .q_sc(a92), .q_unsc(), .rst(reset));
    multfix #(20, 6) m22151(.a(tm98), .b(tm473), .clk(clk), .q_sc(a100), .q_unsc(), .rst(reset));
    multfix #(20, 6) m22173(.a(tm99), .b(tm477), .clk(clk), .q_sc(a102), .q_unsc(), .rst(reset));
    multfix #(20, 6) m22191(.a(tm99), .b(tm473), .clk(clk), .q_sc(a103), .q_unsc(), .rst(reset));
    multfix #(20, 6) m22202(.a(tm98), .b(tm477), .clk(clk), .q_sc(a104), .q_unsc(), .rst(reset));
    subfxp #(20, 1) sub22020(.a(a88), .b(a90), .clk(clk), .q(Y2));    // 10
    addfxp #(20, 1) add22049(.a(a91), .b(a92), .clk(clk), .q(Y3));    // 10
    subfxp #(20, 1) sub22180(.a(a100), .b(a102), .clk(clk), .q(Y6));    // 10
    addfxp #(20, 1) add22209(.a(a103), .b(a104), .clk(clk), .q(Y7));    // 10


   always @(posedge clk) begin
      if (reset == 1) begin
         tm90 <= 0;
         tm457 <= 0;
         tm91 <= 0;
         tm461 <= 0;
         tm91 <= 0;
         tm457 <= 0;
         tm90 <= 0;
         tm461 <= 0;
         tm98 <= 0;
         tm473 <= 0;
         tm99 <= 0;
         tm477 <= 0;
         tm99 <= 0;
         tm473 <= 0;
         tm98 <= 0;
         tm477 <= 0;
      end
      else begin
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
         tm454 <= a109;
         tm458 <= a110;
         tm470 <= a117;
         tm474 <= a118;
         tm486 <= a82;
         tm497 <= a86;
         tm508 <= a94;
         tm519 <= a98;
         tm455 <= tm454;
         tm459 <= tm458;
         tm471 <= tm470;
         tm475 <= tm474;
         tm487 <= tm486;
         tm498 <= tm497;
         tm509 <= tm508;
         tm520 <= tm519;
         tm456 <= tm455;
         tm460 <= tm459;
         tm472 <= tm471;
         tm476 <= tm475;
         tm488 <= tm487;
         tm499 <= tm498;
         tm510 <= tm509;
         tm521 <= tm520;
         tm90 <= a87;
         tm91 <= a89;
         tm98 <= a99;
         tm99 <= a101;
         tm457 <= tm456;
         tm461 <= tm460;
         tm473 <= tm472;
         tm477 <= tm476;
         tm489 <= tm488;
         tm500 <= tm499;
         tm511 <= tm510;
         tm522 <= tm521;
         tm490 <= tm489;
         tm501 <= tm500;
         tm512 <= tm511;
         tm523 <= tm522;
         tm491 <= tm490;
         tm502 <= tm501;
         tm513 <= tm512;
         tm524 <= tm523;
         tm492 <= tm491;
         tm503 <= tm502;
         tm514 <= tm513;
         tm525 <= tm524;
         tm493 <= tm492;
         tm504 <= tm503;
         tm515 <= tm514;
         tm526 <= tm525;
         tm494 <= tm493;
         tm505 <= tm504;
         tm516 <= tm515;
         tm527 <= tm526;
         tm495 <= tm494;
         tm506 <= tm505;
         tm517 <= tm516;
         tm528 <= tm527;
         tm496 <= tm495;
         tm507 <= tm506;
         tm518 <= tm517;
         tm529 <= tm528;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock23256(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [19:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in;

   reg   [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   shiftRegFIFO #(1, 1) shiftFIFO_25459(.X(next), .Y(next_out), .clk(clk));


   wire signed [19:0] a17;
   wire signed [19:0] a18;
   wire signed [19:0] a19;
   wire signed [19:0] a20;
   wire signed [19:0] a25;
   wire signed [19:0] a26;
   wire signed [19:0] a27;
   wire signed [19:0] a28;
   wire signed [20:0] tm236;
   wire signed [20:0] tm237;
   wire signed [20:0] tm238;
   wire signed [20:0] tm239;
   wire signed [19:0] Y0;
   wire signed [19:0] Y1;
   wire signed [19:0] Y2;
   wire signed [19:0] Y3;
   wire signed [20:0] tm240;
   wire signed [20:0] tm241;
   wire signed [20:0] tm242;
   wire signed [20:0] tm243;
   wire signed [19:0] Y4;
   wire signed [19:0] Y5;
   wire signed [19:0] Y6;
   wire signed [19:0] Y7;
   wire signed [19:0] t49;
   wire signed [19:0] t50;
   wire signed [19:0] t51;
   wire signed [19:0] t52;
   wire signed [19:0] t53;
   wire signed [19:0] t54;
   wire signed [19:0] t55;
   wire signed [19:0] t56;


   assign a17 = X0;
   assign a18 = X2;
   assign a19 = X1;
   assign a20 = X3;
   assign a25 = X4;
   assign a26 = X6;
   assign a27 = X5;
   assign a28 = X7;
   assign Y0 = t49;
   assign Y1 = t50;
   assign Y2 = t51;
   assign Y3 = t52;
   assign Y4 = t53;
   assign Y5 = t54;
   assign Y6 = t55;
   assign Y7 = t56;
   assign t49 = tm236[20:1];
   assign t50 = tm237[20:1];
   assign t51 = tm238[20:1];
   assign t52 = tm239[20:1];
   assign t53 = tm240[20:1];
   assign t54 = tm241[20:1];
   assign t55 = tm242[20:1];
   assign t56 = tm243[20:1];

    addfxp #(21, 1) add23268(.a({{1{a17[19]}}, a17}), .b({{1{a18[19]}}, a18}), .clk(clk), .q(tm236));    // 0
    addfxp #(21, 1) add23283(.a({{1{a19[19]}}, a19}), .b({{1{a20[19]}}, a20}), .clk(clk), .q(tm237));    // 0
    subfxp #(21, 1) sub23298(.a({{1{a17[19]}}, a17}), .b({{1{a18[19]}}, a18}), .clk(clk), .q(tm238));    // 0
    subfxp #(21, 1) sub23313(.a({{1{a19[19]}}, a19}), .b({{1{a20[19]}}, a20}), .clk(clk), .q(tm239));    // 0
    addfxp #(21, 1) add23344(.a({{1{a25[19]}}, a25}), .b({{1{a26[19]}}, a26}), .clk(clk), .q(tm240));    // 0
    addfxp #(21, 1) add23359(.a({{1{a27[19]}}, a27}), .b({{1{a28[19]}}, a28}), .clk(clk), .q(tm241));    // 0
    subfxp #(21, 1) sub23374(.a({{1{a25[19]}}, a25}), .b({{1{a26[19]}}, a26}), .clk(clk), .q(tm242));    // 0
    subfxp #(21, 1) sub23389(.a({{1{a27[19]}}, a27}), .b({{1{a28[19]}}, a28}), .clk(clk), .q(tm243));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 261
// Gap: 128
module rc23414(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7);

   output next_out;
   input clk, reset, next;

   input [19:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7;

   output [19:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7;

   wire [39:0] t0;
   wire [39:0] s0;
   assign t0 = {X0, X1};
   wire [39:0] t1;
   wire [39:0] s1;
   assign t1 = {X2, X3};
   wire [39:0] t2;
   wire [39:0] s2;
   assign t2 = {X4, X5};
   wire [39:0] t3;
   wire [39:0] s3;
   assign t3 = {X6, X7};
   assign Y0 = s0[39:20];
   assign Y1 = s0[19:0];
   assign Y2 = s1[39:20];
   assign Y3 = s1[19:0];
   assign Y4 = s2[39:20];
   assign Y5 = s2[19:0];
   assign Y6 = s3[39:20];
   assign Y7 = s3[19:0];

   perm23412 instPerm25460(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet23412(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
);

    parameter width = 40;

    input [6:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3;
    reg [width-1:0] t5_0, t5_1, t5_2, t5_3;

    reg [1:0] control;

    always @(posedge clk) begin
      case(ct)
        7'd0: control <= 2'b10;
        7'd1: control <= 2'b10;
        7'd2: control <= 2'b10;
        7'd3: control <= 2'b10;
        7'd4: control <= 2'b10;
        7'd5: control <= 2'b10;
        7'd6: control <= 2'b10;
        7'd7: control <= 2'b10;
        7'd8: control <= 2'b10;
        7'd9: control <= 2'b10;
        7'd10: control <= 2'b10;
        7'd11: control <= 2'b10;
        7'd12: control <= 2'b10;
        7'd13: control <= 2'b10;
        7'd14: control <= 2'b10;
        7'd15: control <= 2'b10;
        7'd16: control <= 2'b10;
        7'd17: control <= 2'b10;
        7'd18: control <= 2'b10;
        7'd19: control <= 2'b10;
        7'd20: control <= 2'b10;
        7'd21: control <= 2'b10;
        7'd22: control <= 2'b10;
        7'd23: control <= 2'b10;
        7'd24: control <= 2'b10;
        7'd25: control <= 2'b10;
        7'd26: control <= 2'b10;
        7'd27: control <= 2'b10;
        7'd28: control <= 2'b10;
        7'd29: control <= 2'b10;
        7'd30: control <= 2'b10;
        7'd31: control <= 2'b10;
        7'd32: control <= 2'b10;
        7'd33: control <= 2'b10;
        7'd34: control <= 2'b10;
        7'd35: control <= 2'b10;
        7'd36: control <= 2'b10;
        7'd37: control <= 2'b10;
        7'd38: control <= 2'b10;
        7'd39: control <= 2'b10;
        7'd40: control <= 2'b10;
        7'd41: control <= 2'b10;
        7'd42: control <= 2'b10;
        7'd43: control <= 2'b10;
        7'd44: control <= 2'b10;
        7'd45: control <= 2'b10;
        7'd46: control <= 2'b10;
        7'd47: control <= 2'b10;
        7'd48: control <= 2'b10;
        7'd49: control <= 2'b10;
        7'd50: control <= 2'b10;
        7'd51: control <= 2'b10;
        7'd52: control <= 2'b10;
        7'd53: control <= 2'b10;
        7'd54: control <= 2'b10;
        7'd55: control <= 2'b10;
        7'd56: control <= 2'b10;
        7'd57: control <= 2'b10;
        7'd58: control <= 2'b10;
        7'd59: control <= 2'b10;
        7'd60: control <= 2'b10;
        7'd61: control <= 2'b10;
        7'd62: control <= 2'b10;
        7'd63: control <= 2'b10;
        7'd64: control <= 2'b01;
        7'd65: control <= 2'b01;
        7'd66: control <= 2'b01;
        7'd67: control <= 2'b01;
        7'd68: control <= 2'b01;
        7'd69: control <= 2'b01;
        7'd70: control <= 2'b01;
        7'd71: control <= 2'b01;
        7'd72: control <= 2'b01;
        7'd73: control <= 2'b01;
        7'd74: control <= 2'b01;
        7'd75: control <= 2'b01;
        7'd76: control <= 2'b01;
        7'd77: control <= 2'b01;
        7'd78: control <= 2'b01;
        7'd79: control <= 2'b01;
        7'd80: control <= 2'b01;
        7'd81: control <= 2'b01;
        7'd82: control <= 2'b01;
        7'd83: control <= 2'b01;
        7'd84: control <= 2'b01;
        7'd85: control <= 2'b01;
        7'd86: control <= 2'b01;
        7'd87: control <= 2'b01;
        7'd88: control <= 2'b01;
        7'd89: control <= 2'b01;
        7'd90: control <= 2'b01;
        7'd91: control <= 2'b01;
        7'd92: control <= 2'b01;
        7'd93: control <= 2'b01;
        7'd94: control <= 2'b01;
        7'd95: control <= 2'b01;
        7'd96: control <= 2'b01;
        7'd97: control <= 2'b01;
        7'd98: control <= 2'b01;
        7'd99: control <= 2'b01;
        7'd100: control <= 2'b01;
        7'd101: control <= 2'b01;
        7'd102: control <= 2'b01;
        7'd103: control <= 2'b01;
        7'd104: control <= 2'b01;
        7'd105: control <= 2'b01;
        7'd106: control <= 2'b01;
        7'd107: control <= 2'b01;
        7'd108: control <= 2'b01;
        7'd109: control <= 2'b01;
        7'd110: control <= 2'b01;
        7'd111: control <= 2'b01;
        7'd112: control <= 2'b01;
        7'd113: control <= 2'b01;
        7'd114: control <= 2'b01;
        7'd115: control <= 2'b01;
        7'd116: control <= 2'b01;
        7'd117: control <= 2'b01;
        7'd118: control <= 2'b01;
        7'd119: control <= 2'b01;
        7'd120: control <= 2'b01;
        7'd121: control <= 2'b01;
        7'd122: control <= 2'b01;
        7'd123: control <= 2'b01;
        7'd124: control <= 2'b01;
        7'd125: control <= 2'b01;
        7'd126: control <= 2'b01;
        7'd127: control <= 2'b01;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [1:0] control0;
   reg [1:0] control1;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
    end
    assign t0_0 = x0;
    assign t0_1 = x2;
    assign t0_2 = x1;
    assign t0_3 = x3;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_3;
     assign t1_3 = t0_2;
    assign t2_0 = t1_0;
    assign t2_1 = t1_2;
    assign t2_2 = t1_1;
    assign t2_3 = t1_3;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_3;
         t3_3 <= t2_2;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_2;
    assign t4_2 = t3_1;
    assign t4_3 = t3_3;
   always @(posedge clk) begin
         t5_0 <= (control1[1] == 0) ? t4_0 : t4_1;
         t5_1 <= (control1[1] == 0) ? t4_1 : t4_0;
         t5_2 <= (control1[0] == 0) ? t4_2 : t4_3;
         t5_3 <= (control1[0] == 0) ? t4_3 : t4_2;
   end
    always @(posedge clk) begin
        y0 <= t5_0;
        y1 <= t5_2;
        y2 <= t5_1;
        y3 <= t5_3;
    end
endmodule

// Latency: 261
// Gap: 128
module perm23412(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3);
   parameter width = 40;

   parameter depth = 128;

   parameter addrbits = 7;

   parameter muxbits = 2;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm37;
   assign tm37 = 0;

shiftRegFIFO #(4, 1) shiftFIFO_25465(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_25466(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);

nextReg #(127, 7) nextReg_25477(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_25478(.X(next2), .Y(next3), .clk(clk));
nextReg #(128, 7) nextReg_25481(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_25482(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(127, 1) shiftFIFO_25485(.X(tm37), .Y(tm37_d), .clk(clk));
shiftRegFIFO #(4, 1) shiftFIFO_25488(.X(tm37_d), .Y(tm37_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(4, 7) shiftFIFO_25493(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(5, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm37_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd0 <= 1;
	     {1'd0,  7'd1}: s1rd0 <= 3;
	     {1'd0,  7'd2}: s1rd0 <= 5;
	     {1'd0,  7'd3}: s1rd0 <= 7;
	     {1'd0,  7'd4}: s1rd0 <= 9;
	     {1'd0,  7'd5}: s1rd0 <= 11;
	     {1'd0,  7'd6}: s1rd0 <= 13;
	     {1'd0,  7'd7}: s1rd0 <= 15;
	     {1'd0,  7'd8}: s1rd0 <= 17;
	     {1'd0,  7'd9}: s1rd0 <= 19;
	     {1'd0,  7'd10}: s1rd0 <= 21;
	     {1'd0,  7'd11}: s1rd0 <= 23;
	     {1'd0,  7'd12}: s1rd0 <= 25;
	     {1'd0,  7'd13}: s1rd0 <= 27;
	     {1'd0,  7'd14}: s1rd0 <= 29;
	     {1'd0,  7'd15}: s1rd0 <= 31;
	     {1'd0,  7'd16}: s1rd0 <= 33;
	     {1'd0,  7'd17}: s1rd0 <= 35;
	     {1'd0,  7'd18}: s1rd0 <= 37;
	     {1'd0,  7'd19}: s1rd0 <= 39;
	     {1'd0,  7'd20}: s1rd0 <= 41;
	     {1'd0,  7'd21}: s1rd0 <= 43;
	     {1'd0,  7'd22}: s1rd0 <= 45;
	     {1'd0,  7'd23}: s1rd0 <= 47;
	     {1'd0,  7'd24}: s1rd0 <= 49;
	     {1'd0,  7'd25}: s1rd0 <= 51;
	     {1'd0,  7'd26}: s1rd0 <= 53;
	     {1'd0,  7'd27}: s1rd0 <= 55;
	     {1'd0,  7'd28}: s1rd0 <= 57;
	     {1'd0,  7'd29}: s1rd0 <= 59;
	     {1'd0,  7'd30}: s1rd0 <= 61;
	     {1'd0,  7'd31}: s1rd0 <= 63;
	     {1'd0,  7'd32}: s1rd0 <= 65;
	     {1'd0,  7'd33}: s1rd0 <= 67;
	     {1'd0,  7'd34}: s1rd0 <= 69;
	     {1'd0,  7'd35}: s1rd0 <= 71;
	     {1'd0,  7'd36}: s1rd0 <= 73;
	     {1'd0,  7'd37}: s1rd0 <= 75;
	     {1'd0,  7'd38}: s1rd0 <= 77;
	     {1'd0,  7'd39}: s1rd0 <= 79;
	     {1'd0,  7'd40}: s1rd0 <= 81;
	     {1'd0,  7'd41}: s1rd0 <= 83;
	     {1'd0,  7'd42}: s1rd0 <= 85;
	     {1'd0,  7'd43}: s1rd0 <= 87;
	     {1'd0,  7'd44}: s1rd0 <= 89;
	     {1'd0,  7'd45}: s1rd0 <= 91;
	     {1'd0,  7'd46}: s1rd0 <= 93;
	     {1'd0,  7'd47}: s1rd0 <= 95;
	     {1'd0,  7'd48}: s1rd0 <= 97;
	     {1'd0,  7'd49}: s1rd0 <= 99;
	     {1'd0,  7'd50}: s1rd0 <= 101;
	     {1'd0,  7'd51}: s1rd0 <= 103;
	     {1'd0,  7'd52}: s1rd0 <= 105;
	     {1'd0,  7'd53}: s1rd0 <= 107;
	     {1'd0,  7'd54}: s1rd0 <= 109;
	     {1'd0,  7'd55}: s1rd0 <= 111;
	     {1'd0,  7'd56}: s1rd0 <= 113;
	     {1'd0,  7'd57}: s1rd0 <= 115;
	     {1'd0,  7'd58}: s1rd0 <= 117;
	     {1'd0,  7'd59}: s1rd0 <= 119;
	     {1'd0,  7'd60}: s1rd0 <= 121;
	     {1'd0,  7'd61}: s1rd0 <= 123;
	     {1'd0,  7'd62}: s1rd0 <= 125;
	     {1'd0,  7'd63}: s1rd0 <= 127;
	     {1'd0,  7'd64}: s1rd0 <= 0;
	     {1'd0,  7'd65}: s1rd0 <= 2;
	     {1'd0,  7'd66}: s1rd0 <= 4;
	     {1'd0,  7'd67}: s1rd0 <= 6;
	     {1'd0,  7'd68}: s1rd0 <= 8;
	     {1'd0,  7'd69}: s1rd0 <= 10;
	     {1'd0,  7'd70}: s1rd0 <= 12;
	     {1'd0,  7'd71}: s1rd0 <= 14;
	     {1'd0,  7'd72}: s1rd0 <= 16;
	     {1'd0,  7'd73}: s1rd0 <= 18;
	     {1'd0,  7'd74}: s1rd0 <= 20;
	     {1'd0,  7'd75}: s1rd0 <= 22;
	     {1'd0,  7'd76}: s1rd0 <= 24;
	     {1'd0,  7'd77}: s1rd0 <= 26;
	     {1'd0,  7'd78}: s1rd0 <= 28;
	     {1'd0,  7'd79}: s1rd0 <= 30;
	     {1'd0,  7'd80}: s1rd0 <= 32;
	     {1'd0,  7'd81}: s1rd0 <= 34;
	     {1'd0,  7'd82}: s1rd0 <= 36;
	     {1'd0,  7'd83}: s1rd0 <= 38;
	     {1'd0,  7'd84}: s1rd0 <= 40;
	     {1'd0,  7'd85}: s1rd0 <= 42;
	     {1'd0,  7'd86}: s1rd0 <= 44;
	     {1'd0,  7'd87}: s1rd0 <= 46;
	     {1'd0,  7'd88}: s1rd0 <= 48;
	     {1'd0,  7'd89}: s1rd0 <= 50;
	     {1'd0,  7'd90}: s1rd0 <= 52;
	     {1'd0,  7'd91}: s1rd0 <= 54;
	     {1'd0,  7'd92}: s1rd0 <= 56;
	     {1'd0,  7'd93}: s1rd0 <= 58;
	     {1'd0,  7'd94}: s1rd0 <= 60;
	     {1'd0,  7'd95}: s1rd0 <= 62;
	     {1'd0,  7'd96}: s1rd0 <= 64;
	     {1'd0,  7'd97}: s1rd0 <= 66;
	     {1'd0,  7'd98}: s1rd0 <= 68;
	     {1'd0,  7'd99}: s1rd0 <= 70;
	     {1'd0,  7'd100}: s1rd0 <= 72;
	     {1'd0,  7'd101}: s1rd0 <= 74;
	     {1'd0,  7'd102}: s1rd0 <= 76;
	     {1'd0,  7'd103}: s1rd0 <= 78;
	     {1'd0,  7'd104}: s1rd0 <= 80;
	     {1'd0,  7'd105}: s1rd0 <= 82;
	     {1'd0,  7'd106}: s1rd0 <= 84;
	     {1'd0,  7'd107}: s1rd0 <= 86;
	     {1'd0,  7'd108}: s1rd0 <= 88;
	     {1'd0,  7'd109}: s1rd0 <= 90;
	     {1'd0,  7'd110}: s1rd0 <= 92;
	     {1'd0,  7'd111}: s1rd0 <= 94;
	     {1'd0,  7'd112}: s1rd0 <= 96;
	     {1'd0,  7'd113}: s1rd0 <= 98;
	     {1'd0,  7'd114}: s1rd0 <= 100;
	     {1'd0,  7'd115}: s1rd0 <= 102;
	     {1'd0,  7'd116}: s1rd0 <= 104;
	     {1'd0,  7'd117}: s1rd0 <= 106;
	     {1'd0,  7'd118}: s1rd0 <= 108;
	     {1'd0,  7'd119}: s1rd0 <= 110;
	     {1'd0,  7'd120}: s1rd0 <= 112;
	     {1'd0,  7'd121}: s1rd0 <= 114;
	     {1'd0,  7'd122}: s1rd0 <= 116;
	     {1'd0,  7'd123}: s1rd0 <= 118;
	     {1'd0,  7'd124}: s1rd0 <= 120;
	     {1'd0,  7'd125}: s1rd0 <= 122;
	     {1'd0,  7'd126}: s1rd0 <= 124;
	     {1'd0,  7'd127}: s1rd0 <= 126;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "distributed"
   always @(posedge clk) begin
      case({tm37_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd1 <= 0;
	     {1'd0,  7'd1}: s1rd1 <= 2;
	     {1'd0,  7'd2}: s1rd1 <= 4;
	     {1'd0,  7'd3}: s1rd1 <= 6;
	     {1'd0,  7'd4}: s1rd1 <= 8;
	     {1'd0,  7'd5}: s1rd1 <= 10;
	     {1'd0,  7'd6}: s1rd1 <= 12;
	     {1'd0,  7'd7}: s1rd1 <= 14;
	     {1'd0,  7'd8}: s1rd1 <= 16;
	     {1'd0,  7'd9}: s1rd1 <= 18;
	     {1'd0,  7'd10}: s1rd1 <= 20;
	     {1'd0,  7'd11}: s1rd1 <= 22;
	     {1'd0,  7'd12}: s1rd1 <= 24;
	     {1'd0,  7'd13}: s1rd1 <= 26;
	     {1'd0,  7'd14}: s1rd1 <= 28;
	     {1'd0,  7'd15}: s1rd1 <= 30;
	     {1'd0,  7'd16}: s1rd1 <= 32;
	     {1'd0,  7'd17}: s1rd1 <= 34;
	     {1'd0,  7'd18}: s1rd1 <= 36;
	     {1'd0,  7'd19}: s1rd1 <= 38;
	     {1'd0,  7'd20}: s1rd1 <= 40;
	     {1'd0,  7'd21}: s1rd1 <= 42;
	     {1'd0,  7'd22}: s1rd1 <= 44;
	     {1'd0,  7'd23}: s1rd1 <= 46;
	     {1'd0,  7'd24}: s1rd1 <= 48;
	     {1'd0,  7'd25}: s1rd1 <= 50;
	     {1'd0,  7'd26}: s1rd1 <= 52;
	     {1'd0,  7'd27}: s1rd1 <= 54;
	     {1'd0,  7'd28}: s1rd1 <= 56;
	     {1'd0,  7'd29}: s1rd1 <= 58;
	     {1'd0,  7'd30}: s1rd1 <= 60;
	     {1'd0,  7'd31}: s1rd1 <= 62;
	     {1'd0,  7'd32}: s1rd1 <= 64;
	     {1'd0,  7'd33}: s1rd1 <= 66;
	     {1'd0,  7'd34}: s1rd1 <= 68;
	     {1'd0,  7'd35}: s1rd1 <= 70;
	     {1'd0,  7'd36}: s1rd1 <= 72;
	     {1'd0,  7'd37}: s1rd1 <= 74;
	     {1'd0,  7'd38}: s1rd1 <= 76;
	     {1'd0,  7'd39}: s1rd1 <= 78;
	     {1'd0,  7'd40}: s1rd1 <= 80;
	     {1'd0,  7'd41}: s1rd1 <= 82;
	     {1'd0,  7'd42}: s1rd1 <= 84;
	     {1'd0,  7'd43}: s1rd1 <= 86;
	     {1'd0,  7'd44}: s1rd1 <= 88;
	     {1'd0,  7'd45}: s1rd1 <= 90;
	     {1'd0,  7'd46}: s1rd1 <= 92;
	     {1'd0,  7'd47}: s1rd1 <= 94;
	     {1'd0,  7'd48}: s1rd1 <= 96;
	     {1'd0,  7'd49}: s1rd1 <= 98;
	     {1'd0,  7'd50}: s1rd1 <= 100;
	     {1'd0,  7'd51}: s1rd1 <= 102;
	     {1'd0,  7'd52}: s1rd1 <= 104;
	     {1'd0,  7'd53}: s1rd1 <= 106;
	     {1'd0,  7'd54}: s1rd1 <= 108;
	     {1'd0,  7'd55}: s1rd1 <= 110;
	     {1'd0,  7'd56}: s1rd1 <= 112;
	     {1'd0,  7'd57}: s1rd1 <= 114;
	     {1'd0,  7'd58}: s1rd1 <= 116;
	     {1'd0,  7'd59}: s1rd1 <= 118;
	     {1'd0,  7'd60}: s1rd1 <= 120;
	     {1'd0,  7'd61}: s1rd1 <= 122;
	     {1'd0,  7'd62}: s1rd1 <= 124;
	     {1'd0,  7'd63}: s1rd1 <= 126;
	     {1'd0,  7'd64}: s1rd1 <= 1;
	     {1'd0,  7'd65}: s1rd1 <= 3;
	     {1'd0,  7'd66}: s1rd1 <= 5;
	     {1'd0,  7'd67}: s1rd1 <= 7;
	     {1'd0,  7'd68}: s1rd1 <= 9;
	     {1'd0,  7'd69}: s1rd1 <= 11;
	     {1'd0,  7'd70}: s1rd1 <= 13;
	     {1'd0,  7'd71}: s1rd1 <= 15;
	     {1'd0,  7'd72}: s1rd1 <= 17;
	     {1'd0,  7'd73}: s1rd1 <= 19;
	     {1'd0,  7'd74}: s1rd1 <= 21;
	     {1'd0,  7'd75}: s1rd1 <= 23;
	     {1'd0,  7'd76}: s1rd1 <= 25;
	     {1'd0,  7'd77}: s1rd1 <= 27;
	     {1'd0,  7'd78}: s1rd1 <= 29;
	     {1'd0,  7'd79}: s1rd1 <= 31;
	     {1'd0,  7'd80}: s1rd1 <= 33;
	     {1'd0,  7'd81}: s1rd1 <= 35;
	     {1'd0,  7'd82}: s1rd1 <= 37;
	     {1'd0,  7'd83}: s1rd1 <= 39;
	     {1'd0,  7'd84}: s1rd1 <= 41;
	     {1'd0,  7'd85}: s1rd1 <= 43;
	     {1'd0,  7'd86}: s1rd1 <= 45;
	     {1'd0,  7'd87}: s1rd1 <= 47;
	     {1'd0,  7'd88}: s1rd1 <= 49;
	     {1'd0,  7'd89}: s1rd1 <= 51;
	     {1'd0,  7'd90}: s1rd1 <= 53;
	     {1'd0,  7'd91}: s1rd1 <= 55;
	     {1'd0,  7'd92}: s1rd1 <= 57;
	     {1'd0,  7'd93}: s1rd1 <= 59;
	     {1'd0,  7'd94}: s1rd1 <= 61;
	     {1'd0,  7'd95}: s1rd1 <= 63;
	     {1'd0,  7'd96}: s1rd1 <= 65;
	     {1'd0,  7'd97}: s1rd1 <= 67;
	     {1'd0,  7'd98}: s1rd1 <= 69;
	     {1'd0,  7'd99}: s1rd1 <= 71;
	     {1'd0,  7'd100}: s1rd1 <= 73;
	     {1'd0,  7'd101}: s1rd1 <= 75;
	     {1'd0,  7'd102}: s1rd1 <= 77;
	     {1'd0,  7'd103}: s1rd1 <= 79;
	     {1'd0,  7'd104}: s1rd1 <= 81;
	     {1'd0,  7'd105}: s1rd1 <= 83;
	     {1'd0,  7'd106}: s1rd1 <= 85;
	     {1'd0,  7'd107}: s1rd1 <= 87;
	     {1'd0,  7'd108}: s1rd1 <= 89;
	     {1'd0,  7'd109}: s1rd1 <= 91;
	     {1'd0,  7'd110}: s1rd1 <= 93;
	     {1'd0,  7'd111}: s1rd1 <= 95;
	     {1'd0,  7'd112}: s1rd1 <= 97;
	     {1'd0,  7'd113}: s1rd1 <= 99;
	     {1'd0,  7'd114}: s1rd1 <= 101;
	     {1'd0,  7'd115}: s1rd1 <= 103;
	     {1'd0,  7'd116}: s1rd1 <= 105;
	     {1'd0,  7'd117}: s1rd1 <= 107;
	     {1'd0,  7'd118}: s1rd1 <= 109;
	     {1'd0,  7'd119}: s1rd1 <= 111;
	     {1'd0,  7'd120}: s1rd1 <= 113;
	     {1'd0,  7'd121}: s1rd1 <= 115;
	     {1'd0,  7'd122}: s1rd1 <= 117;
	     {1'd0,  7'd123}: s1rd1 <= 119;
	     {1'd0,  7'd124}: s1rd1 <= 121;
	     {1'd0,  7'd125}: s1rd1 <= 123;
	     {1'd0,  7'd126}: s1rd1 <= 125;
	     {1'd0,  7'd127}: s1rd1 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "distributed"
   always @(posedge clk) begin
      case({tm37_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd2 <= 1;
	     {1'd0,  7'd1}: s1rd2 <= 3;
	     {1'd0,  7'd2}: s1rd2 <= 5;
	     {1'd0,  7'd3}: s1rd2 <= 7;
	     {1'd0,  7'd4}: s1rd2 <= 9;
	     {1'd0,  7'd5}: s1rd2 <= 11;
	     {1'd0,  7'd6}: s1rd2 <= 13;
	     {1'd0,  7'd7}: s1rd2 <= 15;
	     {1'd0,  7'd8}: s1rd2 <= 17;
	     {1'd0,  7'd9}: s1rd2 <= 19;
	     {1'd0,  7'd10}: s1rd2 <= 21;
	     {1'd0,  7'd11}: s1rd2 <= 23;
	     {1'd0,  7'd12}: s1rd2 <= 25;
	     {1'd0,  7'd13}: s1rd2 <= 27;
	     {1'd0,  7'd14}: s1rd2 <= 29;
	     {1'd0,  7'd15}: s1rd2 <= 31;
	     {1'd0,  7'd16}: s1rd2 <= 33;
	     {1'd0,  7'd17}: s1rd2 <= 35;
	     {1'd0,  7'd18}: s1rd2 <= 37;
	     {1'd0,  7'd19}: s1rd2 <= 39;
	     {1'd0,  7'd20}: s1rd2 <= 41;
	     {1'd0,  7'd21}: s1rd2 <= 43;
	     {1'd0,  7'd22}: s1rd2 <= 45;
	     {1'd0,  7'd23}: s1rd2 <= 47;
	     {1'd0,  7'd24}: s1rd2 <= 49;
	     {1'd0,  7'd25}: s1rd2 <= 51;
	     {1'd0,  7'd26}: s1rd2 <= 53;
	     {1'd0,  7'd27}: s1rd2 <= 55;
	     {1'd0,  7'd28}: s1rd2 <= 57;
	     {1'd0,  7'd29}: s1rd2 <= 59;
	     {1'd0,  7'd30}: s1rd2 <= 61;
	     {1'd0,  7'd31}: s1rd2 <= 63;
	     {1'd0,  7'd32}: s1rd2 <= 65;
	     {1'd0,  7'd33}: s1rd2 <= 67;
	     {1'd0,  7'd34}: s1rd2 <= 69;
	     {1'd0,  7'd35}: s1rd2 <= 71;
	     {1'd0,  7'd36}: s1rd2 <= 73;
	     {1'd0,  7'd37}: s1rd2 <= 75;
	     {1'd0,  7'd38}: s1rd2 <= 77;
	     {1'd0,  7'd39}: s1rd2 <= 79;
	     {1'd0,  7'd40}: s1rd2 <= 81;
	     {1'd0,  7'd41}: s1rd2 <= 83;
	     {1'd0,  7'd42}: s1rd2 <= 85;
	     {1'd0,  7'd43}: s1rd2 <= 87;
	     {1'd0,  7'd44}: s1rd2 <= 89;
	     {1'd0,  7'd45}: s1rd2 <= 91;
	     {1'd0,  7'd46}: s1rd2 <= 93;
	     {1'd0,  7'd47}: s1rd2 <= 95;
	     {1'd0,  7'd48}: s1rd2 <= 97;
	     {1'd0,  7'd49}: s1rd2 <= 99;
	     {1'd0,  7'd50}: s1rd2 <= 101;
	     {1'd0,  7'd51}: s1rd2 <= 103;
	     {1'd0,  7'd52}: s1rd2 <= 105;
	     {1'd0,  7'd53}: s1rd2 <= 107;
	     {1'd0,  7'd54}: s1rd2 <= 109;
	     {1'd0,  7'd55}: s1rd2 <= 111;
	     {1'd0,  7'd56}: s1rd2 <= 113;
	     {1'd0,  7'd57}: s1rd2 <= 115;
	     {1'd0,  7'd58}: s1rd2 <= 117;
	     {1'd0,  7'd59}: s1rd2 <= 119;
	     {1'd0,  7'd60}: s1rd2 <= 121;
	     {1'd0,  7'd61}: s1rd2 <= 123;
	     {1'd0,  7'd62}: s1rd2 <= 125;
	     {1'd0,  7'd63}: s1rd2 <= 127;
	     {1'd0,  7'd64}: s1rd2 <= 0;
	     {1'd0,  7'd65}: s1rd2 <= 2;
	     {1'd0,  7'd66}: s1rd2 <= 4;
	     {1'd0,  7'd67}: s1rd2 <= 6;
	     {1'd0,  7'd68}: s1rd2 <= 8;
	     {1'd0,  7'd69}: s1rd2 <= 10;
	     {1'd0,  7'd70}: s1rd2 <= 12;
	     {1'd0,  7'd71}: s1rd2 <= 14;
	     {1'd0,  7'd72}: s1rd2 <= 16;
	     {1'd0,  7'd73}: s1rd2 <= 18;
	     {1'd0,  7'd74}: s1rd2 <= 20;
	     {1'd0,  7'd75}: s1rd2 <= 22;
	     {1'd0,  7'd76}: s1rd2 <= 24;
	     {1'd0,  7'd77}: s1rd2 <= 26;
	     {1'd0,  7'd78}: s1rd2 <= 28;
	     {1'd0,  7'd79}: s1rd2 <= 30;
	     {1'd0,  7'd80}: s1rd2 <= 32;
	     {1'd0,  7'd81}: s1rd2 <= 34;
	     {1'd0,  7'd82}: s1rd2 <= 36;
	     {1'd0,  7'd83}: s1rd2 <= 38;
	     {1'd0,  7'd84}: s1rd2 <= 40;
	     {1'd0,  7'd85}: s1rd2 <= 42;
	     {1'd0,  7'd86}: s1rd2 <= 44;
	     {1'd0,  7'd87}: s1rd2 <= 46;
	     {1'd0,  7'd88}: s1rd2 <= 48;
	     {1'd0,  7'd89}: s1rd2 <= 50;
	     {1'd0,  7'd90}: s1rd2 <= 52;
	     {1'd0,  7'd91}: s1rd2 <= 54;
	     {1'd0,  7'd92}: s1rd2 <= 56;
	     {1'd0,  7'd93}: s1rd2 <= 58;
	     {1'd0,  7'd94}: s1rd2 <= 60;
	     {1'd0,  7'd95}: s1rd2 <= 62;
	     {1'd0,  7'd96}: s1rd2 <= 64;
	     {1'd0,  7'd97}: s1rd2 <= 66;
	     {1'd0,  7'd98}: s1rd2 <= 68;
	     {1'd0,  7'd99}: s1rd2 <= 70;
	     {1'd0,  7'd100}: s1rd2 <= 72;
	     {1'd0,  7'd101}: s1rd2 <= 74;
	     {1'd0,  7'd102}: s1rd2 <= 76;
	     {1'd0,  7'd103}: s1rd2 <= 78;
	     {1'd0,  7'd104}: s1rd2 <= 80;
	     {1'd0,  7'd105}: s1rd2 <= 82;
	     {1'd0,  7'd106}: s1rd2 <= 84;
	     {1'd0,  7'd107}: s1rd2 <= 86;
	     {1'd0,  7'd108}: s1rd2 <= 88;
	     {1'd0,  7'd109}: s1rd2 <= 90;
	     {1'd0,  7'd110}: s1rd2 <= 92;
	     {1'd0,  7'd111}: s1rd2 <= 94;
	     {1'd0,  7'd112}: s1rd2 <= 96;
	     {1'd0,  7'd113}: s1rd2 <= 98;
	     {1'd0,  7'd114}: s1rd2 <= 100;
	     {1'd0,  7'd115}: s1rd2 <= 102;
	     {1'd0,  7'd116}: s1rd2 <= 104;
	     {1'd0,  7'd117}: s1rd2 <= 106;
	     {1'd0,  7'd118}: s1rd2 <= 108;
	     {1'd0,  7'd119}: s1rd2 <= 110;
	     {1'd0,  7'd120}: s1rd2 <= 112;
	     {1'd0,  7'd121}: s1rd2 <= 114;
	     {1'd0,  7'd122}: s1rd2 <= 116;
	     {1'd0,  7'd123}: s1rd2 <= 118;
	     {1'd0,  7'd124}: s1rd2 <= 120;
	     {1'd0,  7'd125}: s1rd2 <= 122;
	     {1'd0,  7'd126}: s1rd2 <= 124;
	     {1'd0,  7'd127}: s1rd2 <= 126;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "distributed"
   always @(posedge clk) begin
      case({tm37_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd3 <= 0;
	     {1'd0,  7'd1}: s1rd3 <= 2;
	     {1'd0,  7'd2}: s1rd3 <= 4;
	     {1'd0,  7'd3}: s1rd3 <= 6;
	     {1'd0,  7'd4}: s1rd3 <= 8;
	     {1'd0,  7'd5}: s1rd3 <= 10;
	     {1'd0,  7'd6}: s1rd3 <= 12;
	     {1'd0,  7'd7}: s1rd3 <= 14;
	     {1'd0,  7'd8}: s1rd3 <= 16;
	     {1'd0,  7'd9}: s1rd3 <= 18;
	     {1'd0,  7'd10}: s1rd3 <= 20;
	     {1'd0,  7'd11}: s1rd3 <= 22;
	     {1'd0,  7'd12}: s1rd3 <= 24;
	     {1'd0,  7'd13}: s1rd3 <= 26;
	     {1'd0,  7'd14}: s1rd3 <= 28;
	     {1'd0,  7'd15}: s1rd3 <= 30;
	     {1'd0,  7'd16}: s1rd3 <= 32;
	     {1'd0,  7'd17}: s1rd3 <= 34;
	     {1'd0,  7'd18}: s1rd3 <= 36;
	     {1'd0,  7'd19}: s1rd3 <= 38;
	     {1'd0,  7'd20}: s1rd3 <= 40;
	     {1'd0,  7'd21}: s1rd3 <= 42;
	     {1'd0,  7'd22}: s1rd3 <= 44;
	     {1'd0,  7'd23}: s1rd3 <= 46;
	     {1'd0,  7'd24}: s1rd3 <= 48;
	     {1'd0,  7'd25}: s1rd3 <= 50;
	     {1'd0,  7'd26}: s1rd3 <= 52;
	     {1'd0,  7'd27}: s1rd3 <= 54;
	     {1'd0,  7'd28}: s1rd3 <= 56;
	     {1'd0,  7'd29}: s1rd3 <= 58;
	     {1'd0,  7'd30}: s1rd3 <= 60;
	     {1'd0,  7'd31}: s1rd3 <= 62;
	     {1'd0,  7'd32}: s1rd3 <= 64;
	     {1'd0,  7'd33}: s1rd3 <= 66;
	     {1'd0,  7'd34}: s1rd3 <= 68;
	     {1'd0,  7'd35}: s1rd3 <= 70;
	     {1'd0,  7'd36}: s1rd3 <= 72;
	     {1'd0,  7'd37}: s1rd3 <= 74;
	     {1'd0,  7'd38}: s1rd3 <= 76;
	     {1'd0,  7'd39}: s1rd3 <= 78;
	     {1'd0,  7'd40}: s1rd3 <= 80;
	     {1'd0,  7'd41}: s1rd3 <= 82;
	     {1'd0,  7'd42}: s1rd3 <= 84;
	     {1'd0,  7'd43}: s1rd3 <= 86;
	     {1'd0,  7'd44}: s1rd3 <= 88;
	     {1'd0,  7'd45}: s1rd3 <= 90;
	     {1'd0,  7'd46}: s1rd3 <= 92;
	     {1'd0,  7'd47}: s1rd3 <= 94;
	     {1'd0,  7'd48}: s1rd3 <= 96;
	     {1'd0,  7'd49}: s1rd3 <= 98;
	     {1'd0,  7'd50}: s1rd3 <= 100;
	     {1'd0,  7'd51}: s1rd3 <= 102;
	     {1'd0,  7'd52}: s1rd3 <= 104;
	     {1'd0,  7'd53}: s1rd3 <= 106;
	     {1'd0,  7'd54}: s1rd3 <= 108;
	     {1'd0,  7'd55}: s1rd3 <= 110;
	     {1'd0,  7'd56}: s1rd3 <= 112;
	     {1'd0,  7'd57}: s1rd3 <= 114;
	     {1'd0,  7'd58}: s1rd3 <= 116;
	     {1'd0,  7'd59}: s1rd3 <= 118;
	     {1'd0,  7'd60}: s1rd3 <= 120;
	     {1'd0,  7'd61}: s1rd3 <= 122;
	     {1'd0,  7'd62}: s1rd3 <= 124;
	     {1'd0,  7'd63}: s1rd3 <= 126;
	     {1'd0,  7'd64}: s1rd3 <= 1;
	     {1'd0,  7'd65}: s1rd3 <= 3;
	     {1'd0,  7'd66}: s1rd3 <= 5;
	     {1'd0,  7'd67}: s1rd3 <= 7;
	     {1'd0,  7'd68}: s1rd3 <= 9;
	     {1'd0,  7'd69}: s1rd3 <= 11;
	     {1'd0,  7'd70}: s1rd3 <= 13;
	     {1'd0,  7'd71}: s1rd3 <= 15;
	     {1'd0,  7'd72}: s1rd3 <= 17;
	     {1'd0,  7'd73}: s1rd3 <= 19;
	     {1'd0,  7'd74}: s1rd3 <= 21;
	     {1'd0,  7'd75}: s1rd3 <= 23;
	     {1'd0,  7'd76}: s1rd3 <= 25;
	     {1'd0,  7'd77}: s1rd3 <= 27;
	     {1'd0,  7'd78}: s1rd3 <= 29;
	     {1'd0,  7'd79}: s1rd3 <= 31;
	     {1'd0,  7'd80}: s1rd3 <= 33;
	     {1'd0,  7'd81}: s1rd3 <= 35;
	     {1'd0,  7'd82}: s1rd3 <= 37;
	     {1'd0,  7'd83}: s1rd3 <= 39;
	     {1'd0,  7'd84}: s1rd3 <= 41;
	     {1'd0,  7'd85}: s1rd3 <= 43;
	     {1'd0,  7'd86}: s1rd3 <= 45;
	     {1'd0,  7'd87}: s1rd3 <= 47;
	     {1'd0,  7'd88}: s1rd3 <= 49;
	     {1'd0,  7'd89}: s1rd3 <= 51;
	     {1'd0,  7'd90}: s1rd3 <= 53;
	     {1'd0,  7'd91}: s1rd3 <= 55;
	     {1'd0,  7'd92}: s1rd3 <= 57;
	     {1'd0,  7'd93}: s1rd3 <= 59;
	     {1'd0,  7'd94}: s1rd3 <= 61;
	     {1'd0,  7'd95}: s1rd3 <= 63;
	     {1'd0,  7'd96}: s1rd3 <= 65;
	     {1'd0,  7'd97}: s1rd3 <= 67;
	     {1'd0,  7'd98}: s1rd3 <= 69;
	     {1'd0,  7'd99}: s1rd3 <= 71;
	     {1'd0,  7'd100}: s1rd3 <= 73;
	     {1'd0,  7'd101}: s1rd3 <= 75;
	     {1'd0,  7'd102}: s1rd3 <= 77;
	     {1'd0,  7'd103}: s1rd3 <= 79;
	     {1'd0,  7'd104}: s1rd3 <= 81;
	     {1'd0,  7'd105}: s1rd3 <= 83;
	     {1'd0,  7'd106}: s1rd3 <= 85;
	     {1'd0,  7'd107}: s1rd3 <= 87;
	     {1'd0,  7'd108}: s1rd3 <= 89;
	     {1'd0,  7'd109}: s1rd3 <= 91;
	     {1'd0,  7'd110}: s1rd3 <= 93;
	     {1'd0,  7'd111}: s1rd3 <= 95;
	     {1'd0,  7'd112}: s1rd3 <= 97;
	     {1'd0,  7'd113}: s1rd3 <= 99;
	     {1'd0,  7'd114}: s1rd3 <= 101;
	     {1'd0,  7'd115}: s1rd3 <= 103;
	     {1'd0,  7'd116}: s1rd3 <= 105;
	     {1'd0,  7'd117}: s1rd3 <= 107;
	     {1'd0,  7'd118}: s1rd3 <= 109;
	     {1'd0,  7'd119}: s1rd3 <= 111;
	     {1'd0,  7'd120}: s1rd3 <= 113;
	     {1'd0,  7'd121}: s1rd3 <= 115;
	     {1'd0,  7'd122}: s1rd3 <= 117;
	     {1'd0,  7'd123}: s1rd3 <= 119;
	     {1'd0,  7'd124}: s1rd3 <= 121;
	     {1'd0,  7'd125}: s1rd3 <= 123;
	     {1'd0,  7'd126}: s1rd3 <= 125;
	     {1'd0,  7'd127}: s1rd3 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "distributed"
    swNet23412 sw(tm37_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3);

   always @(posedge clk) begin
      case({tm37_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr0 <= 64;
	      {1'd0, 7'd1}: s2wr0 <= 65;
	      {1'd0, 7'd2}: s2wr0 <= 66;
	      {1'd0, 7'd3}: s2wr0 <= 67;
	      {1'd0, 7'd4}: s2wr0 <= 68;
	      {1'd0, 7'd5}: s2wr0 <= 69;
	      {1'd0, 7'd6}: s2wr0 <= 70;
	      {1'd0, 7'd7}: s2wr0 <= 71;
	      {1'd0, 7'd8}: s2wr0 <= 72;
	      {1'd0, 7'd9}: s2wr0 <= 73;
	      {1'd0, 7'd10}: s2wr0 <= 74;
	      {1'd0, 7'd11}: s2wr0 <= 75;
	      {1'd0, 7'd12}: s2wr0 <= 76;
	      {1'd0, 7'd13}: s2wr0 <= 77;
	      {1'd0, 7'd14}: s2wr0 <= 78;
	      {1'd0, 7'd15}: s2wr0 <= 79;
	      {1'd0, 7'd16}: s2wr0 <= 80;
	      {1'd0, 7'd17}: s2wr0 <= 81;
	      {1'd0, 7'd18}: s2wr0 <= 82;
	      {1'd0, 7'd19}: s2wr0 <= 83;
	      {1'd0, 7'd20}: s2wr0 <= 84;
	      {1'd0, 7'd21}: s2wr0 <= 85;
	      {1'd0, 7'd22}: s2wr0 <= 86;
	      {1'd0, 7'd23}: s2wr0 <= 87;
	      {1'd0, 7'd24}: s2wr0 <= 88;
	      {1'd0, 7'd25}: s2wr0 <= 89;
	      {1'd0, 7'd26}: s2wr0 <= 90;
	      {1'd0, 7'd27}: s2wr0 <= 91;
	      {1'd0, 7'd28}: s2wr0 <= 92;
	      {1'd0, 7'd29}: s2wr0 <= 93;
	      {1'd0, 7'd30}: s2wr0 <= 94;
	      {1'd0, 7'd31}: s2wr0 <= 95;
	      {1'd0, 7'd32}: s2wr0 <= 96;
	      {1'd0, 7'd33}: s2wr0 <= 97;
	      {1'd0, 7'd34}: s2wr0 <= 98;
	      {1'd0, 7'd35}: s2wr0 <= 99;
	      {1'd0, 7'd36}: s2wr0 <= 100;
	      {1'd0, 7'd37}: s2wr0 <= 101;
	      {1'd0, 7'd38}: s2wr0 <= 102;
	      {1'd0, 7'd39}: s2wr0 <= 103;
	      {1'd0, 7'd40}: s2wr0 <= 104;
	      {1'd0, 7'd41}: s2wr0 <= 105;
	      {1'd0, 7'd42}: s2wr0 <= 106;
	      {1'd0, 7'd43}: s2wr0 <= 107;
	      {1'd0, 7'd44}: s2wr0 <= 108;
	      {1'd0, 7'd45}: s2wr0 <= 109;
	      {1'd0, 7'd46}: s2wr0 <= 110;
	      {1'd0, 7'd47}: s2wr0 <= 111;
	      {1'd0, 7'd48}: s2wr0 <= 112;
	      {1'd0, 7'd49}: s2wr0 <= 113;
	      {1'd0, 7'd50}: s2wr0 <= 114;
	      {1'd0, 7'd51}: s2wr0 <= 115;
	      {1'd0, 7'd52}: s2wr0 <= 116;
	      {1'd0, 7'd53}: s2wr0 <= 117;
	      {1'd0, 7'd54}: s2wr0 <= 118;
	      {1'd0, 7'd55}: s2wr0 <= 119;
	      {1'd0, 7'd56}: s2wr0 <= 120;
	      {1'd0, 7'd57}: s2wr0 <= 121;
	      {1'd0, 7'd58}: s2wr0 <= 122;
	      {1'd0, 7'd59}: s2wr0 <= 123;
	      {1'd0, 7'd60}: s2wr0 <= 124;
	      {1'd0, 7'd61}: s2wr0 <= 125;
	      {1'd0, 7'd62}: s2wr0 <= 126;
	      {1'd0, 7'd63}: s2wr0 <= 127;
	      {1'd0, 7'd64}: s2wr0 <= 0;
	      {1'd0, 7'd65}: s2wr0 <= 1;
	      {1'd0, 7'd66}: s2wr0 <= 2;
	      {1'd0, 7'd67}: s2wr0 <= 3;
	      {1'd0, 7'd68}: s2wr0 <= 4;
	      {1'd0, 7'd69}: s2wr0 <= 5;
	      {1'd0, 7'd70}: s2wr0 <= 6;
	      {1'd0, 7'd71}: s2wr0 <= 7;
	      {1'd0, 7'd72}: s2wr0 <= 8;
	      {1'd0, 7'd73}: s2wr0 <= 9;
	      {1'd0, 7'd74}: s2wr0 <= 10;
	      {1'd0, 7'd75}: s2wr0 <= 11;
	      {1'd0, 7'd76}: s2wr0 <= 12;
	      {1'd0, 7'd77}: s2wr0 <= 13;
	      {1'd0, 7'd78}: s2wr0 <= 14;
	      {1'd0, 7'd79}: s2wr0 <= 15;
	      {1'd0, 7'd80}: s2wr0 <= 16;
	      {1'd0, 7'd81}: s2wr0 <= 17;
	      {1'd0, 7'd82}: s2wr0 <= 18;
	      {1'd0, 7'd83}: s2wr0 <= 19;
	      {1'd0, 7'd84}: s2wr0 <= 20;
	      {1'd0, 7'd85}: s2wr0 <= 21;
	      {1'd0, 7'd86}: s2wr0 <= 22;
	      {1'd0, 7'd87}: s2wr0 <= 23;
	      {1'd0, 7'd88}: s2wr0 <= 24;
	      {1'd0, 7'd89}: s2wr0 <= 25;
	      {1'd0, 7'd90}: s2wr0 <= 26;
	      {1'd0, 7'd91}: s2wr0 <= 27;
	      {1'd0, 7'd92}: s2wr0 <= 28;
	      {1'd0, 7'd93}: s2wr0 <= 29;
	      {1'd0, 7'd94}: s2wr0 <= 30;
	      {1'd0, 7'd95}: s2wr0 <= 31;
	      {1'd0, 7'd96}: s2wr0 <= 32;
	      {1'd0, 7'd97}: s2wr0 <= 33;
	      {1'd0, 7'd98}: s2wr0 <= 34;
	      {1'd0, 7'd99}: s2wr0 <= 35;
	      {1'd0, 7'd100}: s2wr0 <= 36;
	      {1'd0, 7'd101}: s2wr0 <= 37;
	      {1'd0, 7'd102}: s2wr0 <= 38;
	      {1'd0, 7'd103}: s2wr0 <= 39;
	      {1'd0, 7'd104}: s2wr0 <= 40;
	      {1'd0, 7'd105}: s2wr0 <= 41;
	      {1'd0, 7'd106}: s2wr0 <= 42;
	      {1'd0, 7'd107}: s2wr0 <= 43;
	      {1'd0, 7'd108}: s2wr0 <= 44;
	      {1'd0, 7'd109}: s2wr0 <= 45;
	      {1'd0, 7'd110}: s2wr0 <= 46;
	      {1'd0, 7'd111}: s2wr0 <= 47;
	      {1'd0, 7'd112}: s2wr0 <= 48;
	      {1'd0, 7'd113}: s2wr0 <= 49;
	      {1'd0, 7'd114}: s2wr0 <= 50;
	      {1'd0, 7'd115}: s2wr0 <= 51;
	      {1'd0, 7'd116}: s2wr0 <= 52;
	      {1'd0, 7'd117}: s2wr0 <= 53;
	      {1'd0, 7'd118}: s2wr0 <= 54;
	      {1'd0, 7'd119}: s2wr0 <= 55;
	      {1'd0, 7'd120}: s2wr0 <= 56;
	      {1'd0, 7'd121}: s2wr0 <= 57;
	      {1'd0, 7'd122}: s2wr0 <= 58;
	      {1'd0, 7'd123}: s2wr0 <= 59;
	      {1'd0, 7'd124}: s2wr0 <= 60;
	      {1'd0, 7'd125}: s2wr0 <= 61;
	      {1'd0, 7'd126}: s2wr0 <= 62;
	      {1'd0, 7'd127}: s2wr0 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "distributed"
   always @(posedge clk) begin
      case({tm37_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr1 <= 64;
	      {1'd0, 7'd1}: s2wr1 <= 65;
	      {1'd0, 7'd2}: s2wr1 <= 66;
	      {1'd0, 7'd3}: s2wr1 <= 67;
	      {1'd0, 7'd4}: s2wr1 <= 68;
	      {1'd0, 7'd5}: s2wr1 <= 69;
	      {1'd0, 7'd6}: s2wr1 <= 70;
	      {1'd0, 7'd7}: s2wr1 <= 71;
	      {1'd0, 7'd8}: s2wr1 <= 72;
	      {1'd0, 7'd9}: s2wr1 <= 73;
	      {1'd0, 7'd10}: s2wr1 <= 74;
	      {1'd0, 7'd11}: s2wr1 <= 75;
	      {1'd0, 7'd12}: s2wr1 <= 76;
	      {1'd0, 7'd13}: s2wr1 <= 77;
	      {1'd0, 7'd14}: s2wr1 <= 78;
	      {1'd0, 7'd15}: s2wr1 <= 79;
	      {1'd0, 7'd16}: s2wr1 <= 80;
	      {1'd0, 7'd17}: s2wr1 <= 81;
	      {1'd0, 7'd18}: s2wr1 <= 82;
	      {1'd0, 7'd19}: s2wr1 <= 83;
	      {1'd0, 7'd20}: s2wr1 <= 84;
	      {1'd0, 7'd21}: s2wr1 <= 85;
	      {1'd0, 7'd22}: s2wr1 <= 86;
	      {1'd0, 7'd23}: s2wr1 <= 87;
	      {1'd0, 7'd24}: s2wr1 <= 88;
	      {1'd0, 7'd25}: s2wr1 <= 89;
	      {1'd0, 7'd26}: s2wr1 <= 90;
	      {1'd0, 7'd27}: s2wr1 <= 91;
	      {1'd0, 7'd28}: s2wr1 <= 92;
	      {1'd0, 7'd29}: s2wr1 <= 93;
	      {1'd0, 7'd30}: s2wr1 <= 94;
	      {1'd0, 7'd31}: s2wr1 <= 95;
	      {1'd0, 7'd32}: s2wr1 <= 96;
	      {1'd0, 7'd33}: s2wr1 <= 97;
	      {1'd0, 7'd34}: s2wr1 <= 98;
	      {1'd0, 7'd35}: s2wr1 <= 99;
	      {1'd0, 7'd36}: s2wr1 <= 100;
	      {1'd0, 7'd37}: s2wr1 <= 101;
	      {1'd0, 7'd38}: s2wr1 <= 102;
	      {1'd0, 7'd39}: s2wr1 <= 103;
	      {1'd0, 7'd40}: s2wr1 <= 104;
	      {1'd0, 7'd41}: s2wr1 <= 105;
	      {1'd0, 7'd42}: s2wr1 <= 106;
	      {1'd0, 7'd43}: s2wr1 <= 107;
	      {1'd0, 7'd44}: s2wr1 <= 108;
	      {1'd0, 7'd45}: s2wr1 <= 109;
	      {1'd0, 7'd46}: s2wr1 <= 110;
	      {1'd0, 7'd47}: s2wr1 <= 111;
	      {1'd0, 7'd48}: s2wr1 <= 112;
	      {1'd0, 7'd49}: s2wr1 <= 113;
	      {1'd0, 7'd50}: s2wr1 <= 114;
	      {1'd0, 7'd51}: s2wr1 <= 115;
	      {1'd0, 7'd52}: s2wr1 <= 116;
	      {1'd0, 7'd53}: s2wr1 <= 117;
	      {1'd0, 7'd54}: s2wr1 <= 118;
	      {1'd0, 7'd55}: s2wr1 <= 119;
	      {1'd0, 7'd56}: s2wr1 <= 120;
	      {1'd0, 7'd57}: s2wr1 <= 121;
	      {1'd0, 7'd58}: s2wr1 <= 122;
	      {1'd0, 7'd59}: s2wr1 <= 123;
	      {1'd0, 7'd60}: s2wr1 <= 124;
	      {1'd0, 7'd61}: s2wr1 <= 125;
	      {1'd0, 7'd62}: s2wr1 <= 126;
	      {1'd0, 7'd63}: s2wr1 <= 127;
	      {1'd0, 7'd64}: s2wr1 <= 0;
	      {1'd0, 7'd65}: s2wr1 <= 1;
	      {1'd0, 7'd66}: s2wr1 <= 2;
	      {1'd0, 7'd67}: s2wr1 <= 3;
	      {1'd0, 7'd68}: s2wr1 <= 4;
	      {1'd0, 7'd69}: s2wr1 <= 5;
	      {1'd0, 7'd70}: s2wr1 <= 6;
	      {1'd0, 7'd71}: s2wr1 <= 7;
	      {1'd0, 7'd72}: s2wr1 <= 8;
	      {1'd0, 7'd73}: s2wr1 <= 9;
	      {1'd0, 7'd74}: s2wr1 <= 10;
	      {1'd0, 7'd75}: s2wr1 <= 11;
	      {1'd0, 7'd76}: s2wr1 <= 12;
	      {1'd0, 7'd77}: s2wr1 <= 13;
	      {1'd0, 7'd78}: s2wr1 <= 14;
	      {1'd0, 7'd79}: s2wr1 <= 15;
	      {1'd0, 7'd80}: s2wr1 <= 16;
	      {1'd0, 7'd81}: s2wr1 <= 17;
	      {1'd0, 7'd82}: s2wr1 <= 18;
	      {1'd0, 7'd83}: s2wr1 <= 19;
	      {1'd0, 7'd84}: s2wr1 <= 20;
	      {1'd0, 7'd85}: s2wr1 <= 21;
	      {1'd0, 7'd86}: s2wr1 <= 22;
	      {1'd0, 7'd87}: s2wr1 <= 23;
	      {1'd0, 7'd88}: s2wr1 <= 24;
	      {1'd0, 7'd89}: s2wr1 <= 25;
	      {1'd0, 7'd90}: s2wr1 <= 26;
	      {1'd0, 7'd91}: s2wr1 <= 27;
	      {1'd0, 7'd92}: s2wr1 <= 28;
	      {1'd0, 7'd93}: s2wr1 <= 29;
	      {1'd0, 7'd94}: s2wr1 <= 30;
	      {1'd0, 7'd95}: s2wr1 <= 31;
	      {1'd0, 7'd96}: s2wr1 <= 32;
	      {1'd0, 7'd97}: s2wr1 <= 33;
	      {1'd0, 7'd98}: s2wr1 <= 34;
	      {1'd0, 7'd99}: s2wr1 <= 35;
	      {1'd0, 7'd100}: s2wr1 <= 36;
	      {1'd0, 7'd101}: s2wr1 <= 37;
	      {1'd0, 7'd102}: s2wr1 <= 38;
	      {1'd0, 7'd103}: s2wr1 <= 39;
	      {1'd0, 7'd104}: s2wr1 <= 40;
	      {1'd0, 7'd105}: s2wr1 <= 41;
	      {1'd0, 7'd106}: s2wr1 <= 42;
	      {1'd0, 7'd107}: s2wr1 <= 43;
	      {1'd0, 7'd108}: s2wr1 <= 44;
	      {1'd0, 7'd109}: s2wr1 <= 45;
	      {1'd0, 7'd110}: s2wr1 <= 46;
	      {1'd0, 7'd111}: s2wr1 <= 47;
	      {1'd0, 7'd112}: s2wr1 <= 48;
	      {1'd0, 7'd113}: s2wr1 <= 49;
	      {1'd0, 7'd114}: s2wr1 <= 50;
	      {1'd0, 7'd115}: s2wr1 <= 51;
	      {1'd0, 7'd116}: s2wr1 <= 52;
	      {1'd0, 7'd117}: s2wr1 <= 53;
	      {1'd0, 7'd118}: s2wr1 <= 54;
	      {1'd0, 7'd119}: s2wr1 <= 55;
	      {1'd0, 7'd120}: s2wr1 <= 56;
	      {1'd0, 7'd121}: s2wr1 <= 57;
	      {1'd0, 7'd122}: s2wr1 <= 58;
	      {1'd0, 7'd123}: s2wr1 <= 59;
	      {1'd0, 7'd124}: s2wr1 <= 60;
	      {1'd0, 7'd125}: s2wr1 <= 61;
	      {1'd0, 7'd126}: s2wr1 <= 62;
	      {1'd0, 7'd127}: s2wr1 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "distributed"
   always @(posedge clk) begin
      case({tm37_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr2 <= 0;
	      {1'd0, 7'd1}: s2wr2 <= 1;
	      {1'd0, 7'd2}: s2wr2 <= 2;
	      {1'd0, 7'd3}: s2wr2 <= 3;
	      {1'd0, 7'd4}: s2wr2 <= 4;
	      {1'd0, 7'd5}: s2wr2 <= 5;
	      {1'd0, 7'd6}: s2wr2 <= 6;
	      {1'd0, 7'd7}: s2wr2 <= 7;
	      {1'd0, 7'd8}: s2wr2 <= 8;
	      {1'd0, 7'd9}: s2wr2 <= 9;
	      {1'd0, 7'd10}: s2wr2 <= 10;
	      {1'd0, 7'd11}: s2wr2 <= 11;
	      {1'd0, 7'd12}: s2wr2 <= 12;
	      {1'd0, 7'd13}: s2wr2 <= 13;
	      {1'd0, 7'd14}: s2wr2 <= 14;
	      {1'd0, 7'd15}: s2wr2 <= 15;
	      {1'd0, 7'd16}: s2wr2 <= 16;
	      {1'd0, 7'd17}: s2wr2 <= 17;
	      {1'd0, 7'd18}: s2wr2 <= 18;
	      {1'd0, 7'd19}: s2wr2 <= 19;
	      {1'd0, 7'd20}: s2wr2 <= 20;
	      {1'd0, 7'd21}: s2wr2 <= 21;
	      {1'd0, 7'd22}: s2wr2 <= 22;
	      {1'd0, 7'd23}: s2wr2 <= 23;
	      {1'd0, 7'd24}: s2wr2 <= 24;
	      {1'd0, 7'd25}: s2wr2 <= 25;
	      {1'd0, 7'd26}: s2wr2 <= 26;
	      {1'd0, 7'd27}: s2wr2 <= 27;
	      {1'd0, 7'd28}: s2wr2 <= 28;
	      {1'd0, 7'd29}: s2wr2 <= 29;
	      {1'd0, 7'd30}: s2wr2 <= 30;
	      {1'd0, 7'd31}: s2wr2 <= 31;
	      {1'd0, 7'd32}: s2wr2 <= 32;
	      {1'd0, 7'd33}: s2wr2 <= 33;
	      {1'd0, 7'd34}: s2wr2 <= 34;
	      {1'd0, 7'd35}: s2wr2 <= 35;
	      {1'd0, 7'd36}: s2wr2 <= 36;
	      {1'd0, 7'd37}: s2wr2 <= 37;
	      {1'd0, 7'd38}: s2wr2 <= 38;
	      {1'd0, 7'd39}: s2wr2 <= 39;
	      {1'd0, 7'd40}: s2wr2 <= 40;
	      {1'd0, 7'd41}: s2wr2 <= 41;
	      {1'd0, 7'd42}: s2wr2 <= 42;
	      {1'd0, 7'd43}: s2wr2 <= 43;
	      {1'd0, 7'd44}: s2wr2 <= 44;
	      {1'd0, 7'd45}: s2wr2 <= 45;
	      {1'd0, 7'd46}: s2wr2 <= 46;
	      {1'd0, 7'd47}: s2wr2 <= 47;
	      {1'd0, 7'd48}: s2wr2 <= 48;
	      {1'd0, 7'd49}: s2wr2 <= 49;
	      {1'd0, 7'd50}: s2wr2 <= 50;
	      {1'd0, 7'd51}: s2wr2 <= 51;
	      {1'd0, 7'd52}: s2wr2 <= 52;
	      {1'd0, 7'd53}: s2wr2 <= 53;
	      {1'd0, 7'd54}: s2wr2 <= 54;
	      {1'd0, 7'd55}: s2wr2 <= 55;
	      {1'd0, 7'd56}: s2wr2 <= 56;
	      {1'd0, 7'd57}: s2wr2 <= 57;
	      {1'd0, 7'd58}: s2wr2 <= 58;
	      {1'd0, 7'd59}: s2wr2 <= 59;
	      {1'd0, 7'd60}: s2wr2 <= 60;
	      {1'd0, 7'd61}: s2wr2 <= 61;
	      {1'd0, 7'd62}: s2wr2 <= 62;
	      {1'd0, 7'd63}: s2wr2 <= 63;
	      {1'd0, 7'd64}: s2wr2 <= 64;
	      {1'd0, 7'd65}: s2wr2 <= 65;
	      {1'd0, 7'd66}: s2wr2 <= 66;
	      {1'd0, 7'd67}: s2wr2 <= 67;
	      {1'd0, 7'd68}: s2wr2 <= 68;
	      {1'd0, 7'd69}: s2wr2 <= 69;
	      {1'd0, 7'd70}: s2wr2 <= 70;
	      {1'd0, 7'd71}: s2wr2 <= 71;
	      {1'd0, 7'd72}: s2wr2 <= 72;
	      {1'd0, 7'd73}: s2wr2 <= 73;
	      {1'd0, 7'd74}: s2wr2 <= 74;
	      {1'd0, 7'd75}: s2wr2 <= 75;
	      {1'd0, 7'd76}: s2wr2 <= 76;
	      {1'd0, 7'd77}: s2wr2 <= 77;
	      {1'd0, 7'd78}: s2wr2 <= 78;
	      {1'd0, 7'd79}: s2wr2 <= 79;
	      {1'd0, 7'd80}: s2wr2 <= 80;
	      {1'd0, 7'd81}: s2wr2 <= 81;
	      {1'd0, 7'd82}: s2wr2 <= 82;
	      {1'd0, 7'd83}: s2wr2 <= 83;
	      {1'd0, 7'd84}: s2wr2 <= 84;
	      {1'd0, 7'd85}: s2wr2 <= 85;
	      {1'd0, 7'd86}: s2wr2 <= 86;
	      {1'd0, 7'd87}: s2wr2 <= 87;
	      {1'd0, 7'd88}: s2wr2 <= 88;
	      {1'd0, 7'd89}: s2wr2 <= 89;
	      {1'd0, 7'd90}: s2wr2 <= 90;
	      {1'd0, 7'd91}: s2wr2 <= 91;
	      {1'd0, 7'd92}: s2wr2 <= 92;
	      {1'd0, 7'd93}: s2wr2 <= 93;
	      {1'd0, 7'd94}: s2wr2 <= 94;
	      {1'd0, 7'd95}: s2wr2 <= 95;
	      {1'd0, 7'd96}: s2wr2 <= 96;
	      {1'd0, 7'd97}: s2wr2 <= 97;
	      {1'd0, 7'd98}: s2wr2 <= 98;
	      {1'd0, 7'd99}: s2wr2 <= 99;
	      {1'd0, 7'd100}: s2wr2 <= 100;
	      {1'd0, 7'd101}: s2wr2 <= 101;
	      {1'd0, 7'd102}: s2wr2 <= 102;
	      {1'd0, 7'd103}: s2wr2 <= 103;
	      {1'd0, 7'd104}: s2wr2 <= 104;
	      {1'd0, 7'd105}: s2wr2 <= 105;
	      {1'd0, 7'd106}: s2wr2 <= 106;
	      {1'd0, 7'd107}: s2wr2 <= 107;
	      {1'd0, 7'd108}: s2wr2 <= 108;
	      {1'd0, 7'd109}: s2wr2 <= 109;
	      {1'd0, 7'd110}: s2wr2 <= 110;
	      {1'd0, 7'd111}: s2wr2 <= 111;
	      {1'd0, 7'd112}: s2wr2 <= 112;
	      {1'd0, 7'd113}: s2wr2 <= 113;
	      {1'd0, 7'd114}: s2wr2 <= 114;
	      {1'd0, 7'd115}: s2wr2 <= 115;
	      {1'd0, 7'd116}: s2wr2 <= 116;
	      {1'd0, 7'd117}: s2wr2 <= 117;
	      {1'd0, 7'd118}: s2wr2 <= 118;
	      {1'd0, 7'd119}: s2wr2 <= 119;
	      {1'd0, 7'd120}: s2wr2 <= 120;
	      {1'd0, 7'd121}: s2wr2 <= 121;
	      {1'd0, 7'd122}: s2wr2 <= 122;
	      {1'd0, 7'd123}: s2wr2 <= 123;
	      {1'd0, 7'd124}: s2wr2 <= 124;
	      {1'd0, 7'd125}: s2wr2 <= 125;
	      {1'd0, 7'd126}: s2wr2 <= 126;
	      {1'd0, 7'd127}: s2wr2 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "distributed"
   always @(posedge clk) begin
      case({tm37_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr3 <= 0;
	      {1'd0, 7'd1}: s2wr3 <= 1;
	      {1'd0, 7'd2}: s2wr3 <= 2;
	      {1'd0, 7'd3}: s2wr3 <= 3;
	      {1'd0, 7'd4}: s2wr3 <= 4;
	      {1'd0, 7'd5}: s2wr3 <= 5;
	      {1'd0, 7'd6}: s2wr3 <= 6;
	      {1'd0, 7'd7}: s2wr3 <= 7;
	      {1'd0, 7'd8}: s2wr3 <= 8;
	      {1'd0, 7'd9}: s2wr3 <= 9;
	      {1'd0, 7'd10}: s2wr3 <= 10;
	      {1'd0, 7'd11}: s2wr3 <= 11;
	      {1'd0, 7'd12}: s2wr3 <= 12;
	      {1'd0, 7'd13}: s2wr3 <= 13;
	      {1'd0, 7'd14}: s2wr3 <= 14;
	      {1'd0, 7'd15}: s2wr3 <= 15;
	      {1'd0, 7'd16}: s2wr3 <= 16;
	      {1'd0, 7'd17}: s2wr3 <= 17;
	      {1'd0, 7'd18}: s2wr3 <= 18;
	      {1'd0, 7'd19}: s2wr3 <= 19;
	      {1'd0, 7'd20}: s2wr3 <= 20;
	      {1'd0, 7'd21}: s2wr3 <= 21;
	      {1'd0, 7'd22}: s2wr3 <= 22;
	      {1'd0, 7'd23}: s2wr3 <= 23;
	      {1'd0, 7'd24}: s2wr3 <= 24;
	      {1'd0, 7'd25}: s2wr3 <= 25;
	      {1'd0, 7'd26}: s2wr3 <= 26;
	      {1'd0, 7'd27}: s2wr3 <= 27;
	      {1'd0, 7'd28}: s2wr3 <= 28;
	      {1'd0, 7'd29}: s2wr3 <= 29;
	      {1'd0, 7'd30}: s2wr3 <= 30;
	      {1'd0, 7'd31}: s2wr3 <= 31;
	      {1'd0, 7'd32}: s2wr3 <= 32;
	      {1'd0, 7'd33}: s2wr3 <= 33;
	      {1'd0, 7'd34}: s2wr3 <= 34;
	      {1'd0, 7'd35}: s2wr3 <= 35;
	      {1'd0, 7'd36}: s2wr3 <= 36;
	      {1'd0, 7'd37}: s2wr3 <= 37;
	      {1'd0, 7'd38}: s2wr3 <= 38;
	      {1'd0, 7'd39}: s2wr3 <= 39;
	      {1'd0, 7'd40}: s2wr3 <= 40;
	      {1'd0, 7'd41}: s2wr3 <= 41;
	      {1'd0, 7'd42}: s2wr3 <= 42;
	      {1'd0, 7'd43}: s2wr3 <= 43;
	      {1'd0, 7'd44}: s2wr3 <= 44;
	      {1'd0, 7'd45}: s2wr3 <= 45;
	      {1'd0, 7'd46}: s2wr3 <= 46;
	      {1'd0, 7'd47}: s2wr3 <= 47;
	      {1'd0, 7'd48}: s2wr3 <= 48;
	      {1'd0, 7'd49}: s2wr3 <= 49;
	      {1'd0, 7'd50}: s2wr3 <= 50;
	      {1'd0, 7'd51}: s2wr3 <= 51;
	      {1'd0, 7'd52}: s2wr3 <= 52;
	      {1'd0, 7'd53}: s2wr3 <= 53;
	      {1'd0, 7'd54}: s2wr3 <= 54;
	      {1'd0, 7'd55}: s2wr3 <= 55;
	      {1'd0, 7'd56}: s2wr3 <= 56;
	      {1'd0, 7'd57}: s2wr3 <= 57;
	      {1'd0, 7'd58}: s2wr3 <= 58;
	      {1'd0, 7'd59}: s2wr3 <= 59;
	      {1'd0, 7'd60}: s2wr3 <= 60;
	      {1'd0, 7'd61}: s2wr3 <= 61;
	      {1'd0, 7'd62}: s2wr3 <= 62;
	      {1'd0, 7'd63}: s2wr3 <= 63;
	      {1'd0, 7'd64}: s2wr3 <= 64;
	      {1'd0, 7'd65}: s2wr3 <= 65;
	      {1'd0, 7'd66}: s2wr3 <= 66;
	      {1'd0, 7'd67}: s2wr3 <= 67;
	      {1'd0, 7'd68}: s2wr3 <= 68;
	      {1'd0, 7'd69}: s2wr3 <= 69;
	      {1'd0, 7'd70}: s2wr3 <= 70;
	      {1'd0, 7'd71}: s2wr3 <= 71;
	      {1'd0, 7'd72}: s2wr3 <= 72;
	      {1'd0, 7'd73}: s2wr3 <= 73;
	      {1'd0, 7'd74}: s2wr3 <= 74;
	      {1'd0, 7'd75}: s2wr3 <= 75;
	      {1'd0, 7'd76}: s2wr3 <= 76;
	      {1'd0, 7'd77}: s2wr3 <= 77;
	      {1'd0, 7'd78}: s2wr3 <= 78;
	      {1'd0, 7'd79}: s2wr3 <= 79;
	      {1'd0, 7'd80}: s2wr3 <= 80;
	      {1'd0, 7'd81}: s2wr3 <= 81;
	      {1'd0, 7'd82}: s2wr3 <= 82;
	      {1'd0, 7'd83}: s2wr3 <= 83;
	      {1'd0, 7'd84}: s2wr3 <= 84;
	      {1'd0, 7'd85}: s2wr3 <= 85;
	      {1'd0, 7'd86}: s2wr3 <= 86;
	      {1'd0, 7'd87}: s2wr3 <= 87;
	      {1'd0, 7'd88}: s2wr3 <= 88;
	      {1'd0, 7'd89}: s2wr3 <= 89;
	      {1'd0, 7'd90}: s2wr3 <= 90;
	      {1'd0, 7'd91}: s2wr3 <= 91;
	      {1'd0, 7'd92}: s2wr3 <= 92;
	      {1'd0, 7'd93}: s2wr3 <= 93;
	      {1'd0, 7'd94}: s2wr3 <= 94;
	      {1'd0, 7'd95}: s2wr3 <= 95;
	      {1'd0, 7'd96}: s2wr3 <= 96;
	      {1'd0, 7'd97}: s2wr3 <= 97;
	      {1'd0, 7'd98}: s2wr3 <= 98;
	      {1'd0, 7'd99}: s2wr3 <= 99;
	      {1'd0, 7'd100}: s2wr3 <= 100;
	      {1'd0, 7'd101}: s2wr3 <= 101;
	      {1'd0, 7'd102}: s2wr3 <= 102;
	      {1'd0, 7'd103}: s2wr3 <= 103;
	      {1'd0, 7'd104}: s2wr3 <= 104;
	      {1'd0, 7'd105}: s2wr3 <= 105;
	      {1'd0, 7'd106}: s2wr3 <= 106;
	      {1'd0, 7'd107}: s2wr3 <= 107;
	      {1'd0, 7'd108}: s2wr3 <= 108;
	      {1'd0, 7'd109}: s2wr3 <= 109;
	      {1'd0, 7'd110}: s2wr3 <= 110;
	      {1'd0, 7'd111}: s2wr3 <= 111;
	      {1'd0, 7'd112}: s2wr3 <= 112;
	      {1'd0, 7'd113}: s2wr3 <= 113;
	      {1'd0, 7'd114}: s2wr3 <= 114;
	      {1'd0, 7'd115}: s2wr3 <= 115;
	      {1'd0, 7'd116}: s2wr3 <= 116;
	      {1'd0, 7'd117}: s2wr3 <= 117;
	      {1'd0, 7'd118}: s2wr3 <= 118;
	      {1'd0, 7'd119}: s2wr3 <= 119;
	      {1'd0, 7'd120}: s2wr3 <= 120;
	      {1'd0, 7'd121}: s2wr3 <= 121;
	      {1'd0, 7'd122}: s2wr3 <= 122;
	      {1'd0, 7'd123}: s2wr3 <= 123;
	      {1'd0, 7'd124}: s2wr3 <= 124;
	      {1'd0, 7'd125}: s2wr3 <= 125;
	      {1'd0, 7'd126}: s2wr3 <= 126;
	      {1'd0, 7'd127}: s2wr3 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "distributed"
endmodule



						module multfix(clk, rst, a, b, q_sc, q_unsc);
						   parameter WIDTH=35, CYCLES=6;

						   input signed [WIDTH-1:0]    a,b;
						   output [WIDTH-1:0]          q_sc;
						   output [WIDTH-1:0]              q_unsc;

						   input                       clk, rst;
						   
						   reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
						   wire signed [2*WIDTH-1:0]   res;   
						   integer                     i;

						   assign                      res = q[CYCLES-1];   
						   
						   assign                      q_unsc = res[WIDTH-1:0];
						   assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
						      
						   always @(posedge clk) begin
						      q[0] <= a * b;
						      for (i = 1; i < CYCLES; i=i+1) begin
						         q[i] <= q[i-1];
						      end
						   end
						                  
						endmodule 
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule
