<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>IOF Library: cinf.hpp Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
    <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<h1>cinf.hpp</h1><a href="cinf_8hpp.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#ifndef IOF_CINF_H</span>
<a name="l00002"></a>00002 <span class="preprocessor"></span><span class="preprocessor">#define IOF_CINF_H</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span>
<a name="l00016"></a>00016 <span class="preprocessor">#include "<a class="code" href="scans_8hpp.html">iof/scans.hpp</a>"</span>
<a name="l00017"></a>00017 
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="keyword">namespace </span>iof 
<a name="l00020"></a>00020 {
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> TT&gt; 
<a name="l00023"></a>00023 <span class="keyword">inline</span>
<a name="l00024"></a>00024 <span class="keywordtype">bool</span> cinf(TT&amp; msg)
<a name="l00025"></a>00025 {
<a name="l00026"></a>00026     <span class="keywordflow">return</span> scans(std::cin, msg);
<a name="l00027"></a>00027 }
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1&gt;
<a name="l00031"></a>00031 <span class="keyword">inline</span>
<a name="l00032"></a>00032 <span class="keywordtype">bool</span> cinf(<span class="keyword">const</span> <span class="keywordtype">char</span>* fmt, T1&amp; obj)
<a name="l00033"></a>00033 {
<a name="l00034"></a>00034     <span class="keywordflow">return</span> scans(std::cin, fmt, obj);
<a name="l00035"></a>00035 }
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;
<a name="l00039"></a>00039 <span class="keyword">inline</span>
<a name="l00040"></a>00040 <span class="keywordtype">bool</span> cinf(<span class="keyword">const</span> <span class="keywordtype">char</span>* fmt, T1&amp; obj1, T2&amp; obj2)
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042     <span class="keywordflow">return</span> scans(std::cin, fmt, obj1, obj2);
<a name="l00043"></a>00043 }
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;
<a name="l00047"></a>00047 <span class="keyword">inline</span>
<a name="l00048"></a>00048 <span class="keywordtype">bool</span> cinf(<span class="keyword">const</span> <span class="keywordtype">char</span>* fmt,
<a name="l00049"></a>00049 T1&amp; obj1, T2&amp; obj2, T3&amp; obj3)
<a name="l00050"></a>00050 {
<a name="l00051"></a>00051     <span class="keywordflow">return</span> scans(std::cin, fmt, obj1, obj2, obj3);
<a name="l00052"></a>00052 }
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3, <span class="keyword">typename</span> T4&gt;
<a name="l00056"></a>00056 <span class="keyword">inline</span>
<a name="l00057"></a>00057 <span class="keywordtype">bool</span> cinf(<span class="keyword">const</span> <span class="keywordtype">char</span>* fmt,
<a name="l00058"></a>00058 T1&amp; obj1, T2&amp; obj2, T3&amp; obj3, T4&amp; obj4)
<a name="l00059"></a>00059 {
<a name="l00060"></a>00060     <span class="keywordflow">return</span> scans(std::cin, fmt, obj1, obj2, obj3, obj4);
<a name="l00061"></a>00061 }
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3, <span class="keyword">typename</span> T4, <span class="keyword">typename</span> T5&gt;
<a name="l00065"></a>00065 <span class="keyword">inline</span>
<a name="l00066"></a>00066 <span class="keywordtype">bool</span> cinf(<span class="keyword">const</span> <span class="keywordtype">char</span>* fmt, T1&amp; obj1, T2&amp; obj2,
<a name="l00067"></a>00067 T3&amp; obj3, T4&amp; obj4, T5&amp; obj5)
<a name="l00068"></a>00068 {
<a name="l00069"></a>00069     <span class="keywordflow">return</span> scans(std::cin, fmt, obj1, obj2, obj3, obj4, obj5);
<a name="l00070"></a>00070 }
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3, <span class="keyword">typename</span> T4, <span class="keyword">typename</span> T5,
<a name="l00074"></a>00074     <span class="keyword">typename</span> T6&gt;
<a name="l00075"></a>00075 <span class="keyword">inline</span>
<a name="l00076"></a>00076 <span class="keywordtype">bool</span> cinf(<span class="keyword">const</span> <span class="keywordtype">char</span>* fmt, T1&amp; obj1, T2&amp; obj2,
<a name="l00077"></a>00077 T3&amp; obj3, T4&amp; obj4, T5&amp; obj5, T6&amp; obj6)
<a name="l00078"></a>00078 {
<a name="l00079"></a>00079     <span class="keywordflow">return</span> scans(std::cin, fmt, obj1, obj2, obj3, obj4, obj5, obj6);
<a name="l00080"></a>00080 }
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3, <span class="keyword">typename</span> T4, <span class="keyword">typename</span> T5,
<a name="l00084"></a>00084     <span class="keyword">typename</span> T6, <span class="keyword">typename</span> T7&gt;
<a name="l00085"></a>00085 <span class="keyword">inline</span>
<a name="l00086"></a>00086 <span class="keywordtype">bool</span> cinf(<span class="keyword">const</span> <span class="keywordtype">char</span>* fmt, T1&amp; obj1, T2&amp; obj2,
<a name="l00087"></a>00087 T3&amp; obj3, T4&amp; obj4, T5&amp; obj5, T6&amp; obj6, T7&amp; obj7)
<a name="l00088"></a>00088 {
<a name="l00089"></a>00089     <span class="keywordflow">return</span> scans(std::cin, fmt, obj1, obj2, obj3, obj4, obj5, obj6, obj7);
<a name="l00090"></a>00090 }
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3, <span class="keyword">typename</span> T4, <span class="keyword">typename</span> T5,
<a name="l00094"></a>00094     <span class="keyword">typename</span> T6, <span class="keyword">typename</span> T7, <span class="keyword">typename</span> T8&gt;
<a name="l00095"></a>00095 <span class="keyword">inline</span>
<a name="l00096"></a>00096 <span class="keywordtype">bool</span> cinf(<span class="keyword">const</span> <span class="keywordtype">char</span>* fmt, T1&amp; obj1, T2&amp; obj2,
<a name="l00097"></a>00097 T3&amp; obj3, T4&amp; obj4, T5&amp; obj5, T6&amp; obj6, T7&amp; obj7, 
<a name="l00098"></a>00098 T8&amp; obj8)
<a name="l00099"></a>00099 {
<a name="l00100"></a>00100     <span class="keywordflow">return</span> scans(std::cin, fmt, obj1, obj2, obj3, obj4, obj5, obj6, obj7, obj8);
<a name="l00101"></a>00101 }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3, <span class="keyword">typename</span> T4, <span class="keyword">typename</span> T5,
<a name="l00105"></a>00105     <span class="keyword">typename</span> T6, <span class="keyword">typename</span> T7, <span class="keyword">typename</span> T8, <span class="keyword">typename</span> T9&gt;
<a name="l00106"></a>00106 <span class="keyword">inline</span>
<a name="l00107"></a>00107 <span class="keywordtype">bool</span> cinf(<span class="keyword">const</span> <span class="keywordtype">char</span>* fmt, T1&amp; obj1, T2&amp; obj2,
<a name="l00108"></a>00108 T3&amp; obj3, T4&amp; obj4, T5&amp; obj5, T6&amp; obj6, T7&amp; obj7, 
<a name="l00109"></a>00109 T8&amp; obj8, T9&amp; obj9)
<a name="l00110"></a>00110 {
<a name="l00111"></a>00111     <span class="keywordflow">return</span> scans(std::cin, fmt, obj1, obj2, obj3, obj4, obj5, obj6, obj7, obj8, obj9);
<a name="l00112"></a>00112 }
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 
<a name="l00115"></a>00115 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3, <span class="keyword">typename</span> T4, <span class="keyword">typename</span> T5,
<a name="l00116"></a>00116     <span class="keyword">typename</span> T6, <span class="keyword">typename</span> T7, <span class="keyword">typename</span> T8, <span class="keyword">typename</span> T9, <span class="keyword">typename</span> T10&gt;
<a name="l00117"></a>00117 <span class="keyword">inline</span>
<a name="l00118"></a>00118 <span class="keywordtype">bool</span> cinf(<span class="keyword">const</span> <span class="keywordtype">char</span>* fmt, T1&amp; obj1, T2&amp; obj2,
<a name="l00119"></a>00119 T3&amp; obj3, T4&amp; obj4, T5&amp; obj5, T6&amp; obj6, T7&amp; obj7, 
<a name="l00120"></a>00120 T8&amp; obj8, T9&amp; obj9, T10&amp; obj10)
<a name="l00121"></a>00121 {
<a name="l00122"></a>00122     <span class="keywordflow">return</span> scans(std::cin, fmt, obj1, obj2, obj3, obj4, obj5, obj6, obj7, obj8, obj9, obj10);
<a name="l00123"></a>00123 }
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 } <span class="comment">// namespace iof</span>
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 <span class="preprocessor">#endif // IOF_CINF_H</span>
<a name="l00128"></a>00128 <span class="preprocessor"></span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Sun Oct 15 23:55:35 2006 for IOF Library by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
