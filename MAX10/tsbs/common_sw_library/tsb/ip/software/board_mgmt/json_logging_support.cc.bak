/*
 * json_logging_support.cc
 *
 *  Created on: Sep 13, 2013
 *      Author: yairlinn
 */

#include "board_management.h"
#include "basedef.h"

#ifdef USE_CAJUN_FOR_JSON
		#include "../json/reader.h"
		#include "../json/writer.h"
		#include "../json/elements.h"
#else
        #include "rabbit.hpp"
#endif
#include "cpp_utils.h"
#include <string>
#include <iostream>
#include <sstream>
#include "fmc.h"

#define MAX(a,b) ((b > a) ? b : a)

json_object tPM::get_json_object() {
	json_object jo;
	jo["pg_2v5"] = 	json::Number(pg_2v5);
	jo["pg_1v8"] = 	json::Number(pg_1v8);
	jo["pg_1v5"] = 	json::Number(pg_1v5);
	jo["pg_1v2"] = 	json::Number(pg_1v2);
	jo["pg_1v1"] = 	json::Number(pg_1v1);
	jo["pg_0v9"] = 	json::Number(pg_0v9);
	for (int i = 0; i < NUM_FMC_CARDS; i++) {
		std::ostringstream ostr;
		ostr << "vadj_" << i;
		jo[ostr.str()] = v_adj[i].get_json_object();
	}

	jo["v_3v3"] = v_3v3.get_json_object();

	return jo;
}

std::string tPM::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}

json_object tZL9101::get_json_object() {
	json_object jo;
	std::string condensed_devid = remove_nonalphanumeric(std::string(device_id,16));
	jo["device_id"     ]   =      json::String(condensed_devid);
	jo["pwr_good"      ]   =      json::Number((double) pwr_good       );
	jo["internal_temp" ]   =      json::Number((double) internal_temp  );
	jo["v_in"          ]   =      json::Number((double) v_in           );
	jo["v_out"         ]   =      json::Number((double) v_out          );
	jo["v_out_set"     ]   =      json::Number((double) v_out_set      );
	jo["i_out"         ]   =      json::Number((double) i_out          );
	jo["status"        ]   =      json::Number((double) status         );
	jo["stat_vout"	   ]   =      json::Number((double) stat_vout	  );
	jo["stat_iout"	   ]   =      json::Number((double) stat_iout	  );
	jo["stat_input"	   ]   =      json::Number((double) stat_input	  );
	jo["stat_mfr"	   ]   =      json::Number((double) stat_mfr	      );
	jo["stat_cml"	   ]   =      json::Number((double) stat_cml	      );
	jo["stat_temp" 	   ]   =      json::Number((double) stat_temp 	  );

	return jo;
}

std::string tZL9101::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}

json_object tFlash::get_json_object() {
	json_object jo;
	jo["name"     ]      =     (name == "") ?  std::string("Undefined") : name;
	jo["num_regions"      ]   =      num_regions;

	return jo;
}

std::string tFlash::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}
json_object tSpartan::get_json_object() {
	json_object jo;
	jo["flash_idx" ]   = json::Number(flash_idx      );
	jo["offset"    ]   = json::Number(offset       );
	jo["spi_base"  ]   = json::Number(spi_base       );
	jo["info"] = info.get_json_object();

	return jo;
}

std::string tSpartan::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}

json_object tSpartanInfo::get_json_object() {
	json_object jo;
	jo["filename"]        = (filename == NULL) ? json::String(std::string("Undefined")): json::String(std::string(filename));
	jo["partname"]        = (partname == NULL) ?json::String(std::string("Undefined")): json::String(std::string(partname));
	jo["board_id" ]       = json::Number(board_id);
	jo["datetime"    ]    = json::Number(datetime);
	jo["length"  ]        = json::Number(length);
	return jo;
}

std::string tSpartanInfo::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}

json_object tPFL_Page::get_json_object() {
	json_object jo;
	jo["valid_n" ]     = json::Number(valid_n);
	jo["start"    ]    = json::Number(start);
	jo["end"    ]      = json::Number(end);

	return jo;
}

std::string tPFL::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}
json_object tPFL::get_json_object() {
	json_object jo;
	json_array ja;
	jo["pof_version" ]  = json::Number(pof_version);
	for (int i = 0; i < PFL_NUM_PAGES; i++) {
	   ja.push_back(page_addr[i].get_json_object());
	}
	jo["page_addr"    ]   = ja;

	return jo;
}

std::string tPFL_Page::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}

json_object tTemp::get_json_object() {
	json_object jo;
	jo["board_temp" ]       = json::Number(board_temp);
	jo["strat_temp"    ]    = json::Number(strat_temp);

	return jo;
}

std::string tTemp::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}

json_object tBoard::get_json_object() {
	json_object jo;
	json_array ja;

	for (int i = 0; i < NUM_SPARTANS; i++) {
		   ja.push_back(spartan[i].get_json_object());
	}
	jo["spartan"]       = ja;

	json_array ja2;

	for (int i = 0; i < NUM_FLASH_DEVICES; i++) {
	    ja2.push_back(flash[i].get_json_object());
	}
	jo["flash"]    = ja;


   // for (int i = 0; i < NUM_FMC_CARDS; i++) {
   //     ja.Insert(fmc[i].get_json_object());
   // }
   // jo["fmc"] = ja;
   // ja.Clear();


	jo["pfl"] = pfl.get_json_object();

	jo["pm"] = pm.get_json_object();


	jo["temp"] = temp.get_json_object();
	jo["user_dip"] = json::Number(user_dip);


	return jo;
}

std::string tBoard::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}


json_object tIPMI_FMC_BASE::get_json_object() {
	json_object jo;
	jo["subtype"      ]  = json::Number(subtype);
	jo["version"      ]  = json::Number(version);
	jo["module_size"  ]  = json::Number(module_size);
	jo["p1_conn_size" ]  = json::Number(p1_conn_size);
	jo["p2_conn_size" ]  = json::Number(p2_conn_size);
	jo["p1_bank_a_num_sig"  ]  = json::Number(p1_bank_a_num_sig);
	jo["p1_bank_b_num_sig"  ]  = json::Number(p1_bank_b_num_sig);
	jo["p2_bank_a_num_sig"  ]  = json::Number(p2_bank_a_num_sig);
	jo["p2_bank_b_num_sig"  ]  = json::Number(p2_bank_b_num_sig);
	jo["p1_gbt_num_sig"  ]  = json::Number(p1_gbt_num_sig);
	jo["p2_gbt_num_sig"  ]  = json::Number(p2_gbt_num_sig);
	jo["max_clock_for_tck"  ]  = json::Number(max_clock_for_tck);

	return jo;

}

std::string tIPMI_FMC_BASE::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}

json_object tMIC2080::get_json_object() {
	json_object jo;
	jo["manufacturer_id"      ]  = json::Number(manufacturer_id);
	jo["die_revision"      ]  = json::Number(die_revision);
	jo["local_temp"  ]  = json::Number(local_temp);
	jo["local_temp_low_limit" ]  = json::Number(local_temp_low_limit);
	jo["local_temp_high_limit" ]  = json::Number(local_temp_high_limit);
	jo["local_temp_crit_limit"  ]  = json::Number(local_temp_crit_limit);
	jo["remote_temp"  ]  = json::Number(remote_temp);
	jo["remote_temp_low_limit"  ]  = json::Number(remote_temp_low_limit);
	jo["remote_temp_high_limit"  ]  = json::Number(remote_temp_high_limit);
	jo["remote_temp_crit_limit"  ]  = json::Number(remote_temp_crit_limit);


	return jo;

}

std::string tMIC2080::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}

json_object tFMCInfo::get_json_object() {
	json_object jo;
	jo["base"      ]  = base.get_json_object();
	jo["board_info"      ]  = board_info.get_json_object();
	jo["p1_vadj"  ]  = p1_vadj.get_json_object();

	return jo;

}

std::string tFMCInfo::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}

json_object tIPMI_TypeLength::get_json_object() {
	json_object jo;
	jo["type_code"      ]  = (type_code);
	jo["num_bytes"      ]  = (num_bytes);

	return jo;

}

std::string tIPMI_TypeLength::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}

json_object tIPMI_CommonHeader::get_json_object() {
	json_object jo;
	jo["version"      ]  = (version);
	jo["IUA_Offset"      ]  = (IUA_Offset);
	jo["CIA_Offset"      ]  = (CIA_Offset);
	jo["BIA_Offset"      ]  = (BIA_Offset);
	jo["PIA_Offset"      ]  = (PIA_Offset);
	jo["MRA_Offset"      ]  = (MRA_Offset);

	return jo;

}

std::string tIPMI_CommonHeader::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}

json_object tIPMI_CIA::get_json_object() {
	json_object jo;
	jo["version"      ]  = (version);
	jo["length"      ]  = (length);
	jo["type"      ]  = (type);
	jo["part_num"      ]  = part_num.get_json_object();
	jo["part_num_bytes" ] = (part_num_bytes == "") ?  ("Undefined") : (part_num_bytes);
	jo["serial_num"      ]  = serial_num.get_json_object();
	jo["serial_num_bytes" ] = (serial_num_bytes == "") ?  ("Undefined") : (serial_num_bytes);

	return jo;

}

std::string tIPMI_CIA::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}
json_object tIPMI_BIA::get_json_object() {
	json_object jo;
	jo["version"      ]  = (version);
	jo["length"      ]  = (length);
	jo["mfg_datetime"      ]  = (mfg_datetime);
	jo["manufacturer"      ]  = manufacturer.get_json_object();
	jo["manufacturer_bytes" ] = (manufacturer_bytes == "") ?  ("Undefined") : (manufacturer_bytes);
	jo["product"      ]  = product.get_json_object();
	jo["product_bytes" ] = (product_bytes == "") ?  ("Undefined") : (product_bytes);
    jo["serial_num"      ]  = serial_num.get_json_object();
	jo["serial_num_bytes" ] = (serial_num_bytes == "") ?  ("Undefined") :  (serial_num_bytes);
    jo["part_num"      ]  = part_num.get_json_object();
	jo["part_num_bytes" ] = (part_num_bytes == "") ?  ("Undefined") : (part_num_bytes);
    jo["FRU_File_Id"      ]  = FRU_File_Id.get_json_object();
	jo["FRU_File_Id_bytes" ] = (FRU_File_Id_bytes == "") ?  ("Undefined") : (FRU_File_Id_bytes);

	return jo;
}

std::string tIPMI_BIA::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}

json_object tIPMI_PIA::get_json_object() {
	json_object jo;
	jo["version"      ]  = (version);
	jo["length"      ]  = (length);
	jo["lang_code"      ]  = (lang_code);
	jo["manufacturer"      ]  = manufacturer.get_json_object();
	jo["manufacturer_bytes" ] = (manufacturer_bytes == "") ?  ("Undefined") : (manufacturer_bytes);
	jo["product"      ]  = product.get_json_object();
	jo["product_bytes" ] = (product_bytes == "") ?  ("Undefined") :  (product_bytes);
	jo["part_num"      ]  = part_num.get_json_object();
	jo["part_num_bytes" ] = (part_num_bytes == "") ?  ("Undefined") :  (part_num_bytes);
	jo["product_ver"      ]  = product_ver.get_json_object();
	jo["product_ver_bytes" ] = (product_ver_bytes == "") ?  ("Undefined") :   (product_ver_bytes);
    jo["serial_num"      ]  = serial_num.get_json_object();
	jo["serial_num_bytes" ] = (serial_num_bytes == "") ?  ("Undefined") :   (serial_num_bytes);
    jo["asset_tag"      ]  = asset_tag.get_json_object();
	jo["asset_tag_bytes" ] = (asset_tag_bytes == "") ?  ("Undefined") :   (asset_tag_bytes);
    jo["FRU_File_Id"      ]  = FRU_File_Id.get_json_object();
	jo["FRU_File_Id_bytes" ] = (FRU_File_Id_bytes == "") ?  ("Undefined") :   (FRU_File_Id_bytes);

	return jo;
}

std::string tIPMI_PIA::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}
json_object tIPMI_MRA::get_json_object() {
	json_object jo;
	jo["type_id"      ]  = (type_id);
	jo["version"      ]  = (version);
	jo["rec_length"      ]  = (rec_length);
	jo["rec_checksum"      ]  = (rec_checksum);

	return jo;
}

std::string tIPMI_MRA::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}

json_object tIPMI_OEM::get_json_object() {
	json_object jo;
	jo["manufacturer_id"      ]  = (manufacturer_id == NULL) ?  ("Undefined") :  (std::string((char *)manufacturer_id,3));

	return jo;
}

std::string tIPMI_OEM::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}
json_object tIPMI_IUA::get_json_object() {
	json_object jo;
	jo["version"]  = (version);

	return jo;
}

std::string tIPMI_IUA::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}
json_object tIPMI_DC_OUTPUT::get_json_object() {
	json_object jo;
	jo["standby"      ]  = (standby);
	jo["output_num"      ]  = (output_num);
	jo["nominal_voltage"      ]  = (nominal_voltage);
	jo["max_neg_volt_dev"      ]  = (max_neg_volt_dev);
	jo["typmax_pos_volt_dev_id"      ]  = (max_pos_volt_dev);
	jo["ripple_noise_pk2pk"      ]  = (ripple_noise_pk2pk);
	jo["min_current_draw"      ]  = (min_current_draw);
	jo["max_current_draw"      ]  = (max_current_draw);

	return jo;
}

std::string tIPMI_DC_OUTPUT::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}

json_object tIPMI_DC_LOAD::get_json_object() {
	json_object jo;
	jo["output_num"      ]  = (output_num);
	jo["nominal_voltage"      ]  = (nominal_voltage);
	jo["max_neg_volt_dev"      ]  = (max_neg_volt_dev);
	jo["max_pos_volt_dev"      ]  = (max_pos_volt_dev);
	jo["ripple_noise_pk2pk"      ]  = (ripple_noise_pk2pk);
	jo["min_current_draw"      ]  = (min_current_draw);
	jo["max_current_draw"      ]  = (max_current_draw);

	return jo;
}

std::string tIPMI_DC_LOAD::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}

json_object tIPMI_FRU_INFO::get_json_object() {
	json_object jo;
	jo["header"      ]  = header.get_json_object();
	if (iua) { jo["iua"      ]  =  iua->get_json_object();   } else {  jo["iua"      ]  =  (std::string("NULL"));}
	if (cia) { jo["cia"      ]  =  cia->get_json_object();   } else {  jo["cia"      ]  =  (std::string("NULL"));}
	if (bia) { jo["bia"      ]  =  bia->get_json_object();   } else {  jo["bia"      ]  =  (std::string("NULL"));}
	if (pia) { jo["pia"      ]  =  pia->get_json_object();   } else {  jo["pia"      ]  =  (std::string("NULL"));}

	return jo;
}

std::string tIPMI_FRU_INFO::get_json_string() {
	json_object jo = get_json_object();
    return jo.as_string();
}
